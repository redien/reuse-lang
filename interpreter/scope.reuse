
(typ (scope expression iterable) (Scope (array (value expression (scope expression iterable) iterable))))

(def scope-empty ()
     (Scope (array-empty)))

(def scope-add (variables scope)
     (match scope
            (Scope scope)
                (Scope (list-foldl (fn (variable scope)
                                       (match variable
                                              (Pair name value)
                                                  (array-set name value scope)))
                                   scope
                                   variables))))

(def scope-get (name scope)
     (match scope
            (Scope scope)
                (array-get name scope)))

(def scope-add-definitions (definitions scope)
     (match scope
            (Scope scope)
                (Scope (list-foldl (fn (definition scope)
                                       (match definition
                                              (FunctionDefinition identifier _ arguments expression __)
                                                  (array-set (symbol-id identifier) (ValueFunction arguments expression) scope)
                                              _
                                                  scope))
                                   scope
                                   definitions))))
