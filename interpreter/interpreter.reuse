
(def return (x) (Result x))
(def bind (xs f) (result-bind xs f))
(def let (x f) (f x))
(def flatmap (f xs) (result-flatmap f xs))
(def sequence (xs) (result-concat xs))
(def map (f xs) (result-map f xs))

(def identifier-main () -2000)
(def identifier-Empty () -2001)
(def identifier-Cons () -2002)

(def eval-error ()
     (Error (data-error-generic)))

(def pattern-matches-value (value pattern)
     (match (Pair value pattern)
            (Pair (ValueInteger a) (IntegerPattern b _2))
                (= a b)
            (Pair (ValueConstructor token name values) (ConstructorPattern pattern-symbol patterns _2))
                (and (= token (identifier-token pattern-symbol))
                     (list-every? (pair-map pattern-matches-value) (list-zip values patterns)))
            (Pair _1 (Capture _2))
                True
            _
                False))

(def case-capture (pair)
     (match pair
            (Pair value (IntegerPattern _1 _2))
                Empty
            (Pair (ValueConstructor _1 _2 values) (ConstructorPattern _3 patterns _4))
                (list-flatmap case-capture (list-zip values patterns))
            (Pair value (Capture identifier))
                (list (Pair (identifier-token identifier) value))
            _
                Empty))

(def render-stack-trace (stack-trace)
     (string-join (string-of-char 10)
                  (list-map (pipe (string-concat (data-space))
                                  (string-concat (data-space))
                                  (string-concat (data-space))
                                  (string-concat (data-space)))
                            stack-trace)))

(def add-stack-trace (expression values stack-trace)
     (maybe-or-else stack-trace
     (maybe-map (fn (expression)
                    (Cons (string-concat (string-append 32 (stringify-sexps (list-from (expression-to-sexp expression))))
                                         (string-join (data-space) (list-map value-to-string values)))
                          stack-trace))
                expression)))

(def pattern-match (eval-expression scope stack-trace value cases)
     (match (list-find-first (fn (case) (pattern-matches-value value (pair-left case))) cases)
            (Some (Pair pattern branch))
                (eval-expression (scope-add (case-capture (Pair value pattern)) scope) stack-trace branch)
            None
                (Error (string-join (string-empty)
                                    (list (data-error-unmatched-case)
                                          (string-of-char 10)
                                          (data-space) (data-space) (data-space) (data-space)
                                          (value-to-string value)
                                          (string-of-char 10)
                                          (data-error-unmatched-case2)
                                          (string-of-char 10)
                                          (data-space) (data-space) (data-space) (data-space)
                                          (string-join (data-space)
                                                       (list-map (pipe pair-left
                                                                       pattern-to-sexp
                                                                       list-from
                                                                       stringify-sexps)
                                                                 cases))
                                          (string-of-char 10)
                                          (data-error-stack-trace)
                                          (string-of-char 10)
                                          (render-stack-trace stack-trace))))))

(def eval-int32-operator (operator scope stack-trace arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) Empty))
                (return (ValueInteger (operator a b)))
            _
                (Error (data-error-int32-op))))

(def eval-int32-less-than (scope stack-trace arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) (Cons first (Cons second Empty))))
                (match (< a b)
                       True   (return first)
                       False  (return second))
            _
                (Error (data-error-int32-op))))

(def eval-slice-empty (scope stack-trace arguments)
     (return (ValueSlice (slice-empty))))

(def eval-slice-of (scope stack-trace arguments)
     (match arguments
            (Cons (ValueInteger a) Empty)
                (return (ValueSlice (slice-of a)))
            _
                (Error (data-error-slice-op))))

(def eval-slice-size (scope stack-trace arguments)
     (match arguments
            (Cons (ValueSlice slice) Empty)
                (return (ValueInteger (slice-size slice)))
            _
                (Error (data-error-slice-op))))

(def eval-slice-get (scope stack-trace arguments)
     (match arguments
            (Cons (ValueSlice slice) (Cons (ValueInteger index) Empty))
                (return (ValueInteger (slice-get slice index)))
            _
                (Error (data-error-slice-op))))

(def eval-slice-concat (scope stack-trace arguments)
     (match arguments
            (Cons (ValueSlice a) (Cons (ValueSlice b) Empty))
                (return (ValueSlice (slice-concat a b)))
            _
                (Error (data-error-slice-op))))

(def eval-slice-foldl (apply-function scope stack-trace arguments)
     (match arguments
            (Cons f (Cons ys (Cons (ValueSlice slice) Empty)))
                (slice-foldl (fn (y ys)
                                 (bind ys (fn (ys-value)
                                 (apply-function scope stack-trace None (list f (ValueInteger y) ys-value)))))
                             (return ys)
                             slice)
            _
                (Error (data-error-slice-op))))

(def eval-function-application (eval-expression stack-trace arguments values scope expression)
     (match (< (list-size values) (list-size arguments))
            True
                (return (ValueClosure (list-skip (list-size values) arguments)
                                      expression
                                      (scope-add (list-zip (list-map identifier-token arguments) values) scope)))
            False
                (eval-expression (scope-add (list-zip (list-map identifier-token arguments) values) scope)
                                 stack-trace
                                 expression)))

(def apply-function (eval-expression scope stack-trace expression values)
    (match values
           (Cons (ValueClosure arguments body closed-scope) parameters)
               (eval-function-application eval-expression
                                          (add-stack-trace expression parameters stack-trace)
                                          arguments
                                          parameters
                                          closed-scope
                                          body)
           (Cons (ValueFunction arguments body) parameters)
               (eval-function-application eval-expression
                                          (add-stack-trace expression parameters stack-trace)
                                          arguments
                                          parameters
                                          scope
                                          body)
           (Cons (ValueIntrinsic evaluator) parameters)
               (evaluator scope stack-trace (list-rest values))
           _
               (eval-error)))

(def eval-expression (scope stack-trace expression)
     (match expression
            (IntegerConstant value _)
                (return (ValueInteger value))
            (Variable identifier)
                (match (scope-get (identifier-token identifier) scope)
                       (Some value)
                            (return value)
                       None
                            (Error (string-join (string-empty)
                                                (list (data-error-no-symbol)
                                                      (data-space)
                                                      (identifier-name identifier)
                                                      (string-of-char 10)
                                                      (data-error-stack-trace)
                                                      (string-of-char 10)
                                                      (render-stack-trace stack-trace)))))
            (Constructor identifier arguments _)
                (bind (sequence (list-map (eval-expression scope stack-trace) arguments)) (fn (values)
                (return (ValueConstructor (identifier-token identifier) (identifier-name identifier) values))))
            (Lambda arguments expression _)
                (return (ValueClosure arguments expression scope))
            (FunctionApplication expressions _)
                (bind (sequence (list-map (eval-expression scope stack-trace) expressions))
                (apply-function eval-expression scope stack-trace (list-first expressions)))
            (Match expression cases _)
                (bind (eval-expression scope stack-trace expression) (fn (expression)
                (pattern-match eval-expression scope stack-trace expression cases)))))

(def eval-pipe' (functions scope stack-trace parameters)
     (match functions
            Empty
                (match (list-first parameters)
                       None          (eval-error)
                       (Some value)  (return value))
            (Cons function rest)
                (bind (apply-function eval-expression scope stack-trace None (Cons function parameters)) (fn (value)
                (eval-pipe' rest scope stack-trace (list value))))))

(def eval-pipe (scope stack-trace functions)
     (return (ValueIntrinsic (eval-pipe' functions))))

(def eval-list' (values)
     (match values
            Empty
                (ValueConstructor (identifier-Empty) (data-Empty) Empty)
            (Cons value rest)
                (ValueConstructor (identifier-Cons) (data-Cons) (list value (eval-list' rest)))))

(def eval-list (scope stack-trace values)
     (return (eval-list' values)))

(def eval (scope values)
     (match (scope-get (identifier-main) scope)
            (Some (ValueFunction arguments expression))
                (eval-expression (scope-add (list-zip (list-map identifier-token arguments) values) scope)
                                 Empty
                                 expression)
            _
                (eval-error)))

(def add-intrinsics (scope)
     (scope-add (list (Pair (identifier-+)                (ValueIntrinsic (eval-int32-operator +)))
                      (Pair (identifier--)                (ValueIntrinsic (eval-int32-operator -)))
                      (Pair (identifier-*)                (ValueIntrinsic (eval-int32-operator *)))
                      (Pair (identifier-/)                (ValueIntrinsic (eval-int32-operator /)))
                      (Pair (identifier-%)                (ValueIntrinsic (eval-int32-operator %)))
                      (Pair (identifier-&)                (ValueIntrinsic (eval-int32-operator &)))
                      (Pair (identifier-int32-less-than)  (ValueIntrinsic eval-int32-less-than))
                      (Pair (identifier-slice-empty)      (ValueIntrinsic eval-slice-empty))
                      (Pair (identifier-slice-of)         (ValueIntrinsic eval-slice-of))
                      (Pair (identifier-slice-size)       (ValueIntrinsic eval-slice-size))
                      (Pair (identifier-slice-get)        (ValueIntrinsic eval-slice-get))
                      (Pair (identifier-slice-concat)     (ValueIntrinsic eval-slice-concat))
                      (Pair (identifier-slice-foldl)      (ValueIntrinsic (eval-slice-foldl (apply-function eval-expression))))
                      (Pair (identifier-pipe)             (ValueIntrinsic eval-pipe))
                      (Pair (identifier-list)             (ValueIntrinsic eval-list)))
                scope))

(def definitions-to-scope (definitions)
     (scope-add-definitions definitions (add-intrinsics (scope-empty))))

(def main-takes-argument (scope)
     (match (scope-get (identifier-main) scope)
            (Some (ValueFunction (Cons _ __) ___))
                True
            _
                False))

(def add-identifiers (identifiers offset dictionary)
     (match identifiers
            (Cons identifier rest)
                (add-identifiers rest (- offset 1) (dictionary-set (identifier) (Pair offset (identifier)) dictionary))
            Empty
                dictionary))

(def internal-symbols ()
     (add-identifiers (list data-main data-Empty data-Cons) -2000 (default-identifiers)))
