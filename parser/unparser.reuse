
(def identifier-to-symbol (identifier)
     (match identifier
            (Identifier _ __ token name ___ range)
                (Symbol token name range)))

(def type-to-sexp (types-to-sexp type)
     (match type
            (SimpleType identifier)
                (identifier-to-symbol identifier)
            (FunctionType arg-types return-type range)
                (List
                    (list
                        (Symbol (symbol-fn) (data-fn) range)
                        (List (types-to-sexp arg-types) range)
                        (type-to-sexp types-to-sexp return-type))
                    range)
            (ComplexType identifier types range)
                (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))

(def types-to-sexp (types)
     (list-map (type-to-sexp types-to-sexp) types))

(def constructor-to-sexp (constructor)
     (match constructor
            (SimpleConstructor identifier)
                (identifier-to-symbol identifier)
            (ComplexConstructor identifier types range)
                (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))

(def constructors-to-sexp (constructors)
     (list-map constructor-to-sexp constructors))

(def type-parameter-to-sexp (parameter)
     (match parameter
            (ExistentialParameter identifier)
                (List
                    (list
                        (Symbol (symbol-exists) (data-exists) (identifier-range identifier))
                        (identifier-to-symbol identifier))
                    (identifier-range identifier))
            (UniversalParameter identifier)
                (identifier-to-symbol identifier)))

(def type-name-to-sexp (id range name parameters)
     (match parameters
            Empty
                (Symbol id name range)
            _
                (List
                    (Cons (Symbol id name range) (list-map type-parameter-to-sexp parameters))
                    range)))

(def function-arguments-to-sexp (arguments range)
     (List (list-map identifier-to-symbol arguments) range))

(pub def pattern-to-sexp (pattern)
     (match pattern
            (ConstructorPattern identifier Empty _)
                (identifier-to-symbol identifier)
            (ConstructorPattern identifier patterns range)
                (List
                    (Cons (identifier-to-symbol identifier) (list-map pattern-to-sexp patterns))
                    range)
            (IntegerPattern value range)
                (Integer value range)
            (Capture identifier)
                (identifier-to-symbol identifier)))

(def match-pair-to-sexp (expression-to-sexp pair)
     (match pair
            (Pair pattern expression)
                (list (pattern-to-sexp pattern) (expression-to-sexp expression))))

(pub def expression-to-sexp (expression)
     (match expression
            (IntegerConstant integer range)
                (Integer integer range)
            (Variable (Identifier _ __ token string ___ range))
                (Symbol token string range)
            (Lambda arguments expression range)
                (List
                    (list
                        (Symbol (symbol-fn) (data-fn) range)
                        (function-arguments-to-sexp arguments range)
                        (expression-to-sexp expression))
                    range)
            (Match expression pairs range)
                (List
                    (Cons
                        (Symbol (symbol-match) (data-match) range)
                        (Cons
                            (expression-to-sexp expression)
                            (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs)))
                    range)
            (Constructor identifier expressions range)
                (match expressions
                       Empty
                           (identifier-to-symbol identifier)
                       _
                           (List
                               (Cons
                                   (identifier-to-symbol identifier)
                                   (list-map expression-to-sexp expressions))
                               range))
            (FunctionApplication expressions range)
                (List (list-map expression-to-sexp expressions) range)
            (ListExpression expressions range)
                (List
                    (Cons
                        (Symbol (identifier-list) (data-list) range)
                        (list-map expression-to-sexp expressions))
                    range)
            (Pipe expressions range)
                (List
                    (Cons
                        (Symbol (identifier-pipe) (data-pipe) range)
                        (list-map expression-to-sexp expressions))
                    range)
            (Compose expressions range)
                (List
                    (Cons
                        (Symbol (identifier-dot) (data-dot) range)
                        (list-map expression-to-sexp expressions))
                    range)))

(def type-definition-to-sexp (id name parameters constructors range)
     (list-concat
         (list
             (Symbol (symbol-typ) (data-typ) range)
             (type-name-to-sexp id range name parameters))
         (constructors-to-sexp constructors)))

(def function-definition-to-sexp (name arguments expression range)
     (list
         (Symbol (symbol-def) (data-def) range)
         (identifier-to-symbol name)
         (function-arguments-to-sexp arguments range)
         (expression-to-sexp expression)))

(def definition-to-sexp' (public? range sexp)
     (List
         (match public?
                True
                    (Cons (Symbol (symbol-pub) (data-pub) range) sexp)
                False
                    sexp)
         range))

(pub def definition-to-sexp (definition)
     (match definition
            (TypeDefinition (Identifier _ __ token name ___ ____) public? parameters constructors range)
                (definition-to-sexp'
                    public?
                    range
                    (type-definition-to-sexp token name parameters constructors range))
            (FunctionDefinition name public? arguments expression range)
                (definition-to-sexp'
                    public?
                    range
                    (function-definition-to-sexp name arguments expression range))
            (TargetDefinition _ data)
                (Symbol 0 (string-from-slice data) (Range 0 0))))

(pub def definitions-to-sexps (definitions)
     (list-map definition-to-sexp definitions))
