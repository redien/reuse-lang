
(typ parser-scope (ParserScope (array int32) parser-scope)
                  (ParserScopeRoot (array int32)))

(def parser-scope-empty ()
     (ParserScopeRoot (array-empty)))

(def parser-scope-new (parent)
     (ParserScope (array-empty) parent))

(def parser-scope-set' (symbol-id symbol-table-id scope)
     (match scope
            (ParserScope symbols parent)
                (ParserScope (array-set symbol-id symbol-table-id symbols) parent)
            (ParserScopeRoot symbols)
                (ParserScopeRoot (array-set symbol-id symbol-table-id symbols))))

(def parser-scope-set (sym scope)
     (maybe-or-else scope
     (maybe-map (fn (symbol-table-id)
                    (parser-scope-set' (symbol-id sym) symbol-table-id scope))
          (symbol-id' sym))))

(def parser-scope-set-all (syms scope)
     (list-foldl parser-scope-set scope syms))

(def parser-scope-resolve (sym scope)
     (match scope
            (ParserScope symbols parent)
                (match (array-get (symbol-id sym) symbols)
                       None    (parser-scope-resolve sym parent)
                       id      (symbol-with-id' id sym))
            (ParserScopeRoot symbols)
                (symbol-with-id' (array-get (symbol-id sym) symbols) sym)))

(def parser-scope-set-list (symbols scope)
     (list-foldl (pair-map parser-scope-set') scope symbols))
