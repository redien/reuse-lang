
(typ (parser-context definition)
     (ParserContext source-reference
                    (pair int32 (dictionary (pair int32 string)))
                    parser-scope
                    symbol-table
                    (array definition)))

(def parser-context-add-constructors (definition array)
     (match definition
            (TypeDefinition _ __ ___ constructors ____)
                (list-foldl (fn (constructor array)
                                (array-set (constructor-id constructor) definition array))
                            array
                            constructors)
            _
                array))

(def parser-context-add (definition context)
     (match context
            (ParserContext source-reference symbols scope symbol-table constructors)
                (ParserContext source-reference symbols scope symbol-table (parser-context-add-constructors definition constructors))))

(def parser-context-constructor? (id context)
     (match context
            (ParserContext _ __ ___ ____ constructors)
                (match (array-get id constructors)
                       (Some _)  True
                       None      False)))

(def parser-context-new-scope (context)
     (match context
            (ParserContext source-reference symbols parent symbol-table constructors)
                (ParserContext source-reference symbols (parser-scope-new parent) symbol-table constructors)))

(def parser-context-new-module (context)
     (match context
            (ParserContext source-reference symbols scope symbol-table constructors)
                (ParserContext source-reference symbols scope symbol-table constructors)))

(def parser-context-resolve (sym context)
     (match context
            (ParserContext _ __ scope ___ ____)
                (parser-scope-resolve sym scope)))

(def parser-context-bind-symbol (sym context)
     (match context
            (ParserContext source-reference symbols scope symbol-table constructors)
                (ParserContext source-reference
                               symbols
                               (parser-scope-set sym (symbol-table-id symbol-table) scope)
                               (symbol-table-bind (symbol-name sym) symbol-table)
                               constructors)))

(def parser-context-symbols (context)
     (match context
            (ParserContext _ symbols __ ___ ____)
                symbols))

(def parser-context-with-symbols (symbols context)
     (match context
            (ParserContext source-reference _ scope symbol-table constructors)
                (ParserContext source-reference symbols scope symbol-table constructors)))

(def parser-context-symbol-id (context)
     (match context
            (ParserContext _ __ ___ symbol-table ____)
                (symbol-table-id symbol-table)))

(def parser-context-source-reference (context)
     (match context
            (ParserContext source-reference _ __ ___ ____)
                source-reference))

(def parser-context-with-source-reference (source-reference context)
     (match context
            (ParserContext _ symbols scope symbol-table constructors)
                (ParserContext source-reference symbols scope symbol-table constructors)))


(def parser-run (symbols parser)
     (match (state-run (ParserContext (SourceReference (string-empty) ModuleSelf)
                                      (Pair (default-symbol-count) symbols)
                                      (default-scope)
                                      (default-symbol-table)
                                      (array-empty))
                       parser)
            (Pair _ result)  result))

(def parser-return (value)
     (state-return (result-return value)))

(def parser-error (error)
     (state-return (result-error error)))

(def parser-bind (parser f)
     (state-bind parser (fn (result)
     (result-prod state-return
     (result-bind result (fn (value)
     (result-return (f value))))))))

(def parser-constructor? (name)
     (state-bind (state-get) (fn (context)
     (parser-return (parser-context-constructor? name context)))))

(def parser-add-definition! (definition)
     (state-bind (state-modify (parser-context-add definition)) (fn (_)
     (parser-return definition))))

(def parser-get-symbols ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-symbols state)))))

(def parser-set-symbols! (symbols)
     (state-bind (state-modify (parser-context-with-symbols symbols)) (fn (_)
     (parser-return symbols))))

(def parser-new-scope! ()
     (state-bind (state-modify parser-context-new-scope) (fn (state)
     (parser-return state))))

(def parser-new-module! ()
     (state-bind (state-modify parser-context-new-module) (fn (state)
     (parser-return state))))

(def parser-bind-symbol! (sym)
     (state-bind (state-modify (parser-context-bind-symbol sym)) (fn (state)
     (parser-return (symbol-with-id' (Some (- 1 (parser-context-symbol-id state))) sym)))))

(def parser-resolve-symbol (sym)
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-resolve sym state)))))

(def parser-get-source-reference ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-source-reference state)))))

(def parser-set-source-reference! (source-reference)
     (state-bind (state-modify (parser-context-with-source-reference source-reference)) (fn (_)
     (parser-return source-reference))))

(def parser-sequence (list)
     (list-foldr (fn (a b)
                     (parser-bind a (fn (a')
                     (parser-bind b (fn (b')
                     (parser-return (Cons a' b')))))))
                 (parser-return Empty)
                 list))
