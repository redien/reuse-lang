
(typ (parser-context definition)
     (ParserContext source-reference
                    (pair int32 (dictionary (pair int32 string)))
                    parser-scope
                    parser-scope
                    symbol-table
                    (array definition)))

(def parser-context-add-constructors (definition array)
     (match definition
            (TypeDefinition _ __ ___ constructors ____)
                (list-foldl
                    (fn (constructor array)
                        (array-set
                            (identifier-token (constructor-identifier constructor))
                            definition
                            array))
                    array
                    constructors)
            _
                array))

(def prefix-module-symbol (module identifier)
     (match module
            (ModulePath name open?)
                (match open?
                       True
                           identifier
                       False
                           (identifier-with-name
                               (string-join (data-:) (list name (identifier-name identifier)))
                               identifier))
            ModuleSelf
                identifier))

(def prefix-module-symbols (module syms)
     (list-map (prefix-module-symbol module) syms))

(def parser-context-add-definition (definition context)
     (match context
            (ParserContext source-reference symbols module-scope global-scope symbol-table constructors)
                (let-bind (identifiers-from-definition definition) (fn (definition-symbols)
                (let-bind (source-reference-module source-reference) (fn (module)
                (ParserContext
                    source-reference
                    symbols
                    (parser-scope-set-all definition-symbols module-scope)
                    (match (definition-public? definition)
                           True
                               (parser-scope-set-all
                                   (prefix-module-symbols module definition-symbols)
                                   global-scope)
                           False
                               global-scope)
                    symbol-table
                    (parser-context-add-constructors definition constructors))))))))

(def parser-context-token-is-constructor? (token context)
     (match context
            (ParserContext _ __ ___ ____ _____ constructors)
                (match (array-get token constructors)
                       (Some _)
                           True
                       None
                           False)))

(def parser-context-new-module (context)
     (match context
            (ParserContext source-reference symbols _ global-scope symbol-table constructors)
                (ParserContext
                    source-reference
                    symbols
                    (parser-scope-new global-scope)
                    global-scope
                    symbol-table
                    constructors)))

(def parser-context-module-scope (context)
     (match context
            (ParserContext _ __ module-scope ___ ____ _____)
                module-scope))

(def parser-context-bind-symbol (identifier context)
     (match context
            (ParserContext source-reference symbols module-scope global-scope symbol-table constructors)
                (ParserContext
                    source-reference
                    symbols
                    module-scope
                    global-scope
                    (symbol-table-bind (identifier-name identifier) symbol-table)
                    constructors)))

(def parser-context-symbols (context)
     (match context
            (ParserContext _ symbols __ ___ ____ _____)
                symbols))

(def parser-context-with-symbols (symbols context)
     (match context
            (ParserContext source-reference _ module-scope global-scope symbol-table constructors)
                (ParserContext
                    source-reference
                    symbols
                    module-scope
                    global-scope
                    symbol-table
                    constructors)))

(def parser-context-symbol-id (context)
     (match context
            (ParserContext _ __ ___ ____ symbol-table _____)
                (symbol-table-id symbol-table)))

(def parser-context-source-reference (context)
     (match context
            (ParserContext source-reference _ __ ___ ____ _____)
                source-reference))

(def parser-context-with-source-reference (source-reference context)
     (match context
            (ParserContext _ symbols module-scope global-scope symbol-table constructors)
                (ParserContext
                    source-reference
                    symbols
                    module-scope
                    global-scope
                    symbol-table
                    constructors)))

(def default-scope (symbols)
     (parser-scope-set-list
         (list-map (. (fn (x)
             (Pair x x)) pair-left) symbols)
         (parser-scope-empty)))

(def max-symbol-id (symbols)
     (list-foldl (fn (x xs)
         (max xs (pair-left x))) 0 symbols))

(def parser-run (symbols parser)
     (match (state-run
         (ParserContext
             (SourceReference -1 (string-empty) ModuleSelf)
             (Pair
                 (+ (max-symbol-id symbols) 1)
                 (dictionary-of (list-map (fn (x)
                     (Pair (pair-right x) x)) symbols)))
             (default-scope symbols)
             (default-scope symbols)
             (symbol-table-bind-list (list-map pair-right symbols) (symbol-table-empty))
             (array-empty))
         parser)
            (Pair _ result)
                result))

(def parser-return (value)
     (state-return (result-return value)))

(def parser-error (error)
     (state-return (result-error error)))

(def parser-bind (parser f)
     (state-bind parser (fn (result)
     (result-prod
         state-return
         (result-bind result (fn (value)
         (result-return (f value))))))))

(def parser-token-is-constructor? (token)
     (state-bind (state-get) (fn (context)
     (parser-return (parser-context-token-is-constructor? token context)))))

(def parser-add-definition! (definition)
     (state-bind (state-modify (parser-context-add-definition definition)) (fn (_)
     (parser-return definition))))

(def parser-get-symbols ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-symbols state)))))

(def parser-set-symbols! (symbols)
     (state-bind (state-modify (parser-context-with-symbols symbols)) (fn (_)
     (parser-return symbols))))

(def parser-get-module-scope ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-module-scope state)))))

(def parser-new-module! ()
     (state-bind (state-modify parser-context-new-module) (fn (state)
     (parser-return state))))

(def parser-bind-symbol! (identifier)
     (state-bind (state-modify (parser-context-bind-symbol identifier)) (fn (state)
     (parser-return (identifier-with-id (Some (- (parser-context-symbol-id state) 1)) identifier)))))

(def parser-get-source-reference ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-source-reference state)))))

(def parser-set-source-reference! (source-reference)
     (state-bind (state-modify (parser-context-with-source-reference source-reference)) (fn (_)
     (parser-return source-reference))))

(def parser-sequence (list)
     (list-foldr
         (fn (a b)
             (parser-bind a (fn (a')
             (parser-bind b (fn (b')
             (parser-return (Cons a' b')))))))
         (parser-return Empty)
         list))

(def parser-bind-symbols! (syms)
     (parser-sequence (list-map parser-bind-symbol! syms)))
