
(typ (parser-context definition)
     (ParserContext module-reference
                    (pair int32 (dictionary (pair int32 string)))
                    (array definition)))

(def parser-context-add-constructors (definition array)
     (match definition
            (TypeDefinition _ __ constructors ___)
                (list-foldl (fn (constructor array)
                                (array-set (constructor-id constructor) definition array))
                            array
                            constructors)
            _
                array))

(def parser-context-add (definition context)
     (match context
            (ParserContext module symbols constructors)
                (ParserContext module symbols (parser-context-add-constructors definition constructors))))

(def parser-context-constructor? (id context)
     (match context
            (ParserContext _ __ constructors)
                (match (array-get id constructors)
                       (Some _)  True
                       None      False)))

(def parser-context-symbols (context)
     (match context
            (ParserContext _ symbols __)
                symbols))

(def parser-context-with-symbols (symbols context)
     (match context
            (ParserContext module _ constructors)
                (ParserContext module symbols constructors)))

(def parser-context-module (context)
     (match context
            (ParserContext module _ __)
                module))

(def parser-context-with-module (module context)
     (match context
            (ParserContext _ symbols constructors)
                (ParserContext module symbols constructors)))


(def parser-run (symbols parser)
     (match (state-run (ParserContext ModuleSelf (Pair 0 symbols) (array-empty)) parser)
            (Pair _ result)  result))

(def parser-return (value)
     (state-return (result-return value)))

(def parser-error (error)
     (state-return (result-error error)))

(def parser-bind (parser f)
     (state-bind parser (fn (result)
     (result-prod state-return
     (result-bind result (fn (value)
     (result-return (f value))))))))

(def parser-constructor? (name)
     (state-bind (state-get) (fn (context)
     (parser-return (parser-context-constructor? name context)))))

(def parser-add-definition! (definition)
     (state-bind (state-modify (parser-context-add definition)) (fn (_)
     (parser-return definition))))

(def parser-get-symbols ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-symbols state)))))

(def parser-set-symbols! (symbols)
     (state-bind (state-modify (parser-context-with-symbols symbols)) (fn (_)
     (parser-return symbols))))

(def parser-get-module ()
     (state-bind (state-get) (fn (state)
     (parser-return (parser-context-module state)))))

(def parser-set-module! (module)
     (state-bind (state-modify (parser-context-with-module module)) (fn (_)
     (parser-return module))))

(def parser-sequence (list)
     (list-foldr (fn (a b)
                     (parser-bind a (fn (a')
                     (parser-bind b (fn (b')
                     (parser-return (Cons a' b')))))))
                 (parser-return Empty)
                 list))
