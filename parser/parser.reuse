
(def sym-def ()   -1)
(def sym-typ ()   -2)
(def sym-fn ()    -3)
(def sym-match () -4)
(def sym-pub ()   -5)

(def keywords ()
     (dictionary-of (list
          (Pair (data-def)   (Pair (sym-def) (data-def)))
          (Pair (data-typ)   (Pair (sym-typ) (data-typ)))
          (Pair (data-fn)    (Pair (sym-fn) (data-fn)))
          (Pair (data-match) (Pair (sym-match) (data-match)))
          (Pair (data-pub)   (Pair (sym-pub) (data-pub))))))

(typ error  (MalformedDefinitionError range)
            (MalformedTypeDefinitionError range)
            (MalformedFunctionDefinitionError range)
            (MalformedFunctionNameError range)
            (MalformedExpressionError range)
            (MalformedMatchExpressionError range)
            (MalformedSymbolError range)
            (MalformedConstructorError range)
            (MalformedTypeError range)
            MalformedSexpTooFewClosingBrackets
            MalformedSexpTooManyClosingBrackets)

(def symbol-to-sym (symbol)
     (match symbol
            (Symbol id name range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-return (Sym id name source-reference range))))
            (Integer _ range)
                (parser-error  (MalformedSymbolError range))
            (List _ range)
                (parser-error  (MalformedSymbolError range))))

(def sexp-to-complex-type (sexp-to-type sym parameters range)
     (parser-bind   (parser-sequence (list-map sexp-to-type parameters))  (fn (sub-types)
     (parser-return (ComplexType sym sub-types range)))))

(def sexp-to-function-type (sexp-to-type parameters range)
     (match parameters
            (Cons (List arg-types _) (Cons return-type Empty))
                (parser-bind   (parser-sequence (list-map sexp-to-type arg-types))   (fn (arg-types)
                (parser-bind   (sexp-to-type return-type)                            (fn (return-type)
                (parser-return (FunctionType arg-types return-type range))))))
            _
                (parser-error (MalformedTypeError range))))

(def sexp-to-type (type)
     (match type
            (List (Cons symbol parameters) range)
                (parser-bind   (symbol-to-sym symbol)  (fn (sym)
                (match (= (symbol-id sym) (sym-fn))
                        True   (sexp-to-function-type sexp-to-type parameters range)
                        False  (sexp-to-complex-type sexp-to-type sym parameters range))))
            (Integer _ range)
                (parser-error (MalformedTypeError range))
            (List _ range)
                (parser-error (MalformedTypeError range))
            symbol
                (parser-bind (symbol-to-sym symbol) (fn (sym)
                (parser-return (SimpleType sym))))))

(def sexp-to-constructor-definition (constructor)
     (match constructor
            (List (Cons name types) range)
                (parser-bind   (symbol-to-sym name) (fn (sym)
                (parser-bind   (parser-sequence (list-map sexp-to-type types)) (fn (types)
                (parser-return (ComplexConstructor sym types range))))))
            (Integer _ range)
                (parser-error (MalformedConstructorError range))
            (List _ range)
                (parser-error (MalformedConstructorError range))
            symbol
                (parser-bind (symbol-to-sym symbol) (fn (sym)
                (parser-return (SimpleConstructor sym))))))

(def sexp-to-type-parameter (sexp)
     (match sexp
            (List (Cons _ (Cons name Empty)) ___)
                (parser-bind   (symbol-to-sym name) (fn (sym)
                (parser-return (ExistentialParameter sym))))
            (Integer _ range)
                (parser-error (MalformedDefinitionError range))
            (List _ range)
                (parser-error (MalformedDefinitionError range))
            symbol
                (parser-bind   (symbol-to-sym symbol) (fn (sym)
                (parser-return (UniversalParameter sym))))))

(def sexp-to-type-definition (type-name constructors range)
     (match type-name
            (List (Cons name parameters) _)
                (parser-bind   (symbol-to-sym name)                                            (fn (sym)
                (parser-bind   (parser-sequence (list-map sexp-to-type-parameter parameters))  (fn (parameters)
                (parser-return (TypeDefinition sym parameters constructors range))))))
            (Integer _ range)
                (parser-error (MalformedTypeError range))
            (List _ range)
                (parser-error (MalformedTypeError range))
            symbol
                (parser-bind   (symbol-to-sym symbol)                                          (fn (sym)
                (parser-return (TypeDefinition sym Empty constructors range))))))

(def sexp-to-lambda (sexp-to-expression rest range)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                (parser-bind   (parser-sequence (list-map symbol-to-sym arguments))  (fn (arguments)
                (parser-bind   (sexp-to-expression expression)                       (fn (expression)
                (parser-return (Lambda arguments expression range))))))
            _
                (parser-error (MalformedFunctionDefinitionError range))))

(def sexp-to-function-application (sexp-to-expression range expressions)
     (parser-bind (parser-sequence (list-map sexp-to-expression expressions)) (fn (expressions)
     (parser-return (FunctionApplication expressions range)))))

(def to-constructor-or-capture (symbol)
     (parser-bind (symbol-to-sym symbol)                 (fn (sym)
     (parser-bind (parser-constructor? (symbol-id sym))  (fn (constructor?)
     (parser-return (match constructor?
                           True  (ConstructorPattern sym Empty (symbol-range sym))
                           False (Capture sym))))))))

(def sexp-to-pattern (sexp)
     (match sexp
            (List (Cons name rest) range)
                (parser-bind   (parser-sequence (list-map sexp-to-pattern rest)) (fn (patterns)
                (parser-bind   (symbol-to-sym name)                              (fn (sym)
                (parser-return (ConstructorPattern sym patterns range))))))
            (List Empty range)
                (parser-error (MalformedExpressionError range))
            (Integer integer range)
                (parser-return (IntegerPattern integer range))
            symbol
                (to-constructor-or-capture symbol)))

(def sexp-to-match-pair (sexp-to-expression range pair)
     (match pair
            (Cons pattern (Cons expression Empty))
                (parser-bind   (sexp-to-pattern pattern)        (fn (pattern)
                (parser-bind   (sexp-to-expression expression)  (fn (expression)
                (parser-return (Pair pattern expression))))))
            _
                (parser-error (MalformedMatchExpressionError range))))

(def sexp-to-match-pairs (sexp-to-expression range xs)
     (match (list-partition 2 xs)
            Empty  (parser-error (MalformedMatchExpressionError range))
            pairs  (parser-sequence (list-map (sexp-to-match-pair sexp-to-expression range) pairs))))

(def sexp-to-match (sexp-to-expression range rest)
     (match rest
            (Cons expression rest)
                (parser-bind   (sexp-to-expression expression)                      (fn (expression)
                (parser-bind   (sexp-to-match-pairs sexp-to-expression range rest)  (fn (pairs)
                (parser-return (Match expression pairs range))))))
            _
                (parser-error (MalformedExpressionError range))))

(def sexp-to-constructor (sexp-to-expression range id name rest)
     (parser-bind   (parser-get-source-reference)                        (fn (source-reference)
     (parser-bind   (parser-sequence (list-map sexp-to-expression rest)) (fn (expressions)
     (parser-return (Constructor (Sym id name source-reference range) expressions range)))))))

(def sexp-to-list-expression (sexp-to-expression expressions range)
     (match expressions
            (Cons (Symbol id symbol-name __) rest) 
                  (match (= id (sym-fn))
                         True   (sexp-to-lambda sexp-to-expression rest range)
                         False
                  (match (= id (sym-match))
                         True   (sexp-to-match sexp-to-expression range rest)
                         False
                  (parser-bind (parser-constructor? id) (fn (constructor?)
                  (match constructor?
                         True   (sexp-to-constructor sexp-to-expression range id symbol-name rest)
                         False  (sexp-to-function-application sexp-to-expression range expressions))))))
            _
                  (sexp-to-function-application sexp-to-expression range expressions)))

(def sexp-to-expression (sexp)
     (match sexp
            (Integer integer range)
                (parser-return (IntegerConstant integer range))
            (List expressions range)
                (match expressions
                       Empty  (parser-error (MalformedExpressionError range))
                       _      (sexp-to-list-expression sexp-to-expression expressions range))
            symbol
                (parser-bind (symbol-to-sym symbol)                (fn (sym)
                (parser-bind (parser-constructor? (symbol-id sym)) (fn (constructor?)
                (parser-return (match constructor?
                                      True   (Constructor sym Empty (symbol-range sym))
                                      False  (Variable sym)))))))))

(def sexp-to-function-definition (name-symbol public? rest range)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                  (parser-bind   (parser-sequence (list-map symbol-to-sym arguments))  (fn (arguments)
                  (parser-bind   (sexp-to-expression expression)                       (fn (expression)
                  (parser-bind   (symbol-to-sym name-symbol)                           (fn (sym)
                  (parser-return (FunctionDefinition sym public? arguments expression range))))))))
            _
                  (parser-error (MalformedFunctionDefinitionError range))))

(def sexp-to-definition' (name rest range kind)
     (match (= kind (sym-typ))
            True
                (parser-bind (parser-sequence (list-map sexp-to-constructor-definition rest))  (fn (constructors)
                (sexp-to-type-definition name constructors range)))
            False
     (match (= kind (sym-def))
            True   (sexp-to-function-definition name False rest range)
            False
     (match (= kind (sym-pub))
            True   (sexp-to-function-definition name True rest range)
            False  (parser-error (MalformedDefinitionError range))))))

(def specific-malformed-definition-error (kind range)
     (match (= kind (sym-typ))
            True   (parser-error (MalformedTypeDefinitionError range))
            False
     (match (= kind (sym-def))
            True   (parser-error (MalformedFunctionDefinitionError range))
            False  (parser-error (MalformedDefinitionError range)))))

(def sexp-to-definition (expression)
     (match expression
            (List (Cons (Symbol kind _ __) Empty) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _ __) (Cons ___ Empty)) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _ __) (Cons name rest)) range)
                (sexp-to-definition' name rest range kind)
            (List (Cons (List _ range) Empty) __)
                (parser-error (MalformedDefinitionError range))
            (List _ range)
                (parser-error (MalformedDefinitionError range))
            (Integer _ range)
                (parser-error (MalformedDefinitionError range))
            (Symbol _ __ range)
                (parser-error (MalformedDefinitionError range))))

(def parse-definition! (expression)
     (parser-bind (sexp-to-definition expression) (fn (definition)
     (parser-add-definition! definition))))

(def sexp-error-to-ast-error (error)
     (match error
            ParseErrorTooFewClosingBrackets   MalformedSexpTooFewClosingBrackets
            ParseErrorTooManyClosingBrackets  MalformedSexpTooManyClosingBrackets))

(def parse-definitions! (module file-path iterator)
     (parser-bind (parser-set-source-reference! (SourceReference file-path module)) (fn (_)
     (parser-bind (parser-get-symbols) (fn (symbols)
     (match (parse-sexps symbols iterator)
            (Result (Pair symbols expressions))
                (parser-bind (parser-set-symbols! symbols) (fn (_)
                (parser-sequence (list-map parse-definition! expressions))))
            (Error error)
                (parser-error (sexp-error-to-ast-error error))))))))





(def sym-to-symbol (sym)
     (match sym
            (Sym id name _ range)
                (Symbol id name range)))

(def type-to-sexp (types-to-sexp type)
     (match type
            (SimpleType sym)
                (sym-to-symbol sym)
            (FunctionType arg-types return-type range)
                (List (list (Symbol 0 (data-fn) range)
                            (List (types-to-sexp arg-types) range)
                            (type-to-sexp types-to-sexp return-type))
                      range)
            (ComplexType sym types range)
                (List (Cons (sym-to-symbol sym) (types-to-sexp types)) range)))

(def types-to-sexp (types)
     (list-map (type-to-sexp types-to-sexp) types))

(def constructor-to-sexp (constructor)
     (match constructor
            (SimpleConstructor sym)
                (sym-to-symbol sym)
            (ComplexConstructor sym types range)
                (List (Cons (sym-to-symbol sym) (types-to-sexp types)) range)))

(def constructors-to-sexp (constructors)
     (list-map constructor-to-sexp constructors))

(def type-parameter-to-sexp (parameter)
     (match parameter
            (ExistentialParameter sym)
                (List (list (Symbol 0 (data-exists) (symbol-range sym)) (sym-to-symbol sym)) (symbol-range sym))
            (UniversalParameter sym)
                (sym-to-symbol sym)))

(def type-name-to-sexp (id range name parameters)
     (match parameters
            Empty
                (Symbol id name range) 
            _
                (List (Cons (Symbol id name range)
                            (list-map type-parameter-to-sexp parameters))
                      range)))

(def type-definition-to-sexp (id name parameters constructors range)
     (List (list-concat (list (Symbol 0 (data-typ) range)
                              (type-name-to-sexp id range name parameters))
                        (constructors-to-sexp constructors))
           range))

(def function-arguments-to-sexp (arguments range)
     (List (list-map sym-to-symbol arguments) range))

(def pattern-to-sexp (pattern)
     (match pattern
            (ConstructorPattern sym Empty _)
                (sym-to-symbol sym)
            (ConstructorPattern sym patterns range)
                (List (Cons (sym-to-symbol sym) (list-map pattern-to-sexp patterns)) range)
            (IntegerPattern value range)
                (Integer value range)
            (Capture sym)
                (sym-to-symbol sym)))

(def match-pair-to-sexp (expression-to-sexp pair)
     (match pair
            (Pair pattern expression)
               (list (pattern-to-sexp pattern) (expression-to-sexp expression))))

(def expression-to-sexp (expression)
     (match expression
            (IntegerConstant integer range)
                (Integer integer range)
            (Variable (Sym id string _ range))
                (Symbol id string range)
            (Lambda arguments expression range)
                (List (list (Symbol 0 (data-fn) range)
                            (function-arguments-to-sexp arguments range)
                            (expression-to-sexp expression))
                      range)
            (Match expression pairs range)
                (List (Cons (Symbol 0 (data-match) range)
                      (Cons (expression-to-sexp expression)
                            (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range)
            (Constructor sym expressions range)
                (match expressions
                       Empty
                            (sym-to-symbol sym)
                       _
                            (List (Cons (sym-to-symbol sym) (list-map expression-to-sexp expressions)) range))
            (FunctionApplication expressions range)
                (List (list-map expression-to-sexp expressions) range)))

(def function-definition-to-sexp (name public? arguments expression range)
     (List (list (match public?
                        True   (Symbol (sym-pub) (data-pub) range)
                        False  (Symbol (sym-def) (data-def) range))
                 (sym-to-symbol name)
                 (function-arguments-to-sexp arguments range)
                 (expression-to-sexp expression))
           range))

(def definition-to-sexp (definition)
     (match definition
            (TypeDefinition (Sym id name _ __) parameters constructors range)
                (type-definition-to-sexp id name parameters constructors range)
            (FunctionDefinition name public? arguments expression range)
                (function-definition-to-sexp name public? arguments expression range)
            (TargetDefinition _ data)
                (Symbol 0 (string-from-indexed-iterator data) (Range 0 0))))

(def definitions-to-sexps (definitions)
     (list-map definition-to-sexp definitions))
