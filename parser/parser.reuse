
(def sym-def ()   -1)
(def sym-typ ()   -2)
(def sym-fn ()    -3)
(def sym-match () -4)

(def keywords ()
     (dictionary-of (list
          (Pair (data-def)   (Pair (sym-def) (data-def)))
          (Pair (data-typ)   (Pair (sym-typ) (data-typ)))
          (Pair (data-fn)    (Pair (sym-fn) (data-fn)))
          (Pair (data-match) (Pair (sym-match) (data-match))))))

(typ error  (MalformedDefinitionError range)
            (MalformedTypeDefinitionError range)
            (MalformedFunctionDefinitionError range)
            (MalformedFunctionNameError range)
            (MalformedExpressionError range)
            (MalformedMatchExpressionError range)
            (MalformedSymbolError range)
            (MalformedConstructorError range)
            (MalformedTypeError range)
            MalformedSexpTooFewClosingBrackets
            MalformedSexpTooManyClosingBrackets)

(def symbol-to-string (symbol)
     (match symbol
            (Symbol _ name __)
                (parser-return name)
            (Integer _ range)
                (parser-error  (MalformedSymbolError range))
            (List _ range)
                (parser-error  (MalformedSymbolError range))))

(def sexp-to-complex-type (sexp-to-types _ name parameters range)
     (parser-bind   (sexp-to-types parameters)  (fn (sub-types)
     (parser-return (ComplexType name sub-types range)))))

(def sexp-to-function-type (sexp-to-types sexp-to-type name parameters range)
     (match parameters
            (Cons (List arg-types _) (Cons return-type Empty))
                (parser-bind   (sexp-to-types arg-types)   (fn (arg-types)
                (parser-bind   (sexp-to-type return-type)  (fn (return-type)
                (parser-return (FunctionType arg-types return-type range))))))
            _
                (parser-error (MalformedTypeError range))))

(def sexp-to-complex-or-function-type (name)
     (match (string-equal? name (data-fn))
            True   sexp-to-function-type
            False  sexp-to-complex-type))

(def sexp-to-type (sexp-to-types type)
     (match type
            (List (Cons (Symbol _ name __) parameters) range)
                ((sexp-to-complex-or-function-type name) sexp-to-types (sexp-to-type sexp-to-types) name parameters range)
            (Symbol _ name range)
                (parser-return (SimpleType name range))
            (Integer _ range)
                (parser-error (MalformedTypeError range))
            (List _ range)
                (parser-error (MalformedTypeError range))))

(def sexp-to-types (types)
     (parser-sequence (list-map (sexp-to-type sexp-to-types) types)))

(def sexp-to-complex-constructor (name types range)
     (parser-bind   (sexp-to-types types)  (fn (types)
     (parser-return (ComplexConstructor name types range)))))

(def sexp-to-constructor-definition (constructor)
     (match constructor
            (Symbol _ name range)
                (parser-return (SimpleConstructor name range))
            (List (Cons (Symbol _ name __) types) range)
                (sexp-to-complex-constructor name types range)
            (Integer _ range)
                (parser-error (MalformedConstructorError range))
            (List _ range)
                (parser-error (MalformedConstructorError range))))

(def sexp-to-constructor-definitions (constructors)
     (parser-sequence (list-map sexp-to-constructor-definition constructors)))

(def sexp-to-type-parameter (sexp)
     (match sexp
            (List (Cons _ (Cons (Symbol __ name range) Empty)) ___)
                (parser-return (ExistentialParameter name range))
            (Symbol _ name range)
                (parser-return (UniversalParameter name range))
            (Integer _ range)
                (parser-error (MalformedDefinitionError range))
            (List _ range)
                (parser-error (MalformedDefinitionError range))))

(def sexp-to-type-parameters (type-name)
     (match type-name
            (List (Cons (Symbol _ __ ___) parameters) ____)
                (parser-sequence (list-map sexp-to-type-parameter parameters))
            (Symbol _ __ ___)
                (parser-return Empty)
            (Integer _ range)
                (parser-error (MalformedTypeError range))
            (List _ range)
                (parser-error (MalformedTypeError range))))

(def sexp-to-type-name (type-name)
     (match type-name
            (List (Cons (Symbol _ name __) ___) ____)
                (parser-return name)
            (Symbol _ name __)
                (parser-return name)
            (Integer _ range)
                (parser-error (MalformedTypeError range))
            (List _ range)
                (parser-error (MalformedTypeError range))))

(def sexp-to-type-definition (type-name constructors range)
     (parser-bind   (sexp-to-type-name type-name)                   (fn (name)
     (parser-bind   (sexp-to-type-parameters type-name)             (fn (parameters)
     (parser-bind   (sexp-to-constructor-definitions constructors)  (fn (constructors)
     (parser-return (TypeDefinition ModuleSelf name parameters constructors range)))))))))

(def sexp-to-arguments (arguments)
     (parser-sequence (list-map symbol-to-string arguments)))

(def sexp-to-function-body (range rest)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                (parser-return (Pair arguments expression))
            _
                (parser-error (MalformedFunctionDefinitionError range))))
 
(def sexp-to-lambda (sexp-to-expression rest range)
     (parser-bind   (sexp-to-function-body range rest)      (fn (body)
     (parser-bind   (sexp-to-arguments (pair-left body))    (fn (arguments)
     (parser-bind   (sexp-to-expression (pair-right body))  (fn (expression)
     (parser-return (Lambda arguments expression range)))))))))

(def sexp-to-function-application (sexp-to-expression range expressions)
     ((pipe (list-map sexp-to-expression) 
            parser-sequence
            ((flip parser-bind) (fn (expressions)
                                    (parser-return (FunctionApplication expressions range)))))
         expressions))

(def to-constructor-or-capture (definitions range name)
     (match (parser-context-is-name-constructor? name definitions)
            True  (parser-return (ConstructorPattern name Empty range))
            False (parser-return (Capture name range))))

(def sexp-to-pattern (definitions sexp)
     (match sexp
            (List (Cons name rest) range)
                (parser-bind   (parser-sequence (list-map (sexp-to-pattern definitions) rest)) (fn (patterns)
                (parser-bind   (symbol-to-string name)                                         (fn (name)
                (parser-return (ConstructorPattern name patterns range))))))
            (List Empty range)
                (parser-error (MalformedExpressionError range))
            (Integer integer range)
                (parser-return (IntegerPattern integer range))
            (Symbol _ name range)
                (to-constructor-or-capture definitions range name)))

(def sexp-to-match-pair (sexp-to-expression definitions pair)
     (match pair
            (Pair pattern expression)
                (parser-bind   (sexp-to-pattern definitions pattern)        (fn (pattern)
                (parser-bind   (sexp-to-expression definitions expression)  (fn (expression)
                (parser-return (Pair pattern expression))))))))

(def collect-pairs (list)
     (match list
            (Cons a (Cons b rest))
                (maybe-map (fn (more-pairs)
                               (Cons (Pair a b) more-pairs))
                           (collect-pairs rest))
            Empty
                (Some Empty)
            _
                None))

(def sexp-to-match-pairs (sexp-to-expression definitions range pairs)
     ((pipe collect-pairs
            (fn (pairs) (match pairs
                               (Some Empty)  (result-error (MalformedMatchExpressionError range))
                               (Some other)  (result-return other)
                               None          (result-error (MalformedMatchExpressionError range))))
            ((flip parser-bind)  (pipe (list-map (sexp-to-match-pair sexp-to-expression definitions))
                                       parser-sequence)))
        pairs))

(def sexp-to-match (sexp-to-expression definitions range rest)
     (match rest
            (Cons expression rest)
                (parser-bind   (sexp-to-expression definitions expression)                      (fn (expression)
                (parser-bind   (sexp-to-match-pairs sexp-to-expression definitions range rest)  (fn (pairs)
                (parser-return (Match expression pairs range))))))
            _
                (parser-error (MalformedExpressionError range))))

(def sexp-to-constructor (sexp-to-expression range name rest)
     (parser-bind   (parser-sequence (list-map sexp-to-expression rest)) (fn (expressions)
     (parser-return (Constructor name expressions range)))))

(def sexp-to-list-expression (sexp-to-expression definitions expressions range)
     (match expressions
            (Cons (Symbol id symbol-name __) rest) 
                  (match (= id (sym-fn))
                         True
                             (sexp-to-lambda (sexp-to-expression definitions) rest range)
                         False
                  (match (= id (sym-match))
                         True
                             (sexp-to-match sexp-to-expression definitions range rest)
                         False
                  (match (parser-context-is-name-constructor? symbol-name definitions)
                         True
                             (sexp-to-constructor (sexp-to-expression definitions) range symbol-name rest)
                         False
                             (sexp-to-function-application (sexp-to-expression definitions) range expressions))))
            _
                  (sexp-to-function-application (sexp-to-expression definitions) range expressions)))

(def sexp-to-expression (definitions sexp)
     (match sexp
            (Integer integer range)
                (parser-return (IntegerConstant integer range))
            (Symbol _ symbol-name range)
                (match (parser-context-is-name-constructor? symbol-name definitions)
                       True   (parser-return (Constructor symbol-name Empty range))
                       False  (parser-return (Identifier symbol-name range)))
            (List expressions range)
                (match expressions
                       Empty  (parser-error (MalformedExpressionError range))
                       _      (sexp-to-list-expression sexp-to-expression definitions expressions range))))

(def sexp-to-function-definition (definitions name-symbol rest range constructor)
     (parser-bind   (sexp-to-function-body range rest)                  (fn (body)
     (parser-bind   (sexp-to-arguments (pair-left body))                (fn (arguments)
     (parser-bind   (sexp-to-expression definitions (pair-right body))  (fn (expression)
     (parser-bind   (symbol-to-string name-symbol)                      (fn (name)
     (parser-return (constructor name arguments expression range)))))))))))

(def sexp-to-definition' (definitions name rest range kind)
     (match (= kind (sym-typ))
            True   (sexp-to-type-definition name rest range)
            False
     (match (= kind (sym-def))
            True   (sexp-to-function-definition definitions name rest range
                                                (fn (name arguments expression range)
                                                    (FunctionDefinition ModuleSelf name arguments expression range)))
            False  (parser-error (MalformedDefinitionError range)))))

(def specific-malformed-definition-error (kind range)
     (match (= kind (sym-typ))
            True   (parser-error (MalformedTypeDefinitionError range))
            False
     (match (= kind (sym-def))
            True   (parser-error (MalformedFunctionDefinitionError range))
            False  (parser-error (MalformedDefinitionError range)))))

(def sexp-to-definition (expression definitions)
     (match expression
            (List (Cons (Symbol kind _ __) Empty) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _ __) (Cons ___ Empty)) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _ __) (Cons name rest)) range)
                (sexp-to-definition' definitions name rest range kind)
            (List (Cons (List _ range) Empty) __)
                (parser-error (MalformedDefinitionError range))
            (List _ range)
                (parser-error (MalformedDefinitionError range))
            (Integer _ range)
                (parser-error (MalformedDefinitionError range))
            (Symbol _ __ range)
                (parser-error (MalformedDefinitionError range))))

(def sexp-error-to-ast-error (error)
     (match error
            ParseErrorTooFewClosingBrackets   MalformedSexpTooFewClosingBrackets
            ParseErrorTooManyClosingBrackets  MalformedSexpTooManyClosingBrackets))

(def sexps-to-definitions' (expressions context)
     (list-foldl (fn (expression context)
                     (parser-context-add (parser-run (sexp-to-definition expression context)) context))
                 context
                 expressions))

(def sexps-to-definitions (sexp-result context)
     (match sexp-result
            (Result (Pair symbols expressions))  (sexps-to-definitions' expressions context)
            (Error error)                        (parser-context-add (parser-error (sexp-error-to-ast-error error)) context)))





(def type-to-sexp (types-to-sexp type)
     (match type
            (SimpleType name range)
                (Symbol 0 name range)
            (FunctionType arg-types return-type range)
                (List (list (Symbol 0 (data-fn) range)
                            (List (types-to-sexp arg-types) range)
                            (type-to-sexp types-to-sexp return-type))
                      range)
            (ComplexType name types range)
                (List (Cons (Symbol 0 name range) (types-to-sexp types)) range)))

(def types-to-sexp (types)
     (list-map (type-to-sexp types-to-sexp) types))

(def constructor-to-sexp (constructor)
     (match constructor
            (SimpleConstructor name range)
                (Symbol 0 name range)
            (ComplexConstructor name types range)
                (List (Cons (Symbol 0 name range) (types-to-sexp types)) range)))

(def constructors-to-sexp (constructors)
     (list-map constructor-to-sexp constructors))

(def type-parameter-to-sexp (parameter)
     (match parameter
            (ExistentialParameter name range)
                (List (list (Symbol 0 (data-exists) range) (Symbol 0 name range)) range)
            (UniversalParameter name range)
                (Symbol 0 name range)))

(def type-name-to-sexp (range name parameters)
     (match parameters
            Empty
                (Symbol 0 name range) 
            _
                (List (Cons (Symbol 0 name range)
                            (list-map type-parameter-to-sexp parameters))
                      range)))

(def type-definition-to-sexp (name parameters constructors range)
     (List (list-concat (list (Symbol 0 (data-typ) range)
                              (type-name-to-sexp range name parameters))
                        (constructors-to-sexp constructors))
           range))

(def function-arguments-to-sexp (arguments range)
     (List (list-map (fn (name) (Symbol 0 name range)) arguments) range))

(def pattern-to-sexp (pattern)
     (match pattern
            (ConstructorPattern name Empty range)
                (Symbol 0 name range)
            (ConstructorPattern name patterns range)
                (List (Cons (Symbol 0 name range) (list-map pattern-to-sexp patterns)) range)
            (IntegerPattern value range)
                (Integer value range)
            (Capture name range)
                (Symbol 0 name range)))

(def match-pair-to-sexp (expression-to-sexp pair)
     (match pair
            (Pair pattern expression)
               (list (pattern-to-sexp pattern) (expression-to-sexp expression))))

(def expression-to-sexp (expression)
     (match expression
            (IntegerConstant integer range)
                (Integer integer range)
            (Identifier string range)
                (Symbol 0 string range)
            (Lambda arguments expression range)
                (List (list (Symbol 0 (data-fn) range)
                            (function-arguments-to-sexp arguments range)
                            (expression-to-sexp expression))
                      range)
            (Match expression pairs range)
                (List (Cons (Symbol 0 (data-match) range)
                      (Cons (expression-to-sexp expression)
                            (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range)
            (Constructor name expressions range)
                (match expressions
                       Empty
                            (Symbol 0 name range)
                       _
                            (List (Cons (Symbol 0 name range) (list-map expression-to-sexp expressions)) range))
            (FunctionApplication expressions range)
                (List (list-map expression-to-sexp expressions) range)))

(def function-definition-to-sexp (name arguments expression range kind)
    (List (list (Symbol 0 kind range)
                (Symbol 0 name range)
                (function-arguments-to-sexp arguments range)
                (expression-to-sexp expression))
          range))

(def definition-to-sexp (definition)
     (match definition
            (TypeDefinition _ name parameters constructors range)
                (type-definition-to-sexp name parameters constructors range)
            (FunctionDefinition _ name arguments expression range)
                (function-definition-to-sexp name arguments expression range (data-def))))

(def definitions-to-sexps (definitions)
     (list-map definition-to-sexp definitions))
