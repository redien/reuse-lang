
(def char-is-upper-case? (char)
     (and (>= char 65) (<= char 90)))

(def name-of-constructor? (name)
     (match (string-first name)
            (Some first-letter)
                (char-is-upper-case? first-letter)
            None
                False))

(typ error           (MalformedDefinitionError range)
                     (MalformedTypeDefinitionError range)
                     (MalformedFunctionDefinitionError range)
                     (MalformedFunctionNameError range)
                     (MalformedExpressionError range)
                     (MalformedMatchExpressionError range)
                     (MalformedSymbolError range)
                     (MalformedConstructorError range)
                     (MalformedTypeError range)
                     MalformedSexpTooFewClosingBrackets
                     MalformedSexpTooManyClosingBrackets)

(def error-to-string (error)
     (match error
            (MalformedDefinitionError range)
                (i18n-malformed-definition-error English range)
            (MalformedFunctionDefinitionError range)
                (i18n-malformed-function-definition-error English range)
            (MalformedTypeDefinitionError range)
                (i18n-malformed-type-definition-error English range)
            (MalformedFunctionNameError range)
                (i18n-malformed-function-name-error English range)
            (MalformedExpressionError range)
                (i18n-malformed-expression-error English range)
            (MalformedMatchExpressionError range)
                (i18n-malformed-match-expression-error English range)
            (MalformedSymbolError range)
                (i18n-malformed-symbol-error English range)
            (MalformedConstructorError range)
                (i18n-malformed-constructor-error English range)
            (MalformedTypeError range)
                (i18n-malformed-type-error English range)
            MalformedSexpTooFewClosingBrackets
                (i18n-malformed-sexp-too-few-closing-brackets English)
            MalformedSexpTooManyClosingBrackets
                (i18n-malformed-sexp-too-many-closing-brackets English)))

(def symbol-to-string (symbol)
     (match symbol
            (Symbol name _)
                (Result name)
            (List _ range)
                (Error  (MalformedSymbolError range))))

(def sexp-to-complex-type (sexp-to-types _ name parameters range)
     (result-bind   (sexp-to-types parameters)  (fn (sub-types)
     (result-return (ComplexType name sub-types range)))))

(def sexp-to-function-type (sexp-to-types sexp-to-type name parameters range)
     (match parameters
            (Cons (List arg-types _) (Cons return-type Empty))
                (result-bind   (sexp-to-types arg-types)   (fn (arg-types)
                (result-bind   (sexp-to-type return-type)  (fn (return-type)
                (result-return (FunctionType arg-types return-type range))))))
            _
                (Error (MalformedTypeError range))))

(def sexp-to-complex-or-function-type (name)
     (match (string-equal? name (data-fn))
            True   sexp-to-function-type
            False  sexp-to-complex-type))

(def sexp-to-type (sexp-to-types type)
     (match type
            (List (Cons (Symbol name _) parameters) range)
                ((sexp-to-complex-or-function-type name) sexp-to-types (sexp-to-type sexp-to-types) name parameters range)
            (Symbol name range)
                (Result (SimpleType name range))
            (List _ range)
                (Error (MalformedTypeError range))))

(def sexp-to-types (types)
     (result-concat (list-map (sexp-to-type sexp-to-types) types)))

(def sexp-to-complex-constructor (name types range)
     (result-bind   (sexp-to-types types)  (fn (types)
     (result-return (ComplexConstructor name types range)))))

(def sexp-to-constructor-definition (constructor)
     (match constructor
            (Symbol name range)
                (Result (SimpleConstructor name range))
            (List (Cons (Symbol name _) types) range)
                (sexp-to-complex-constructor name types range)
            (List _ range)
                (Error (MalformedConstructorError range))))

(def sexp-to-constructor-definitions (constructors)
     (result-concat (list-map sexp-to-constructor-definition constructors)))

(def sexp-to-type-parameter (sexp)
     (match sexp
            (List (Cons _ (Cons (Symbol name range) Empty)) __)
                (Result (ExistentialParameter name range))
            (Symbol name range)
                (Result (UniversalParameter name range))
            (List _ range)
                (Error (MalformedDefinitionError range))))

(def sexp-to-type-parameters (type-name)
     (match type-name
            (List (Cons (Symbol _ __) parameters) ___)
                (result-concat (list-map sexp-to-type-parameter parameters))
            (Symbol _ __)
                (Result Empty)
            (List _ range)
                (Error (MalformedTypeError range))))

(def sexp-to-type-name (type-name)
     (match type-name
            (List (Cons (Symbol name _) __) ___)
                (Result name)
            (Symbol name _)
                (Result name)
            (List _ range)
                (Error (MalformedTypeError range))))

(def sexp-to-type-definition (type-name constructors range)
     (result-bind   (sexp-to-type-name type-name)                   (fn (name)
     (result-bind   (sexp-to-type-parameters type-name)             (fn (parameters)
     (result-bind   (sexp-to-constructor-definitions constructors)  (fn (constructors)
     (result-return (TypeDefinition name parameters constructors range)))))))))

(def sexp-to-arguments (arguments)
     (result-concat (list-map symbol-to-string arguments)))

(def sexp-to-function-body (range rest)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                (Result (Pair arguments expression))
            _
                (Error (MalformedFunctionDefinitionError range))))
 
(def sexp-to-lambda (sexp-to-expression rest range)
     (result-bind   (sexp-to-function-body range rest)      (fn (body)
     (result-bind   (sexp-to-arguments (pair-left body))    (fn (arguments)
     (result-bind   (sexp-to-expression (pair-right body))  (fn (expression)
     (result-return (Lambda arguments expression range)))))))))

(def sexp-to-function-application (sexp-to-expression range expressions)
     ((pipe (list-map sexp-to-expression) 
            result-concat
            (result-map (fn (expressions)
                            (FunctionApplication expressions range))))
         expressions))

(def to-constructor-or-capture (range name)
     (match (name-of-constructor? name)
            True  (Result (ConstructorPattern name Empty range))
            False (Result (Capture name range))))

(def sexp-to-pattern (sexp)
     (match sexp
            (List (Cons name rest) range)
                  (result-bind   (result-concat (list-map sexp-to-pattern rest)) (fn (patterns)
                  (result-bind   (symbol-to-string name)                         (fn (name)
                  (result-return (ConstructorPattern name patterns range))))))

            (List Empty range)
                  (Error (MalformedExpressionError range))

            (Symbol name range)
                  ((pipe
                      (maybe-map  (fn (integer)
                                      (Result (IntegerPattern integer range))))
                      (maybe-else (fn () (to-constructor-or-capture range name)))
                  ) (string-to-int32 name))))

(def sexp-to-match-pair (sexp-to-expression pair)
     (match pair
            (Pair pattern expression)
                (result-bind   (sexp-to-pattern pattern)        (fn (pattern)
                (result-bind   (sexp-to-expression expression)  (fn (expression)
                (result-return (Pair pattern expression))))))))

(def collect-pairs (list)
     (match list
            (Cons a (Cons b rest))
                (maybe-map (fn (more-pairs)
                               (Cons (Pair a b) more-pairs))
                           (collect-pairs rest))
            Empty
                (Some Empty)
            _
                None))

(def sexp-to-match-pairs (sexp-to-expression range pairs)
     ((pipe collect-pairs
            (fn (pairs) (match pairs
                               (Some Empty)  None
                               other         other))
            (result-of-maybe (MalformedMatchExpressionError range))
            (result-flatmap  (pipe (list-map (sexp-to-match-pair sexp-to-expression))
                                   result-concat)))
        pairs))

(def sexp-to-match (sexp-to-expression range rest)
     (match rest
            (Cons expression rest)
                (result-bind   (sexp-to-expression expression)                      (fn (expression)
                (result-bind   (sexp-to-match-pairs sexp-to-expression range rest)  (fn (pairs)
                (result-return (Match expression pairs range))))))
            _
                (Error (MalformedExpressionError range))))

(def sexp-to-constructor (sexp-to-expression range name rest)
     (result-bind   (result-concat (list-map sexp-to-expression rest)) (fn (expressions)
     (result-return (Constructor name expressions range)))))

(def sexp-to-list-expression (sexp-to-expression expressions range)
     (match expressions
            (Cons (Symbol symbol _) rest) 
                  (match (string-equal? symbol (data-fn))
                         True
                             (sexp-to-lambda sexp-to-expression rest range)
                         False
                  (match (string-equal? symbol (data-match))
                         True
                             (sexp-to-match sexp-to-expression range rest)
                         False
                  (match (name-of-constructor? symbol)
                         True
                             (sexp-to-constructor sexp-to-expression range symbol rest)
                         False
                             (sexp-to-function-application sexp-to-expression range expressions))))
            _
                  (sexp-to-function-application sexp-to-expression range expressions)))

(def sexp-to-expression (sexp)
     (match sexp
            (Symbol symbol-name range)
                (match (string-to-int32 symbol-name) 
                       (Some integer)
                           (Result (IntegerConstant integer range))
                       None
                (match (name-of-constructor? symbol-name)
                       True
                           (Result (Constructor symbol-name Empty range))
                       False
                           (Result (Identifier symbol-name range))))
            (List expressions range)
                (match expressions
                       Empty
                          (Error (MalformedExpressionError range))
                       _ 
                          (sexp-to-list-expression sexp-to-expression expressions range))))

(def sexp-to-function-definition (name-symbol rest range constructor)
     (result-bind   (sexp-to-function-body range rest)      (fn (body)
     (result-bind   (sexp-to-arguments (pair-left body))    (fn (arguments)
     (result-bind   (sexp-to-expression (pair-right body))  (fn (expression)
     (result-bind   (symbol-to-string name-symbol)          (fn (name)
     (result-return (constructor name arguments expression range)))))))))))


(def sexp-to-definition' (name rest range kind)
     (match (string-equal? kind (data-typ))
            True   (sexp-to-type-definition name rest range)
            False
     (match (string-equal? kind (data-def))
            True   (sexp-to-function-definition name rest range (fn (name arguments expression range)
                                                                    (FunctionDefinition name arguments expression range)))
            False  (Error (MalformedDefinitionError range)))))

(def specific-malformed-definition-error (kind range)
     (match (string-equal? kind (data-typ))
            True   (Error (MalformedTypeDefinitionError range))
            False
     (match (string-equal? kind (data-def))
            True   (Error (MalformedFunctionDefinitionError range))
            False  (Error (MalformedDefinitionError range)))))

(def sexp-to-definition (expression)
     (match expression
            (List (Cons (Symbol kind _) Empty) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _) (Cons __ Empty)) range)
                (specific-malformed-definition-error kind range)
            (List (Cons kind (Cons name rest)) range)
                (result-flatmap (sexp-to-definition' name rest range) (symbol-to-string kind))
            (List (Cons (List _ range) Empty) __)
                (Error (MalformedDefinitionError range))
            (List Empty range)
                (Error (MalformedDefinitionError range))
            (Symbol _ range)
                (Error (MalformedDefinitionError range))))

(def sexp-error-to-ast-error (error)
     (match error
            ParseErrorTooFewClosingBrackets   MalformedSexpTooFewClosingBrackets
            ParseErrorTooManyClosingBrackets  MalformedSexpTooManyClosingBrackets))

(def sexps-to-definitions (expressions)
     (match expressions
            (Result expressions)  (list-map sexp-to-definition expressions)
            (Error error)         (list (Error (sexp-error-to-ast-error error)))))





(def type-to-sexp (types-to-sexp type)
     (match type
            (SimpleType name range)
                (Symbol name range)
            (FunctionType arg-types return-type range)
                (List (list (Symbol (data-fn) range)
                            (List (types-to-sexp arg-types) range)
                            (type-to-sexp types-to-sexp return-type))
                      range)
            (ComplexType name types range)
                (List (Cons (Symbol name range) (types-to-sexp types)) range)))

(def types-to-sexp (types)
     (list-map (type-to-sexp types-to-sexp) types))

(def constructor-to-sexp (constructor)
     (match constructor
            (SimpleConstructor name range)
                (Symbol name range)
            (ComplexConstructor name types range)
                (List (Cons (Symbol name range) (types-to-sexp types)) range)))

(def constructors-to-sexp (constructors)
     (list-map constructor-to-sexp constructors))

(def type-parameter-to-sexp (parameter)
     (match parameter
            (ExistentialParameter name range)
                (List (list (Symbol (data-exists) range) (Symbol name range)) range)
            (UniversalParameter name range)
                (Symbol name range)))

(def type-name-to-sexp (range name parameters)
     (match parameters
            Empty
                (Symbol name range) 
            _
                (List (Cons (Symbol name range)
                            (list-map type-parameter-to-sexp parameters))
                      range)))

(def type-definition-to-sexp (name parameters constructors range)
     (List (list-concat (list (Symbol (data-typ) range)
                              (type-name-to-sexp range name parameters))
                        (constructors-to-sexp constructors))
           range))

(def function-arguments-to-sexp (arguments range)
     (List (list-map (fn (name) (Symbol name range)) arguments) range))

(def pattern-to-sexp (pattern)
     (match pattern
            (ConstructorPattern name Empty range)
                (Symbol name range)
            (ConstructorPattern name patterns range)
                (List (Cons (Symbol name range) (list-map pattern-to-sexp patterns)) range)
            (IntegerPattern value range)
                (Symbol (string-from-int32 value) range)
            (Capture name range)
                (Symbol name range)))

(def match-pair-to-sexp (expression-to-sexp pair)
     (match pair
            (Pair pattern expression)
               (list (pattern-to-sexp pattern) (expression-to-sexp expression))))

(def expression-to-sexp (expression)
     (match expression
            (IntegerConstant integer range)
                (Symbol (string-from-int32 integer) range)
            (Identifier string range)
                (Symbol string range)
            (Lambda arguments expression range)
                (List (list (Symbol (data-fn) range)
                            (function-arguments-to-sexp arguments range)
                            (expression-to-sexp expression))
                      range)
            (Match expression pairs range)
                (List (Cons (Symbol (data-match) range)
                      (Cons (expression-to-sexp expression)
                            (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range)
            (Constructor name expressions range)
                (match expressions
                       Empty
                            (Symbol name range)
                       _
                            (List (Cons (Symbol name range) (list-map expression-to-sexp expressions)) range))
            (FunctionApplication expressions range)
                (List (list-map expression-to-sexp expressions) range)))

(def function-definition-to-sexp (name arguments expression range kind)
    (List (list (Symbol kind range)
                (Symbol name range)
                (function-arguments-to-sexp arguments range)
                (expression-to-sexp expression))
          range))

(def definition-to-sexp (definition)
     (match definition
            (TypeDefinition name parameters constructors range)
                (type-definition-to-sexp name parameters constructors range)
            (FunctionDefinition name arguments expression range)
                (function-definition-to-sexp name arguments expression range (data-def))))

(def error-to-sexp (error)
     (Symbol (error-to-string error) (Range 0 0)))

(def render-result (result)
     (match result
            (Result sexp)
                sexp
            (Error sexp)
                sexp))

(def definitions-to-sexps (definitions)
     (list-map (pipe (result-map definition-to-sexp)
                     (result-map-error error-to-sexp)
                     render-result)
               definitions))

