
(def with-language-identifiers (other-symbols)
     (list-concat
         other-symbols
         (list
             (Pair (identifier-def) (data-def))
             (Pair (identifier-typ) (data-typ))
             (Pair (identifier-fn) (data-fn))
             (Pair (identifier-match) (data-match))
             (Pair (identifier-exists) (data-exists))
             (Pair (identifier-pub) (data-pub)))))

(pub typ error
     (InternalParserError source-reference range)
     (MalformedExpressionError source-reference range)
     (MalformedDefinitionError source-reference range)
     (MalformedTypeDefinitionError source-reference range)
     (MalformedFunctionDefinitionError source-reference range)
     (MalformedPatternError source-reference range)
     (MalformedMatchExpressionError source-reference range)
     (MalformedSymbolError source-reference range)
     (MalformedConstructorError source-reference range)
     (MalformedTypeError source-reference range)
     (ErrorNotDefined string source-reference range)
     (ErrorAlreadyDefined string source-reference range)
     (ErrorReservedIdentifier string source-reference range)
     MalformedSexpTooFewClosingBrackets
     MalformedSexpTooManyClosingBrackets)

(def symbol-to-identifier (symbol)
     (match symbol
            (Symbol token name range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-return (Identifier token name source-reference range None))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedSymbolError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedSymbolError source-reference range))))))

(def resolve-symbol (symbol scope)
     (parser-bind (symbol-to-identifier symbol) (fn (identifier)
     (match (parser-scope-resolve identifier scope)
            (Identifier _ name source-reference range None)
                (parser-error (ErrorNotDefined name source-reference range))
            identifier
                (parser-return identifier)))))

(def sexp-to-complex-type (sexp-to-type scope symbol parameters range)
     (parser-bind (resolve-symbol symbol scope) (fn (identifier)
     (parser-bind (parser-sequence (list-map (sexp-to-type scope) parameters)) (fn (sub-types)
     (parser-return (ComplexType identifier sub-types range)))))))

(def sexp-to-function-type (sexp-to-type parameters range)
     (match parameters
            (Cons (List arg-types _) (Cons return-type Empty))
                (parser-bind (parser-sequence (list-map sexp-to-type arg-types)) (fn (arg-types)
                (parser-bind (sexp-to-type return-type) (fn (return-type)
                (parser-return (FunctionType arg-types return-type range))))))
            _
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeError source-reference range))))))

(def sexp-to-type (scope type)
     (match type
            (List (Cons symbol parameters) range)
                (parser-bind (symbol-to-identifier symbol) (fn (identifier)
                (match (= (identifier-token identifier) (identifier-fn))
                       True
                           (sexp-to-function-type (sexp-to-type scope) parameters range)
                       False
                           (sexp-to-complex-type sexp-to-type scope symbol parameters range))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeError source-reference range))))
            symbol
                (parser-bind (resolve-symbol symbol scope) (fn (identifier)
                (parser-return (SimpleType identifier))))))

(def sexp-to-constructor-definition (scope constructor)
     (match constructor
            (List (Cons name types) range)
                (parser-bind (symbol-to-identifier name) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-bind (parser-sequence (list-map (sexp-to-type scope) types)) (fn (types)
                (parser-return (ComplexConstructor name types range))))))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedConstructorError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedConstructorError source-reference range))))
            symbol
                (parser-bind (symbol-to-identifier symbol) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-return (SimpleConstructor name))))))))

(def sexp-to-type-parameter (sexp)
     (match sexp
            (List (Cons _ (Cons name Empty)) ___)
                (parser-bind (symbol-to-identifier name) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-return (ExistentialParameter name))))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))
            symbol
                (parser-bind (symbol-to-identifier symbol) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-return (UniversalParameter name))))))))

(def sexp-to-lambda (sexp-to-expression scope rest range)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments)
                (parser-bind (parser-bind-symbols! arguments) (fn (arguments)
                (let-bind (parser-scope-new scope) (fn (scope)
                (let-bind (parser-scope-set-all arguments scope) (fn (scope)
                (parser-bind (sexp-to-expression scope expression) (fn (expression)
                (parser-return (Lambda arguments expression range))))))))))))
            _
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedFunctionDefinitionError source-reference range))))))

(def sexp-to-function-application (sexp-to-expression range expressions)
     (parser-bind (parser-sequence (list-map sexp-to-expression expressions)) (fn (expressions)
     (parser-return (FunctionApplication expressions range)))))

(def to-constructor-or-capture (scope symbol)
     (parser-bind (symbol-to-identifier symbol) (fn (identifier)
     (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?)
     (match constructor?
            True
                (parser-bind (resolve-symbol symbol scope) (fn (identifier)
                (parser-return (ConstructorPattern identifier Empty (identifier-range identifier)))))
            False
                (parser-bind (parser-bind-symbol! identifier) (fn (identifier)
                (parser-return (Capture identifier))))))))))

(def sexp-to-pattern (scope sexp)
     (match sexp
            (List (Cons name rest) range)
                (parser-bind (parser-sequence (list-map (sexp-to-pattern scope) rest)) (fn (patterns)
                (parser-bind (resolve-symbol name scope) (fn (identifier)
                (parser-return (ConstructorPattern identifier patterns range))))))
            (List Empty range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedPatternError source-reference range))))
            (Integer integer range)
                (parser-return (IntegerPattern integer range))
            symbol
                (to-constructor-or-capture scope symbol)))

(def sexp-to-match-pair (sexp-to-expression scope range pair)
     (match pair
            (Cons pattern (Cons expression Empty))
                (parser-bind (sexp-to-pattern scope pattern) (fn (pattern)
                (let-bind (captured-identifiers-from-pattern pattern) (fn (captures)
                (let-bind (parser-scope-new scope) (fn (scope)
                (let-bind (parser-scope-set-all captures scope) (fn (scope)
                (parser-bind (sexp-to-expression scope expression) (fn (expression)
                (parser-return (Pair pattern expression))))))))))))
            _
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedMatchExpressionError source-reference range))))))

(def sexp-to-match-pairs (sexp-to-expression scope range xs)
     (match (list-partition 2 xs)
            Empty
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedMatchExpressionError source-reference range))))
            pairs
                (parser-sequence (list-map (sexp-to-match-pair sexp-to-expression scope range) pairs))))

(def sexp-to-match (sexp-to-expression scope range rest)
     (match rest
            (Cons expression rest)
                (parser-bind (sexp-to-expression scope expression) (fn (expression)
                (parser-bind (sexp-to-match-pairs sexp-to-expression scope range rest) (fn (pairs)
                (parser-return (Match expression pairs range))))))
            _
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (InternalParserError source-reference range))))))

(def sexp-to-constructor (sexp-to-expression range symbol rest scope)
     (parser-bind (symbol-to-identifier symbol) (fn (identifier)
     (parser-bind (resolve-symbol symbol scope) (fn (identifier)
     (parser-bind (parser-sequence (list-map sexp-to-expression rest)) (fn (expressions)
     (parser-return (Constructor identifier expressions range)))))))))

(def sexp-to-list-expression (sexp-to-expression scope expressions range)
     (match expressions
            (Cons (Symbol token name symbol-range) rest)
                (match (= token (identifier-fn))
                       True
                           (sexp-to-lambda sexp-to-expression scope rest range)
                       False
                           (match (= token (identifier-match))
                                  True
                                      (sexp-to-match sexp-to-expression scope range rest)
                                  False
                                      (parser-bind (parser-token-is-constructor? token) (fn (constructor?)
                                      (match constructor?
                                             True
                                                 (sexp-to-constructor
                                                     (sexp-to-expression scope)
                                                     range
                                                     (Symbol token name symbol-range)
                                                     rest
                                                     scope)
                                             False
                                                 (sexp-to-function-application (sexp-to-expression scope) range expressions))))))
            _
                (sexp-to-function-application (sexp-to-expression scope) range expressions)))

(def sexp-to-expression (scope sexp)
     (match sexp
            (Integer integer range)
                (parser-return (IntegerConstant integer range))
            (List expressions range)
                (match expressions
                       Empty
                           (parser-bind (parser-get-source-reference) (fn (source-reference)
                           (parser-error (MalformedExpressionError source-reference range))))
                       _
                           (sexp-to-list-expression sexp-to-expression scope expressions range))
            symbol
                (parser-bind (resolve-symbol symbol scope) (fn (identifier)
                (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?)
                (parser-return (match constructor?
                       True
                           (Constructor identifier Empty (identifier-range identifier))
                       False
                           (Variable identifier)))))))))

(def sexp-to-type-definition (scope type-name public? rest range)
     (match type-name
            (List (Cons name parameters) _)
                (parser-bind (symbol-to-identifier name) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-bind (parser-sequence (list-map sexp-to-type-parameter parameters)) (fn (parameters)
                (let-bind (list-map type-parameter-identifier parameters) (fn (parameter-identifiers)
                (let-bind (parser-scope-new scope) (fn (scope)
                (let-bind (parser-scope-set-all (Cons name parameter-identifiers) scope) (fn (scope)
                (parser-bind (parser-sequence (list-map (sexp-to-constructor-definition scope) rest)) (fn (constructors)
                (parser-return (TypeDefinition name public? parameters constructors range))))))))))))))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeError source-reference range))))
            symbol
                (parser-bind (symbol-to-identifier symbol) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (let-bind (parser-scope-new scope) (fn (scope)
                (let-bind (parser-scope-set name scope) (fn (scope)
                (parser-bind (parser-sequence (list-map (sexp-to-constructor-definition scope) rest)) (fn (constructors)
                (parser-return (TypeDefinition name public? Empty constructors range))))))))))))))

(def sexp-to-function-definition (scope name-symbol public? rest range)
     (match rest
            (Cons (List arguments _) (Cons expression Empty))
                (parser-bind (symbol-to-identifier name-symbol) (fn (name)
                (parser-bind (parser-bind-symbol! name) (fn (name)
                (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments)
                (parser-bind (parser-bind-symbols! arguments) (fn (arguments)
                (let-bind (parser-scope-new scope) (fn (scope)
                (let-bind (parser-scope-set-all (Cons name arguments) scope) (fn (scope)
                (parser-bind (sexp-to-expression scope expression) (fn (expression)
                (parser-return (FunctionDefinition name public? arguments expression range))))))))))))))))
            _
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedFunctionDefinitionError source-reference range))))))

(def sexp-to-definition' (scope name public? rest range kind)
     (match (= kind (identifier-typ))
            True
                (sexp-to-type-definition scope name public? rest range)
            False
                (match (= kind (identifier-def))
                       True
                           (sexp-to-function-definition scope name public? rest range)
                       False
                           (parser-bind (parser-get-source-reference) (fn (source-reference)
                           (parser-error (MalformedDefinitionError source-reference range)))))))

(def specific-malformed-definition-error (kind range)
     (match (= kind (identifier-typ))
            True
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedTypeDefinitionError source-reference range))))
            False
                (match (= kind (identifier-def))
                       True
                           (parser-bind (parser-get-source-reference) (fn (source-reference)
                           (parser-error (MalformedFunctionDefinitionError source-reference range))))
                       False
                           (parser-bind (parser-get-source-reference) (fn (source-reference)
                           (parser-error (MalformedDefinitionError source-reference range)))))))

(def sexp-to-definition (scope expression)
     (match expression
            (List (Cons (Symbol kind _ __) Empty) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol kind _ __) (Cons ___ Empty)) range)
                (specific-malformed-definition-error kind range)
            (List (Cons (Symbol -6 _ __) (Cons (Symbol kind ___ ____) (Cons name rest))) range)
                (sexp-to-definition' scope name True rest range kind)
            (List (Cons (Symbol kind _ __) (Cons name rest)) range)
                (sexp-to-definition' scope name False rest range kind)
            (List (Cons (List _ range) Empty) __)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))
            (List _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))
            (Integer _ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))
            (Symbol _ __ range)
                (parser-bind (parser-get-source-reference) (fn (source-reference)
                (parser-error (MalformedDefinitionError source-reference range))))))

(def parse-definition! (expression)
     (parser-bind (parser-get-module-scope) (fn (scope)
     (parser-bind (sexp-to-definition scope expression) (fn (definition)
     (parser-add-definition! definition))))))

(def sexp-error-to-ast-error (error)
     (match error
            ParseErrorTooFewClosingBrackets
                MalformedSexpTooFewClosingBrackets
            ParseErrorTooManyClosingBrackets
                MalformedSexpTooManyClosingBrackets))

(def parse-definitions! (module file-path iterator)
     (parser-bind (parser-set-source-reference! (SourceReference file-path module)) (fn (_)
     (parser-bind (parser-get-symbols) (fn (symbols)
     (match (parse-sexps symbols iterator)
            (Result (Pair symbols expressions))
                (parser-bind (parser-set-symbols! symbols) (fn (_)
                (parser-sequence (list-map parse-definition! expressions))))
            (Error error)
                (parser-error (sexp-error-to-ast-error error))))))))

(def transform-strings (path content)
     (match (string-gen content)
            (Result string)
                (string-to-slice string)
            (Error error)
                (slice-empty)))

(def parse-reuse-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path content)))

(def parse-strings-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path (transform-strings path content))))

(def parse-target-file (file)
     (match file
            (SourceFile module path content)
                (parser-return (list (TargetDefinition (SourceReference path module) content)))))

(def parse-source-file (file)
     (match (source-file-type file)
            SourceFileTypeStrings
                (parse-strings-file file)
            SourceFileTypeReuse
                (parse-reuse-file file)
            SourceFileTypeTargetLanguage
                (parse-target-file file)))

(def parse-module (files)
     (parser-bind (parser-new-module!) (fn (_)
     (parser-bind (parser-sequence (list-map parse-source-file files)) (fn (definitions)
     (parser-return (list-flatten definitions)))))))

(pub def parse-source-files (symbols files)
     (pipe
         files
         (list-partition-by source-file-in-same-module?)
         (list-map parse-module)
         parser-sequence
         (parser-run (with-language-identifiers symbols))
         (result-map list-flatten)))
