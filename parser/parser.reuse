
(pub def source-reference-from (file)
     (SourceReference
         (source-file-index file)
         (source-file-path file)
         (source-file-module file)))

(typ (parser a e) (Parser (state int32 (result a e))))

(def parser-run (parsers)
     (pair-right (list-foldr
         (fn (parser state)
             (match parser
                    (Parser parser)
                        (pair-bimap
                            id
                            ((flip list-cons) (pair-right state))
                            (state-run (pair-left state) parser))))
         (Pair 0 Empty)
         parsers)))

(def parser-return (value)
     (Parser (state-return (result-return value))))

(def parser-error (error)
     (Parser (state-return (result-error error))))

(def parser-bind (parser f)
     (match parser
            (Parser parser)
                (Parser (state-bind parser (fn (result)
                (result-prod
                    state-return
                    (result-bind result (fn (value)
                    (match (f value)
                           (Parser value)
                               (result-return value))))))))))

(def increment-id! ()
     (Parser (state-bind (state-get) (fn (state)
     (state-bind (state-set (+ state 1)) (fn (id)
     (state-return (result-return id))))))))

(def parser-sequence (parsers)
     (list-foldr
         (fn (a b)
             (parser-bind a (fn (a')
             (parser-bind b (fn (b')
             (parser-return (Cons a' b')))))))
         (parser-return Empty)
         parsers))

(def sequence (f items)
     (parser-sequence (list-map f items)))

(def sexp-error-to-ast-error (error)
     (match error
            ParseErrorTooFewClosingBrackets
                MalformedSexpTooFewClosingBrackets
            ParseErrorTooManyClosingBrackets
                MalformedSexpTooManyClosingBrackets))

(def new-identifier! (source-reference error kind symbol)
     (match symbol
            (Symbol token text range)
                (parser-bind (increment-id!) (fn (id)
                (parser-return (Identifier (Some (Definition id kind)) text source-reference range))))
            (Integer _ range)
                (parser-error (error source-reference range))
            (List _ range)
                (parser-error (error source-reference range))))

(def scope-empty ()
     (dictionary-empty))

(def add-identifier (id dict)
     (dictionary-set (identifier-name id) id dict))

(def scope-with (identifiers scope)
     (list-foldl add-identifier scope identifiers))

(def scope-merge (first second)
     (list-foldl add-identifier first (dictionary-values second)))

(def lookup-identifier (source-reference error scope name)
     (match name
            (Symbol _ text range)
                (match (dictionary-get text scope)
                       (Some identifier)
                           (parser-return (Identifier
                               (Some (Resolved identifier))
                               (identifier-name identifier)
                               source-reference
                               range))
                       None
                           (parser-return (Identifier None text source-reference range)))
            _
                (parser-error (error source-reference (sexp-range name)))))

(def lookup-identifiers (source-reference scope names)
     (parser-sequence (list-map
         (fn (name)
             (lookup-identifier
                 source-reference
                 (not-defined (sexp-symbol-text name))
                 scope
                 name))
         names)))

(def collect-captures (pattern)
     (match pattern
            (Capture identifier)
                (list identifier)
            (IntegerPattern value range)
                Empty
            (ConstructorPattern _ patterns __)
                (list-flatten (list-map collect-captures patterns))))

(def capital-letter? (c)
     (and (>= c 65) (<= c 90)))

(def capitalized? (s)
     (maybe-or-else False (maybe-map capital-letter? (string-first s))))

(def parse-pattern (source-reference scope pattern)
     (match pattern
            (Symbol _ text range)
                (match (capitalized? text)
                       True
                           (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope pattern) (fn (constructor)
                           (parser-return (ConstructorPattern constructor Empty range))))
                       False
                           (parser-bind (new-identifier! source-reference malformed-pattern VariableIdentifier pattern) (fn (identifier)
                           (parser-return (Capture identifier)))))
            (Integer value range)
                (parser-return (IntegerPattern value range))
            (List (Cons constructor patterns) range)
                (parser-bind (lookup-identifier source-reference (not-defined (sexp-symbol-text constructor)) scope constructor) (fn (constructor)
                (parser-bind (sequence (parse-pattern source-reference scope) patterns) (fn (patterns)
                (parser-return (ConstructorPattern constructor patterns range))))))
            (List _ range)
                (parser-error (MalformedPatternError source-reference range))))

(def parse-match-rule (parse-expression source-reference scope rule)
     (match rule
            (Pair pattern expression)
                (parser-bind (parse-pattern source-reference scope pattern) (fn (pattern)
                (parser-bind (parse-expression source-reference (scope-with (collect-captures pattern) scope) expression) (fn (expression)
                (parser-return (Pair pattern expression))))))))

(def parse-expression (source-reference scope expression)
     (match expression
            (Integer value range)
                (parser-return (IntegerConstant value range))
            (Symbol _ text range)
                (match (capitalized? text)
                       True
                           (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope expression) (fn (constructor)
                           (parser-return (Constructor constructor Empty range))))
                       False
                           (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope expression) (fn (identifier)
                           (parser-return (Variable identifier)))))
            (List (Cons (Symbol -3 _ __) (Cons (List arguments ___) (Cons expression Empty))) range)
                (parser-bind (sequence (new-identifier! source-reference malformed-function-definition VariableIdentifier) arguments) (fn (arguments)
                (parser-bind (parse-expression source-reference (scope-with arguments scope) expression) (fn (expression)
                (parser-return (Lambda arguments expression range))))))
            (List (Cons (Symbol -4 _ __) (Cons expression Empty)) range)
                (parser-error (MalformedMatchExpressionError source-reference range))
            (List (Cons (Symbol -4 _ __) (Cons expression rules)) range)
                (match (= (% (list-size rules) 2) 0)
                       True
                           (parser-bind (parser-sequence (list-map (parse-match-rule parse-expression source-reference scope) (list-pairs rules))) (fn (rules)
                           (parser-bind (parse-expression source-reference scope expression) (fn (expression)
                           (parser-return (Match expression rules range))))))
                       False
                           (parser-error (MalformedMatchExpressionError source-reference range)))
            (List (Cons (Symbol token text range) expressions) range)
                (match token
                       -14
                           (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions)
                           (parser-return (ListExpression expressions range))))
                       -15
                           (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions)
                           (parser-return (Pipe expressions range))))
                       -16
                           (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions)
                           (parser-return (Compose expressions range))))
                       _
                           (match (capitalized? text)
                                  True
                                      (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope (Symbol token text range)) (fn (constructor)
                                      (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions)
                                      (parser-return (Constructor constructor expressions range))))))
                                  False
                                      (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) (Cons (Symbol token text range) expressions))) (fn (expressions)
                                      (parser-return (FunctionApplication expressions range))))))
            (List Empty range)
                (parser-error (MalformedExpressionError source-reference range))
            (List expressions range)
                (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions)
                (parser-return (FunctionApplication expressions range))))))

(def parse-function-definition (source-reference context rest range public?)
     (match rest
            (Cons name (Cons (List arguments _) (Cons expression Empty)))
                (parser-bind context (fn (context)
                (match context
                       (Pair scope definitions)
                           (parser-bind (sequence (new-identifier! source-reference malformed-function-definition VariableIdentifier) arguments) (fn (arguments)
                           (parser-bind (new-identifier! source-reference malformed-function-definition FunctionIdentifier name) (fn (name)
                           (parser-bind (parse-expression source-reference (scope-with (Cons name arguments) scope) expression) (fn (expression)
                           (parser-return (Pair
                               (scope-with (list name) scope)
                               (list-cons
                                   (FunctionDefinition name public? arguments expression range)
                                   definitions))))))))))))
            Empty
                (parser-error (FunctionDefinitionMissingName source-reference range))
            (Cons (List _ __) Empty)
                (parser-error (FunctionDefinitionMissingName source-reference range))
            _
                (parser-error (MalformedFunctionDefinitionError source-reference range))))

(def parse-type (source-reference scope type)
     (match type
            (Symbol _ text ___)
                (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope type) (fn (name)
                (parser-return (SimpleType name))))
            (List (Cons (Symbol -3 _ __) (Cons (List argument-types _) (Cons return-type Empty))) range)
                (parser-bind (sequence (parse-type source-reference scope) argument-types) (fn (argument-types)
                (parser-bind (parse-type source-reference scope return-type) (fn (return-type)
                (parser-return (FunctionType argument-types return-type range))))))
            (List (Cons name parameters) range)
                (parser-bind (sequence (parse-type source-reference scope) parameters) (fn (parameters)
                (parser-bind (lookup-identifier source-reference (not-defined (sexp-symbol-text name)) scope name) (fn (name)
                (parser-return (ComplexType name parameters range))))))
            (List _ range)
                (parser-error (malformed-type source-reference range))
            (Integer _ range)
                (parser-error (malformed-type source-reference range))))

(def parse-constructor (source-reference scope constructor)
     (match constructor
            (Symbol _ name range)
                (parser-bind (new-identifier! source-reference malformed-type-definition ConstructorIdentifier constructor) (fn (id)
                (parser-return (SimpleConstructor id))))
            (List (Cons name types) range)
                (parser-bind (new-identifier! source-reference malformed-type-definition ConstructorIdentifier name) (fn (id)
                (parser-bind (sequence (parse-type source-reference scope) types) (fn (types)
                (parser-return (ComplexConstructor id types range))))))
            (Integer _ range)
                (parser-error (malformed-type-definition source-reference range))
            (List _ range)
                (parser-error (malformed-type-definition source-reference range))))

(def parse-type-parameter (source-reference scope parameter)
     (match parameter
            (Symbol _ __ ___)
                (parser-bind (new-identifier! source-reference malformed-type-definition TypeVariableIdentifier parameter) (fn (name)
                (parser-return (UniversalParameter name))))
            (List (Cons (Symbol -5 _ __) (Cons parameter Empty)) range)
                (parser-bind (new-identifier! source-reference malformed-type-definition TypeVariableIdentifier parameter) (fn (name)
                (parser-return (ExistentialParameter name))))
            (Integer _ range)
                (parser-error (malformed-type-definition source-reference range))
            (List _ range)
                (parser-error (malformed-type-definition source-reference range))))

(def parse-type-definition' (source-reference context name parameters constructors range public?)
     (parser-bind context (fn (context)
     (match context
            (Pair scope definitions)
                (parser-bind (sequence (parse-type-parameter source-reference scope) parameters) (fn (parameters)
                (let-bind (list-map type-parameter-identifier parameters) (fn (parameter-names)
                (parser-bind (new-identifier! source-reference malformed-type-definition TypeIdentifier name) (fn (name)
                (parser-bind (sequence (parse-constructor source-reference (scope-with (Cons name parameter-names) scope)) constructors) (fn (constructors)
                (let-bind (list-map constructor-identifier constructors) (fn (constructor-names)
                (parser-return (Pair
                    (scope-with (Cons name constructor-names) scope)
                    (list-cons
                        (TypeDefinition name public? parameters constructors range)
                        definitions)))))))))))))))))

(def parse-type-definition (source-reference context rest range public?)
     (match rest
            (Cons _ Empty)
                (parser-error (TypeDefinitionMissingConstructors source-reference range))
            (Cons (List (Cons name parameters) _) constructors)
                (parse-type-definition'
                    source-reference
                    context
                    name
                    parameters
                    constructors
                    range
                    public?)
            (Cons name constructors)
                (parse-type-definition'
                    source-reference
                    context
                    name
                    Empty
                    constructors
                    range
                    public?)
            Empty
                (parser-error (TypeDefinitionMissingName source-reference range))))

(def parse-definitions (source-reference scope sexps)
     (list-foldl
         (fn (sexp context)
             (match sexp
                    (List (Cons (Symbol -1 _ __) rest) range)
                        (parse-function-definition source-reference context rest range False)
                    (List (Cons (Symbol -6 _ __) (Cons (Symbol -1 _ __) rest)) range)
                        (parse-function-definition source-reference context rest range True)
                    (List (Cons (Symbol -2 _ __) rest) range)
                        (parse-type-definition source-reference context rest range False)
                    (List (Cons (Symbol -6 _ __) (Cons (Symbol -2 _ __) rest)) range)
                        (parse-type-definition source-reference context rest range True)
                    (List _ range)
                        (parser-error (MalformedDefinitionError source-reference range))
                    (Symbol _ __ range)
                        (parser-error (MalformedDefinitionError source-reference range))
                    (Integer _ range)
                        (parser-error (MalformedDefinitionError source-reference range))))
         (parser-return (Pair scope (list-empty)))
         sexps))

(def parse-reuse-file (file)
     (match (parse-sexps (predefined-symbols) (source-file-content file))
            (Result (Pair _ sexps))
                (parser-bind (parse-definitions (source-reference-from file) (scope-with (predefined-identifiers) (scope-empty)) sexps) (fn (definitions)
                (parser-return (pair-bimap id list-reverse definitions))))
            (Error error)
                (parser-error (sexp-error-to-ast-error error))))

(def transform-strings (path content)
     (match (string-gen content)
            (Result string)
                (string-to-slice string)
            (Error error)
                (slice-empty)))

(def parse-strings-file (file)
     (match file
            (SourceFile reference content)
                (parse-reuse-file (SourceFile
                    reference
                    (transform-strings (source-reference-file-path reference) content)))))

(def parse-source-file (file)
     (match (source-file-type file)
            SourceFileTypeStrings
                (parse-strings-file file)
            SourceFileTypeReuse
                (parse-reuse-file file)
            SourceFileTypeTargetLanguage
                (parser-return (Pair
                    (scope-empty)
                    (list (TargetDefinition (source-file-reference file) (source-file-content file)))))))

(def resolve-variable (scope identifier)
     (match identifier
            (Identifier None text source-reference range)
                (match (dictionary-get text scope)
                       (Some identifier)
                           (result-return (Identifier
                               (Some (Resolved identifier))
                               (identifier-name identifier)
                               source-reference
                               range))
                       None
                           (result-error (not-defined (Some text) source-reference range)))
            _
                (result-return identifier)))

(def resolve-definition (scope definition)
     (match definition
            (FunctionDefinition identifier public? arguments expression range)
                (result-bind (over-identifiers (resolve-variable scope) expression) (fn (expression)
                (result-return (FunctionDefinition identifier public? arguments expression range))))
            (TypeDefinition identifier public? parameters constructors range)
                (result-bind (result-concat (list-map (over-identifiers-in-constructor (resolve-variable scope)) constructors)) (fn (constructors)
                (result-return (TypeDefinition identifier public? parameters constructors range))))
            _
                (result-return definition)))

(def resolve-identifiers (parsed-files)
     (list-foldl
         (fn (parsed-file state)
             (match parsed-file
                    (Pair file-scope file-definitions)
                        (result-bind state (fn (state)
                        (result-bind (result-concat (list-map (resolve-definition (pair-left state)) file-definitions)) (fn (new-definitions)
                        (result-return (Pair
                            (scope-merge (pair-left state) file-scope)
                            (list-concat (pair-right state) new-definitions)))))))))
         (Result (Pair (scope-empty) Empty))
         parsed-files))

(def resolve-files (files)
     (match (result-partition (parser-run files))
            (Pair parsed-files Empty)
                (resolve-identifiers parsed-files)
            (Pair _ (Cons error __))
                (Error error)))

(def resolve-modules (definitions)
     definitions)

(pub def parse-source-files (files)
     (resolve-modules (resolve-files (list-map parse-source-file files))))
