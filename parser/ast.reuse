
(pub typ module-reference       (ModulePath           string boolean)
                                ModuleSelf)
(pub typ source-reference       (SourceReference      string module-reference))
(pub typ identifier             (Identifier           int32 string source-reference range (maybe int32)))
(pub typ ast-type               (SimpleType           identifier)
                                (ComplexType          identifier (list ast-type) range)
                                (FunctionType         (list ast-type) ast-type range))
(pub typ type-parameter         (UniversalParameter   identifier)
                                (ExistentialParameter identifier))
(pub typ constructor            (SimpleConstructor    identifier)
                                (ComplexConstructor   identifier (list ast-type) range))
(pub typ pattern                (Capture              identifier)
                                (IntegerPattern       int32 range)
                                (ConstructorPattern   identifier (list pattern) range))
(pub typ expression             (IntegerConstant      int32 range)
                                (Variable             identifier)
                                (Lambda               (list identifier)
                                                      expression
                                                      range)
                                (Match                expression
                                                      (list (pair pattern expression))
                                                      range)
                                (Constructor          identifier (list expression) range)
                                (FunctionApplication  (list expression) range))
(pub typ definition             (TypeDefinition       identifier
                                                      boolean
                                                      (list type-parameter)
                                                      (list constructor)
                                                      range)
                                (FunctionDefinition   identifier
                                                      boolean
                                                      (list identifier)
                                                      expression
                                                      range)
                                (TargetDefinition     source-reference
                                                      slice))

(pub def source-reference-file-path (source-reference)
     (match source-reference
            (SourceReference file-path _)
                file-path))

(pub def source-reference-module (source-reference)
     (match source-reference
            (SourceReference _ module)
                module))

(pub def identifier-token (identifier)
     (match identifier
            (Identifier token _ __ ___ ____)  token))

(pub def identifier-name (identifier)
     (match identifier
            (Identifier _ name __ ___ ____)  name))

(pub def identifier-with-name (name identifier)
     (match identifier
            (Identifier _1 _ _2 _3 _4)
                (Identifier _1 name _2 _3 _4)))

(pub def identifier-source-reference (identifier)
     (match identifier
            (Identifier _ __ source-reference ___ ____)  source-reference))

(pub def identifier-module (identifier)
     (source-reference-module (identifier-source-reference identifier)))

(pub def identifier-range (identifier)
     (match identifier
            (Identifier _ __ ___ range ____)  range))

(def identifier-id' (identifier)
     (match identifier
            (Identifier _ __ ___ ____ id)  id))

(pub def identifier-is? (identifier id)
     (match (identifier-id' identifier)
            (Some a)  (= a id)
            None      False))

(def identifier-with-id (id identifier)
     (match identifier
            (Identifier _1 _2 _3 _4 _)  (Identifier _1 _2 _3 _4 id)))

(pub def identifier-equal? (a b)
     (= (identifier-token a) (identifier-token b)))

(pub def module-equal? (a b)
     (match a
            (ModulePath a' _)
                (match b
                       (ModulePath b' _)
                            (string-equal? a' b')
                       ModuleSelf
                            False)
            ModuleSelf
                (match b
                       (ModulePath _ __)
                            False
                       ModuleSelf
                            True)))

(pub def definition-source-reference (definition)
     (match definition
            (TypeDefinition identifier _ __ ___ ____)              (identifier-source-reference identifier)
            (FunctionDefinition identifier ___ ____ _____ ______)  (identifier-source-reference identifier)
            (TargetDefinition source-reference _)           source-reference))

(pub def definition-module (definition)
     (source-reference-module (definition-source-reference definition)))

(def definition-public? (definition)
     (match definition
            (TypeDefinition _ public? __ ___ ____)          public?
            (FunctionDefinition _ public? __ ___ ____)      public?
            (TargetDefinition _ __)                         False))

(def definition-identifier (definition)
     (match definition
            (TypeDefinition identifier _ __ ___ ____)       (Some identifier)
            (FunctionDefinition identifier _ __ ___ ____)   (Some identifier)
            (TargetDefinition _ __)                         None))

(def constructor-identifier (constructor)
     (match constructor
            (ComplexConstructor identifier _ __)  identifier
            (SimpleConstructor identifier)        identifier))

(pub def type-parameter-identifier (parameter)
     (match parameter
            (UniversalParameter identifier)    identifier
            (ExistentialParameter identifier)  identifier))

(pub def captured-identifiers-from-pattern (pattern)
     (match pattern
            (Capture identifier)
                (list identifier)
            (ConstructorPattern _ patterns __)
                (list-flatmap captured-identifiers-from-pattern patterns)
            _
                Empty))

(pub def identifiers-from-definition (definition)
     (match definition
            (TypeDefinition name _ __ constructors ___)
                (Cons name (list-map constructor-identifier constructors))
            (FunctionDefinition name _ arguments __ ___)
                (Cons name Empty)
            (TargetDefinition _ __)
                Empty))

(pub def public-identifiers (definitions)
     ((pipe (list-filter definition-public?)
            (list-map definition-identifier)
            (list-flatmap list-from-maybe))
        definitions))

(pub def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (result-bind   (f expression) (fn (expression)
                (result-return (Pair pattern expression))))))

(pub def over-match-pair-expressions (over-subexpressions f pairs)
     (result-concat (list-map (over-match-pair-expression (. (result-flatmap (over-subexpressions f)) f)) pairs)))

(pub def over-subexpressions (f expression)
     (result-bind (f expression)  (fn (expression)
     (match expression
            (Lambda arguments expression range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-return (Lambda arguments expression range))))))
            (Match expression pairs range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-bind   (over-match-pair-expressions over-subexpressions f pairs)  (fn (pairs)
                (result-return (Match expression pairs range))))))))
            (Constructor identifier expressions range)
                (result-bind   (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (Constructor identifier expressions range))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            _
                (result-return expression)))))

(pub def over-definition-expressions (f definition)
     (match definition
            (FunctionDefinition identifier public? arguments expression range)
                (result-bind   (f expression)  (fn (expression)
                (result-return (FunctionDefinition identifier public? arguments expression range))))
            _
                (result-return definition)))

(pub def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                (result-return expression)))

(pub def over-match-expression (f expression)
     (match expression
            (Match expression pairs range)
                (f expression pairs range)
            _
                (result-return expression)))

(pub def over-identifiers (f expression)
     (match expression
            (Variable name)
                (result-bind   (f name)                                (fn (name)
                (result-return (Variable name))))
            (Lambda arguments expression range)
                (result-bind   (over-identifiers f expression)         (fn (expression)
                (result-bind   (result-concat (list-map f arguments))  (fn (arguments)
                (result-return (Lambda arguments expression range))))))
            (Constructor name Empty range)
                (result-bind   (f name)                                (fn (name)
                (result-return (Constructor name Empty range))))
            (Constructor name expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-bind   (f name)                                                     (fn (name)
                (result-return (Constructor name expressions range))))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            (Match expression rules range)
                (result-bind   (result-concat (list-map (over-match-pair-expression (over-identifiers f)) rules)) (fn (rules)
                (result-bind   (over-identifiers f expression)                              (fn (expression)
                (result-return (Match expression rules range))))))
            _
                (result-return expression)))

(pub def expression-calls-function-in-tail-position? (name expression)
     (match expression
            (FunctionApplication (Cons (Variable f) rest) _)
                (identifier-equal? name f)
            (Match _ rules __)
                (list-any? (fn (pair)
                               (match pair
                                      (Pair pattern expression)
                                            (and (not (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern)))
                                                 (expression-calls-function-in-tail-position? name expression))))
                           rules)
            _
                False))

(def over-tail-recursive-match-rule (name f over-tail-recursive-call rule)
     (match rule
            (Pair pattern expression)
                  (match (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern))
                         True   (Pair pattern expression)
                         False  (Pair pattern (over-tail-recursive-call name f expression)))))

(pub def over-tail-recursive-call (name f expression)
     (match expression
            (FunctionApplication (Cons (Variable applied-name) rest) range)
                (match (identifier-equal? name applied-name)
                       True   (f rest range)
                       False  expression)
            (Match expression rules range)
                (Match expression
                       (list-map (over-tail-recursive-match-rule name f over-tail-recursive-call) rules)
                       range)
            _
                expression))
