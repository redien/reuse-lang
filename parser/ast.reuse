
(pub typ module-reference       (ModulePath           string boolean)
                                ModuleSelf)
(pub typ source-reference       (SourceReference      string module-reference))
(pub typ ast-sym                (Sym                  int32 string source-reference range (maybe int32)))
(pub typ ast-type               (SimpleType           ast-sym)
                                (ComplexType          ast-sym (list ast-type) range)
                                (FunctionType         (list ast-type) ast-type range))
(pub typ type-parameter         (UniversalParameter   ast-sym)
                                (ExistentialParameter ast-sym))
(pub typ constructor            (SimpleConstructor    ast-sym)
                                (ComplexConstructor   ast-sym (list ast-type) range))
(pub typ pattern                (Capture              ast-sym)
                                (IntegerPattern       int32 range)
                                (ConstructorPattern   ast-sym (list pattern) range))
(pub typ expression             (IntegerConstant      int32 range)
                                (Variable             ast-sym)
                                (Lambda               (list ast-sym)
                                                      expression
                                                      range)
                                (Match                expression
                                                      (list (pair pattern expression))
                                                      range)
                                (Constructor          ast-sym (list expression) range)
                                (FunctionApplication  (list expression) range))
(pub typ definition             (TypeDefinition       ast-sym
                                                      boolean
                                                      (list type-parameter)
                                                      (list constructor)
                                                      range)
                                (FunctionDefinition   ast-sym
                                                      boolean
                                                      (list ast-sym)
                                                      expression
                                                      range)
                                (TargetDefinition     source-reference
                                                      (indexed-iterator int32)))

(pub def source-reference-file-path (source-reference)
     (match source-reference
            (SourceReference file-path _)
                file-path))

(pub def source-reference-module (source-reference)
     (match source-reference
            (SourceReference _ module)
                module))

(pub def symbol-token (sym)
     (match sym
            (Sym token _ __ ___ ____)  token))

(pub def symbol-name (sym)
     (match sym
            (Sym _ name __ ___ ____)  name))

(def symbol-with-name (name sym)
     (match sym
            (Sym _1 _ _2 _3 _4)
                (Sym _1 name _2 _3 _4)))

(def symbol-source-reference (sym)
     (match sym
            (Sym _ __ source-reference ___ ____)  source-reference))

(def symbol-module (sym)
     (source-reference-module (symbol-source-reference sym)))

(def symbol-range (sym)
     (match sym
            (Sym _ __ ___ range ____)  range))

(def symbol-id' (sym)
     (match sym
            (Sym _ __ ___ ____ id)  id))

(def symbol-with-id' (id sym)
     (match sym
            (Sym _1 _2 _3 _4 _)  (Sym _1 _2 _3 _4 id)))

(pub def symbol-equal? (a b)
     (= (symbol-token a) (symbol-token b)))

(pub def module-equal? (a b)
     (match a
            (ModulePath a' _)
                (match b
                       (ModulePath b' _)
                            (string-equal? a' b')
                       ModuleSelf
                            False)
            ModuleSelf
                (match b
                       (ModulePath _ __)
                            False
                       ModuleSelf
                            True)))

(pub def definition-source-reference (definition)
     (match definition
            (TypeDefinition sym _ __ ___ ____)              (symbol-source-reference sym)
            (FunctionDefinition sym ___ ____ _____ ______)  (symbol-source-reference sym)
            (TargetDefinition source-reference _)           source-reference))

(def definition-module (definition)
     (source-reference-module (definition-source-reference definition)))

(def definition-public? (definition)
     (match definition
            (TypeDefinition _ public? __ ___ ____)          public?
            (FunctionDefinition _ public? __ ___ ____)      public?
            (TargetDefinition _ __)                         False))

(def constructor-sym (constructor)
     (match constructor
            (ComplexConstructor sym _ __)  sym
            (SimpleConstructor sym)        sym))

(pub def type-parameter-symbol (parameter)
     (match parameter
            (UniversalParameter sym)    sym
            (ExistentialParameter sym)  sym))

(def captured-symbols-from-pattern (pattern)
     (match pattern
            (Capture sym)
                (list sym)
            (ConstructorPattern _ patterns __)
                (list-flatmap captured-symbols-from-pattern patterns)
            _
                Empty))

(def symbols-from-definition (definition)
     (match definition
            (TypeDefinition name _ __ constructors ___)
                (Cons name (list-map constructor-sym constructors))
            (FunctionDefinition name _ arguments __ ___)
                (Cons name arguments)
            (TargetDefinition _ __)
                Empty))

(pub def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (result-bind   (f expression) (fn (expression)
                (result-return (Pair pattern expression))))))

(pub def over-match-pair-expressions (over-subexpressions f pairs)
     (result-concat (list-map (over-match-pair-expression (pipe f (result-flatmap (over-subexpressions f)))) pairs)))

(pub def over-subexpressions (f expression)
     (result-bind (f expression)  (fn (expression)
     (match expression
            (Lambda arguments expression range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-return (Lambda arguments expression range))))))
            (Match expression pairs range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-bind   (over-match-pair-expressions over-subexpressions f pairs)  (fn (pairs)
                (result-return (Match expression pairs range))))))))
            (Constructor sym expressions range)
                (result-bind   (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions)
                (result-return (Constructor sym expressions range))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            _
                (result-return expression)))))

(pub def over-definition-expressions (f definition)
     (match definition
            (FunctionDefinition sym public? arguments expression range)
                (result-bind   (f expression)  (fn (expression)
                (result-return (FunctionDefinition sym public? arguments expression range))))
            _
                (result-return definition)))

(pub def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                (result-return expression)))

(pub def over-match-expression (f expression)
     (match expression
            (Match expression pairs range)
                (f expression pairs range)
            _
                (result-return expression)))

(pub def over-identifiers (f expression)
     (match expression
            (Variable name)
                (result-bind   (f name)                                (fn (name)
                (result-return (Variable name))))
            (Lambda arguments expression range)
                (result-bind   (over-identifiers f expression)         (fn (expression)
                (result-bind   (result-concat (list-map f arguments))  (fn (arguments)
                (result-return (Lambda arguments expression range))))))
            (Constructor name Empty range)
                (result-bind   (f name)                                (fn (name)
                (result-return (Constructor name Empty range))))
            (Constructor name expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-bind   (f name)                                                     (fn (name)
                (result-return (Constructor name expressions range))))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            (Match expression rules range)
                (result-bind   (result-concat (list-map (over-match-pair-expression (over-identifiers f)) rules)) (fn (rules)
                (result-bind   (over-identifiers f expression)                              (fn (expression)
                (result-return (Match expression rules range))))))
            _
                (result-return expression)))
