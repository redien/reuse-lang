
(typ module-reference       (ModulePath           string)
                            ModuleSelf)
(typ ast-sym                (Sym                  int32 string module-reference range))
(typ ast-type               (SimpleType           ast-sym)
                            (ComplexType          ast-sym (list ast-type) range)
                            (FunctionType         (list ast-type) ast-type range))
(typ type-parameter         (UniversalParameter   ast-sym)
                            (ExistentialParameter ast-sym))
(typ constructor            (SimpleConstructor    ast-sym)
                            (ComplexConstructor   ast-sym (list ast-type) range))
(typ pattern                (Capture              ast-sym)
                            (IntegerPattern       int32 range)
                            (ConstructorPattern   ast-sym (list pattern) range))
(typ expression             (IntegerConstant      int32 range)
                            (Variable             ast-sym)
                            (Lambda               (list ast-sym)
                                                  expression
                                                  range)
                            (Match                expression
                                                  (list (pair pattern expression))
                                                  range)
                            (Constructor          ast-sym (list expression) range)
                            (FunctionApplication  (list expression) range))
(typ definition             (TypeDefinition       ast-sym
                                                  (list type-parameter)
                                                  (list constructor)
                                                  range)
                            (FunctionDefinition   ast-sym
                                                  (list ast-sym)
                                                  expression
                                                  range))

(def symbol-id (sym)
     (match sym
            (Sym id _ __ ___)  id))

(def symbol-name (sym)
     (match sym
            (Sym _ name __ ___)  name))

(def symbol-module (sym)
     (match sym
            (Sym _ __ module ___)  module))

(def symbol-range (sym)
     (match sym
            (Sym _ __ ___ range)  range))

(def symbol-equal? (a b)
     (= (symbol-id a) (symbol-id b)))

(def definition-range (definition)
     (match definition
            (TypeDefinition _ __ ___ range)      range
            (FunctionDefinition _ __ ___ range)  range))

(def definition-name (definition)
     (match definition
            (TypeDefinition sym ____ _____ ______)      (symbol-name sym)
            (FunctionDefinition sym ____ _____ ______)  (symbol-name sym)))

(def definition-module (definition)
     (match definition
            (TypeDefinition sym ____ _____ ______)      (symbol-module sym)
            (FunctionDefinition sym ____ _____ ______)  (symbol-module sym)))

(def constructor-id (constructor)
     (match constructor
            (ComplexConstructor sym _ __)  (symbol-id sym)
            (SimpleConstructor sym)        (symbol-id sym)))

(def type-parameter-symbol (parameter)
     (match parameter
            (UniversalParameter sym)    sym
            (ExistentialParameter sym)  sym))

(def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (result-bind   (f expression) (fn (expression)
                (result-return (Pair pattern expression))))))

(def over-match-pair-expressions (over-subexpressions f pairs)
     (result-concat (list-map (over-match-pair-expression (pipe f (result-flatmap (over-subexpressions f)))) pairs)))

(def over-subexpressions (f expression)
     (result-bind (f expression)  (fn (expression)
     (match expression
            (Lambda arguments expression range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-return (Lambda arguments expression range))))))
            (Match expression pairs range)
                (result-bind   (f expression)                                             (fn (expression)
                (result-bind   (over-subexpressions f expression)                         (fn (expression)
                (result-bind   (over-match-pair-expressions over-subexpressions f pairs)  (fn (pairs)
                (result-return (Match expression pairs range))))))))
            (Constructor sym expressions range)
                (result-bind   (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions)
                (result-return (Constructor sym expressions range))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            _
                (result-return expression)))))

(def over-definition-expressions (f definition)
     (match definition
            (FunctionDefinition sym arguments expression range)
                (result-bind   (f expression)  (fn (expression)
                (result-return (FunctionDefinition sym arguments expression range))))
            _
                (result-return definition)))

(def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                (result-return expression)))

(def over-identifiers (f expression)
     (match expression
            (Variable name)
                (result-bind   (f name)                                (fn (name)
                (result-return (Variable name))))
            (Lambda arguments expression range)
                (result-bind   (over-identifiers f expression)         (fn (expression)
                (result-bind   (result-concat (list-map f arguments))  (fn (arguments)
                (result-return (Lambda arguments expression range))))))
            (Constructor name Empty range)
                (result-bind   (f name)                                (fn (name)
                (result-return (Constructor name Empty range))))
            (Constructor name expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-bind   (f name)                                                     (fn (name)
                (result-return (Constructor name expressions range))))))
            (FunctionApplication expressions range)
                (result-bind   (result-concat (list-map (over-identifiers f) expressions))  (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            (Match expression rules range)
                (result-bind   (result-concat (list-map (over-match-pair-expression (over-identifiers f)) rules)) (fn (rules)
                (result-bind   (over-identifiers f expression)                              (fn (expression)
                (result-return (Match expression rules range))))))
            _
                (result-return expression)))
