
(pub typ definition-kind
     PublicFunctionDefinition
     PublicTypeDefinition
     PublicConstructorDefinition
     PrivateFunctionDefinition
     PrivateTypeDefinition
     PrivateConstructorDefinition
     VariableDefinition
     TypeVariableDefinition)

(pub typ identifier-universe
     TypeUniverse
     ValueUniverse)

(pub typ (identifier-reference identifier)
     (Resolved identifier)
     (Definition int32 definition-kind))

(pub typ identifier
     (Identifier (maybe (identifier-reference identifier))
                 identifier-universe
                 string
                 source-reference
                 range))

(pub typ ast-type
     (SimpleType identifier)
     (ComplexType identifier (list ast-type) range)
     (FunctionType (list ast-type) ast-type range))

(pub typ type-parameter
     (UniversalParameter identifier)
     (ExistentialParameter identifier))

(pub typ constructor
     (SimpleConstructor identifier)
     (ComplexConstructor identifier (list ast-type) range))

(pub typ pattern
     (Capture identifier)
     (IntegerPattern int32 range)
     (ConstructorPattern identifier (list pattern) range))

(pub typ expression
     (IntegerConstant int32 range)
     (Variable identifier)
     (Lambda (list identifier) expression range)
     (Match expression (list (pair pattern expression)) range)
     (Constructor identifier (list expression) range)
     (FunctionApplication (list expression) range)
     (ListExpression (list expression) range)
     (Pipe (list expression) range)
     (Compose (list expression) range))

(pub typ definition
     (TypeDefinition identifier boolean (list type-parameter) (list constructor) range)
     (FunctionDefinition identifier boolean (list identifier) expression range)
     (TargetDefinition source-reference slice))

(def identifier-universe-from-kind (kind)
     (match kind
            PublicFunctionDefinition
                ValueUniverse
            PublicConstructorDefinition
                ValueUniverse
            PublicTypeDefinition
                TypeUniverse
            PrivateFunctionDefinition
                ValueUniverse
            PrivateConstructorDefinition
                ValueUniverse
            PrivateTypeDefinition
                TypeUniverse
            VariableDefinition
                ValueUniverse
            TypeVariableDefinition
                TypeUniverse))

(def identifier-definition (identifier)
     (match identifier
            (Identifier (Some (Resolved (Identifier (Some (Definition id kind)) __ ___ ____ _____))) _____ ______ _______ ________)
                (Some (Definition id kind))
            (Identifier (Some (Definition id kind)) __ ___ ____ _____)
                (Some (Definition id kind))
            _
                None))

(pub def identifier-id (identifier)
     (match (identifier-definition identifier)
            (Some (Definition id _))
                (Some id)
            _
                None))

(pub def identifier-name (identifier)
     (match identifier
            (Identifier _ __ name ___ ____)
                name))

(pub def identifier-with-name (name identifier)
     (match identifier
            (Identifier _1 _2 _ _3 _4)
                (Identifier _1 _2 name _3 _4)))

(pub def identifier-source-reference (identifier)
     (match identifier
            (Identifier _ __ ___ source-reference ____)
                source-reference))

(pub def identifier-module (identifier)
     (source-reference-module (identifier-source-reference identifier)))

(pub def identifier-range (identifier)
     (match identifier
            (Identifier _ __ ___ ____ range)
                range))

(pub def identifier-public? (identifier)
     (match (identifier-definition identifier)
            (Some (Definition _ PublicFunctionDefinition))
                True
            (Some (Definition _ PublicTypeDefinition))
                True
            (Some (Definition _ PublicConstructorDefinition))
                True
            _
                False))

(def identifier-universe (identifier)
     (match identifier
            (Identifier _ universe __ ___ ____)
                universe))

(pub def identifier-is? (id identifier)
     (maybe-or-else False (maybe-map (= id) (identifier-id identifier))))

(pub def identifier-equal? (a b)
     (maybe-or-else
         (source-reference-equal?
             (identifier-source-reference a)
             (identifier-source-reference b))
         (maybe-map ((flip identifier-is?) b) (identifier-id a))))

(def identifier-from-definition (id kind text source-reference range)
     (Identifier
         (Some (Definition id kind))
         (identifier-universe-from-kind kind)
         text
         source-reference
         range))

(def identifier-resolved (defined-identifier source-reference range)
     (Identifier
         (Some (Resolved defined-identifier))
         (identifier-universe defined-identifier)
         (identifier-name defined-identifier)
         source-reference
         range))

(def identifier-unresolved (universe text source-reference range)
     (Identifier None universe text source-reference range))

(pub def definition-source-reference (definition)
     (match definition
            (TypeDefinition identifier _ __ ___ ____)
                (identifier-source-reference identifier)
            (FunctionDefinition identifier ___ ____ _____ ______)
                (identifier-source-reference identifier)
            (TargetDefinition source-reference _)
                source-reference))

(pub def definition-module (definition)
     (source-reference-module (definition-source-reference definition)))

(def definition-public? (definition)
     (match definition
            (TypeDefinition _ public? __ ___ ____)
                public?
            (FunctionDefinition _ public? __ ___ ____)
                public?
            (TargetDefinition _ __)
                False))

(def definition-identifier (definition)
     (match definition
            (TypeDefinition identifier _ __ ___ ____)
                (Some identifier)
            (FunctionDefinition identifier _ __ ___ ____)
                (Some identifier)
            (TargetDefinition _ __)
                None))

(pub def constructor-identifier (constructor)
     (match constructor
            (ComplexConstructor identifier _ __)
                identifier
            (SimpleConstructor identifier)
                identifier))

(pub def type-parameter-identifier (parameter)
     (match parameter
            (UniversalParameter identifier)
                identifier
            (ExistentialParameter identifier)
                identifier))

(pub def captured-identifiers-from-pattern (pattern)
     (match pattern
            (Capture identifier)
                (list identifier)
            (ConstructorPattern _ patterns __)
                (list-flatmap captured-identifiers-from-pattern patterns)
            _
                Empty))

(pub def identifiers-from-definition (definition)
     (match definition
            (TypeDefinition name _ __ constructors ___)
                (Cons name (list-map constructor-identifier constructors))
            (FunctionDefinition name _ arguments __ ___)
                (Cons name Empty)
            (TargetDefinition _ __)
                Empty))

(pub def public-identifiers (definitions)
     (pipe
         definitions
         (list-filter definition-public?)
         (list-map definition-identifier)
         (list-flatmap list-from-maybe)))

(pub def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (result-bind (f expression) (fn (expression)
                (result-return (Pair pattern expression))))))

(pub def over-match-pair-expressions (over-subexpressions f pairs)
     (result-concat (list-map
         (over-match-pair-expression (. (result-flatmap (over-subexpressions f)) f))
         pairs)))

(pub def over-subexpressions (f expression)
     (result-bind (f expression) (fn (expression)
     (match expression
            (Lambda arguments expression range)
                (result-bind (f expression) (fn (expression)
                (result-bind (over-subexpressions f expression) (fn (expression)
                (result-return (Lambda arguments expression range))))))
            (Match expression pairs range)
                (result-bind (f expression) (fn (expression)
                (result-bind (over-subexpressions f expression) (fn (expression)
                (result-bind (over-match-pair-expressions over-subexpressions f pairs) (fn (pairs)
                (result-return (Match expression pairs range))))))))
            (Constructor identifier expressions range)
                (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (Constructor identifier expressions range))))
            (FunctionApplication expressions range)
                (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            (ListExpression expressions range)
                (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (ListExpression expressions range))))
            (Pipe expressions range)
                (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (Pipe expressions range))))
            (Compose expressions range)
                (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions)
                (result-return (Compose expressions range))))
            _
                (result-return expression)))))

(pub def over-definition-expressions (f definition)
     (match definition
            (FunctionDefinition identifier public? arguments expression range)
                (result-bind (f expression) (fn (expression)
                (result-return (FunctionDefinition identifier public? arguments expression range))))
            _
                (result-return definition)))

(pub def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                (result-return expression)))

(pub def over-match-expression (f expression)
     (match expression
            (Match expression pairs range)
                (f expression pairs range)
            _
                (result-return expression)))

(pub def over-match-pattern-identifiers (f pattern)
     (match pattern
            (ConstructorPattern identifier patterns range)
                (result-bind (result-concat (list-map (over-match-pattern-identifiers f) patterns)) (fn (patterns)
                (result-bind (f identifier) (fn (identifier)
                (result-return (ConstructorPattern identifier patterns range))))))
            _
                (result-return pattern)))

(pub def over-match-rule-identifiers (over-identifiers f rule)
     (match rule
            (Pair pattern expression)
                (result-bind (over-match-pattern-identifiers f pattern) (fn (pattern)
                (result-bind (over-identifiers f expression) (fn (expression)
                (result-return (Pair pattern expression))))))))

(pub def over-identifiers (f expression)
     (match expression
            (Variable name)
                (result-bind (f name) (fn (name)
                (result-return (Variable name))))
            (Lambda arguments expression range)
                (result-bind (over-identifiers f expression) (fn (expression)
                (result-bind (result-concat (list-map f arguments)) (fn (arguments)
                (result-return (Lambda arguments expression range))))))
            (Constructor name Empty range)
                (result-bind (f name) (fn (name)
                (result-return (Constructor name Empty range))))
            (Constructor name expressions range)
                (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions)
                (result-bind (f name) (fn (name)
                (result-return (Constructor name expressions range))))))
            (FunctionApplication expressions range)
                (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions)
                (result-return (FunctionApplication expressions range))))
            (Match expression rules range)
                (result-bind (result-concat (list-map (over-match-rule-identifiers over-identifiers f) rules)) (fn (rules)
                (result-bind (over-identifiers f expression) (fn (expression)
                (result-return (Match expression rules range))))))
            (ListExpression expressions range)
                (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions)
                (result-return (ListExpression expressions range))))
            (Pipe expressions range)
                (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions)
                (result-return (Pipe expressions range))))
            (Compose expressions range)
                (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions)
                (result-return (Compose expressions range))))
            _
                (result-return expression)))

(def over-identifiers-in-type (f type)
     (match type
            (SimpleType identifier)
                (result-bind (f identifier) (fn (identifier)
                (result-return (SimpleType identifier))))
            (ComplexType identifier types range)
                (result-bind (f identifier) (fn (identifier)
                (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types)
                (result-return (ComplexType identifier types range))))))
            (FunctionType types result-type range)
                (result-bind (over-identifiers-in-type f result-type) (fn (result-type)
                (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types)
                (result-return (FunctionType types result-type range))))))))

(pub def over-identifiers-in-constructor (f constructor)
     (match constructor
            (SimpleConstructor identifier)
                (result-bind (f identifier) (fn (identifier)
                (result-return (SimpleConstructor identifier))))
            (ComplexConstructor identifier types range)
                (result-bind (f identifier) (fn (identifier)
                (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types)
                (result-return (ComplexConstructor identifier types range))))))))

(pub def expression-calls-function-in-tail-position? (name expression)
     (match expression
            (FunctionApplication (Cons (Variable f) rest) _)
                (identifier-equal? name f)
            (Match _ rules __)
                (list-any?
                    (fn (pair)
                        (match pair
                               (Pair pattern expression)
                                   (and
                                       (not (list-any?
                                           (identifier-equal? name)
                                           (captured-identifiers-from-pattern pattern)))
                                       (expression-calls-function-in-tail-position? name expression))))
                    rules)
            _
                False))

(def any-captures-match? (name pattern)
     (list-any?
         (identifier-equal? name)
         (captured-identifiers-from-pattern pattern)))

(def over-tail-recursive-match-rule (name f over-tail-recursive-call rule)
     (match rule
            (Pair pattern expression)
                (match (any-captures-match? name pattern)
                       True
                           (Pair pattern expression)
                       False
                           (Pair pattern (over-tail-recursive-call name f expression)))))

(pub def over-tail-recursive-call (name f expression)
     (match expression
            (FunctionApplication (Cons (Variable applied-name) rest) range)
                (match (identifier-equal? name applied-name)
                       True
                           (f rest range)
                       False
                           expression)
            (Match expression rules range)
                (Match
                    expression
                    (list-map
                        (over-tail-recursive-match-rule name f over-tail-recursive-call)
                        rules)
                    range)
            _
                expression))
