
(def parser-run (parser)
     (match (state-run (parser-context-new) parser)
            (Pair _ result)  result))

(def parser-return (value)
     (state-return (result-return value)))

(def parser-error (error)
     (state-return (result-error error)))

(def parser-bind (parser f)
     (state-bind parser (fn (result)
     (result-prod state-return
     (result-bind result (fn (value)
     (result-return (f value))))))))

(def parser-constructor? (name)
     (state-bind (state-get) (fn (context)
     (parser-return (parser-context-is-name-constructor? name context)))))

(def parser-add-definition! (definition)
     (state-bind (state-modify (parser-context-add definition)) (fn (_)
     (parser-return definition))))

(def parser-set-module! (module)
     (state-bind (state-modify (parser-context-with-module module)) (fn (_)
     (parser-return module))))


(def parser-sequence (list)
     (list-foldr (fn (a b)
                     (parser-bind a (fn (a')
                     (parser-bind b (fn (b')
                     (parser-return (Cons a' b')))))))
                 (parser-return Empty)
                 list))
