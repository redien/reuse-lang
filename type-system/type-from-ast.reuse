
(typ (type-annotation meta)  (TypeAnnotation type meta))

(def lookup-type-parameter (name parameters)
     (list-find-first (fn (parameter)
                          (match parameter
                                 (ConstType _ __)                  False
                                 (FnType _ __)                     False
                                 (UniversalType parameter-name)    (string-equal? name parameter-name)
                                 (ExistentialType parameter-name)  (string-equal? name parameter-name)
                                 ErrorType                         False))
                      parameters))

(def type-from-ast-type (parameters ast-type)
     (match ast-type
            (SimpleType identifier)
                        (match (lookup-type-parameter (identifier-name identifier) parameters)
                               (Some type)  type
                               None         (ConstType (identifier-name identifier) Empty))
            (ComplexType name ast-types _)               (ConstType name (list-map (type-from-ast-type parameters) ast-types))
            (FunctionType argument-types return-type _)  (FnType (list-map (type-from-ast-type parameters) argument-types)
                                                                 (type-from-ast-type parameters return-type))))

(def type-from-constructor (return-type parameters constructor)
     (match constructor
            (SimpleConstructor identifier)               (Pair (identifier-name identifier) (FnType Empty return-type))
            (ComplexConstructor identifier ast-types _)  (Pair (identifier-name identifier) (FnType (list-map (type-from-ast-type parameters) ast-types) return-type))))

(def type-from-parameter (parameter)
     (match parameter
            (UniversalParameter identifier)    (UniversalType (identifier-name identifier))
            (ExistentialParameter identifier)  (ExistentialType (identifier-name identifier))))

(def types-from-constructors (name parameters constructors)
     (list-map (type-from-constructor (ConstType name parameters) parameters) constructors))
