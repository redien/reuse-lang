
(def to-types (ast-types)
     (list-map (type-from-ast-type Empty) ast-types))

(def parse-constraints (stdin)
     (result-bind   (result-map-error sexp-error-to-ast-error (parse stdin))  (fn (sexps)
     (result-bind   (sexp-to-types sexps)                                     (fn (ast-types)
     (result-return (list-pairs (to-types ast-types))))))))

(def stringify-constraints (constraints)
     (list-flatmap (pair-map (fn (a b) (stringify-types (list a b)))) constraints))

(def parse-and-unify (stdin)
     (result-bind   (parse-constraints stdin)   (fn (constraints)
     (result-return (stringify-constraints constraints)))))

(def reuse-main (stdin)
     (result-either (string-join (list 32)) (fn (_) Empty) (parse-and-unify stdin)))
