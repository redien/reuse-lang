
(def reserved-identifiers ()
     (list data-assert data-asr data-begin data-constraint data-do data-done data-downto data-type data-if
           data-then data-else data-with data-of data-end data-in data-fun data-let data-open data-and
           data-or data-as data-class data-exception data-external data-false data-true data-for data-function
           data-functor data-if data-include data-inherit data-initializer data-land data-lazy data-lor data-lsl
           data-lsr data-lxor data-method data-mod data-module data-mutable data-new data-nonrec data-object
           data-private data-rec data-sig data-struct data-try data-val data-virtual data-when data-while
           data-parser data-value data-to data-slice))

(def operator-translation-map ()
     (dictionary-of (list
        (Pair (data-+) (SourceString (data-int32-plus)))
        (Pair (data--) (SourceString (data-int32-minus)))
        (Pair (data-*) (SourceString (data-int32-multiply)))
        (Pair (data-/) (SourceString (data-int32-divide)))
        (Pair (data-%) (SourceString (data-int32-modulus)))
        (Pair (data-&) (SourceString (data-int32-and))))))

(def translate-type-variable (identifier)
     (source-string-concat (SourceStringChar 39)
     (source-string-concat (SourceStringChar 84) (SourceStringIdentifier identifier IdentifierTransformationNone))))

(def escape-identifier (identifier)
     (SourceStringIdentifier identifier IdentifierTransformationNone))

(def lowercase-identifier (identifier)
     (SourceStringIdentifier identifier IdentifierTransformationLowercase))

(def translate-type-identifier (identifier)
     (match (identifier-is? identifier (identifier-slice))
            True   (SourceString (data-slice-type))
            False  (escape-identifier identifier)))

(def translate-constructor-identifier (identifier)
     (SourceStringIdentifier identifier IdentifierTransformationCapitalize))

(def translate-identifier (identifier)
     (match (token-is-operator? (identifier-token identifier))
            True   (match (dictionary-get (identifier-name identifier) (operator-translation-map))
                          (Some translation)  translation
                          None                (SourceStringIdentifier identifier IdentifierTransformationNone))
            False  (SourceStringIdentifier identifier IdentifierTransformationNone)))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join' (list (SourceString (data-if))
                             (SourceString (data-space))
                             (translate-expression a)
                             (SourceString (data-less-than))
                             (translate-expression b)
                             (SourceString (data-space))
                             (SourceString (data-then))
                             (SourceString (data-space))
                             (translate-expression then-case)
                             (SourceString (data-space))
                             (SourceString (data-else))
                             (SourceString (data-space))
                             (translate-expression else-case)))
            _
                (SourceString (data-compile-error))))

(def translate-constructor (translator identifier)
     (pipe (list-map translator)
           (source-string-join (data-comma))
           wrap-in-brackets'
           (fn (parameters)
               (list (translate-constructor-identifier identifier)
                     (SourceString (data-space))
                     parameters))
           join'
           wrap-in-brackets'))

(def translate-pattern (pattern)
     (match pattern
            (Capture identifier)
                (escape-identifier identifier)
            (IntegerPattern integer _)
                (join' (list (SourceString (string-from-int32 integer)) (SourceStringChar 108)))
            (ConstructorPattern identifier Empty _)
                (translate-constructor-identifier identifier)
            (ConstructorPattern identifier patterns _)
                ((translate-constructor translate-pattern identifier) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join' (list (translate-pattern pattern) (SourceString (data-arrow)) (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (source-string-join (data-vertical-bar))
           (fn (rules)
               (list (SourceString (data-match)) (translate-expression expression) (SourceString (data-with)) rules))
           (source-string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (join' (list (translate-expression no-args-function)
                                 (SourceString (data-space))
                                 (SourceString (wrap-in-brackets (string-empty)))))
            _
                    (source-string-join (data-space) (list-map translate-expression expressions))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable identifier) rest)
                    (match (= (identifier-token identifier) (identifier-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-is-empty? arguments)
            True  (SourceString (wrap-in-brackets (string-empty)))
            False (source-string-join (data-space) (list-map lowercase-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join' (list (SourceString (data-fun))
                  (SourceString (data-space))
                  (translate-argument-list arguments)
                  (SourceString (data-arrow))
                  (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets' (translate-lambda translate-expression arguments expression))
            (Constructor identifier Empty _)
                (translate-constructor-identifier identifier)
            (Constructor identifier expressions _)
                ((translate-constructor translate-expression identifier) expressions)
            (FunctionApplication expressions _)
                (wrap-in-brackets' (translate-function-application translate-expression expressions))
            (IntegerConstant integer _)
                (wrap-in-brackets' (SourceString (string-concat (string-from-int32 integer) (string-of-char 108))))
            (Variable identifier)
                (translate-identifier identifier)
            (Match expression rules _)
                (wrap-in-brackets' ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (identifier arguments expression)
     (join' (list (SourceString (data-let-rec))
                  (lowercase-identifier identifier)
                  (SourceString (data-equals))
                  (translate-lambda translate-expression arguments expression)
                  (SourceString (data-definition-end)))))

(def translate-simple-type (identifier parameters)
     (match (list-any? (. (identifier-equal? identifier) type-parameter-identifier) parameters)
            False  (translate-type-identifier identifier)
            True   (translate-type-variable identifier)))

(def translate-complex-types (translate-types name types)
     ((pipe (translate-types (data-comma))
            wrap-in-brackets'
            (fn (types) (list types (SourceString (data-space)) (translate-type-identifier name)))
            join')
        types))

(def translate-function-type (translate-types return-type argument-types)
     (match (list-is-empty? argument-types)
            True   (wrap-in-brackets' (join' (list (SourceString (data-unit)) 
                                                   (SourceString (data-arrow))
                                                   (translate-types (data-arrow) (list return-type)))))
            False  (wrap-in-brackets' (translate-types (data-arrow) (list-concat argument-types (list return-type))))))

(def translate-type (translate-types parameters type)
     (match type
            (SimpleType identifier)
                (translate-simple-type identifier parameters)
            (ComplexType identifier types _)
                (translate-complex-types translate-types identifier types)
            (FunctionType argument-types return-type _)
                (translate-function-type translate-types return-type argument-types)))

(def translate-types (parameters separator types)
     ((pipe (list-map (translate-type (translate-types parameters) parameters))
            (source-string-join separator))
        types))

(def translate-complex-constructor-definition (name type types parameters)
     (join' (list (translate-constructor-identifier name)
                  (SourceString (data-colon))
                  (translate-types parameters (data-star) types)
                  (SourceString (data-arrow))
                  type)))

(def translate-constructor-definition (type parameters constructor)
     (match constructor
            (SimpleConstructor identifier)
                (translate-constructor-identifier identifier)
            (ComplexConstructor identifier types _)
                (translate-complex-constructor-definition identifier type types parameters)))

(def translate-constructor-definitions (type parameters constructors)
     ((pipe (list-map (translate-constructor-definition type parameters))
            (source-string-join (data-vertical-bar)))
        constructors))

(def translate-type-parameter-for-definition (parameter)
     (match parameter
            (UniversalParameter identifier)
                (translate-type-variable identifier)
            (ExistentialParameter _)
                SourceStringEmpty))

(def translate-type-parameters (parameters)
     ((pipe (list-map translate-type-parameter-for-definition)
            (list-filter (fn (parameter)
                             (match parameter
                                    SourceStringEmpty  False
                                    _                  True)))
            (source-string-join (data-comma)))
        parameters))

(def translate-type-name' (name parameters parameter-string)
     (match (list-is-empty? parameters)
            True
                (lowercase-identifier name)
            False
                (join' (list (wrap-in-brackets' parameter-string)
                             (SourceString (data-space))
                             (lowercase-identifier name)))))

(def translate-type-name (name parameters)
     (translate-type-name' name parameters (translate-type-parameters parameters)))

(def translate-type-definition (name parameters constructors)
     (join' (list (SourceString (data-type))
                  (SourceString (data-space))
                  (translate-type-name name parameters)
                  (SourceString (data-equals))
                  (translate-constructor-definitions (translate-type-name name parameters) parameters constructors)
                  (SourceString (data-definition-end)))))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition identifier _ arguments expression __)
                (translate-function-definition identifier arguments expression)
            (TypeDefinition name _ parameters constructors __)
                (translate-type-definition name parameters constructors)
            (TargetDefinition _ data)
                (SourceString (string-from-slice data))))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (source-string-join (string-of-char 10))
            (pair-cons (list-map (pair-cons IdentifierTransformationLowercase) (public-identifiers definitions))))
        definitions))

(def perform-transformations? () True)
