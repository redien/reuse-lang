
(def reserved-identifiers ()
     (list data-var data-import data-default data-case data-class data-do data-else data-false data-for 
           data-function data-if data-in data-new data-true data-try data-with data-while data-break
           data-const data-continue data-catch data-debugger data-delete data-export data-extends data-enum
           data-finally data-instanceof data-null data-return data-super data-switch data-this data-throw
           data-typeof data-void data-await))

(def escape-identifier (identifier)
     (SourceStringIdentifier identifier))

(def translate-constructor-identifier (identifier)
     (source-string-concat (SourceStringChar 67) (escape-identifier identifier)))

(def operator-translation-map ()
     (dictionary-of (list
        (Pair (data-+) (SourceString (data-int32-plus)))
        (Pair (data--) (SourceString (data-int32-minus)))
        (Pair (data-*) (SourceString (data-int32-multiply)))
        (Pair (data-/) (SourceString (data-int32-divide)))
        (Pair (data-%) (SourceString (data-int32-modulus)))
        (Pair (data-&) (SourceString (data-int32-and))))))

(def translate-identifier (identifier)
     (match (token-is-operator? (identifier-token identifier))
            True   (match (dictionary-get (identifier-name identifier) (operator-translation-map))
                          (Some translation)  translation
                          None                (escape-identifier identifier))
            False  (escape-identifier identifier)))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (wrap-in-brackets' (join' (list (translate-expression a)
                                                (SourceString (data-less-than))
                                                (translate-expression b)
                                                (SourceString (data-space))
                                                (SourceString (data-question-mark))
                                                (SourceString (data-space))
                                                (translate-expression then-case)
                                                (SourceString (data-space))
                                                (SourceString (data-colon))
                                                (SourceString (data-space))
                                                (translate-expression else-case))))
            _
                (SourceString (data-compile-error))))

(def wrap-in-angle-brackets (s)
     (join' (list (SourceString (data-open-array)) s (SourceString (data-close-array)))))

(def translate-constructor (translator identifier)
     (pipe (list-map translator)
           (list-cons (translate-constructor-identifier identifier))
           (source-string-join (data-comma))
           wrap-in-angle-brackets))

(def translate-pattern (pattern)
     (match pattern
            (Capture _)
                (SourceString (data-capture))
            (IntegerPattern integer _)
                (SourceString (string-from-int32 integer))
            (ConstructorPattern identifier Empty _)
                (translate-constructor-identifier identifier)
            (ConstructorPattern identifier patterns _)
                (translate-constructor translate-pattern identifier patterns)))

(def translate-captures (pattern)
     (match pattern
            (Capture identifier)
                (list (escape-identifier identifier))
            (IntegerPattern _ __)
                (list-empty)
            (ConstructorPattern _ patterns __)
                (list-flatmap translate-captures patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join' (list (translate-pattern pattern)
                              (SourceString (data-comma))
                              (wrap-in-brackets' (source-string-join (data-comma) (translate-captures pattern)))
                              (SourceString (data-lambda-arrow))
                              (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (source-string-join (data-comma))
           wrap-in-angle-brackets
           (fn (rules)
               (list (SourceString (data-match-func)) (wrap-in-brackets' (join' (list (translate-expression expression) (SourceString (data-comma)) rules)))))
           (source-string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons function Empty)
                    (join' (list (translate-expression function) (wrap-in-brackets' (source-string-empty))))
            (Cons function args)
                    (join' (list (translate-expression function)
                                 (join' (list-map (. wrap-in-brackets' translate-expression) args))))
            Empty
                    (SourceString (data-compile-error))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable identifier) rest)
                    (match (= (identifier-token identifier) (identifier-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-empty? arguments)
            True   (wrap-in-brackets' (source-string-empty))
            False  (source-string-join (data-lambda-arrow) (list-map escape-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join' (list (translate-argument-list arguments)
                  (SourceString (data-lambda-arrow))
                  (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets' (translate-lambda translate-expression arguments expression))
            (Constructor identifier Empty _)
                (translate-constructor-identifier identifier)
            (Constructor identifier expressions _)
                ((translate-constructor translate-expression identifier) expressions)
            (FunctionApplication expressions _)
                (translate-function-application translate-expression expressions)
            (IntegerConstant integer _)
                (SourceString (string-from-int32 integer))
            (Variable identifier)
                (translate-identifier identifier)
            (Match expression rules _)
                (translate-match-expression translate-expression expression rules)))

(def translate-function-definition (identifier arguments expression)
     (join' (list (SourceString (data-var))
                  (SourceString (data-space))
                  (escape-identifier identifier)
                  (SourceString (data-space))
                  (SourceString (data-equals))
                  (SourceString (data-space))
                  (translate-lambda translate-expression arguments expression)
                  (SourceString (data-end-statement)))))

(def constructor-identifier (constructor)
     (match constructor
            (SimpleConstructor identifier)
                identifier
            (ComplexConstructor identifier _ __)
                identifier))

(def translate-constructor-definition (constructor)
     (join' (list (SourceString (data-var))
                  (SourceString (data-space))
                  (translate-constructor-identifier (constructor-identifier constructor))
                  (SourceString (data-space))
                  (SourceString (data-equals))
                  (SourceString (data-space))
                  (SourceString (data-open-block))
                  (translate-constructor-identifier (constructor-identifier constructor))
                  (SourceString (data-colon))
                  (SourceString (data-true))
                  (SourceString (data-close-block))
                  (SourceString (data-end-statement)))))

(def translate-type-definition (name parameters constructors)
     (source-string-join (string-of-char 10) (list-map translate-constructor-definition constructors)))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition identifier _ arguments expression __)
                (translate-function-definition identifier arguments expression)
            (TypeDefinition name _ parameters constructors __)
                (translate-type-definition name parameters constructors)
            (TargetDefinition _ data)
                (SourceString (string-from-slice data))))

(def translate-export (definition)
     (match definition
            (FunctionDefinition identifier True arguments _ __)
                (match (identifier-module identifier)
                       ModuleSelf
                            (list (join' (list (escape-identifier identifier)
                                               (SourceString (data-colon))
                                               (SourceString (data-open-bracket))
                                               (source-string-join (data-comma) (list-map escape-identifier arguments))
                                               (SourceString (data-close-bracket))
                                               (SourceString (data-lambda-arrow))
                                               (escape-identifier identifier)
                                               (join' (list-map (. wrap-in-brackets' escape-identifier) arguments)))))
                       _
                            (list-empty))
            _
                (list-empty)))

(def translate-exports (definitions)
     (join' (list (SourceStringChar 10)
                  (SourceString (data-module))
                  (SourceString (data-dot))
                  (SourceString (data-exports))
                  (SourceString (data-equals))
                  (SourceString (data-open-block))
                  (SourceStringChar 10)
                  (SourceString (data-indent))
                  (source-string-join (string-join (string-of-char 10) (list (data-comma) (data-indent)))
                                      (list-flatmap translate-export definitions))
                  (SourceStringChar 10)
                  (SourceString (data-close-block))
                  (SourceString (data-end-statement)))))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (source-string-join (string-of-char 10))
            ((flip source-string-concat) (translate-exports definitions)))
        definitions))

(def perform-transformations? () True)
