
(def reserved-identifiers ()
     (list data-var data-import data-default data-case data-class data-do data-else data-false data-for 
           data-function data-if data-in data-new data-true data-try data-with data-while data-break
           data-const data-continue data-catch data-debugger data-delete data-export data-extends data-enum
           data-finally data-instanceof data-null data-return data-super data-switch data-this data-throw
           data-typeof data-void data-await))

(def escape-identifier (identifier)
     (SourceStringIdentifier identifier IdentifierTransformationNone))

(def translate-constructor-identifier (identifier)
     (escape-identifier identifier))

(def operator-translation-map ()
     (dictionary-of (list
        (Pair (data-+) (SourceString (data-int32-plus)))
        (Pair (data--) (SourceString (data-int32-minus)))
        (Pair (data-*) (SourceString (data-int32-multiply)))
        (Pair (data-/) (SourceString (data-int32-divide)))
        (Pair (data-%) (SourceString (data-int32-modulus)))
        (Pair (data-&) (SourceString (data-int32-and))))))

(def translate-identifier (identifier)
     (match (token-is-operator? (identifier-token identifier))
            True   (match (dictionary-get (identifier-name identifier) (operator-translation-map))
                          (Some translation)  translation
                          None                (escape-identifier identifier))
            False  (escape-identifier identifier)))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (wrap-in-brackets' (join' (list (translate-expression a)
                                                (SourceString (data-less-than))
                                                (translate-expression b)
                                                (SourceString (data-space))
                                                (SourceString (data-question-mark))
                                                (SourceString (data-space))
                                                (translate-expression then-case)
                                                (SourceString (data-space))
                                                (SourceString (data-colon))
                                                (SourceString (data-space))
                                                (translate-expression else-case))))
            _
                (SourceString (data-compile-error))))

(def wrap-in-angle-brackets (s)
     (join' (list (SourceString (data-open-array)) s (SourceString (data-close-array)))))

(def translate-constructor (translator identifier)
     (pipe (list-map translator)
           (list-cons (translate-constructor-identifier identifier))
           (source-string-join (data-comma))
           wrap-in-angle-brackets))

(def translate-pattern (pattern)
     (match pattern
            (Capture _)
                (SourceString (data-capture))
            (IntegerPattern integer _)
                (SourceString (string-from-int32 integer))
            (ConstructorPattern identifier Empty _)
                (translate-constructor-identifier identifier)
            (ConstructorPattern identifier patterns _)
                (translate-constructor translate-pattern identifier patterns)))

(def translate-captures (pattern)
     (match pattern
            (Capture identifier)
                (list (escape-identifier identifier))
            (IntegerPattern _ __)
                (list-empty)
            (ConstructorPattern _ patterns __)
                (list-flatmap translate-captures patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join' (list (translate-pattern pattern)
                              (SourceString (data-comma))
                              (wrap-in-brackets' (source-string-join (data-comma) (translate-captures pattern)))
                              (SourceString (data-lambda-arrow))
                              (translate-expression expression)))))

(def translate-match-expression (translate-expression translate-rule expression)
     (pipe (list-map (translate-rule translate-expression))
           (source-string-join (data-comma))
           wrap-in-angle-brackets
           (fn (rules)
               (list (SourceString (data-match-func)) (wrap-in-brackets' (join' (list (translate-expression expression) (SourceString (data-comma)) rules)))))
           (source-string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons function Empty)
                    (join' (list (translate-expression function) (wrap-in-brackets' (source-string-empty))))
            (Cons function args)
                    (join' (list (translate-expression function)
                                 (join' (list-map (. wrap-in-brackets' translate-expression) args))))
            Empty
                    (SourceString (data-compile-error))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable identifier) rest)
                    (match (= (identifier-token identifier) (identifier-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-is-empty? arguments)
            True   (wrap-in-brackets' (source-string-empty))
            False  (source-string-join (data-lambda-arrow) (list-map escape-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join' (list (translate-argument-list arguments)
                  (SourceString (data-lambda-arrow))
                  (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets' (translate-lambda translate-expression arguments expression))
            (Constructor identifier Empty _)
                (translate-constructor-identifier identifier)
            (Constructor identifier expressions _)
                ((translate-constructor translate-expression identifier) expressions)
            (FunctionApplication expressions _)
                (translate-function-application translate-expression expressions)
            (IntegerConstant integer _)
                (SourceString (string-from-int32 integer))
            (Variable identifier)
                (translate-identifier identifier)
            (Match expression rules _)
                (translate-match-expression translate-expression translate-rule expression rules)))


(def translate-tail-recursive-match-rule (name translate-tail-recursive-function translate-expression rule)
     (match rule
            (Pair pattern expression)
                  (match (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern))
                         True   (translate-rule translate-expression rule)
                         False  (translate-rule (translate-tail-recursive-function name) rule))))

(def translate-tail-recursive-function (name expression)
     (match expression
            (FunctionApplication (Cons (Variable applied-name) arguments) range)
                (match (identifier-equal? name applied-name)
                       True   (translate-expression (Lambda Empty (FunctionApplication (Cons (Variable name) arguments) range) range))
                       False  (translate-expression expression))
            (Match expression rules range)
                (translate-match-expression translate-expression
                                            (translate-tail-recursive-match-rule name translate-tail-recursive-function)
                                            expression
                                            rules)
            _
                (translate-expression expression)))

(def translate-main-function-definition (identifier arguments expression)
     (match (function-definition-is-tail-recursive? identifier expression)
            True   (source-string-join (data-space) (list
                        (SourceString (data-var))
                        (escape-identifier identifier)
                        (SourceString (data-equals))
                        (translate-argument-list arguments)
                        (SourceString (data-lambda-arrow))
                        (SourceString (data-open-block))
                        (SourceString (data-var))
                        (escape-identifier identifier)
                        (SourceString (data-equals))
                        (translate-argument-list arguments)
                        (SourceString (data-lambda-arrow))
                        (translate-tail-recursive-function identifier expression)
                        (SourceString (data-end-statement))
                        (SourceString (data-return))
                        (SourceString (data-trampoline))
                        (SourceString (data-open-bracket))
                        (escape-identifier identifier)
                        (join' (list-map (. wrap-in-brackets' escape-identifier) arguments))
                        (SourceString (data-close-bracket))
                        (SourceString (data-end-statement))
                        (SourceString (data-close-block))
                        (SourceString (data-end-statement))))
            False  (source-string-join (data-space) (list
                        (SourceString (data-var))
                        (escape-identifier identifier)
                        (SourceString (data-equals))
                        (translate-lambda translate-expression arguments expression)
                        (SourceString (data-end-statement))))))

(def translate-export-statement (identifier arguments)
     (join' (list (SourceString (string-of-char 10))
                  (SourceString (data-module))
                  (SourceString (data-dot))
                  (SourceString (data-exports))
                  (SourceString (data-dot))
                  (escape-identifier identifier)
                  (SourceString (data-space))
                  (SourceString (data-equals))
                  (SourceString (data-space))
                  (SourceString (data-open-bracket))
                  (source-string-join (data-comma) (list-map escape-identifier arguments))
                  (SourceString (data-close-bracket))
                  (SourceString (data-lambda-arrow))
                  (escape-identifier identifier)
                  (match (list-is-empty? arguments)
                         True   (wrap-in-brackets' SourceStringEmpty)
                         False  (join' (list-map (. wrap-in-brackets' escape-identifier) arguments)))
                  (SourceString (data-end-statement)))))

(def translate-function-definition (identifier public? arguments expression)
     (source-string-concat (translate-main-function-definition identifier arguments expression)
                           (match public?
                                  True   (translate-export-statement identifier arguments)
                                  False  SourceStringEmpty)))

(def constructor-identifier (constructor)
     (match constructor
            (SimpleConstructor identifier)
                identifier
            (ComplexConstructor identifier _ __)
                identifier))

(def translate-constructor-definition (public? constructor)
     (match (translate-constructor-identifier (constructor-identifier constructor))
            identifier
     (join' (list (SourceString (data-var))
                  (SourceString (data-space))
                  identifier
                  (SourceString (data-space))
                  (SourceString (data-equals))
                  (SourceString (data-space))
                  (SourceString (data-open-block))
                  identifier
                  (SourceString (data-colon))
                  (SourceString (data-true))
                  (SourceString (data-close-block))
                  (SourceString (data-end-statement))
                  (match public?
                         True  (join' (list (SourceString (string-of-char 10))
                                            (SourceString (data-module))
                                            (SourceString (data-dot))
                                            (SourceString (data-exports))
                                            (SourceString (data-dot))
                                            identifier
                                            (SourceString (data-space))
                                            (SourceString (data-equals))
                                            (SourceString (data-space))
                                            identifier
                                            (SourceString (data-end-statement))))
                         False  SourceStringEmpty)))))

(def translate-type-definition (name public? parameters constructors)
     (source-string-join (string-of-char 10) (list-map (translate-constructor-definition public?) constructors)))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition identifier public? arguments expression __)
                (translate-function-definition identifier public? arguments expression)
            (TypeDefinition name public? parameters constructors __)
                (translate-type-definition name public? parameters constructors)
            (TargetDefinition _ data)
                (SourceString (string-from-slice data))))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (source-string-join (string-of-char 10))
            (pair-cons (list-map (pair-cons IdentifierTransformationNone) (public-identifiers definitions))))
        definitions))

(pub def compiler-backend-javascript ()
     (Backend (data-javascript-language)
              (list (data-preamble-filename))
              (list (data-pervasives-filename))
              generate-source
              (reserved-identifiers)
              True))
