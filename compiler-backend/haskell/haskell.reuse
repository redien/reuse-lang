
(def reserved-identifiers ()
     (list data-if data-then data-else data-with data-of data-end data-in data-type data-let
           data-class data-do data-module data-data data-case data-deriving data-family data-default
           data-forall data-foreign data-import data-instance data-infix data-infixl data-infixr
           data-newtype data-where))

(def capital? (char)
     (match (>= char 65)
            False   False
            True
     (match (<= char 90)
            True    True
            False   False)))

(def capitalized? (s)
     (string-every? capital? (string-take 1 s)))

(def escape-identifier (identifier)
     (match (capitalized? (identifier-name identifier))
            True  (source-string-concat (SourceStringChar 95) (SourceStringIdentifier identifier IdentifierTransformationNone))
            False (SourceStringIdentifier identifier IdentifierTransformationNone)))

(def translate-constructor-identifier (constructor)
     (source-string-concat (SourceStringChar 67) (escape-identifier constructor)))

(def operator-translation-map ()
     (dictionary-of (list
        (Pair (data-+) (SourceString (data-int32-plus)))
        (Pair (data--) (SourceString (data-int32-minus)))
        (Pair (data-*) (SourceString (data-int32-multiply)))
        (Pair (data-/) (SourceString (data-int32-divide)))
        (Pair (data-%) (SourceString (data-int32-modulus)))
        (Pair (data-&) (SourceString (data-int32-and))))))

(def translate-identifier (identifier)
     (match (token-is-operator? (identifier-token identifier))
            True   (match (dictionary-get (identifier-name identifier) (operator-translation-map))
                          (Some translation)  translation
                          None                (escape-identifier identifier))
            False  (escape-identifier identifier)))

(def prefix-type-variable (identifier)
     (translate-identifier identifier))

(def prefix-type (identifier)
     (match (= (identifier-token identifier) (identifier-int32))
            True   (SourceString (data-Int32))
            False  (source-string-concat (SourceStringChar 84) (translate-identifier identifier))))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join' (list (SourceString (data-if))
                             (SourceString (data-space))
                             (translate-expression a)
                             (SourceString (data-less-than))
                             (translate-expression b)
                             (SourceString (data-space))
                             (SourceString (data-then))
                             (SourceString (data-space))
                             (translate-expression then-case)
                             (SourceString (data-space))
                             (SourceString (data-else))
                             (SourceString (data-space))
                             (translate-expression else-case)))
            _
                (SourceString (data-compile-error))))

(def translate-constructor (translator name)
     (pipe (list-map translator)
           (source-string-join (data-space))
           (fn (parameters)
               (list (translate-constructor-identifier name)
                     (SourceString (data-space))
                     parameters))
           join'
           wrap-in-brackets'))

(def translate-pattern (pattern)
     (match pattern
            (Capture identifier)
                (source-string-concat (SourceStringChar 33) (escape-identifier identifier))
            (IntegerPattern integer _)
                (match (< integer 0)
                       True   (SourceString (wrap-in-brackets (string-from-int32 integer)))
                       False  (SourceString (string-from-int32 integer)))
            (ConstructorPattern identifier Empty _)
                (translate-constructor-identifier identifier)
            (ConstructorPattern identifier patterns _)
                ((translate-constructor translate-pattern identifier) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join' (list (translate-pattern pattern) (SourceString (data-arrow)) (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (source-string-join (data-semicolon))
           (fn (rules)
               (list (SourceString (data-case)) (translate-expression expression) (SourceString (data-of)) rules))
           (source-string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (translate-expression no-args-function)
            _
                    (source-string-join (data-space) (list-map translate-expression expressions))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable identifier) rest)
                    (match (= (identifier-token identifier) (identifier-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (source-string-join (data-space) (list-map (pipe escape-identifier (source-string-concat (SourceStringChar 33))) arguments)))

(def translate-lambda (translate-expression arguments expression)
     (match (list-empty? arguments)
            True   (translate-expression expression)
            False  (join' (list (SourceString (data-backslash))
                                (SourceString (data-space))
                                (translate-argument-list arguments)
                                (SourceString (data-arrow))
                                (translate-expression expression)))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets' (translate-lambda translate-expression arguments expression))
            (Constructor identifier Empty _)
                (translate-constructor-identifier identifier)
            (Constructor identifier expressions _)
                ((translate-constructor translate-expression identifier) expressions)
            (FunctionApplication expressions _)
                (wrap-in-brackets' (translate-function-application translate-expression expressions))
            (IntegerConstant integer _)
                (match (< integer 0)
                       True   (SourceString (wrap-in-brackets (string-from-int32 integer)))
                       False  (SourceString (string-from-int32 integer)))
            (Variable identifier)
                (translate-identifier identifier)
            (Match expression rules _)
                (wrap-in-brackets' ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (name arguments expression)
     (match (list-empty? arguments)
            True  (join' (list name
                               (SourceString (data-equals))
                               (translate-expression expression)))
            False (join' (list name
                               (SourceString (data-equals))
                               (translate-lambda translate-expression arguments expression)))))

(def translate-simple-type (identifier parameters)
     (match (list-any? (. (identifier-equal? identifier) type-parameter-identifier) parameters)
            False  (prefix-type identifier)
            True   (prefix-type-variable identifier)))

(def translate-complex-types (translate-types name types)
     ((pipe (translate-types (data-space))
            (source-string-concat (source-string-concat (prefix-type name) (SourceString (data-space))))
            wrap-in-brackets')
        types))

(def translate-function-type (translate-types return-type argument-types)
     ((pipe (fn (argument-types)
                (list-concat argument-types (list return-type)))
            (translate-types (data-arrow))
            wrap-in-brackets')
        argument-types))

(def translate-type (translate-types parameters type)
     (match type
            (SimpleType identifier)
                (translate-simple-type identifier parameters)
            (ComplexType identifier types _)
                (translate-complex-types translate-types identifier types)
            (FunctionType argument-types return-type _)
                (translate-function-type translate-types return-type argument-types)))

(def translate-types (parameters f separator types)
     ((pipe (list-map (pipe (translate-type (translate-types parameters id) parameters)
                            f))
            (source-string-join separator))
        types))

(def translate-type-parameter (parameter)
     (match parameter
            (UniversalParameter identifier)
                (SourceString (identifier-name identifier))
            (ExistentialParameter identifier)
                (SourceString (identifier-name identifier))))

(def translate-complex-constructor-definition (name types parameters)
     (join' (list (translate-constructor-identifier name)
                  (SourceString (data-space))
                  (translate-types parameters (source-string-concat (SourceStringChar 33)) (data-space) types))))

(def translate-constructor-definition (parameters constructor)
     (match constructor
            (SimpleConstructor identifier)
                (translate-constructor-identifier identifier)
            (ComplexConstructor identifier types _)
                (translate-complex-constructor-definition identifier types parameters)))

(def translate-constructor-definitions (parameters)
     (pipe (list-map (translate-constructor-definition parameters))
           (source-string-join (data-vertical-bar))))

(def translate-universal-parameters (parameters)
     (list-foldl (fn (parameter s)
                     (match parameter
                            (UniversalParameter identifier)
                                (join' (list s
                                             (SourceString (data-space))
                                             (prefix-type-variable identifier)))
                            (ExistentialParameter _)
                                s))
                 (source-string-empty)
                 parameters))

(def translate-existential-parameters (parameters)
     (list-foldl (fn (parameter s)
                     (match parameter
                            (UniversalParameter _)
                                s
                            (ExistentialParameter identifier)
                                (join' (list s
                                             (SourceString (data-forall))
                                             (SourceString (data-space))
                                             (prefix-type-variable identifier)
                                             (SourceString (data-dot))
                                             (SourceString (data-space))))))
                 (source-string-empty)
                 parameters))

(def translate-type-definition (name parameters constructors)
     (join' (list (SourceString (data-data))
                  (SourceString (data-space))
                  (prefix-type name)
                  (translate-universal-parameters parameters)
                  (SourceString (data-equals))
                  (translate-existential-parameters parameters)
                  ((translate-constructor-definitions parameters) constructors))))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition name _ arguments expression __)
                (translate-function-definition (escape-identifier name) arguments expression)
            (TypeDefinition name _ parameters constructors __)
                (translate-type-definition name parameters constructors)
            (TargetDefinition _ data)
                (SourceString (string-from-slice data))))

(def translate-module-declaration (module-name)
     (join' (list (SourceString (data-module))
                  (SourceString (data-space))
                  (SourceString module-name)
                  (SourceString (data-space))
                  (SourceString (data-where)))))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (list-cons (translate-module-declaration module-name))
            (list-cons (SourceString (data-language-exts)))
            (source-string-join (string-of-char 10))
            (pair-cons (list-map (pair-cons IdentifierTransformationNone) (public-identifiers definitions))))
         definitions))

(def perform-transformations? () True)
