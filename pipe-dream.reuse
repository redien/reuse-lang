
/* Pure functional */

// Primitive Types:
//   Int32
//   String
//   (Lambda (a) b) = (lambda (a) b)
//   (Tuple a b) = (tuple a b)
//   (List a) = () | (list a (List a))
//
//  (list x xs)  (Lambda (a (List a)) (List a))
//  (head xs)    (Lambda ((List a)) a)
//  (tail xs)    (Lambda ((List a)) a)
//
//  (tuple x y)  (Lambda (a b) (Tuple a b))
//  (first t)    (Lambda ((Tuple a b)) a)
//  (second t)   (Lambda ((Tuple a b)) b)

(
    (data hashmap (key-type value-type) (list (tuple key-type value-type)))
    
    (define hashmap-new () ())
    (define hashmap-new () ())

    (define filter (f xs)
        (
    (define get (key) ())

    (define map (f xs)
        (list (f (head xs)) (map f (tail xs))))
    
    (export map (lambda (a) b) (list b))
)

/* Dynamic OOP lisp? */

(define hashmap () (((
    ()
    . get (lambda (self) ()))
    . set (lambda (self key value) ()))
    . clear (lambda (self) ()))
)
