
(typ compiler-state (CompilerState (dictionary definition)))

(def compiler-state-new () (CompilerState (dictionary-new)))

(def compiler-state-add-function (name definition state)
     (match state
            (CompilerState dictionary)  (CompilerState (dictionary-add name definition dictionary))))

(def compiler-state-lookup-function (name state)
     (match state
            (CompilerState dictionary)  (dictionary-lookup name dictionary)))


(def translate-pipe (translate-expression)
     (pipe (list-map translate-expression)
           state-all
           (state-map (pipe (string-join (space))
                            (fn (expressions)
                                (list (pipe-string)
                                      (space)
                                      expressions))
                            join))))

(def translate-cons (first rest)
     (wrap-in-brackets (join (list (data-cons) (space) first (space) rest))))

(def translate-list (translate-expression)
     (pipe (list-map translate-expression)
           state-all
           (state-map (list-foldr translate-cons (data-empty)))))

(def translate-constructor (translator name)
     (pipe (list-map translator)
           state-all
           (state-map (pipe (string-join (space))
                            (fn (parameters)
                                (list name
                                      (space)
                                      parameters))
                            join
                            wrap-in-brackets))))

(def translate-pattern (pattern)
     (match pattern
            (Capture name _)
                (state-lift name)
            (IntegerPattern integer _)
                (state-lift (string-from-int32 integer))
            (ConstructorPattern name Empty _)
                (state-lift name)
            (ConstructorPattern name patterns _)
                ((translate-constructor translate-pattern name) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (state-flatmap (fn (translated-patterns)
                 (state-map     (fn (translated-expression)
                                    (join (list translated-patterns (space) translated-expression)))
                                (translate-expression expression)))
                                (translate-pattern pattern))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           state-all
           (state-map (string-join (space)))
           (state-flatmap (fn (rules)
           (state-map     (fn (translated-expression)
                              (list (match-string) translated-expression rules))
                          (translate-expression expression))))
           (state-map (string-join (space)))))

(def translate-closure-apply (expressions)
     ((pipe list-size
            string-from-int32
            (list-concat (data-apply))
            (fn (application)
                (Cons application expressions))
            (string-join (space))
            wrap-in-brackets)
        expressions))

(def translate-function-application' (translate-expression expressions)
     ((pipe (list-map translate-expression)
            state-all
            (state-map-with-state (fn (expressions state)
                                      (translate-closure-apply expressions))))
        expressions))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Identifier name _) rest)
                    (match (string-equal? name (pipe-string))
                           True  (state-map wrap-in-brackets ((translate-pipe translate-expression) rest))
                           False
                    (match (string-equal? name (list-string))
                           True  ((translate-list translate-expression) rest)
                           False (translate-function-application' translate-expression expressions)))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (wrap-in-brackets (string-join (space) arguments)))

(def translate-lambda (translate-expression arguments expression)
     (state-flatmap (fn (argument-list)
     (state-map     (fn (translated-expression)
                        (join (list (fn-string) argument-list translated-expression)))
                    (state-lift (translate-argument-list arguments))))
                    (translate-expression expression)))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (state-map wrap-in-brackets (translate-lambda translate-expression arguments expression))
            (Constructor name Empty _)
                (state-lift name)
            (Constructor name expressions _)
                ((translate-constructor translate-expression name) expressions)
            (FunctionApplication expressions _)
                (translate-function-application translate-expression expressions)
            (IntegerConstant integer _)
                (state-lift (string-from-int32 integer))
            (Identifier name _)
                (state-lift name)
            (Match expression rules _)
                (state-map wrap-in-brackets ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (prefix name arguments expression)
     (state-flatmap (fn (argument-list)
     (state-flatmap (fn (translated-expression)
     (state-map     (pipe (string-join (space))
                          wrap-in-brackets)
                    (state-lift (list (prefix) name argument-list translated-expression))))
                    (translate-expression expression)))
                    (state-lift (translate-argument-list arguments))))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition name arguments expression _)
                   (state-modify (compiler-state-add-function name definition)
                                 (translate-function-definition def-string name arguments expression))
            (ExportDefinition name arguments expression _)
                   (state-modify (compiler-state-add-function name definition)
                                 (translate-function-definition export-string name arguments expression))
            (TypeDefinition name parameters constructors _)
                   (state-lift (stringify (definitions-to-sexps (list (Result definition)))))))

(def translate-definitions (definitions)
     ((pipe (list-map (pipe state-lift (state-flatmap translate-definition)))
            state-all)
        definitions))

(def translate (definitions)
     (state-run (compiler-state-new) (translate-definitions definitions)))

(export to_reuse (definitions _)
        (match (result-concat definitions)
               (Result definitions)  (Result (string-join (newline) (translate definitions)))
               (Error error)         (Error  (parse-error error))))
