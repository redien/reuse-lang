
(def sym-sparkle-x () -1000)
(def sym-cons () -1001)
(def sym-empty () -1002)
(def sym-list () -1003)
(def sym-pipe () -1004)

(def with-local-transform-keywords (dictionary)
     (dictionary-set (data-sparkle-x) (Pair (sym-sparkle-x) (data-sparkle-x))
     (dictionary-set (data-Cons) (Pair (sym-cons) (data-Cons))
     (dictionary-set (data-Empty) (Pair (sym-empty) (data-Empty))
     (dictionary-set (data-list) (Pair (sym-list) (data-list))
     (dictionary-set (data-pipe) (Pair (sym-pipe) (data-pipe))
     dictionary))))))

(def expression-is-symbol? (symbol-id expression)
     (match expression
            (Identifier (Sym id _ __ ___))
                (= symbol-id id)
            _
                False))

(def first-expression-is-symbol? (symbol-id expressions)
     ((pipe (maybe-map (expression-is-symbol? symbol-id))
            (maybe-else (fn () False)))
        (list-first expressions)))

(def transform-special-form (symbol-id transformer definition)
     (over-definition-expressions
     (over-subexpressions
     (over-function-application
         (fn (expressions range)
             (result-return (match (first-expression-is-symbol? symbol-id expressions)
                                   True   (transformer (definition-module definition) (list-rest expressions) range)
                                   False  (FunctionApplication expressions range))))))
         definition))

(def transform-special-forms (symbol-id transformer definitions)
     (result-concat (list-map (transform-special-form symbol-id transformer) definitions)))

(def transform-pipe (module expressions range)
     (Lambda (list (Sym (sym-sparkle-x) (data-sparkle-x) module range))
             (list-foldl (fn (expression composed)
                             (FunctionApplication (list expression composed) range))
                         (Identifier (Sym (sym-sparkle-x) (data-sparkle-x) module range))
                         expressions)
             range))

(def transform-list (module expressions range)
     (list-foldr (fn (expression composed)
                     (Constructor (Sym (sym-cons) (data-Cons) module range) (list expression composed) range))
                 (Constructor (Sym (sym-empty) (data-Empty) module range) Empty range)
                 expressions))

(def local-transforms (definitions)
     (result-bind definitions (fn (definitions)
     (result-bind (transform-special-forms (sym-pipe) transform-pipe definitions) (fn (definitions)
     (result-bind (transform-special-forms (sym-list) transform-list definitions) (fn (definitions)
     (result-return definitions))))))))
