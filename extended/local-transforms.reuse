
(def sym-sparkle-x () -1000)

(def expression-is-symbol? (symbol-name expression)
     (match expression
            (Identifier id name __)
                (string-equal? symbol-name name)
            _
                False))

(def first-expression-is-symbol? (symbol-name expressions)
     ((pipe (maybe-map (expression-is-symbol? symbol-name))
            (maybe-else (fn () False)))
        (list-first expressions)))

(def transform-special-form (symbol-name transformer definition)
     (over-definition-expressions
     (over-subexpressions
     (over-function-application
         (fn (expressions range)
             (result-return (match (first-expression-is-symbol? (symbol-name) expressions)
                                   True   (transformer (list-rest expressions) range)
                                   False  (FunctionApplication expressions range))))))
         definition))

(def transform-special-forms (symbol-name transformer definitions)
     (result-concat (list-map (transform-special-form symbol-name transformer) definitions)))

(def transform-pipe (expressions range)
     (Lambda (list (data-sparkle-x))
             (list-foldl (fn (expression composed)
                             (FunctionApplication (list expression composed) range))
                         (Identifier (sym-sparkle-x) (data-sparkle-x) range)
                         expressions)
             range))

(def transform-list (expressions range)
     (list-foldr (fn (expression composed)
                     (Constructor (data-Cons) (list expression composed) range))
                 (Constructor (data-Empty) Empty range)
                 expressions))

(def local-transforms (definitions)
     (result-bind definitions (fn (definitions)
     (result-bind (transform-special-forms data-pipe transform-pipe definitions) (fn (definitions)
     (result-bind (transform-special-forms data-list transform-list definitions) (fn (definitions)
     (result-return definitions))))))))
