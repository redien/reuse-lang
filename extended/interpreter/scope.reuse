
(typ (scope expression iterable) (Scope (dictionary (value expression (scope expression iterable) iterable))))

(def scope-empty ()
     (Scope (dictionary-empty)))

(def scope-add (variables scope)
     (match scope
            (Scope dictionary)
                (Scope (list-foldl (fn (pair dictionary)
                                       (match pair
                                              (Pair argument value)
                                                  (dictionary-set argument value dictionary)))
                                   dictionary
                                   variables))))

(def scope-concat (a b)
     (match a
            (Scope a)
                (scope-add (dictionary-entries a) b)))

(def scope-get (name scope)
     (match scope
            (Scope dictionary)
                (dictionary-get name dictionary)))

(def scope-add-definitions (definitions scope)
     (match scope
            (Scope dictionary)
                (Scope (list-foldl (fn (definition dictionary)
                                       (match definition
                                              (FunctionDefinition (Sym id _ __ ___) arguments expression ____)
                                                  (dictionary-set (definition-name definition)
                                                                  (ValueFunction arguments expression)
                                                                  dictionary)
                                              _
                                                  dictionary))
                                   dictionary
                                   definitions))))
