
(def return (x) (Result x))
(def bind (xs f) (result-bind xs f))
(def let (x f) (f x))
(def flatmap (f xs) (result-flatmap f xs))
(def sequence (xs) (result-concat xs))
(def map (f xs) (result-map f xs))

(def eval-error ()
     (Error (string-of-char 45)))

(def case-matches-expression (value case)
     (match (Pair value case)
            (Pair (ValueInteger a) (Pair (IntegerPattern b _2) _3))
                (= a b)
            (Pair (ValueConstructor name arguments) (Pair (ConstructorPattern name-pattern patterns _2) _3))
                (string-equal? name name-pattern)
            (Pair _1 (Pair (Capture _2 _3) _4))
                True
            _
                False))

(def case-capture (pair)
     (match pair
            (Pair value (IntegerPattern _1 _2))
                Empty
            (Pair (ValueConstructor _1 arguments) (ConstructorPattern _2 patterns _3))
                (list-flatmap case-capture (list-zip arguments patterns))
            (Pair value (Capture name _1))
                (list (Pair name value))
            _
                Empty))

(def pattern-match (eval-expression scope expression cases)
     (match (list-find-first (case-matches-expression expression) cases)
            (Some (Pair pattern branch))
                (eval-expression (scope-add (case-capture (Pair expression pattern)) scope) branch)
            None
                (eval-error)))

(def eval-int32-operator (operator arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) Empty))
                (return (ValueInteger (operator a b)))
            _
                (eval-error)))

(def eval-int32-less-than (arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) (Cons first (Cons second Empty))))
                (match (< a b)
                       True   (return first)
                       False  (return second))
            _
                (eval-error)))

(def eval-function-application (eval-expression arguments values scope expression)
     (match (< (list-size values) (list-size arguments))
            True
                (return (ValueClosure (list-skip (list-size values) arguments)
                                      expression
                                      (scope-add (list-zip arguments values) scope)))
            False
                (eval-expression (scope-add (list-zip arguments values) scope)
                                 expression)))

(def eval-expression (scope expression)
     (match expression
            (IntegerConstant value _)
                (return (ValueInteger value))
            (Identifier name _)
                (match (scope-get name scope)
                       (Some value)
                            (return value)
                       None
                            (eval-error))
            (Constructor name arguments _)
                (bind (sequence (list-map (eval-expression scope) arguments)) (fn (values)
                (return (ValueConstructor name values))))
            (Lambda arguments expression _)
                (return (ValueClosure arguments expression scope))
            (FunctionApplication expressions _)
                (bind (sequence (list-map (eval-expression scope) expressions)) (fn (values)
                (match values
                        (Cons (ValueClosure arguments expression closed-scope) parameters)
                            (eval-function-application eval-expression arguments parameters (scope-concat scope closed-scope) expression)
                        (Cons (ValueIntrinsic evaluator) parameters)
                            (evaluator (list-rest values))
                        _
                            (eval-error))))
            (Match expression cases _)
                (bind (eval-expression scope expression) (fn (expression)
                (pattern-match eval-expression scope expression cases)))))

(def eval (scope values)
     (match (scope-get (data-main) scope)
            (Some (ValueClosure arguments expression __))
                (eval-expression (scope-add (list-zip arguments values) scope)
                                 expression)
            _
                (eval-error)))

(def build-scope (definitions)
     ((pipe validate-reserved-identifiers
            local-transforms
            sequence
            (map scope-from-definitions))
        definitions))

(def add-intrinsics (scope)
     (scope-add (list (Pair (data-int32-less-than)  (ValueIntrinsic eval-int32-less-than))
                      (Pair (data-percent)          (ValueIntrinsic (eval-int32-operator %)))
                      (Pair (data-plus)             (ValueIntrinsic (eval-int32-operator +)))
                      (Pair (data-minus)            (ValueIntrinsic (eval-int32-operator -)))
                      (Pair (data-slash)            (ValueIntrinsic (eval-int32-operator /)))
                      (Pair (data-multiply)         (ValueIntrinsic (eval-int32-operator *))))
                scope))

(def parse-files (files)
     (list-flatmap (pipe parse sexps-to-definitions) files))

(def source-to-scope (files)
     (map add-intrinsics (build-scope (stringify-parse-errors (parse-files files)))))

(def main-takes-argument (scope)
     (match (scope-get (data-main) scope)
            (Some (ValueClosure (Cons _ __) ___ ____))
                True
            _
                False))

(def box-maybe (maybe)
     (match maybe
            (Some x)  (ValueConstructor (data-Some) (list (ValueInteger x)))
            None      (ValueConstructor (data-None) Empty)))

(def box-get (collection get arguments)
     (match arguments
            (Cons _ (Cons (ValueInteger i) Empty))
                (return (box-maybe (get collection i)))
            _
                (eval-error)))

(def box-next (box-indexed-iterator iterator collection next arguments)
     (match arguments
            (Cons _ (Cons (ValueInteger i) Empty))
                (return (box-indexed-iterator (next iterator collection i)))
            _
                (eval-error)))

(def box-indexed-iterator (indexed-iterator)
     (match indexed-iterator
            (IndexedIterator collection i get next)
                (ValueConstructor (data-IndexedIterator)
                                  (list (ValueInteger 0)
                                        (ValueInteger i)
                                        (ValueIntrinsic (box-get collection get))
                                        (ValueIntrinsic (box-next box-indexed-iterator indexed-iterator collection next))))))

(typ (event state) (EventArguments (list string))
                   (EventReadStdin (indexed-iterator int32) state)
                   (EventReadFiles (list (pair string (indexed-iterator int32))) state))

(typ (command state) (CommandError string)
                     (CommandOutput string)
                     (CommandReadStdin state)
                     (CommandReadFiles (list string) state))

(def output-result (result)
     (match result
            (Result value)
                (CommandOutput (value-to-string value))
            (Error error)
                (CommandError error)))

(def on-event (event)
     (match event
            (EventArguments arguments)
                (match (parse-arguments arguments)
                       (CliArguments _ Empty)
                            (CommandError (data-no-input-files))
                       (CliArguments arguments input-files)
                            (CommandReadFiles input-files (scope-empty))
                       (CliErrorMissingValue key)
                           (CommandError key))
            (EventReadStdin stdin state)
                (output-result (eval state (list (box-indexed-iterator stdin))))
            (EventReadFiles file-entries state)
                (match (source-to-scope (list-map pair-right file-entries))
                        (Result scope)
                            (match (main-takes-argument scope)
                                    True   (CommandReadStdin scope)
                                    False  (output-result (eval scope Empty)))
                        (Error error)
                            (CommandError error))))
