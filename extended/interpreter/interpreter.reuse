
(def return (x) (Result x))
(def bind (xs f) (result-bind xs f))
(def let (x f) (f x))
(def flatmap (f xs) (result-flatmap f xs))
(def sequence (xs) (result-concat xs))
(def map (f xs) (result-map f xs))

(def eval-error ()
     (Error (data-error-generic)))

(def pattern-matches-value (value pattern)
     (match (Pair value pattern)
            (Pair (ValueInteger a) (IntegerPattern b _2))
                (= a b)
            (Pair (ValueConstructor name arguments) (ConstructorPattern pattern-symbol patterns _2))
                (and (string-equal? name (symbol-name pattern-symbol))
                     (list-every? (pair-map pattern-matches-value) (list-zip arguments patterns)))
            (Pair _1 (Capture _2))
                True
            _
                False))

(def case-capture (pair)
     (match pair
            (Pair value (IntegerPattern _1 _2))
                Empty
            (Pair (ValueConstructor _1 arguments) (ConstructorPattern _2 patterns _3))
                (list-flatmap case-capture (list-zip arguments patterns))
            (Pair value (Capture sym))
                (list (Pair (symbol-name sym) value))
            _
                Empty))

(def render-stack-trace (stack-trace)
     (string-join (string-of-char 10)
                  (list-map (pipe (string-concat (data-space))
                                  (string-concat (data-space))
                                  (string-concat (data-space))
                                  (string-concat (data-space)))
                            stack-trace)))

(def add-stack-trace (expression values stack-trace)
     (maybe-or-else stack-trace
     (maybe-map (fn (expression)
                    (Cons (string-concat (string-append 32 (stringify-sexps (list-from (expression-to-sexp expression))))
                                         (string-join (data-space) (list-map value-to-string values)))
                          stack-trace))
                expression)))

(def pattern-match (eval-expression scope stack-trace value cases)
     (match (list-find-first (fn (case) (pattern-matches-value value (pair-left case))) cases)
            (Some (Pair pattern branch))
                (eval-expression (scope-add (case-capture (Pair value pattern)) scope) stack-trace branch)
            None
                (Error (string-join (string-empty)
                                    (list (data-error-unmatched-case)
                                          (string-of-char 10)
                                          (data-space) (data-space) (data-space) (data-space)
                                          (value-to-string value)
                                          (string-of-char 10)
                                          (data-error-unmatched-case2)
                                          (string-of-char 10)
                                          (data-space) (data-space) (data-space) (data-space)
                                          (string-join (data-space)
                                                       (list-map (pipe pair-left
                                                                       pattern-to-sexp
                                                                       list-from
                                                                       stringify-sexps)
                                                                 cases))
                                          (string-of-char 10)
                                          (data-error-stack-trace)
                                          (string-of-char 10)
                                          (render-stack-trace stack-trace))))))

(def eval-int32-operator (operator arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) Empty))
                (return (ValueInteger (operator a b)))
            _
                (Error (data-error-int32-op))))

(def eval-int32-less-than (arguments)
     (match arguments
            (Cons (ValueInteger a) (Cons (ValueInteger b) (Cons first (Cons second Empty))))
                (match (< a b)
                       True   (return first)
                       False  (return second))
            _
                (Error (data-error-int32-op))))

(def eval-function-application (eval-expression stack-trace arguments values scope expression)
     (match (< (list-size values) (list-size arguments))
            True
                (return (ValueClosure (list-skip (list-size values) arguments)
                                      expression
                                      (scope-add (list-zip arguments values) scope)))
            False
                (eval-expression (scope-add (list-zip arguments values) scope)
                                 stack-trace
                                 expression)))

(def eval-expression (scope stack-trace expression)
     (match expression
            (IntegerConstant value _)
                (return (ValueInteger value))
            (Identifier sym)
                (match (scope-get (symbol-name sym) scope)
                       (Some value)
                            (return value)
                       None
                            (Error (string-join (string-empty)
                                                (list (data-error-no-symbol)
                                                      (data-space)
                                                      (symbol-name sym)
                                                      (string-of-char 10)
                                                      (data-error-stack-trace)
                                                      (string-of-char 10)
                                                      (render-stack-trace stack-trace)))))
            (Constructor sym arguments _)
                (bind (sequence (list-map (eval-expression scope stack-trace) arguments)) (fn (values)
                (return (ValueConstructor (symbol-name sym) values))))
            (Lambda arguments expression _)
                (return (ValueClosure (list-map symbol-name arguments) expression scope))
            (FunctionApplication expressions _)
                (bind (sequence (list-map (eval-expression scope stack-trace) expressions)) (fn (values)
                (match values
                        (Cons (ValueClosure arguments body closed-scope) parameters)
                            (eval-function-application eval-expression
                                                       (add-stack-trace (list-first expressions) parameters stack-trace)
                                                       arguments
                                                       parameters
                                                       closed-scope
                                                       body)
                        (Cons (ValueFunction arguments body) parameters)
                            (eval-function-application eval-expression
                                                       (add-stack-trace (list-first expressions) parameters stack-trace)
                                                       arguments
                                                       parameters
                                                       scope
                                                       body)
                        (Cons (ValueIntrinsic evaluator) parameters)
                            (evaluator (list-rest values))
                        _
                            (eval-error))))
            (Match expression cases _)
                (bind (eval-expression scope stack-trace expression) (fn (expression)
                (pattern-match eval-expression scope stack-trace expression cases)))))

(def eval (scope values)
     (match (scope-get (data-main) scope)
            (Some (ValueFunction arguments expression))
                (eval-expression (scope-add (list-zip arguments values) scope)
                                 Empty
                                 expression)
            _
                (eval-error)))

(def add-intrinsics (scope)
     (scope-add (list (Pair (data-int32-less-than)  (ValueIntrinsic eval-int32-less-than))
                      (Pair (data-percent)          (ValueIntrinsic (eval-int32-operator %)))
                      (Pair (data-plus)             (ValueIntrinsic (eval-int32-operator +)))
                      (Pair (data-minus)            (ValueIntrinsic (eval-int32-operator -)))
                      (Pair (data-slash)            (ValueIntrinsic (eval-int32-operator /)))
                      (Pair (data-multiply)         (ValueIntrinsic (eval-int32-operator *)))
                      (Pair (data-ampersand)        (ValueIntrinsic (eval-int32-operator &))))
                scope))

(def definitions-to-scope (definitions)
     (scope-add-definitions definitions (add-intrinsics (scope-empty))))

(def main-takes-argument (scope)
     (match (scope-get (data-main) scope)
            (Some (ValueFunction (Cons _ __) ___))
                True
            _
                False))

(def box-maybe (maybe)
     (match maybe
            (Some x)  (ValueConstructor (data-Some) (list (ValueInteger x)))
            None      (ValueConstructor (data-None) Empty)))

(def box-get (collection get arguments)
     (match arguments
            (Cons _ (Cons (ValueInteger i) Empty))
                (return (box-maybe (get collection i)))
            _
                (eval-error)))

(def box-next' (value iterator)
     (return (ValueConstructor (data-Pair)
                               (list (box-maybe value)
                                     (ValueNativeIterator iterator)))))

(def box-next (arguments)
     (match arguments
            (Cons (ValueNativeIterator iterator) Empty)
                (match (indexed-iterator-next iterator)
                       (Pair value next-iterator)
                            (box-next' value next-iterator))
            _
                (eval-error)))

(def box-iterable-class (iterator)
     (ValueConstructor (data-IterableClass)
                       (list (ValueIntrinsic box-next))))

(def box-indexed-iterator (iterator)
     (ValueConstructor (data-IndexedIterator)
                       (list (box-iterable-class)
                             (ValueNativeIterator iterator)
                             (ValueInteger (indexed-iterator-index iterator)))))



(typ (event iterator state) (EventArguments (list string))
                            (EventReadStdin iterator state)
                            (EventReadFiles (list (source-file iterator)) state))

(typ (command state) (CommandError string)
                     (CommandOutput string)
                     (CommandReadStdin state)
                     (CommandReadFiles (list string) (list string) state))

(def output-result (result)
     (match result
            (Result value)
                (CommandOutput (value-to-string value))
            (Error error)
                (CommandError error)))

(def process-definitions (scope)
     (match (main-takes-argument scope)
            True   (CommandReadStdin scope)
            False  (output-result (eval scope Empty))))

(def on-event (event)
     (match event
            (EventArguments arguments)
                (match (parse-arguments arguments)
                       (CliArguments _ Empty)
                            (CommandError (data-no-input-files))
                       (CliArguments arguments input-files)
                            (CommandReadFiles input-files Empty (scope-empty))
                       (CliErrorMissingValue key)
                            (CommandError key))
            (EventReadStdin stdin state)
                (output-result (eval state (list (box-indexed-iterator stdin))))
            (EventReadFiles source-files state)
                (match (parse-source-files False source-files)
                       (Result definitions)
                            (process-definitions (definitions-to-scope definitions))
                       (Error error)
                            (CommandError error))))
