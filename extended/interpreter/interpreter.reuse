
(def return (x) (Result x))
(def bind (xs f) (result-bind xs f))
(def let (x f) (f x))
(def flatmap (f xs) (result-flatmap f xs))
(def sequence (xs) (result-concat xs))
(def map (f xs) (result-map f xs))

(def eval-error ()
     (Error (string-of-char 45)))

(def case-matches-expression (expression case)
     (match (Pair expression case)
            (Pair (IntegerConstant a _1) (Pair (IntegerPattern b _2) _3))
                (= a b)
            (Pair (Constructor name arguments _1) (Pair (ConstructorPattern name-pattern patterns _2) _3))
                (string-equal? name name-pattern)
            (Pair _1 (Pair (Capture _2 _3) _4))
                True
            _
                False))

(def case-capture (pair)
     (match pair
            (Pair expression (IntegerPattern _2 _3))
                Empty
            (Pair (Constructor _1 arguments _2) (ConstructorPattern _3 patterns _4))
                (list-flatmap case-capture (list-zip arguments patterns))
            (Pair expression (Capture name _3))
                (list (Pair name expression))
            _
                Empty))

(def pattern-match (eval-expression scope expression cases)
     (match (list-find-first (case-matches-expression expression) cases)
            (Some (Pair pattern branch))
                (eval-expression (scope-add (case-capture (Pair expression pattern)) scope) branch)
            None
                (eval-error)))

(def eval-int32-operator (operator arguments)
     (match arguments
            (Cons (IntegerConstant a __) (Cons (IntegerConstant b ___) Empty))
                (return (IntegerConstant (operator a b) (scope-empty)))
            _
                (eval-error)))

(def eval-int32-less-than (arguments)
     (match arguments
            (Cons (IntegerConstant a __) (Cons (IntegerConstant b ___) (Cons first (Cons second Empty))))
                (match (< a b)
                       True   (return first)
                       False  (return second))
            _
                (eval-error)))

(def special-forms ()
     (dictionary-of (list
        (Pair (data-int32-less-than)  eval-int32-less-than)
        (Pair (data-percent)          (eval-int32-operator %))
        (Pair (data-plus)             (eval-int32-operator +))
        (Pair (data-minus)            (eval-int32-operator -))
        (Pair (data-slash)            (eval-int32-operator /))
        (Pair (data-multiply)         (eval-int32-operator *)))))

(def get-special-form (expressions)
     (match expressions
            (Cons (Identifier name _) __)
                (dictionary-get name (special-forms))
            _
                None))

(def eval-function-application (eval-expression arguments values scope expression)
     (match (< (list-size values) (list-size arguments))
            True
                (return (Lambda (list-skip (list-size values) arguments)
                                expression
                                (scope-add (list-zip arguments values) scope)))
            False
                (eval-expression (scope-add (list-zip arguments values) scope)
                                 expression)))

(def eval-expression (scope expression)
     (match expression
            (IntegerConstant value _)
                (return (IntegerConstant value scope))
            (Identifier name _)
                (match (scope-get name scope)
                       (Some value)
                            (return value)
                       None
                            (eval-error))
            (Constructor name arguments _)
                (bind (sequence (list-map (eval-expression scope) arguments)) (fn (values)
                (return (Constructor name values scope))))
            (Lambda arguments expression _)
                (return (Lambda arguments expression scope))
            (FunctionApplication expressions _)
                (match (get-special-form expressions)
                       (Some evaluator)
                            (bind (sequence (list-map (eval-expression scope) (list-rest expressions))) evaluator)
                       None 
                            (bind (sequence (list-map (eval-expression scope) expressions)) (fn (expressions)
                            (match expressions
                                   (Cons (Lambda arguments expression closed-scope) values)
                                        (eval-function-application eval-expression arguments values (scope-concat scope closed-scope) expression)
                                   _
                                        (eval-error)))))
            (Match expression cases _)
                (bind (eval-expression scope expression) (fn (expression)
                (pattern-match eval-expression scope expression cases)))))

(def eval-main (global-scope)
     (match (scope-get (data-main) global-scope)
            (Some (Lambda _ expression __))
                (eval-expression global-scope expression)
            _
                (eval-error)))

(def eval (definitions source)
     ((pipe validate-reserved-identifiers
            local-transforms
            sequence
            (flatmap (pipe scope-from-definitions
                           eval-main))
            (map (pipe (ast-expression-map-meta (fn (_) (Range 0 0)))
                       expression-to-sexp
                       list-from
                       stringify)))
        definitions))
