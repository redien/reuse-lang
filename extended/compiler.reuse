
(def transform-strings (path content)
     (match (string-gen content)
            (Result string)  (indexed-iterator-from-iterable (string-iterable) string)
            (Error error)    (indexed-iterator-from-iterable (string-iterable) (string-empty))))

(def parse-reuse-file (file)
     (match file
            (SourceFile module path content)
                (sexps-to-definitions module (parse (keywords) content))))

(def parse-strings-file (file)
     (match file
            (SourceFile module path content)
                (sexps-to-definitions module (parse (keywords) (transform-strings path content)))))

(def parse-source-file (file)
     (match (source-file-type file)
            SourceFileTypeStrings  (parse-strings-file file)
            _                      (parse-reuse-file file)))

(def parse-files (files)
     (parser-sequence (list-map parse-source-file files)))

(def source-to-definitions (minimal? files)
     ((pipe parse-files
            parser-run
            (result-map list-flatten)
            stringify-parse-errors
            (match minimal?
                   True   id
                   False  validate-reserved-identifiers)
            local-transforms)
        files))

(def target-language? (file)
     (= (source-file-type file) SourceFileTypeTargetLanguage))

(def split-source-files (files)
     (Pair (list-filter target-language? files)
           (list-filter (. not target-language?) files)))

(typ compiler-parameters (CompilerParameters boolean boolean))

(def compile (file-entries module-name parameters)
     (match (Pair (split-source-files file-entries) parameters)
            (Pair (Pair target-language-files source-files) (CompilerParameters as-minimal use-stdlib))
                  (match (source-to-definitions as-minimal source-files)
                         definitions
                              (result-map ((flip string-concat) (string-join (string-empty) (list-map (. string-from-indexed-iterator source-file-content) target-language-files)))
                                          (generate-source definitions module-name)))))
