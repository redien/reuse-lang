
(def validate-reserved-identifiers-when-not (as-minimal)
     (match as-minimal
            True   (fn (definitions) definitions)
            False  validate-reserved-identifiers))

(def transform-strings (path content)
     (match (string-equal? (string-substring (- (string-size path) 8) 8 path) (data-strings-file-ending))
            True
                (match (string-gen content)
                       (Result string)  (indexed-iterator-from-iterable (string-iterable) string)
                       (Error error)    (indexed-iterator-from-iterable (string-iterable) (string-empty)))
            False
                content))

(def parse-files (files)
     (list-flatmap (fn (entry)
                       (match entry
                              (Pair path content)  (sexps-to-definitions (parse (transform-strings path content)))))
                   files))

(def source-to-definitions (as_minimal files)
     ((pipe parse-files
            stringify-parse-errors
            (validate-reserved-identifiers-when-not as_minimal)
            local-transforms)
        files))

(typ (event iterator state) (EventArguments (list string))
                            (EventReadFiles (list (pair string iterator)) state))

(typ (command state) (CommandError string)
                     (CommandOutput string)
                     (CommandWriteFiles (list (pair string string)))
                     (CommandReadFiles (list string) state))

(def standard-library? (arguments)
     (match (dictionary-get (data-stdlib) arguments)
            (Some value)  (string-equal? value (data-true))
            None          True))

(def minimal? (arguments)
     (match (dictionary-get (data-minimal) arguments)
            (Some value)  (string-equal? value (data-true))
            None          False))

(def module-name-from-filename (filename)
     (string-take (- (string-size filename) 3) filename))

(def filename-from-path (path)
     (match (list-last (string-split 47 path))
            (Some filename)  filename
            None             path))

(def on-event (event)
     (match event
            (EventArguments arguments)
                (match (parse-arguments arguments)
                       (CliArguments _ Empty)
                            (CommandError (data-no-input-files))
                       (CliArguments arguments input-files)
                            (CommandReadFiles input-files (dictionary-of arguments))
                       (CliErrorMissingValue key)
                            (CommandError key))
            (EventReadFiles file-entries arguments)
                (match (dictionary-get (data-output-key) arguments)
                       (Some output-path)
                            (match (source-to-definitions (minimal? arguments) file-entries)
                                   definitions
                                        (match (compile (standard-library? arguments) definitions (module-name-from-filename (filename-from-path output-path)))
                                               (Result source)  (CommandWriteFiles (list (Pair output-path source)))
                                               (Error error)    (CommandError error)))
                       None
                            (CommandError (data-no-output-path)))))
