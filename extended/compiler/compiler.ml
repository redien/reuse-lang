type type_boolean = CTrue | CFalse;;
let rec fn_not = fun a -> (match a with CTrue -> CFalse | CFalse -> CTrue);;
let rec fn_and = fun a b -> (match a with CTrue -> b | CFalse -> CFalse);;
let rec fn_or = fun a b -> (match a with CTrue -> CTrue | CFalse -> b);;
let rec fn__60 = fun a b -> if a < b then CTrue else CFalse;;
let rec fn__62 = fun a b -> fn__60 b a;;
let rec fn__61 = fun a b -> fn_not (fn_or (fn__60 a b) (fn__62 a b));;
let rec fn__60_61 = fun a b -> fn_or (fn__60 a b) (fn__61 a b);;
let rec fn__62_61 = fun a b -> fn_or (fn__62 a b) (fn__61 a b);;
type ('a, 'b) type_pair = CPair : 'a * 'b ->  ('a, 'b) type_pair;;
let rec fn_pair_45left = fun type_pair -> (match type_pair with CPair (ptrn_x, ptrn__95) -> ptrn_x);;
let rec fn_pair_45right = fun type_pair -> (match type_pair with CPair (ptrn__95, ptrn_x) -> ptrn_x);;
type ('a) type_maybe = CSome : 'a ->  ('a) type_maybe | CNone;;
let rec fn_maybe_45map = fun f type_maybe -> (match type_maybe with CSome (ptrn_x) -> CSome (f ptrn_x) | CNone -> CNone);;
let rec fn_maybe_45flatmap = fun f type_maybe -> (match type_maybe with CSome (ptrn_x) -> f ptrn_x | CNone -> CNone);;
let rec fn_maybe_45filter = fun f type_maybe -> (match type_maybe with CSome (ptrn_x) -> (match f ptrn_x with CTrue -> type_maybe | CFalse -> CNone) | CNone -> CNone);;
let rec fn_maybe_45else = fun f type_maybe -> (match type_maybe with CNone -> f () | CSome (ptrn_x) -> ptrn_x);;
type ('element) type_indexed_45iterator = CIndexedIterator : 'collection * int32 * ('collection -> int32 -> ('element) type_maybe) * (('element) type_indexed_45iterator -> 'collection -> int32 -> ('element) type_indexed_45iterator) ->  ('element) type_indexed_45iterator;;
let rec fn_indexed_45iterator_45next = fun iterator -> (match iterator with CIndexedIterator (ptrn_collection, ptrn_index, ptrn__95, ptrn_next) -> ptrn_next iterator ptrn_collection ptrn_index);;
let rec fn_indexed_45iterator_45get = fun iterator -> (match iterator with CIndexedIterator (ptrn_collection, ptrn_index, ptrn_get, ptrn__95) -> ptrn_get ptrn_collection ptrn_index);;
let rec fn_indexed_45iterator_45index = fun iterator -> (match iterator with CIndexedIterator (ptrn__95, ptrn_index, ptrn__95_95, ptrn__95_95_95) -> ptrn_index);;
type ('a) type_list = CCons : 'a * ('a) type_list ->  ('a) type_list | CEmpty;;
let rec fn_list_45first = fun type_list -> (match type_list with CCons (ptrn_x, ptrn__95) -> CSome (ptrn_x) | CEmpty -> CNone);;
let rec fn_list_45rest = fun type_list -> (match type_list with CCons (ptrn__95, ptrn_rest) -> ptrn_rest | CEmpty -> CEmpty);;
let rec fn_list_45empty_63 = fun type_list -> (match type_list with CCons (ptrn__95, ptrn__95_95) -> CFalse | CEmpty -> CTrue);;
let rec fn_list_45reverse_39 = fun type_list new_45list -> (match type_list with CEmpty -> new_45list | CCons (ptrn_x, ptrn_xs) -> fn_list_45reverse_39 ptrn_xs (CCons (ptrn_x, new_45list)));;
let rec fn_list_45reverse = fun type_list -> fn_list_45reverse_39 type_list CEmpty;;
let rec fn_list_45concat = fun a b -> (match a with CEmpty -> b | CCons (ptrn_x, ptrn_xs) -> CCons (ptrn_x, fn_list_45concat ptrn_xs b));;
let rec fn_list_45foldr = fun f initial type_list -> (match type_list with CEmpty -> initial | CCons (ptrn_x, ptrn_xs) -> f ptrn_x (fn_list_45foldr f initial ptrn_xs));;
let rec fn_list_45foldl = fun f initial type_list -> (match type_list with CEmpty -> initial | CCons (ptrn_x, ptrn_xs) -> fn_list_45foldl f (f ptrn_x initial) ptrn_xs);;
let rec fn_list_45map = fun f type_list -> (match type_list with CEmpty -> CEmpty | CCons (ptrn_x, ptrn_xs) -> CCons (f ptrn_x, fn_list_45map f ptrn_xs));;
let rec fn_list_45flatmap = fun f type_list -> (match type_list with CEmpty -> CEmpty | CCons (ptrn_x, ptrn_xs) -> fn_list_45concat (f ptrn_x) (fn_list_45flatmap f ptrn_xs));;
let rec fn_list_45filter = fun f type_list -> fn_list_45reverse (fn_list_45foldl (fun ptrn_x ptrn_xs -> (match f ptrn_x with CTrue -> CCons (ptrn_x, ptrn_xs) | CFalse -> ptrn_xs)) CEmpty type_list);;
let rec fn_list_45any_63 = fun f type_list -> fn_not (fn_list_45empty_63 (fn_list_45filter f type_list));;
let rec fn_list_45indexed_45iterator_45get = fun ptrn_collection ptrn__95 -> (match ptrn_collection with CCons (ptrn_x, ptrn__95) -> CSome (ptrn_x) | CEmpty -> CNone);;
let rec fn_list_45indexed_45iterator_45next = fun iterator ptrn_collection ptrn_index -> (match ptrn_collection with CCons (ptrn__95, ptrn_xs) -> CIndexedIterator (ptrn_xs, Int32.add ptrn_index (Int32.of_int (1)), fn_list_45indexed_45iterator_45get, fn_list_45indexed_45iterator_45next) | CEmpty -> iterator);;
let rec fn_list_45to_45indexed_45iterator = fun type_list -> CIndexedIterator (type_list, (Int32.of_int (0)), fn_list_45indexed_45iterator_45get, fn_list_45indexed_45iterator_45next);;
let rec fn_string_45of_45char = fun character -> CCons (character, CEmpty);;
let rec fn_string_45first = fun string -> fn_list_45first string;;
let rec fn_string_45rest = fun string -> fn_list_45rest string;;
let rec fn_string_45concat = fun a b -> (match a with CEmpty -> b | CCons (ptrn_x, ptrn_xs) -> CCons (ptrn_x, fn_string_45concat ptrn_xs b));;
let rec fn__39string_45join_45reducer = fun separator -> fun ptrn_x ptrn_xs -> (match ptrn_xs with CEmpty -> ptrn_x | ptrn__95 -> fn_string_45concat (fn_string_45concat ptrn_x separator) ptrn_xs);;
let rec fn_string_45join = fun separator type_list -> fn_list_45foldr (fn__39string_45join_45reducer separator) CEmpty type_list;;
let rec fn_string_45empty_63 = fun string -> (match string with CEmpty -> CTrue | ptrn__95 -> CFalse);;
let rec fn_string_45equal_63 = fun a b -> (match a with CCons (ptrn_xa, ptrn_xas) -> (match b with CCons (ptrn_xb, ptrn_xbs) -> fn_and (fn__61 ptrn_xa ptrn_xb) (fn_string_45equal_63 ptrn_xas ptrn_xbs) | CEmpty -> fn_string_45empty_63 a) | CEmpty -> fn_string_45empty_63 b);;
let rec fn_string_45point_45is_45digit = fun point -> fn_and (fn__62 point (Int32.of_int (47))) (fn__60 point (Int32.of_int (58)));;
let rec fn_string_45to_45int_51_50_39_39 = fun string_45to_45int_51_50_39 string accumulator ptrn_x -> string_45to_45int_51_50_39 string (CSome (Int32.add (Int32.mul (Int32.of_int (10)) accumulator) (Int32.sub ptrn_x (Int32.of_int (48)))));;
let rec fn_string_45to_45int_51_50_39 = fun string accumulator -> (match string with CEmpty -> accumulator | CCons (ptrn_x, ptrn_rest) -> fn_maybe_45flatmap (fun accumulator -> (fun _x1 -> ((fn_maybe_45flatmap (fn_string_45to_45int_51_50_39_39 fn_string_45to_45int_51_50_39 ptrn_rest accumulator)) ((fn_maybe_45filter fn_string_45point_45is_45digit) _x1))) (CSome (ptrn_x))) accumulator);;
let rec fn_string_45to_45int_51_50 = fun ptrn_string -> (match ptrn_string with CCons (45l, ptrn_string) -> (match fn_string_45empty_63 ptrn_string with CTrue -> CNone | CFalse -> fn_maybe_45map (fun ptrn_x -> Int32.mul (Int32.of_int (-1)) ptrn_x) (fn_string_45to_45int_51_50 ptrn_string)) | ptrn__95 -> fn_string_45to_45int_51_50_39 ptrn_string (CSome ((Int32.of_int (0)))));;
let rec fn_string_45from_45int_51_50_39 = fun integer ptrn_string -> (match fn__62 integer (Int32.of_int (9)) with CTrue -> fn_string_45from_45int_51_50_39 (Int32.div integer (Int32.of_int (10))) (CCons (Int32.add (Int32.rem integer (Int32.of_int (10))) (Int32.of_int (48)), ptrn_string)) | CFalse -> CCons (Int32.add integer (Int32.of_int (48)), ptrn_string));;
let rec fn_string_45from_45int_51_50 = fun integer -> (match fn__60 integer (Int32.of_int (0)) with CTrue -> (match fn__61 integer (Int32.of_int (-2147483648)) with CTrue -> CCons ((Int32.of_int (45)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (49)), CCons ((Int32.of_int (52)), CCons ((Int32.of_int (55)), CCons ((Int32.of_int (52)), CCons ((Int32.of_int (56)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (54)), CCons ((Int32.of_int (52)), CCons ((Int32.of_int (56)), CEmpty))))))))))) | CFalse -> CCons ((Int32.of_int (45)), fn_string_45from_45int_51_50 (Int32.mul integer (Int32.of_int (-1))))) | CFalse -> fn_string_45from_45int_51_50_39 integer CEmpty);;
type ('v, 'e) type_result = CResult : 'v ->  ('v, 'e) type_result | CError : 'e ->  ('v, 'e) type_result;;
let rec fn_result_45result = fun type_result -> CResult (type_result);;
let rec fn_result_45error = fun error -> CError (error);;
let rec fn_result_45first = fun f type_result -> (match type_result with CResult (ptrn_x) -> CResult (f ptrn_x) | CError (ptrn_error) -> CError (ptrn_error));;
let rec fn_result_45second = fun f type_result -> (match type_result with CResult (ptrn_x) -> CResult (ptrn_x) | CError (ptrn_error) -> CError (f ptrn_error));;
let rec fn_result_45flatmap = fun f type_result -> (match type_result with CResult (ptrn_x) -> f ptrn_x | CError (ptrn_error) -> CError (ptrn_error));;
let rec fn_result_45error_63 = fun type_result -> (match type_result with CError (ptrn__95) -> CTrue | ptrn__95 -> CFalse);;
let rec fn_result_45filter_45list = fun type_list -> fn_list_45foldr (fun type_result new_45list -> (match type_result with CResult (ptrn_x) -> CCons (ptrn_x, new_45list) | ptrn__95 -> new_45list)) CEmpty type_list;;
let rec fn_result_45of_45list = fun type_list -> (match fn_list_45filter fn_result_45error_63 type_list with CCons (CError (ptrn_error), ptrn__95) -> CError (ptrn_error) | CCons (CResult (ptrn_error), ptrn__95) -> CResult (CEmpty) | CEmpty -> CResult (fn_result_45filter_45list type_list));;
let rec fn_result_45of_45maybe = fun ptrn_error type_maybe -> (match type_maybe with CSome (ptrn_x) -> CResult (ptrn_x) | CNone -> CError (ptrn_error));;
let rec fn_read_45while_39 = fun predicate iterator ptrn_string -> (match fn_indexed_45iterator_45get iterator with CNone -> CPair (iterator, ptrn_string) | CSome (ptrn_x) -> (match predicate ptrn_x with CTrue -> fn_read_45while_39 predicate (fn_indexed_45iterator_45next iterator) (CCons (ptrn_x, ptrn_string)) | CFalse -> CPair (iterator, ptrn_string)));;
let rec fn_read_45while = fun predicate ptrn_iterator -> (match fn_read_45while_39 predicate ptrn_iterator CEmpty with CPair (ptrn_iterator, CEmpty) -> CPair (ptrn_iterator, CEmpty) | CPair (ptrn_iterator, ptrn_string) -> CPair (ptrn_iterator, fn_list_45reverse ptrn_string));;
let rec fn_whitespace_63 = fun character -> fn_or (fn__61 character (Int32.of_int (32))) (fn_or (fn__61 character (Int32.of_int (13))) (fn__61 character (Int32.of_int (10))));;
let rec fn_atom_45character_63 = fun character -> fn_and (fn_not (fn__61 character (Int32.of_int (40)))) (fn_and (fn_not (fn__61 character (Int32.of_int (41)))) (fn_not (fn_whitespace_63 character)));;
type type_range = CRange : int32 * int32 ->  type_range;;
type type_sexp = CSymbol : (int32) type_list * type_range ->  type_sexp | CList : (type_sexp) type_list * type_range ->  type_sexp;;
type ('i, 'e) type_parse_45result = CParseNext : 'i * 'e ->  ('i, 'e) type_parse_45result | CParseOut : 'i ->  ('i, 'e) type_parse_45result | CParseEnd;;
let rec fn_symbol_45range = fun start _end -> CRange (fn_indexed_45iterator_45index start, fn_indexed_45iterator_45index _end);;
let rec fn_parse_45symbol = fun ptrn_iterator -> (match fn_read_45while fn_atom_45character_63 ptrn_iterator with CPair (ptrn__95, CEmpty) -> CParseOut (ptrn_iterator) | CPair (ptrn_next_45iterator, ptrn_name) -> CParseNext (ptrn_next_45iterator, CSymbol (ptrn_name, fn_symbol_45range ptrn_iterator ptrn_next_45iterator)));;
let rec fn_list_45range = fun start _end -> CRange (Int32.sub (fn_indexed_45iterator_45index start) (Int32.of_int (1)), fn_indexed_45iterator_45index _end);;
let rec fn_parse_45list = fun ptrn_iterator parse_45sexps -> (match parse_45sexps ptrn_iterator CEmpty with CPair (ptrn_next_45iterator, ptrn_expressions) -> CParseNext (ptrn_next_45iterator, CList (ptrn_expressions, fn_list_45range ptrn_iterator ptrn_next_45iterator)));;
let rec fn_parse_45expression = fun ptrn_iterator parse_45sexps -> (match fn_indexed_45iterator_45get ptrn_iterator with CNone -> CParseEnd | CSome (40l) -> fn_parse_45list (fn_indexed_45iterator_45next ptrn_iterator) parse_45sexps | CSome (41l) -> CParseOut (fn_indexed_45iterator_45next ptrn_iterator) | CSome (ptrn_x) -> (match fn_whitespace_63 ptrn_x with CTrue -> fn_parse_45expression (fn_indexed_45iterator_45next ptrn_iterator) parse_45sexps | CFalse -> fn_parse_45symbol ptrn_iterator));;
let rec fn_parse_45sexps_39 = fun ptrn_iterator ptrn_expressions -> (match fn_parse_45expression ptrn_iterator fn_parse_45sexps_39 with CParseEnd -> CPair (ptrn_iterator, fn_list_45reverse ptrn_expressions) | CParseOut (ptrn_iterator) -> CPair (ptrn_iterator, fn_list_45reverse ptrn_expressions) | CParseNext (ptrn_iterator, type_result) -> fn_parse_45sexps_39 ptrn_iterator (CCons (type_result, ptrn_expressions)));;
let rec parse = fun input -> (match fn_parse_45sexps_39 (fn_list_45to_45indexed_45iterator input) CEmpty with CPair (ptrn__95, ptrn_expressions) -> ptrn_expressions);;
let rec fn_wrap_45in_45brackets = fun ptrn_string -> fn_string_45concat (fn_string_45of_45char (Int32.of_int (40))) (fn_string_45concat ptrn_string (fn_string_45of_45char (Int32.of_int (41))));;
let rec fn_stringify_45sexp = fun stringify expression -> (match expression with CSymbol (ptrn_name, ptrn__95) -> ptrn_name | CList (ptrn_expressions, ptrn__95) -> fn_wrap_45in_45brackets (stringify ptrn_expressions));;
let rec stringify = fun ptrn_expressions -> fn_string_45join (fn_string_45of_45char (Int32.of_int (32))) (fn_list_45map (fn_stringify_45sexp stringify) ptrn_expressions);;
let rec fn_def_45string = fun _ -> CCons ((Int32.of_int (100)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (102)), CEmpty)));;
let rec fn_export_45string = fun _ -> CCons ((Int32.of_int (101)), CCons ((Int32.of_int (120)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (116)), CEmpty))))));;
let rec fn_typ_45string = fun _ -> CCons ((Int32.of_int (116)), CCons ((Int32.of_int (121)), CCons ((Int32.of_int (112)), CEmpty)));;
let rec fn_fn_45string = fun _ -> CCons ((Int32.of_int (102)), CCons ((Int32.of_int (110)), CEmpty));;
let rec fn_match_45string = fun _ -> CCons ((Int32.of_int (109)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (104)), CEmpty)))));;
let rec fn_exists_45string = fun _ -> CCons ((Int32.of_int (101)), CCons ((Int32.of_int (120)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (115)), CEmpty))))));;
let rec fn_char_45is_45upper_45case_63 = fun char -> fn_and (fn__62_61 char (Int32.of_int (65))) (fn__60_61 char (Int32.of_int (90)));;
let rec fn_name_45of_45constructor_63 = fun ptrn_name -> (match ptrn_name with CCons (ptrn_first_45letter, ptrn__95) -> fn_char_45is_45upper_45case_63 ptrn_first_45letter | CEmpty -> CFalse);;
type ptrn_error = CMalformedDefinitionError : type_range ->  ptrn_error | CMalformedFunctionDefinitionError : type_range ->  ptrn_error | CMalformedFunctionNameError : type_range ->  ptrn_error | CMalformedExpressionError : type_range ->  ptrn_error | CMalformedSymbolError : type_range ->  ptrn_error | CMalformedConstructorError : type_range ->  ptrn_error | CMalformedTypeError : type_range ->  ptrn_error;;
let rec fn_symbol_45to_45string = fun symbol -> (match symbol with CSymbol (ptrn_name, ptrn__95) -> CResult (ptrn_name) | CList (ptrn__95, type_range) -> CError (CMalformedSymbolError (type_range)));;
type type__type = CSimpleType : (int32) type_list * type_range ->  type__type | CComplexType : (int32) type_list * (type__type) type_list * type_range ->  type__type | CFunctionType : (type__type) type_list * type__type * type_range ->  type__type;;
type type_type_45parameter = CUniversalParameter : (int32) type_list * type_range ->  type_type_45parameter | CExistentialParameter : (int32) type_list * type_range ->  type_type_45parameter;;
type type_constructor = CSimpleConstructor : (int32) type_list * type_range ->  type_constructor | CComplexConstructor : (int32) type_list * (type__type) type_list * type_range ->  type_constructor;;
type type_pattern = CCapture : (int32) type_list * type_range ->  type_pattern | CIntegerPattern : int32 * type_range ->  type_pattern | CConstructorPattern : (int32) type_list * (type_pattern) type_list * type_range ->  type_pattern;;
type type_expression = CIntegerConstant : int32 * type_range ->  type_expression | CIdentifier : (int32) type_list * type_range ->  type_expression | CLambda : ((int32) type_list) type_list * type_expression * type_range ->  type_expression | CMatch : type_expression * ((type_pattern, type_expression) type_pair) type_list * type_range ->  type_expression | CConstructor : (int32) type_list * (type_expression) type_list * type_range ->  type_expression | CFunctionApplication : (type_expression) type_list * type_range ->  type_expression;;
type type_definition = CTypeDefinition : (int32) type_list * (type_type_45parameter) type_list * (type_constructor) type_list * type_range ->  type_definition | CExportDefinition : (int32) type_list * ((int32) type_list) type_list * type_expression * type_range ->  type_definition | CFunctionDefinition : (int32) type_list * ((int32) type_list) type_list * type_expression * type_range ->  type_definition;;
let rec fn_error_45range_45to_45string = fun type_range -> (match type_range with CRange (ptrn_start, ptrn__end) -> fn_string_45concat (CCons ((Int32.of_int (32)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (32)), CEmpty))))) (fn_string_45concat (fn_string_45from_45int_51_50 ptrn_start) (fn_string_45concat (CCons ((Int32.of_int (45)), CEmpty)) (fn_string_45from_45int_51_50 ptrn__end))));;
let rec fn_error_45to_45string = fun ptrn_error -> (match ptrn_error with CMalformedDefinitionError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (68)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedFunctionDefinitionError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (70)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (68)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedFunctionNameError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (70)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (78)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedExpressionError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (120)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedSymbolError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (83)), CCons ((Int32.of_int (121)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (98)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedConstructorError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (67)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty)))))))))))))))))))))))))) (fn_error_45range_45to_45string type_range) | CMalformedTypeError (type_range) -> fn_string_45concat (CCons ((Int32.of_int (77)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (84)), CCons ((Int32.of_int (121)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CEmpty))))))))))))))))))) (fn_error_45range_45to_45string type_range));;
let rec fn_sexp_45to_45complex_45type = fun sexp_45to_45types ptrn_name parameters type_range -> fn_result_45first (fun sub_45types -> CComplexType (ptrn_name, sub_45types, type_range)) (sexp_45to_45types parameters);;
let rec fn_sexp_45to_45function_45type = fun sexp_45to_45types sexp_45to_45type ptrn_name parameters type_range -> (match parameters with CCons (CList (ptrn_arg_45types, ptrn__95), CCons (ptrn_return_45type, CEmpty)) -> fn_result_45flatmap (fun ptrn_arg_45types -> fn_result_45first (fun ptrn_return_45type -> CFunctionType (ptrn_arg_45types, ptrn_return_45type, type_range)) (sexp_45to_45type ptrn_return_45type)) (sexp_45to_45types ptrn_arg_45types) | ptrn__95 -> CError (CMalformedTypeError (type_range)));;
let rec fn_sexp_45to_45complex_45or_45function_45type = fun sexp_45to_45types sexp_45to_45type ptrn_name parameters type_range -> (match fn_string_45equal_63 ptrn_name (fn_fn_45string ()) with CTrue -> fn_sexp_45to_45function_45type sexp_45to_45types sexp_45to_45type ptrn_name parameters type_range | CFalse -> fn_sexp_45to_45complex_45type sexp_45to_45types ptrn_name parameters type_range);;
let rec fn_sexp_45to_45type = fun sexp_45to_45types type__type -> (match type__type with CList (CCons (CSymbol (ptrn_name, ptrn__95), ptrn_parameters), type_range) -> fn_sexp_45to_45complex_45or_45function_45type sexp_45to_45types (fn_sexp_45to_45type sexp_45to_45types) ptrn_name ptrn_parameters type_range | CSymbol (ptrn_name, type_range) -> CResult (CSimpleType (ptrn_name, type_range)) | CList (ptrn__95, type_range) -> CError (CMalformedTypeError (type_range)));;
let rec fn_sexp_45to_45types = fun types -> fn_result_45of_45list (fn_list_45map (fn_sexp_45to_45type fn_sexp_45to_45types) types);;
let rec fn_sexp_45to_45complex_45constructor = fun ptrn_name types type_range -> fn_result_45first (fun types -> CComplexConstructor (ptrn_name, types, type_range)) (fn_sexp_45to_45types types);;
let rec fn_sexp_45to_45constructor_45definition = fun type_constructor -> (match type_constructor with CSymbol (ptrn_name, type_range) -> CResult (CSimpleConstructor (ptrn_name, type_range)) | CList (CCons (CSymbol (ptrn_name, ptrn__95), ptrn_types), type_range) -> fn_sexp_45to_45complex_45constructor ptrn_name ptrn_types type_range | CList (ptrn__95, type_range) -> CError (CMalformedConstructorError (type_range)));;
let rec fn_sexp_45to_45constructor_45definitions = fun constructors -> fn_result_45of_45list (fn_list_45map fn_sexp_45to_45constructor_45definition constructors);;
let rec fn_sexp_45to_45type_45parameter = fun type_sexp -> (match type_sexp with CList (CCons (ptrn__95, CCons (CSymbol (ptrn_name, type_range), CEmpty)), ptrn__95_95) -> CResult (CExistentialParameter (ptrn_name, type_range)) | CSymbol (ptrn_name, type_range) -> CResult (CUniversalParameter (ptrn_name, type_range)) | CList (ptrn__95, type_range) -> CError (CMalformedDefinitionError (type_range)));;
let rec fn_sexp_45to_45type_45parameters = fun type_45name -> (match type_45name with CList (CCons (CSymbol (ptrn__95, ptrn__95_95), ptrn_parameters), ptrn__95_95_95) -> fn_result_45of_45list (fn_list_45map fn_sexp_45to_45type_45parameter ptrn_parameters) | CSymbol (ptrn__95, ptrn__95_95) -> CResult (CEmpty) | CList (ptrn__95, type_range) -> CError (CMalformedTypeError (type_range)));;
let rec fn_sexp_45to_45type_45name = fun type_45name -> (match type_45name with CList (CCons (CSymbol (ptrn_name, ptrn__95), ptrn__95_95), ptrn__95_95_95) -> CResult (ptrn_name) | CSymbol (ptrn_name, ptrn__95) -> CResult (ptrn_name) | CList (ptrn__95, type_range) -> CError (CMalformedTypeError (type_range)));;
let rec fn_sexp_45to_45type_45definition = fun type_45name constructors type_range -> fn_result_45flatmap (fun ptrn_name -> fn_result_45flatmap (fun ptrn_parameters -> fn_result_45first (fun constructors -> CTypeDefinition (ptrn_name, ptrn_parameters, constructors, type_range)) (fn_sexp_45to_45constructor_45definitions constructors)) (fn_sexp_45to_45type_45parameters type_45name)) (fn_sexp_45to_45type_45name type_45name);;
let rec fn_sexp_45to_45arguments = fun arguments -> fn_result_45of_45list (fn_list_45map fn_symbol_45to_45string arguments);;
let rec fn_sexp_45to_45function_45body = fun type_range ptrn_rest -> (match ptrn_rest with CCons (CList (ptrn_arguments, ptrn__95), CCons (type_expression, CEmpty)) -> CResult (CPair (ptrn_arguments, type_expression)) | ptrn__95 -> CError (CMalformedExpressionError (type_range)));;
let rec fn_sexp_45to_45lambda = fun sexp_45to_45expression ptrn_rest type_range -> fn_result_45flatmap (fun body -> fn_result_45flatmap (fun ptrn_arguments -> fn_result_45first (fun type_expression -> CLambda (ptrn_arguments, type_expression, type_range)) (sexp_45to_45expression (fn_pair_45right body))) (fn_sexp_45to_45arguments (fn_pair_45left body))) (fn_sexp_45to_45function_45body type_range ptrn_rest);;
let rec fn_sexp_45to_45function_45application = fun sexp_45to_45expression type_range ptrn_expressions -> (fun _x1 -> ((fn_result_45first (fun ptrn_expressions -> CFunctionApplication (ptrn_expressions, type_range))) (fn_result_45of_45list ((fn_list_45map sexp_45to_45expression) _x1)))) ptrn_expressions;;
let rec fn_to_45constructor_45or_45capture = fun type_range ptrn_name -> (match fn_name_45of_45constructor_63 ptrn_name with CTrue -> CResult (CConstructorPattern (ptrn_name, CEmpty, type_range)) | CFalse -> CResult (CCapture (ptrn_name, type_range)));;
let rec fn_sexp_45to_45pattern = fun type_sexp -> (match type_sexp with CList (CCons (ptrn_name, ptrn_rest), type_range) -> fn_result_45flatmap (fun patterns -> fn_result_45first (fun ptrn_name -> CConstructorPattern (ptrn_name, patterns, type_range)) (fn_symbol_45to_45string ptrn_name)) (fn_result_45of_45list (fn_list_45map fn_sexp_45to_45pattern ptrn_rest)) | CList (CEmpty, type_range) -> CError (CMalformedExpressionError (type_range)) | CSymbol (ptrn_name, type_range) -> (fun _x1 -> ((fn_maybe_45else (fun _ -> fn_to_45constructor_45or_45capture type_range ptrn_name)) ((fn_maybe_45map (fun integer -> CResult (CIntegerPattern (integer, type_range)))) _x1))) (fn_string_45to_45int_51_50 ptrn_name));;
let rec fn_sexp_45to_45match_45pair = fun sexp_45to_45expression type_pair -> (match type_pair with CPair (type_pattern, type_expression) -> fn_result_45flatmap (fun type_pattern -> fn_result_45first (fun type_expression -> CPair (type_pattern, type_expression)) (sexp_45to_45expression type_expression)) (fn_sexp_45to_45pattern type_pattern));;
let rec fn_collect_45pairs = fun type_list -> (match type_list with CCons (ptrn_a, CCons (ptrn_b, ptrn_rest)) -> fn_maybe_45map (fun more_45pairs -> CCons (CPair (ptrn_a, ptrn_b), more_45pairs)) (fn_collect_45pairs ptrn_rest) | CEmpty -> CSome (CEmpty) | ptrn__95 -> CNone);;
let rec fn_sexp_45to_45match_45pairs = fun sexp_45to_45expression type_range pairs -> (fun _x1 -> ((fn_result_45flatmap (fun _x1 -> (fn_result_45of_45list ((fn_list_45map (fn_sexp_45to_45match_45pair sexp_45to_45expression)) _x1)))) ((fn_result_45of_45maybe (CMalformedExpressionError (type_range))) (fn_collect_45pairs _x1)))) pairs;;
let rec fn_sexp_45to_45match = fun sexp_45to_45expression type_range ptrn_rest -> (match ptrn_rest with CCons (type_expression, ptrn_rest) -> fn_result_45flatmap (fun type_expression -> fn_result_45first (fun pairs -> CMatch (type_expression, pairs, type_range)) (fn_sexp_45to_45match_45pairs sexp_45to_45expression type_range ptrn_rest)) (sexp_45to_45expression type_expression) | ptrn__95 -> CError (CMalformedExpressionError (type_range)));;
let rec fn_sexp_45to_45constructor = fun sexp_45to_45expression type_range ptrn_name ptrn_rest -> fn_result_45first (fun ptrn_expressions -> CConstructor (ptrn_name, ptrn_expressions, type_range)) (fn_result_45of_45list (fn_list_45map sexp_45to_45expression ptrn_rest));;
let rec fn_sexp_45to_45list_45expression = fun sexp_45to_45expression ptrn_expressions type_range -> (match ptrn_expressions with CCons (CSymbol (ptrn_symbol, ptrn__95), ptrn_rest) -> (match fn_string_45equal_63 ptrn_symbol (fn_fn_45string ()) with CTrue -> fn_sexp_45to_45lambda sexp_45to_45expression ptrn_rest type_range | CFalse -> (match fn_string_45equal_63 ptrn_symbol (fn_match_45string ()) with CTrue -> fn_sexp_45to_45match sexp_45to_45expression type_range ptrn_rest | CFalse -> (match fn_name_45of_45constructor_63 ptrn_symbol with CTrue -> fn_sexp_45to_45constructor sexp_45to_45expression type_range ptrn_symbol ptrn_rest | CFalse -> fn_sexp_45to_45function_45application sexp_45to_45expression type_range ptrn_expressions))) | ptrn__95 -> fn_sexp_45to_45function_45application sexp_45to_45expression type_range ptrn_expressions);;
let rec fn_sexp_45to_45expression = fun type_sexp -> (match type_sexp with CSymbol (ptrn_symbol_45name, type_range) -> (match fn_string_45to_45int_51_50 ptrn_symbol_45name with CSome (ptrn_integer) -> CResult (CIntegerConstant (ptrn_integer, type_range)) | CNone -> (match fn_name_45of_45constructor_63 ptrn_symbol_45name with CTrue -> CResult (CConstructor (ptrn_symbol_45name, CEmpty, type_range)) | CFalse -> CResult (CIdentifier (ptrn_symbol_45name, type_range)))) | CList (ptrn_expressions, type_range) -> (match ptrn_expressions with CEmpty -> CError (CMalformedExpressionError (type_range)) | ptrn__95 -> fn_sexp_45to_45list_45expression fn_sexp_45to_45expression ptrn_expressions type_range));;
let rec fn_sexp_45to_45function_45definition = fun name_45symbol ptrn_rest type_range type_constructor -> fn_result_45flatmap (fun body -> fn_result_45flatmap (fun ptrn_arguments -> fn_result_45flatmap (fun type_expression -> fn_result_45first (fun ptrn_name -> type_constructor ptrn_name ptrn_arguments type_expression type_range) (fn_symbol_45to_45string name_45symbol)) (fn_sexp_45to_45expression (fn_pair_45right body))) (fn_sexp_45to_45arguments (fn_pair_45left body))) (fn_sexp_45to_45function_45body type_range ptrn_rest);;
let rec fn_sexp_45to_45definition_39 = fun ptrn_name ptrn_rest type_range kind -> (match fn_string_45equal_63 kind (fn_typ_45string ()) with CTrue -> fn_sexp_45to_45type_45definition ptrn_name ptrn_rest type_range | CFalse -> (match fn_string_45equal_63 kind (fn_def_45string ()) with CTrue -> fn_sexp_45to_45function_45definition ptrn_name ptrn_rest type_range (fun ptrn_name ptrn_arguments type_expression type_range -> CFunctionDefinition (ptrn_name, ptrn_arguments, type_expression, type_range)) | CFalse -> (match fn_string_45equal_63 kind (fn_export_45string ()) with CTrue -> fn_sexp_45to_45function_45definition ptrn_name ptrn_rest type_range (fun ptrn_name ptrn_arguments type_expression type_range -> CExportDefinition (ptrn_name, ptrn_arguments, type_expression, type_range)) | CFalse -> CError (CMalformedDefinitionError (type_range)))));;
let rec fn_sexp_45to_45definition = fun type_expression -> (match type_expression with CList (CCons (ptrn_kind, CCons (ptrn_name, ptrn_rest)), type_range) -> fn_result_45flatmap (fn_sexp_45to_45definition_39 ptrn_name ptrn_rest type_range) (fn_symbol_45to_45string ptrn_kind) | CList (ptrn__95, type_range) -> CError (CMalformedDefinitionError (type_range)) | CSymbol (ptrn__95, type_range) -> CError (CMalformedDefinitionError (type_range)));;
let rec fn_sexps_45to_45definitions = fun ptrn_expressions -> fn_list_45map fn_sexp_45to_45definition ptrn_expressions;;
let rec fn_type_45to_45sexp = fun types_45to_45sexp type__type -> (match type__type with CSimpleType (ptrn_name, type_range) -> CSymbol (ptrn_name, type_range) | CFunctionType (ptrn_arg_45types, ptrn_return_45type, type_range) -> CList (CCons (CSymbol (fn_fn_45string (), type_range), CCons (CList (types_45to_45sexp ptrn_arg_45types, type_range), CCons (fn_type_45to_45sexp types_45to_45sexp ptrn_return_45type, CEmpty))), type_range) | CComplexType (ptrn_name, ptrn_types, type_range) -> CList (CCons (CSymbol (ptrn_name, type_range), types_45to_45sexp ptrn_types), type_range));;
let rec fn_types_45to_45sexp = fun ptrn_types -> fn_list_45map (fn_type_45to_45sexp fn_types_45to_45sexp) ptrn_types;;
let rec fn_constructor_45to_45sexp = fun type_constructor -> (match type_constructor with CSimpleConstructor (ptrn_name, type_range) -> CSymbol (ptrn_name, type_range) | CComplexConstructor (ptrn_name, ptrn_types, type_range) -> CList (CCons (CSymbol (ptrn_name, type_range), fn_types_45to_45sexp ptrn_types), type_range));;
let rec fn_constructors_45to_45sexp = fun constructors -> fn_list_45map fn_constructor_45to_45sexp constructors;;
let rec fn_type_45parameter_45to_45sexp = fun parameter -> (match parameter with CExistentialParameter (ptrn_name, type_range) -> CList (CCons (CSymbol (fn_exists_45string (), type_range), CCons (CSymbol (ptrn_name, type_range), CEmpty)), type_range) | CUniversalParameter (ptrn_name, type_range) -> CSymbol (ptrn_name, type_range));;
let rec fn_type_45name_45to_45sexp = fun type_range ptrn_name ptrn_parameters -> (match ptrn_parameters with CEmpty -> CSymbol (ptrn_name, type_range) | ptrn__95 -> CList (CCons (CSymbol (ptrn_name, type_range), fn_list_45map fn_type_45parameter_45to_45sexp ptrn_parameters), type_range));;
let rec fn_type_45definition_45to_45sexp = fun ptrn_name ptrn_parameters constructors type_range -> CList (fn_list_45concat (CCons (CSymbol (fn_typ_45string (), type_range), CCons (fn_type_45name_45to_45sexp type_range ptrn_name ptrn_parameters, CEmpty))) (fn_constructors_45to_45sexp constructors), type_range);;
let rec fn_function_45arguments_45to_45sexp = fun ptrn_arguments type_range -> CList (fn_list_45map (fun ptrn_name -> CSymbol (ptrn_name, type_range)) ptrn_arguments, type_range);;
let rec fn_pattern_45to_45sexp = fun type_pattern -> (match type_pattern with CConstructorPattern (ptrn_name, CEmpty, type_range) -> CSymbol (ptrn_name, type_range) | CConstructorPattern (ptrn_name, ptrn_patterns, type_range) -> CList (CCons (CSymbol (ptrn_name, type_range), fn_list_45map fn_pattern_45to_45sexp ptrn_patterns), type_range) | CIntegerPattern (ptrn_value, type_range) -> CSymbol (fn_string_45from_45int_51_50 ptrn_value, type_range) | CCapture (ptrn_name, type_range) -> CSymbol (ptrn_name, type_range));;
let rec fn_match_45pair_45to_45sexp = fun expression_45to_45sexp type_pair -> (match type_pair with CPair (type_pattern, type_expression) -> CCons (fn_pattern_45to_45sexp type_pattern, CCons (expression_45to_45sexp type_expression, CEmpty)));;
let rec fn_expression_45to_45sexp = fun type_expression -> (match type_expression with CIntegerConstant (ptrn_integer, type_range) -> CSymbol (fn_string_45from_45int_51_50 ptrn_integer, type_range) | CIdentifier (ptrn_string, type_range) -> CSymbol (ptrn_string, type_range) | CLambda (ptrn_arguments, type_expression, type_range) -> CList (CCons (CSymbol (fn_fn_45string (), type_range), CCons (fn_function_45arguments_45to_45sexp ptrn_arguments type_range, CCons (fn_expression_45to_45sexp type_expression, CEmpty))), type_range) | CMatch (type_expression, ptrn_pairs, type_range) -> CList (CCons (CSymbol (fn_match_45string (), type_range), CCons (fn_expression_45to_45sexp type_expression, fn_list_45flatmap (fn_match_45pair_45to_45sexp fn_expression_45to_45sexp) ptrn_pairs)), type_range) | CConstructor (ptrn_name, ptrn_expressions, type_range) -> (match ptrn_expressions with CEmpty -> CSymbol (ptrn_name, type_range) | ptrn__95 -> CList (CCons (CSymbol (ptrn_name, type_range), fn_list_45map fn_expression_45to_45sexp ptrn_expressions), type_range)) | CFunctionApplication (ptrn_expressions, type_range) -> CList (fn_list_45map fn_expression_45to_45sexp ptrn_expressions, type_range));;
let rec fn_function_45definition_45to_45sexp = fun ptrn_name ptrn_arguments type_expression type_range ptrn_kind -> CList (CCons (CSymbol (ptrn_kind, type_range), CCons (CSymbol (ptrn_name, type_range), CCons (fn_function_45arguments_45to_45sexp ptrn_arguments type_range, CCons (fn_expression_45to_45sexp type_expression, CEmpty)))), type_range);;
let rec fn_definition_45to_45sexp = fun type_definition -> (match type_definition with CTypeDefinition (ptrn_name, ptrn_parameters, ptrn_constructors, type_range) -> fn_type_45definition_45to_45sexp ptrn_name ptrn_parameters ptrn_constructors type_range | CExportDefinition (ptrn_name, ptrn_arguments, type_expression, type_range) -> fn_function_45definition_45to_45sexp ptrn_name ptrn_arguments type_expression type_range (fn_export_45string ()) | CFunctionDefinition (ptrn_name, ptrn_arguments, type_expression, type_range) -> fn_function_45definition_45to_45sexp ptrn_name ptrn_arguments type_expression type_range (fn_def_45string ()));;
let rec fn_error_45to_45sexp = fun ptrn_error -> CSymbol (fn_error_45to_45string ptrn_error, CRange ((Int32.of_int (0)), (Int32.of_int (0))));;
let rec fn_render_45result = fun type_result -> (match type_result with CResult (type_sexp) -> type_sexp | CError (type_sexp) -> type_sexp);;
let rec fn_definitions_45to_45sexps = fun definitions -> fn_list_45map (fun _x1 -> (fn_render_45result ((fn_result_45second fn_error_45to_45sexp) ((fn_result_45first fn_definition_45to_45sexp) _x1)))) definitions;;
let rec fn_compile_45error = fun _ -> CCons ((Int32.of_int (42)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (32)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (42)), CEmpty)))))))))))))));;
let rec fn_definition_45end = fun _ -> CCons ((Int32.of_int (59)), CCons ((Int32.of_int (59)), CEmpty));;
let rec fn_let_45rec = fun _ -> CCons ((Int32.of_int (108)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (32)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (32)), CEmpty))))))));;
let rec type__type = fun _ -> CCons ((Int32.of_int (116)), CCons ((Int32.of_int (121)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (101)), CEmpty))));;
let rec fn__fun = fun _ -> CCons ((Int32.of_int (102)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (32)), CEmpty))));;
let rec fn_arrow = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (45)), CCons ((Int32.of_int (62)), CCons ((Int32.of_int (32)), CEmpty))));;
let rec fn_equals = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (61)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_comma = fun _ -> CCons ((Int32.of_int (44)), CCons ((Int32.of_int (32)), CEmpty));;
let rec fn_vertical_45bar = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (124)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_pipe_45operator = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (124)), CCons ((Int32.of_int (62)), CCons ((Int32.of_int (32)), CEmpty))));;
let rec fn_colon = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (58)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_star = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (42)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_if_45string = fun _ -> CCons ((Int32.of_int (105)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_then_45string = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (104)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (32)), CEmpty))))));;
let rec fn_else_45string = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (32)), CEmpty))))));;
let rec fn_less_45than = fun _ -> CCons ((Int32.of_int (32)), CCons ((Int32.of_int (60)), CCons ((Int32.of_int (32)), CEmpty)));;
let rec fn_space = fun _ -> CCons ((Int32.of_int (32)), CEmpty);;
let rec fn_newline = fun _ -> CCons ((Int32.of_int (10)), CEmpty);;
let rec fn_plus = fun _ -> CCons ((Int32.of_int (43)), CEmpty);;
let rec fn_multiply = fun _ -> CCons ((Int32.of_int (42)), CEmpty);;
let rec fn_minus = fun _ -> CCons ((Int32.of_int (45)), CEmpty);;
let rec fn_slash = fun _ -> CCons ((Int32.of_int (47)), CEmpty);;
let rec fn_percent = fun _ -> CCons ((Int32.of_int (37)), CEmpty);;
let rec fn__with = fun _ -> CCons ((Int32.of_int (119)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (104)), CEmpty))));;
let rec fn_match_45string = fun _ -> CCons ((Int32.of_int (109)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (99)), CCons ((Int32.of_int (104)), CEmpty)))));;
let rec fn_pipe_45string = fun _ -> CCons ((Int32.of_int (112)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (101)), CEmpty))));;
let rec fn_list_45string = fun _ -> CCons ((Int32.of_int (108)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (116)), CEmpty))));;
let rec fn_int_51_50_45less_45than_45string = fun _ -> CCons ((Int32.of_int (105)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (45)), CCons ((Int32.of_int (108)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (45)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (104)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (110)), CEmpty)))))))))))))));;
let rec fn_int_51_50 = fun _ -> CCons ((Int32.of_int (105)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CEmpty)))));;
let rec fn_int_51_50_45plus = fun _ -> CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (100)), CEmpty)))))))));;
let rec fn_int_51_50_45multiply = fun _ -> CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (108)), CEmpty)))))))));;
let rec fn_int_51_50_45minus = fun _ -> CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (117)), CCons ((Int32.of_int (98)), CEmpty)))))))));;
let rec fn_int_51_50_45divide = fun _ -> CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (100)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (118)), CEmpty)))))))));;
let rec fn_int_51_50_45modulus = fun _ -> CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (109)), CEmpty)))))))));;
let rec fn_join = fun type_list -> fn_string_45join CEmpty type_list;;
let rec fn_not_45empty_63 = fun ptrn_string -> fn_not (fn_string_45empty_63 ptrn_string);;
let rec fn_with_45apostrophe = fun ptrn_string -> CCons ((Int32.of_int (39)), ptrn_string);;
let rec fn_prefix_45constructor = fun type_constructor -> CCons ((Int32.of_int (67)), type_constructor);;
let rec fn_parse_45error = fun ptrn_error -> fn_join (CCons (CCons ((Int32.of_int (112)), CCons ((Int32.of_int (97)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (32)), CCons ((Int32.of_int (101)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (114)), CCons ((Int32.of_int (32)), CEmpty)))))))))))), CCons (fn_error_45to_45string ptrn_error, CEmpty)));;
let rec fn_is_45alphanumeric = fun char -> fn_or (fn_and (fn__62_61 char (Int32.of_int (65))) (fn__60_61 char (Int32.of_int (90)))) (fn_or (fn_and (fn__62_61 char (Int32.of_int (48))) (fn__60_61 char (Int32.of_int (57)))) (fn_and (fn__62_61 char (Int32.of_int (97))) (fn__60_61 char (Int32.of_int (122)))));;
let rec fn_escape_45char = fun char -> (match fn_is_45alphanumeric char with CTrue -> CCons (char, CEmpty) | CFalse -> CCons ((Int32.of_int (95)), fn_string_45from_45int_51_50 char));;
let rec fn_escape_45identifier = fun ptrn_name -> (match fn_string_45equal_63 ptrn_name (type__type ()) with CTrue -> CCons ((Int32.of_int (95)), type__type ()) | CFalse -> fn_list_45flatmap fn_escape_45char ptrn_name);;
let rec fn_translate_45identifier = fun ptrn_name -> (match fn_string_45equal_63 ptrn_name (fn_plus ()) with CTrue -> fn_int_51_50_45plus () | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_slash ()) with CTrue -> fn_int_51_50_45divide () | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_percent ()) with CTrue -> fn_int_51_50_45modulus () | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_minus ()) with CTrue -> fn_int_51_50_45minus () | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_multiply ()) with CTrue -> fn_int_51_50_45multiply () | CFalse -> fn_escape_45identifier ptrn_name)))));;
let rec fn_translate_45constructor = fun translator ptrn_name ptrn_parameters -> (match ptrn_parameters with CEmpty -> fn_prefix_45constructor (fn_escape_45identifier ptrn_name) | ptrn__95 -> fn_join (CCons (fn_prefix_45constructor (fn_escape_45identifier ptrn_name), CCons (fn_space (), CCons (fn_wrap_45in_45brackets (fn_string_45join (fn_comma ()) (fn_list_45map translator ptrn_parameters)), CEmpty)))));;
let rec fn_translate_45pattern = fun type_pattern -> (match type_pattern with CCapture (ptrn_name, ptrn__95) -> fn_escape_45identifier ptrn_name | CIntegerPattern (ptrn_integer, ptrn__95) -> fn_join (CCons (fn_string_45from_45int_51_50 ptrn_integer, CCons (CCons ((Int32.of_int (108)), CEmpty), CEmpty))) | CConstructorPattern (ptrn_name, ptrn_patterns, ptrn__95) -> fn_translate_45constructor fn_translate_45pattern ptrn_name ptrn_patterns);;
let rec fn_translate_45rule = fun translate_45expression rule -> (match rule with CPair (type_pattern, type_expression) -> fn_join (CCons (fn_translate_45pattern type_pattern, CCons (fn_arrow (), CCons (fn_wrap_45in_45brackets (translate_45expression type_expression), CEmpty)))));;
let rec fn_translate_45pipe = fun translate_45expression ptrn_expressions -> (fun _x1 -> (fn_wrap_45in_45brackets (fn_join ((fun ptrn_expressions -> CCons (fn__fun (), CCons (fn_wrap_45in_45brackets (CCons ((Int32.of_int (120)), CEmpty)), CCons (fn_arrow (), CCons (CCons ((Int32.of_int (120)), CEmpty), CCons (fn_pipe_45operator (), CCons (ptrn_expressions, CEmpty))))))) ((fn_string_45join (fn_pipe_45operator ())) ((fn_list_45map translate_45expression) _x1)))))) ptrn_expressions;;
let rec fn_translate_45list = fun translate_45expression ptrn_expressions -> (match ptrn_expressions with CEmpty -> CCons ((Int32.of_int (67)), CCons ((Int32.of_int (69)), CCons ((Int32.of_int (109)), CCons ((Int32.of_int (112)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (121)), CEmpty)))))) | CCons (ptrn_first, ptrn_rest) -> fn_join (CCons (CCons ((Int32.of_int (67)), CCons ((Int32.of_int (67)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (115)), CCons ((Int32.of_int (32)), CCons ((Int32.of_int (40)), CEmpty))))))), CCons (translate_45expression ptrn_first, CCons (fn_comma (), CCons (fn_translate_45list translate_45expression ptrn_rest, CCons (CCons ((Int32.of_int (41)), CEmpty), CEmpty)))))));;
let rec fn_translate_45function_45application_39 = fun translate_45expression ptrn_expressions -> (match ptrn_expressions with CCons (ptrn_no_45args_45function, CEmpty) -> fn_join (CCons (fn_wrap_45in_45brackets (translate_45expression ptrn_no_45args_45function), CCons (fn_space (), CCons (fn_wrap_45in_45brackets CEmpty, CEmpty)))) | ptrn__95 -> fn_string_45join (fn_space ()) (fn_list_45map (fun _x1 -> (fn_wrap_45in_45brackets (translate_45expression _x1))) ptrn_expressions));;
let rec fn_translate_45less_45than = fun translate_45expression ptrn_expressions -> (match ptrn_expressions with CCons (ptrn_a, CCons (ptrn_b, CCons (ptrn__then, CCons (ptrn__else, CEmpty)))) -> fn_join (CCons (fn_if_45string (), CCons (fn_wrap_45in_45brackets (translate_45expression ptrn_a), CCons (fn_less_45than (), CCons (fn_wrap_45in_45brackets (translate_45expression ptrn_b), CCons (fn_then_45string (), CCons (fn_wrap_45in_45brackets (translate_45expression ptrn__then), CCons (fn_else_45string (), CCons (fn_wrap_45in_45brackets (translate_45expression ptrn__else), CEmpty))))))))) | ptrn__95 -> fn_compile_45error ());;
let rec fn_translate_45function_45application = fun translate_45expression ptrn_expressions -> (match ptrn_expressions with CCons (CIdentifier (ptrn_name, ptrn__95), ptrn_rest) -> (match fn_string_45equal_63 ptrn_name (fn_pipe_45string ()) with CTrue -> fn_translate_45pipe translate_45expression ptrn_rest | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_list_45string ()) with CTrue -> fn_translate_45list translate_45expression ptrn_rest | CFalse -> (match fn_string_45equal_63 ptrn_name (fn_int_51_50_45less_45than_45string ()) with CTrue -> fn_translate_45less_45than translate_45expression ptrn_rest | CFalse -> fn_translate_45function_45application_39 translate_45expression ptrn_expressions))) | ptrn__95 -> fn_translate_45function_45application_39 translate_45expression ptrn_expressions);;
let rec fn_translate_45argument_45list = fun ptrn_arguments -> (match fn_list_45empty_63 ptrn_arguments with CTrue -> fn_wrap_45in_45brackets CEmpty | CFalse -> fn_string_45join (fn_space ()) (fn_list_45map fn_escape_45identifier ptrn_arguments));;
let rec fn_translate_45lambda = fun translate_45expression ptrn_arguments type_expression -> fn_join (CCons (fn__fun (), CCons (fn_translate_45argument_45list ptrn_arguments, CCons (fn_arrow (), CCons (translate_45expression type_expression, CEmpty)))));;
let rec fn_translate_45expression = fun type_expression -> (match type_expression with CLambda (ptrn_arguments, type_expression, ptrn__95) -> fn_translate_45lambda fn_translate_45expression ptrn_arguments type_expression | CConstructor (ptrn_name, ptrn_expressions, ptrn__95) -> fn_translate_45constructor fn_translate_45expression ptrn_name ptrn_expressions | CFunctionApplication (ptrn_expressions, ptrn__95) -> fn_translate_45function_45application fn_translate_45expression ptrn_expressions | CIntegerConstant (ptrn_integer, ptrn__95) -> fn_string_45concat (CCons ((Int32.of_int (73)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (51)), CCons ((Int32.of_int (50)), CCons ((Int32.of_int (46)), CCons ((Int32.of_int (111)), CCons ((Int32.of_int (102)), CCons ((Int32.of_int (95)), CCons ((Int32.of_int (105)), CCons ((Int32.of_int (110)), CCons ((Int32.of_int (116)), CCons ((Int32.of_int (32)), CEmpty)))))))))))))) (fn_wrap_45in_45brackets (fn_string_45from_45int_51_50 ptrn_integer)) | CIdentifier (ptrn_name, ptrn__95) -> fn_translate_45identifier ptrn_name | CMatch (type_expression, ptrn_rules, ptrn__95) -> fn_string_45join (fn_space ()) (CCons (fn_match_45string (), CCons (fn_translate_45expression type_expression, CCons (fn__with (), CCons (fn_string_45join (fn_vertical_45bar ()) (fn_list_45map (fn_translate_45rule fn_translate_45expression) ptrn_rules), CEmpty))))));;
let rec fn_translate_45function_45definition = fun ptrn_name ptrn_arguments type_expression -> fn_join (CCons (fn_let_45rec (), CCons (fn_escape_45identifier ptrn_name, CCons (fn_equals (), CCons (fn_translate_45lambda fn_translate_45expression ptrn_arguments type_expression, CCons (fn_definition_45end (), CEmpty))))));;
let rec fn_translate_45simple_45type = fun ptrn_name ptrn_parameters -> (match fn_list_45any_63 (fn_string_45equal_63 ptrn_name) ptrn_parameters with CFalse -> fn_escape_45identifier ptrn_name | CTrue -> fn_with_45apostrophe (fn_escape_45identifier ptrn_name));;
let rec fn_translate_45type_45parameter = fun parameter -> (match parameter with CUniversalParameter (ptrn_name, ptrn__95) -> ptrn_name | CExistentialParameter (ptrn_name, ptrn__95) -> ptrn_name);;
let rec fn_translate_45type = fun ptrn_parameters type__type -> (match type__type with CSimpleType (ptrn_name, ptrn__95) -> fn_translate_45simple_45type ptrn_name ptrn_parameters | CComplexType (ptrn_name, ptrn_types, ptrn__95) -> (fun _x1 -> ((fun ptrn_types -> fn_join (CCons (ptrn_types, CCons (fn_space (), CCons (fn_escape_45identifier ptrn_name, CEmpty))))) (fn_wrap_45in_45brackets ((fn_string_45join (fn_comma ())) ((fn_list_45map (fn_translate_45type ptrn_parameters)) _x1))))) ptrn_types | CFunctionType (ptrn_argument_45types, ptrn_return_45type, ptrn__95) -> fn_wrap_45in_45brackets (fn_join (CCons ((fun _x1 -> ((fn_string_45join (fn_arrow ())) ((fn_list_45map (fn_translate_45type ptrn_parameters)) _x1))) ptrn_argument_45types, CCons (fn_arrow (), CCons (fn_translate_45type ptrn_parameters ptrn_return_45type, CEmpty))))));;
let rec fn_translate_45types = fun ptrn_parameters ptrn_types -> (fun _x1 -> ((fn_string_45join (fn_star ())) ((fn_list_45map (fn_translate_45type ptrn_parameters)) _x1))) ptrn_types;;
let rec fn_translate_45constructor_45definition = fun type__type ptrn_parameters type_constructor -> (match type_constructor with CSimpleConstructor (ptrn_name, ptrn__95) -> fn_prefix_45constructor (fn_escape_45identifier ptrn_name) | CComplexConstructor (ptrn_name, ptrn_types, ptrn__95) -> fn_join (CCons (fn_prefix_45constructor (fn_escape_45identifier ptrn_name), CCons (fn_colon (), CCons (fn_translate_45types (fn_list_45map fn_translate_45type_45parameter ptrn_parameters) ptrn_types, CCons (fn_arrow (), CCons (type__type, CEmpty)))))));;
let rec fn_translate_45constructor_45definitions = fun type__type ptrn_parameters ptrn_constructors -> (fun _x1 -> ((fn_string_45join (fn_vertical_45bar ())) ((fn_list_45map (fn_translate_45constructor_45definition type__type ptrn_parameters)) _x1))) ptrn_constructors;;
let rec fn_translate_45type_45parameter_45for_45definition = fun parameter -> (match parameter with CUniversalParameter (ptrn_name, ptrn__95) -> fn_escape_45identifier ptrn_name | CExistentialParameter (ptrn__95, ptrn__95_95) -> CEmpty);;
let rec fn_translate_45type_45parameters = fun ptrn_parameters -> (fun _x1 -> ((fn_string_45join (fn_comma ())) ((fn_list_45map fn_with_45apostrophe) ((fn_list_45filter fn_not_45empty_63) ((fn_list_45map fn_translate_45type_45parameter_45for_45definition) _x1))))) ptrn_parameters;;
let rec fn_translate_45type_45name = fun ptrn_name ptrn_parameters -> (match fn_translate_45type_45parameters ptrn_parameters with CEmpty -> fn_escape_45identifier ptrn_name | ptrn_parameters -> fn_join (CCons (fn_wrap_45in_45brackets ptrn_parameters, CCons (fn_space (), CCons (fn_escape_45identifier ptrn_name, CEmpty)))));;
let rec fn_translate_45type_45definition = fun ptrn_name ptrn_parameters ptrn_constructors -> fn_join (CCons (type__type (), CCons (fn_space (), CCons (fn_translate_45type_45name ptrn_name ptrn_parameters, CCons (fn_equals (), CCons (fn_translate_45constructor_45definitions (fn_translate_45type_45name ptrn_name ptrn_parameters) ptrn_parameters ptrn_constructors, CCons (fn_definition_45end (), CEmpty)))))));;
let rec fn_translate_45definition = fun type_definition -> (match type_definition with CFunctionDefinition (ptrn_name, ptrn_arguments, type_expression, ptrn__95) -> fn_translate_45function_45definition ptrn_name ptrn_arguments type_expression | CExportDefinition (ptrn_name, ptrn_arguments, type_expression, ptrn__95) -> fn_translate_45function_45definition ptrn_name ptrn_arguments type_expression | CTypeDefinition (ptrn_name, ptrn_parameters, ptrn_constructors, ptrn__95) -> fn_translate_45type_45definition ptrn_name ptrn_parameters ptrn_constructors);;
let rec fn_translate_45result = fun type_result -> (match type_result with CResult (type_definition) -> fn_translate_45definition type_definition | CError (ptrn_error) -> fn_parse_45error ptrn_error);;
let rec to_ocaml = fun definitions -> fn_string_45join (fn_newline ()) (fn_list_45map fn_translate_45result definitions);;

let _read_line ic =
  try Some (input_line ic)
  with End_of_file -> None
 
let _read_lines ic =
  let rec loop acc =
    match _read_line ic with
    | Some line -> loop (line :: acc)
    | None -> List.rev acc
  in
  loop [];;

let _stdin_string = String.concat "
" (_read_lines stdin);;

let rec _string_to_list_i = fun input i result ->
    if i > 0 then
        let sub_input = (String.sub input 0 ((String.length input) - 1)) in
            _string_to_list_i sub_input (i - 1) (CCons ((Int32.of_int (Char.code (String.get input i))), result))
    else
        CCons ((Int32.of_int (Char.code (String.get input i))), result);;

let _string_to_list = fun input ->
    if String.length input == 0
    then CEmpty
    else _string_to_list_i input ((String.length input) - 1) CEmpty;;

let rec _list_to_string_r = fun input result ->
    match input with
          CCons(x, rest) ->
            let string_from_int = (String.make 1 (Char.chr (Int32.to_int x))) in
            let new_result = (String.concat "" (result :: string_from_int :: [])) in
                (_list_to_string_r rest new_result)
        | CEmpty -> result;;

let _list_to_string = fun input -> (_list_to_string_r input "");;

let _stdin_list = _string_to_list _stdin_string;;
Printf.printf "%s" (_list_to_string (to_ocaml (fn_sexps_45to_45definitions (parse _stdin_list))))
