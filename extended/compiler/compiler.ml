type boolean = CTrue | CFalse;;
let rec not = fun a -> match a with CTrue -> (CFalse) | CFalse -> (CTrue);;
let rec _and = fun a b -> match a with CTrue -> (b) | CFalse -> (CFalse);;
let rec _or = fun a b -> match a with CTrue -> (CTrue) | CFalse -> (b);;
let rec _60 = fun a b -> if (a) < (b) then (CTrue) else (CFalse);;
let rec _62 = fun a b -> (_60) (b) (a);;
let rec _61 = fun a b -> (not) ((_or) ((_60) (a) (b)) ((_62) (a) (b)));;
let rec _60_61 = fun a b -> (_or) ((_60) (a) (b)) ((_61) (a) (b));;
let rec _62_61 = fun a b -> (_or) ((_62) (a) (b)) ((_61) (a) (b));;
type ('a, 'b) pair = CPair : 'a * 'b -> ('a, 'b) pair;;
let rec pair_45left = fun pair -> match pair with CPair (x, _95) -> (x);;
let rec pair_45right = fun pair -> match pair with CPair (_95, x) -> (x);;
let rec pair_45map_45left = fun f pair -> match pair with CPair (x, y) -> (CPair ((f) (x), y));;
let rec pair_45map_45right = fun f pair -> match pair with CPair (x, y) -> (CPair (x, (f) (y)));;
type ('a) maybe = CSome : 'a -> ('a) maybe | CNone;;
let rec maybe_45map = fun f maybe -> match maybe with CSome (x) -> (CSome ((f) (x))) | CNone -> (CNone);;
let rec maybe_45flatmap = fun f maybe -> match maybe with CSome (x) -> ((f) (x)) | CNone -> (CNone);;
let rec maybe_45filter = fun f maybe -> match maybe with CSome (x) -> (match (f) (x) with CTrue -> (maybe) | CFalse -> (CNone)) | CNone -> (CNone);;
let rec maybe_45else = fun f maybe -> match maybe with CNone -> ((f) ()) | CSome (x) -> (x);;
type ('element) indexed_45iterator = CIndexedIterator : 'collection * int32 * ('collection -> int32 -> ('element) maybe) * (('element) indexed_45iterator -> 'collection -> int32 -> ('element) indexed_45iterator) -> ('element) indexed_45iterator;;
let rec indexed_45iterator_45next = fun iterator -> match iterator with CIndexedIterator (collection, index, _95, next) -> ((next) (iterator) (collection) (index));;
let rec indexed_45iterator_45get = fun iterator -> match iterator with CIndexedIterator (collection, index, get, _95) -> ((get) (collection) (index));;
let rec indexed_45iterator_45index = fun iterator -> match iterator with CIndexedIterator (_95, index, _95_95, _95_95_95) -> (index);;
let rec indexed_45iterator_45foldl = fun f initial iterator -> match (indexed_45iterator_45get) (iterator) with CNone -> (initial) | CSome (x) -> ((indexed_45iterator_45foldl) (f) ((f) (x) (initial)) ((indexed_45iterator_45next) (iterator)));;
type ('a) list = CCons : 'a * ('a) list -> ('a) list | CEmpty;;
let rec list_45first = fun list -> match list with CCons (x, _95) -> (CSome (x)) | CEmpty -> (CNone);;
let rec list_45rest = fun list -> match list with CCons (_95, rest) -> (rest) | CEmpty -> (CEmpty);;
let rec list_45empty_63 = fun list -> match list with CCons (_95, _95_95) -> (CFalse) | CEmpty -> (CTrue);;
let rec list_45reverse_39 = fun list new_45list -> match list with CEmpty -> (new_45list) | CCons (x, xs) -> ((list_45reverse_39) (xs) (CCons (x, new_45list)));;
let rec list_45reverse = fun list -> (list_45reverse_39) (list) (CEmpty);;
let rec list_45concat = fun a b -> match a with CEmpty -> (b) | CCons (x, xs) -> (CCons (x, (list_45concat) (xs) (b)));;
let rec list_45foldr = fun f initial list -> match list with CEmpty -> (initial) | CCons (x, xs) -> ((f) (x) ((list_45foldr) (f) (initial) (xs)));;
let rec list_45foldl = fun f initial list -> match list with CEmpty -> (initial) | CCons (x, xs) -> ((list_45foldl) (f) ((f) (x) (initial)) (xs));;
let rec list_45map = fun f list -> match list with CEmpty -> (CEmpty) | CCons (x, xs) -> (CCons ((f) (x), (list_45map) (f) (xs)));;
let rec list_45flatmap = fun f list -> match list with CEmpty -> (CEmpty) | CCons (x, xs) -> ((list_45concat) ((f) (x)) ((list_45flatmap) (f) (xs)));;
let rec list_45filter = fun f list -> (list_45reverse) ((list_45foldl) (fun x xs -> match (f) (x) with CTrue -> (CCons (x, xs)) | CFalse -> (xs)) (CEmpty) (list));;
let rec list_45any_63 = fun f list -> (not) ((list_45empty_63) ((list_45filter) (f) (list)));;
let rec list_45indexed_45iterator_45get = fun collection _95 -> match collection with CCons (x, _95) -> (CSome (x)) | CEmpty -> (CNone);;
let rec list_45indexed_45iterator_45next = fun iterator collection index -> match collection with CCons (_95, xs) -> (CIndexedIterator (xs, (Int32.add) (index) (Int32.of_int (1)), list_45indexed_45iterator_45get, list_45indexed_45iterator_45next)) | CEmpty -> (iterator);;
let rec list_45to_45indexed_45iterator = fun list -> CIndexedIterator (list, Int32.of_int (0), list_45indexed_45iterator_45get, list_45indexed_45iterator_45next);;
let rec string_45of_45char = fun character -> CCons (character, CEmpty);;
let rec string_45first = fun string -> (list_45first) (string);;
let rec string_45rest = fun string -> (list_45rest) (string);;
let rec string_45concat = fun a b -> match a with CEmpty -> (b) | CCons (x, xs) -> (CCons (x, (string_45concat) (xs) (b)));;
let rec _39string_45join_45reducer = fun separator -> fun x xs -> match xs with CEmpty -> (x) | _95 -> ((string_45concat) ((string_45concat) (x) (separator)) (xs));;
let rec string_45join = fun separator list -> (list_45foldr) ((_39string_45join_45reducer) (separator)) (CEmpty) (list);;
let rec string_45empty_63 = fun string -> match string with CEmpty -> (CTrue) | _95 -> (CFalse);;
let rec string_45equal_63 = fun a b -> match a with CCons (xa, xas) -> (match b with CCons (xb, xbs) -> ((_and) ((_61) (xa) (xb)) ((string_45equal_63) (xas) (xbs))) | CEmpty -> ((string_45empty_63) (a))) | CEmpty -> ((string_45empty_63) (b));;
let rec string_45point_45is_45digit = fun point -> (_and) ((_62) (point) (Int32.of_int (47))) ((_60) (point) (Int32.of_int (58)));;
let rec string_45to_45int32_39_39 = fun string_45to_45int32_39 string accumulator x -> (string_45to_45int32_39) (string) (CSome ((Int32.add) ((Int32.mul) (Int32.of_int (10)) (accumulator)) ((Int32.sub) (x) (Int32.of_int (48)))));;
let rec string_45to_45int32_39 = fun string accumulator -> match string with CEmpty -> (accumulator) | CCons (x, rest) -> ((maybe_45flatmap) (fun accumulator -> ((fun (x) -> x |> (maybe_45filter) (string_45point_45is_45digit) |> (maybe_45flatmap) ((string_45to_45int32_39_39) (string_45to_45int32_39) (rest) (accumulator)))) (CSome (x))) (accumulator));;
let rec string_45to_45int32 = fun string -> match string with CCons (45l, string) -> (match (string_45empty_63) (string) with CTrue -> (CNone) | CFalse -> ((maybe_45map) (fun x -> (Int32.mul) (Int32.of_int (-1)) (x)) ((string_45to_45int32) (string)))) | _95 -> ((string_45to_45int32_39) (string) (CSome (Int32.of_int (0))));;
let rec string_45from_45int32_39 = fun integer string -> match (_62) (integer) (Int32.of_int (9)) with CTrue -> ((string_45from_45int32_39) ((Int32.div) (integer) (Int32.of_int (10))) (CCons ((Int32.add) ((Int32.rem) (integer) (Int32.of_int (10))) (Int32.of_int (48)), string))) | CFalse -> (CCons ((Int32.add) (integer) (Int32.of_int (48)), string));;
let rec string_45from_45int32 = fun integer -> match (_60) (integer) (Int32.of_int (0)) with CTrue -> (match (_61) (integer) (Int32.of_int (-2147483648)) with CTrue -> (CCons (Int32.of_int (45), CCons (Int32.of_int (50), CCons (Int32.of_int (49), CCons (Int32.of_int (52), CCons (Int32.of_int (55), CCons (Int32.of_int (52), CCons (Int32.of_int (56), CCons (Int32.of_int (51), CCons (Int32.of_int (54), CCons (Int32.of_int (52), CCons (Int32.of_int (56), CEmpty)))))))))))) | CFalse -> (CCons (Int32.of_int (45), (string_45from_45int32) ((Int32.mul) (integer) (Int32.of_int (-1)))))) | CFalse -> ((string_45from_45int32_39) (integer) (CEmpty));;
type ('v, 'e) result = CResult : 'v -> ('v, 'e) result | CError : 'e -> ('v, 'e) result;;
let rec result_45result = fun result -> CResult (result);;
let rec result_45error = fun error -> CError (error);;
let rec result_45first = fun f result -> match result with CResult (x) -> (CResult ((f) (x))) | CError (error) -> (CError (error));;
let rec result_45second = fun f result -> match result with CResult (x) -> (CResult (x)) | CError (error) -> (CError ((f) (error)));;
let rec result_45flatmap = fun f result -> match result with CResult (x) -> ((f) (x)) | CError (error) -> (CError (error));;
let rec result_45result_63 = fun result -> match result with CError (_95) -> (CFalse) | _95 -> (CTrue);;
let rec result_45error_63 = fun result -> (not) ((result_45result_63) (result));;
let rec result_45filter_45list = fun list -> (list_45foldr) (fun result new_45list -> match result with CResult (x) -> (CCons (x, new_45list)) | _95 -> (new_45list)) (CEmpty) (list);;
let rec result_45concat = fun list -> match (list_45filter) (result_45error_63) (list) with CCons (CError (error), _95) -> (CError (error)) | CCons (CResult (_95), _95_95) -> (CResult (CEmpty)) | CEmpty -> (CResult ((result_45filter_45list) (list)));;
let rec result_45of_45maybe = fun error maybe -> match maybe with CSome (x) -> (CResult (x)) | CNone -> (CError (error));;
let rec read_45while_39 = fun predicate iterator string -> match (indexed_45iterator_45get) (iterator) with CNone -> (CPair (iterator, string)) | CSome (x) -> (match (predicate) (x) with CTrue -> ((read_45while_39) (predicate) ((indexed_45iterator_45next) (iterator)) (CCons (x, string))) | CFalse -> (CPair (iterator, string)));;
let rec read_45while = fun predicate iterator -> match (read_45while_39) (predicate) (iterator) (CEmpty) with CPair (iterator, CEmpty) -> (CPair (iterator, CEmpty)) | CPair (iterator, string) -> (CPair (iterator, (list_45reverse) (string)));;
let rec whitespace_63 = fun character -> (_or) ((_61) (character) (Int32.of_int (32))) ((_or) ((_61) (character) (Int32.of_int (13))) ((_or) ((_61) (character) (Int32.of_int (9))) ((_61) (character) (Int32.of_int (10)))));;
let rec atom_45character_63 = fun character -> (_and) ((not) ((_61) (character) (Int32.of_int (40)))) ((_and) ((not) ((_61) (character) (Int32.of_int (41)))) ((not) ((whitespace_63) (character))));;
type range = CRange : int32 * int32 -> range;;
type sexp = CSymbol : (int32) list * range -> sexp | CList : (sexp) list * range -> sexp;;
type parse_45error = CParseErrorTooFewClosingBrackets | CParseErrorTooManyClosingBrackets;;
type ('i, 'e) parse_45result = CParseNext : 'i * 'e -> ('i, 'e) parse_45result | CParseOut : 'i -> ('i, 'e) parse_45result | CParseEnd;;
let rec symbol_45range = fun start _end -> CRange ((indexed_45iterator_45index) (start), (indexed_45iterator_45index) (_end));;
let rec parse_45symbol = fun iterator -> match (read_45while) (atom_45character_63) (iterator) with CPair (_95, CEmpty) -> (CParseOut (iterator)) | CPair (next_45iterator, name) -> (CParseNext (next_45iterator, CSymbol (name, (symbol_45range) (iterator) (next_45iterator))));;
let rec list_45range = fun start _end -> CRange ((Int32.sub) ((indexed_45iterator_45index) (start)) (Int32.of_int (1)), (indexed_45iterator_45index) (_end));;
let rec parse_45list = fun iterator parse_45sexps -> match (parse_45sexps) (iterator) (CEmpty) with CPair (next_45iterator, expressions) -> (CParseNext (next_45iterator, CList (expressions, (list_45range) (iterator) (next_45iterator))));;
let rec parse_45expression = fun iterator parse_45sexps -> match (indexed_45iterator_45get) (iterator) with CNone -> (CParseEnd) | CSome (40l) -> ((parse_45list) ((indexed_45iterator_45next) (iterator)) (parse_45sexps)) | CSome (41l) -> (CParseOut ((indexed_45iterator_45next) (iterator))) | CSome (x) -> (match (whitespace_63) (x) with CTrue -> ((parse_45expression) ((indexed_45iterator_45next) (iterator)) (parse_45sexps)) | CFalse -> ((parse_45symbol) (iterator)));;
let rec parse_45sexps_39 = fun iterator expressions -> match (parse_45expression) (iterator) (parse_45sexps_39) with CParseEnd -> (CPair (iterator, (list_45reverse) (expressions))) | CParseOut (iterator) -> (CPair (iterator, (list_45reverse) (expressions))) | CParseNext (iterator, result) -> ((parse_45sexps_39) (iterator) (CCons (result, expressions)));;
let rec inc = fun x -> (Int32.add) (x) (Int32.of_int (1));;
let rec count_45parens = fun iterator -> (indexed_45iterator_45foldl) (fun c count -> match c with 40l -> ((pair_45map_45left) (inc) (count)) | 41l -> ((pair_45map_45right) (inc) (count)) | _95 -> (count)) (CPair (Int32.of_int (0), Int32.of_int (0))) (iterator);;
let rec check_45errors = fun iterator -> match (count_45parens) (iterator) with CPair (_open, _close) -> (match (_60) (_open) (_close) with CTrue -> (CSome (CParseErrorTooManyClosingBrackets)) | CFalse -> (match (_62) (_open) (_close) with CTrue -> (CSome (CParseErrorTooFewClosingBrackets)) | CFalse -> (CNone)));;
let rec parse = fun input -> match (check_45errors) ((list_45to_45indexed_45iterator) (input)) with CSome (error) -> (CError (error)) | CNone -> (match (parse_45sexps_39) ((list_45to_45indexed_45iterator) (input)) (CEmpty) with CPair (_95, expressions) -> (CResult (expressions)));;
let rec wrap_45in_45brackets = fun string -> (string_45concat) ((string_45of_45char) (Int32.of_int (40))) ((string_45concat) (string) ((string_45of_45char) (Int32.of_int (41))));;
let rec stringify_45sexp = fun stringify expression -> match expression with CSymbol (name, _95) -> (name) | CList (expressions, _95) -> ((wrap_45in_45brackets) ((stringify) (expressions)));;
let rec stringify = fun expressions -> (string_45join) ((string_45of_45char) (Int32.of_int (32))) ((list_45map) ((stringify_45sexp) (stringify)) (expressions));;
let rec def_45string = fun () -> CCons (Int32.of_int (100), CCons (Int32.of_int (101), CCons (Int32.of_int (102), CEmpty)));;
let rec export_45string = fun () -> CCons (Int32.of_int (101), CCons (Int32.of_int (120), CCons (Int32.of_int (112), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (116), CEmpty))))));;
let rec typ_45string = fun () -> CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CEmpty)));;
let rec fn_45string = fun () -> CCons (Int32.of_int (102), CCons (Int32.of_int (110), CEmpty));;
let rec match_45string = fun () -> CCons (Int32.of_int (109), CCons (Int32.of_int (97), CCons (Int32.of_int (116), CCons (Int32.of_int (99), CCons (Int32.of_int (104), CEmpty)))));;
let rec exists_45string = fun () -> CCons (Int32.of_int (101), CCons (Int32.of_int (120), CCons (Int32.of_int (105), CCons (Int32.of_int (115), CCons (Int32.of_int (116), CCons (Int32.of_int (115), CEmpty))))));;
let rec char_45is_45upper_45case_63 = fun char -> (_and) ((_62_61) (char) (Int32.of_int (65))) ((_60_61) (char) (Int32.of_int (90)));;
let rec name_45of_45constructor_63 = fun name -> match name with CCons (first_45letter, _95) -> ((char_45is_45upper_45case_63) (first_45letter)) | CEmpty -> (CFalse);;
type error = CMalformedDefinitionError : range -> error | CMalformedTypeDefinitionError : range -> error | CMalformedFunctionDefinitionError : range -> error | CMalformedFunctionNameError : range -> error | CMalformedExpressionError : range -> error | CMalformedSymbolError : range -> error | CMalformedConstructorError : range -> error | CMalformedTypeError : range -> error | CMalformedSexpTooFewClosingBrackets | CMalformedSexpTooManyClosingBrackets;;
let rec symbol_45to_45string = fun symbol -> match symbol with CSymbol (name, _95) -> (CResult (name)) | CList (_95, range) -> (CError (CMalformedSymbolError (range)));;
type _type = CSimpleType : (int32) list * range -> _type | CComplexType : (int32) list * (_type) list * range -> _type | CFunctionType : (_type) list * _type * range -> _type;;
type type_45parameter = CUniversalParameter : (int32) list * range -> type_45parameter | CExistentialParameter : (int32) list * range -> type_45parameter;;
type constructor = CSimpleConstructor : (int32) list * range -> constructor | CComplexConstructor : (int32) list * (_type) list * range -> constructor;;
type pattern = CCapture : (int32) list * range -> pattern | CIntegerPattern : int32 * range -> pattern | CConstructorPattern : (int32) list * (pattern) list * range -> pattern;;
type expression = CIntegerConstant : int32 * range -> expression | CIdentifier : (int32) list * range -> expression | CLambda : ((int32) list) list * expression * range -> expression | CMatch : expression * ((pattern, expression) pair) list * range -> expression | CConstructor : (int32) list * (expression) list * range -> expression | CFunctionApplication : (expression) list * range -> expression;;
type definition = CTypeDefinition : (int32) list * (type_45parameter) list * (constructor) list * range -> definition | CExportDefinition : (int32) list * ((int32) list) list * expression * range -> definition | CFunctionDefinition : (int32) list * ((int32) list) list * expression * range -> definition;;
let rec error_45range_45to_45string = fun range -> match range with CRange (start, _end) -> ((string_45concat) (CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CEmpty))))) ((string_45concat) ((string_45from_45int32) (start)) ((string_45concat) (CCons (Int32.of_int (45), CEmpty)) ((string_45from_45int32) (_end)))));;
let rec error_45to_45string = fun error -> match error with CMalformedDefinitionError (range) -> ((string_45concat) (CCons (Int32.of_int (79), CCons (Int32.of_int (110), CCons (Int32.of_int (108), CCons (Int32.of_int (121), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (45), CCons (Int32.of_int (32), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (32), CCons (Int32.of_int (102), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (100), CCons (Int32.of_int (101), CCons (Int32.of_int (102), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (115), CCons (Int32.of_int (32), CCons (Int32.of_int (99), CCons (Int32.of_int (97), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (98), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (112), CCons (Int32.of_int (32), CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (118), CCons (Int32.of_int (101), CCons (Int32.of_int (108), CCons (Int32.of_int (32), CCons (Int32.of_int (111), CCons (Int32.of_int (102), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (32), CCons (Int32.of_int (102), CCons (Int32.of_int (105), CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (46), CCons (Int32.of_int (32), CCons (Int32.of_int (89), CCons (Int32.of_int (111), CCons (Int32.of_int (117), CCons (Int32.of_int (32), CCons (Int32.of_int (110), CCons (Int32.of_int (101), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (32), CCons (Int32.of_int (119), CCons (Int32.of_int (114), CCons (Int32.of_int (97), CCons (Int32.of_int (112), CCons (Int32.of_int (32), CCons (Int32.of_int (101), CCons (Int32.of_int (120), CCons (Int32.of_int (112), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (115), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (115), CCons (Int32.of_int (32), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (32), CCons (Int32.of_int (102), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (46), CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedFunctionDefinitionError (range) -> ((string_45concat) (CCons (Int32.of_int (73), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (107), CCons (Int32.of_int (32), CCons (Int32.of_int (121), CCons (Int32.of_int (111), CCons (Int32.of_int (117), CCons (Int32.of_int (32), CCons (Int32.of_int (119), CCons (Int32.of_int (97), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (32), CCons (Int32.of_int (119), CCons (Int32.of_int (114), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (32), CCons (Int32.of_int (102), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (100), CCons (Int32.of_int (101), CCons (Int32.of_int (102), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (44), CCons (Int32.of_int (32), CCons (Int32.of_int (98), CCons (Int32.of_int (117), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (100), CCons (Int32.of_int (111), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (110), CCons (Int32.of_int (39), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (104), CCons (Int32.of_int (97), CCons (Int32.of_int (118), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (114), CCons (Int32.of_int (105), CCons (Int32.of_int (103), CCons (Int32.of_int (104), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (115), CCons (Int32.of_int (104), CCons (Int32.of_int (97), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (46), CCons (Int32.of_int (32), CCons (Int32.of_int (73), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (115), CCons (Int32.of_int (104), CCons (Int32.of_int (111), CCons (Int32.of_int (117), CCons (Int32.of_int (108), CCons (Int32.of_int (100), CCons (Int32.of_int (32), CCons (Int32.of_int (108), CCons (Int32.of_int (111), CCons (Int32.of_int (111), CCons (Int32.of_int (107), CCons (Int32.of_int (32), CCons (Int32.of_int (108), CCons (Int32.of_int (105), CCons (Int32.of_int (107), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (105), CCons (Int32.of_int (115), CCons (Int32.of_int (58), CCons (Int32.of_int (10), CCons (Int32.of_int (10), CCons (Int32.of_int (40), CCons (Int32.of_int (100), CCons (Int32.of_int (101), CCons (Int32.of_int (102), CCons (Int32.of_int (32), CCons (Int32.of_int (110), CCons (Int32.of_int (97), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (45), CCons (Int32.of_int (111), CCons (Int32.of_int (102), CCons (Int32.of_int (45), CCons (Int32.of_int (102), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (32), CCons (Int32.of_int (40), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (103), CCons (Int32.of_int (117), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (115), CCons (Int32.of_int (41), CCons (Int32.of_int (32), CCons (Int32.of_int (101), CCons (Int32.of_int (120), CCons (Int32.of_int (112), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (115), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (41), CCons (Int32.of_int (10), CCons (Int32.of_int (10), CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedTypeDefinitionError (range) -> ((string_45concat) (CCons (Int32.of_int (73), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (107), CCons (Int32.of_int (32), CCons (Int32.of_int (121), CCons (Int32.of_int (111), CCons (Int32.of_int (117), CCons (Int32.of_int (32), CCons (Int32.of_int (119), CCons (Int32.of_int (97), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (32), CCons (Int32.of_int (119), CCons (Int32.of_int (114), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (100), CCons (Int32.of_int (101), CCons (Int32.of_int (102), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (44), CCons (Int32.of_int (32), CCons (Int32.of_int (98), CCons (Int32.of_int (117), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (100), CCons (Int32.of_int (111), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (110), CCons (Int32.of_int (39), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (104), CCons (Int32.of_int (97), CCons (Int32.of_int (118), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (114), CCons (Int32.of_int (105), CCons (Int32.of_int (103), CCons (Int32.of_int (104), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (115), CCons (Int32.of_int (104), CCons (Int32.of_int (97), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (46), CCons (Int32.of_int (32), CCons (Int32.of_int (73), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (115), CCons (Int32.of_int (104), CCons (Int32.of_int (111), CCons (Int32.of_int (117), CCons (Int32.of_int (108), CCons (Int32.of_int (100), CCons (Int32.of_int (32), CCons (Int32.of_int (108), CCons (Int32.of_int (111), CCons (Int32.of_int (111), CCons (Int32.of_int (107), CCons (Int32.of_int (32), CCons (Int32.of_int (108), CCons (Int32.of_int (105), CCons (Int32.of_int (107), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (105), CCons (Int32.of_int (115), CCons (Int32.of_int (58), CCons (Int32.of_int (10), CCons (Int32.of_int (10), CCons (Int32.of_int (40), CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (110), CCons (Int32.of_int (97), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (45), CCons (Int32.of_int (111), CCons (Int32.of_int (102), CCons (Int32.of_int (45), CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (78), CCons (Int32.of_int (97), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (79), CCons (Int32.of_int (102), CCons (Int32.of_int (67), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (115), CCons (Int32.of_int (116), CCons (Int32.of_int (114), CCons (Int32.of_int (117), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (32), CCons (Int32.of_int (46), CCons (Int32.of_int (46), CCons (Int32.of_int (46), CCons (Int32.of_int (41), CCons (Int32.of_int (10), CCons (Int32.of_int (10), CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedFunctionNameError (range) -> ((string_45concat) (CCons (Int32.of_int (77), CCons (Int32.of_int (97), CCons (Int32.of_int (108), CCons (Int32.of_int (102), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (70), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (78), CCons (Int32.of_int (97), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (69), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty))))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedExpressionError (range) -> ((string_45concat) (CCons (Int32.of_int (77), CCons (Int32.of_int (97), CCons (Int32.of_int (108), CCons (Int32.of_int (102), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (69), CCons (Int32.of_int (120), CCons (Int32.of_int (112), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (115), CCons (Int32.of_int (105), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (69), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedSymbolError (range) -> ((string_45concat) (CCons (Int32.of_int (77), CCons (Int32.of_int (97), CCons (Int32.of_int (108), CCons (Int32.of_int (102), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (83), CCons (Int32.of_int (121), CCons (Int32.of_int (109), CCons (Int32.of_int (98), CCons (Int32.of_int (111), CCons (Int32.of_int (108), CCons (Int32.of_int (69), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedConstructorError (range) -> ((string_45concat) (CCons (Int32.of_int (77), CCons (Int32.of_int (97), CCons (Int32.of_int (108), CCons (Int32.of_int (102), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (67), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (115), CCons (Int32.of_int (116), CCons (Int32.of_int (114), CCons (Int32.of_int (117), CCons (Int32.of_int (99), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (69), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty)))))))))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedTypeError (range) -> ((string_45concat) (CCons (Int32.of_int (77), CCons (Int32.of_int (97), CCons (Int32.of_int (108), CCons (Int32.of_int (102), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (109), CCons (Int32.of_int (101), CCons (Int32.of_int (100), CCons (Int32.of_int (84), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (69), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty))))))))))))))))))) ((error_45range_45to_45string) (range))) | CMalformedSexpTooFewClosingBrackets -> (CCons (Int32.of_int (84), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (111), CCons (Int32.of_int (32), CCons (Int32.of_int (102), CCons (Int32.of_int (101), CCons (Int32.of_int (119), CCons (Int32.of_int (32), CCons (Int32.of_int (99), CCons (Int32.of_int (108), CCons (Int32.of_int (111), CCons (Int32.of_int (115), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (103), CCons (Int32.of_int (32), CCons (Int32.of_int (112), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CEmpty)))))))))))))))))))))))))))))))))))))) | CMalformedSexpTooManyClosingBrackets -> (CCons (Int32.of_int (84), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (116), CCons (Int32.of_int (111), CCons (Int32.of_int (111), CCons (Int32.of_int (32), CCons (Int32.of_int (109), CCons (Int32.of_int (97), CCons (Int32.of_int (110), CCons (Int32.of_int (121), CCons (Int32.of_int (32), CCons (Int32.of_int (99), CCons (Int32.of_int (108), CCons (Int32.of_int (111), CCons (Int32.of_int (115), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (103), CCons (Int32.of_int (32), CCons (Int32.of_int (112), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CEmpty)))))))))))))))))))))))))))))))))))))));;
let rec sexp_45to_45complex_45type = fun sexp_45to_45types name parameters range -> (result_45first) (fun sub_45types -> CComplexType (name, sub_45types, range)) ((sexp_45to_45types) (parameters));;
let rec sexp_45to_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> match parameters with CCons (CList (arg_45types, _95), CCons (return_45type, CEmpty)) -> ((result_45flatmap) (fun arg_45types -> (result_45first) (fun return_45type -> CFunctionType (arg_45types, return_45type, range)) ((sexp_45to_45type) (return_45type))) ((sexp_45to_45types) (arg_45types))) | _95 -> (CError (CMalformedTypeError (range)));;
let rec sexp_45to_45complex_45or_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> match (string_45equal_63) (name) ((fn_45string) ()) with CTrue -> ((sexp_45to_45function_45type) (sexp_45to_45types) (sexp_45to_45type) (name) (parameters) (range)) | CFalse -> ((sexp_45to_45complex_45type) (sexp_45to_45types) (name) (parameters) (range));;
let rec sexp_45to_45type = fun sexp_45to_45types _type -> match _type with CList (CCons (CSymbol (name, _95), parameters), range) -> ((sexp_45to_45complex_45or_45function_45type) (sexp_45to_45types) ((sexp_45to_45type) (sexp_45to_45types)) (name) (parameters) (range)) | CSymbol (name, range) -> (CResult (CSimpleType (name, range))) | CList (_95, range) -> (CError (CMalformedTypeError (range)));;
let rec sexp_45to_45types = fun types -> (result_45concat) ((list_45map) ((sexp_45to_45type) (sexp_45to_45types)) (types));;
let rec sexp_45to_45complex_45constructor = fun name types range -> (result_45first) (fun types -> CComplexConstructor (name, types, range)) ((sexp_45to_45types) (types));;
let rec sexp_45to_45constructor_45definition = fun constructor -> match constructor with CSymbol (name, range) -> (CResult (CSimpleConstructor (name, range))) | CList (CCons (CSymbol (name, _95), types), range) -> ((sexp_45to_45complex_45constructor) (name) (types) (range)) | CList (_95, range) -> (CError (CMalformedConstructorError (range)));;
let rec sexp_45to_45constructor_45definitions = fun constructors -> (result_45concat) ((list_45map) (sexp_45to_45constructor_45definition) (constructors));;
let rec sexp_45to_45type_45parameter = fun sexp -> match sexp with CList (CCons (_95, CCons (CSymbol (name, range), CEmpty)), _95_95) -> (CResult (CExistentialParameter (name, range))) | CSymbol (name, range) -> (CResult (CUniversalParameter (name, range))) | CList (_95, range) -> (CError (CMalformedDefinitionError (range)));;
let rec sexp_45to_45type_45parameters = fun type_45name -> match type_45name with CList (CCons (CSymbol (_95, _95_95), parameters), _95_95_95) -> ((result_45concat) ((list_45map) (sexp_45to_45type_45parameter) (parameters))) | CSymbol (_95, _95_95) -> (CResult (CEmpty)) | CList (_95, range) -> (CError (CMalformedTypeError (range)));;
let rec sexp_45to_45type_45name = fun type_45name -> match type_45name with CList (CCons (CSymbol (name, _95), _95_95), _95_95_95) -> (CResult (name)) | CSymbol (name, _95) -> (CResult (name)) | CList (_95, range) -> (CError (CMalformedTypeError (range)));;
let rec sexp_45to_45type_45definition = fun type_45name constructors range -> (result_45flatmap) (fun name -> (result_45flatmap) (fun parameters -> (result_45first) (fun constructors -> CTypeDefinition (name, parameters, constructors, range)) ((sexp_45to_45constructor_45definitions) (constructors))) ((sexp_45to_45type_45parameters) (type_45name))) ((sexp_45to_45type_45name) (type_45name));;
let rec sexp_45to_45arguments = fun arguments -> (result_45concat) ((list_45map) (symbol_45to_45string) (arguments));;
let rec sexp_45to_45function_45body = fun range rest -> match rest with CCons (CList (arguments, _95), CCons (expression, CEmpty)) -> (CResult (CPair (arguments, expression))) | _95 -> (CError (CMalformedFunctionDefinitionError (range)));;
let rec sexp_45to_45lambda = fun sexp_45to_45expression rest range -> (result_45flatmap) (fun body -> (result_45flatmap) (fun arguments -> (result_45first) (fun expression -> CLambda (arguments, expression, range)) ((sexp_45to_45expression) ((pair_45right) (body)))) ((sexp_45to_45arguments) ((pair_45left) (body)))) ((sexp_45to_45function_45body) (range) (rest));;
let rec sexp_45to_45function_45application = fun sexp_45to_45expression range expressions -> ((fun (x) -> x |> (list_45map) (sexp_45to_45expression) |> result_45concat |> (result_45first) (fun expressions -> CFunctionApplication (expressions, range)))) (expressions);;
let rec to_45constructor_45or_45capture = fun range name -> match (name_45of_45constructor_63) (name) with CTrue -> (CResult (CConstructorPattern (name, CEmpty, range))) | CFalse -> (CResult (CCapture (name, range)));;
let rec sexp_45to_45pattern = fun sexp -> match sexp with CList (CCons (name, rest), range) -> ((result_45flatmap) (fun patterns -> (result_45first) (fun name -> CConstructorPattern (name, patterns, range)) ((symbol_45to_45string) (name))) ((result_45concat) ((list_45map) (sexp_45to_45pattern) (rest)))) | CList (CEmpty, range) -> (CError (CMalformedExpressionError (range))) | CSymbol (name, range) -> (((fun (x) -> x |> (maybe_45map) (fun integer -> CResult (CIntegerPattern (integer, range))) |> (maybe_45else) (fun () -> (to_45constructor_45or_45capture) (range) (name)))) ((string_45to_45int32) (name)));;
let rec sexp_45to_45match_45pair = fun sexp_45to_45expression pair -> match pair with CPair (pattern, expression) -> ((result_45flatmap) (fun pattern -> (result_45first) (fun expression -> CPair (pattern, expression)) ((sexp_45to_45expression) (expression))) ((sexp_45to_45pattern) (pattern)));;
let rec collect_45pairs = fun list -> match list with CCons (a, CCons (b, rest)) -> ((maybe_45map) (fun more_45pairs -> CCons (CPair (a, b), more_45pairs)) ((collect_45pairs) (rest))) | CEmpty -> (CSome (CEmpty)) | _95 -> (CNone);;
let rec sexp_45to_45match_45pairs = fun sexp_45to_45expression range pairs -> ((fun (x) -> x |> collect_45pairs |> (result_45of_45maybe) (CMalformedExpressionError (range)) |> (result_45flatmap) ((fun (x) -> x |> (list_45map) ((sexp_45to_45match_45pair) (sexp_45to_45expression)) |> result_45concat)))) (pairs);;
let rec sexp_45to_45match = fun sexp_45to_45expression range rest -> match rest with CCons (expression, rest) -> ((result_45flatmap) (fun expression -> (result_45first) (fun pairs -> CMatch (expression, pairs, range)) ((sexp_45to_45match_45pairs) (sexp_45to_45expression) (range) (rest))) ((sexp_45to_45expression) (expression))) | _95 -> (CError (CMalformedExpressionError (range)));;
let rec sexp_45to_45constructor = fun sexp_45to_45expression range name rest -> (result_45first) (fun expressions -> CConstructor (name, expressions, range)) ((result_45concat) ((list_45map) (sexp_45to_45expression) (rest)));;
let rec sexp_45to_45list_45expression = fun sexp_45to_45expression expressions range -> match expressions with CCons (CSymbol (symbol, _95), rest) -> (match (string_45equal_63) (symbol) ((fn_45string) ()) with CTrue -> ((sexp_45to_45lambda) (sexp_45to_45expression) (rest) (range)) | CFalse -> (match (string_45equal_63) (symbol) ((match_45string) ()) with CTrue -> ((sexp_45to_45match) (sexp_45to_45expression) (range) (rest)) | CFalse -> (match (name_45of_45constructor_63) (symbol) with CTrue -> ((sexp_45to_45constructor) (sexp_45to_45expression) (range) (symbol) (rest)) | CFalse -> ((sexp_45to_45function_45application) (sexp_45to_45expression) (range) (expressions))))) | _95 -> ((sexp_45to_45function_45application) (sexp_45to_45expression) (range) (expressions));;
let rec sexp_45to_45expression = fun sexp -> match sexp with CSymbol (symbol_45name, range) -> (match (string_45to_45int32) (symbol_45name) with CSome (integer) -> (CResult (CIntegerConstant (integer, range))) | CNone -> (match (name_45of_45constructor_63) (symbol_45name) with CTrue -> (CResult (CConstructor (symbol_45name, CEmpty, range))) | CFalse -> (CResult (CIdentifier (symbol_45name, range))))) | CList (expressions, range) -> (match expressions with CEmpty -> (CError (CMalformedExpressionError (range))) | _95 -> ((sexp_45to_45list_45expression) (sexp_45to_45expression) (expressions) (range)));;
let rec sexp_45to_45function_45definition = fun name_45symbol rest range constructor -> (result_45flatmap) (fun body -> (result_45flatmap) (fun arguments -> (result_45flatmap) (fun expression -> (result_45first) (fun name -> (constructor) (name) (arguments) (expression) (range)) ((symbol_45to_45string) (name_45symbol))) ((sexp_45to_45expression) ((pair_45right) (body)))) ((sexp_45to_45arguments) ((pair_45left) (body)))) ((sexp_45to_45function_45body) (range) (rest));;
let rec sexp_45to_45definition_39 = fun name rest range kind -> match (string_45equal_63) (kind) ((typ_45string) ()) with CTrue -> ((sexp_45to_45type_45definition) (name) (rest) (range)) | CFalse -> (match (string_45equal_63) (kind) ((def_45string) ()) with CTrue -> ((sexp_45to_45function_45definition) (name) (rest) (range) (fun name arguments expression range -> CFunctionDefinition (name, arguments, expression, range))) | CFalse -> (match (string_45equal_63) (kind) ((export_45string) ()) with CTrue -> ((sexp_45to_45function_45definition) (name) (rest) (range) (fun name arguments expression range -> CExportDefinition (name, arguments, expression, range))) | CFalse -> (CError (CMalformedDefinitionError (range)))));;
let rec sexp_45to_45definition = fun expression -> match expression with CList (CCons (CSymbol (kind, _95), CEmpty), range) -> (match (string_45equal_63) (kind) ((typ_45string) ()) with CTrue -> (CError (CMalformedTypeDefinitionError (range))) | CFalse -> (match (string_45equal_63) (kind) ((def_45string) ()) with CTrue -> (CError (CMalformedFunctionDefinitionError (range))) | CFalse -> (CError (CMalformedDefinitionError (range))))) | CList (CCons (CSymbol (kind, _95), CCons (_95_95, CEmpty)), range) -> (match (string_45equal_63) (kind) ((typ_45string) ()) with CTrue -> (CError (CMalformedTypeDefinitionError (range))) | CFalse -> (match (string_45equal_63) (kind) ((def_45string) ()) with CTrue -> (CError (CMalformedFunctionDefinitionError (range))) | CFalse -> (CError (CMalformedDefinitionError (range))))) | CList (CCons (kind, CCons (name, rest)), range) -> ((result_45flatmap) ((sexp_45to_45definition_39) (name) (rest) (range)) ((symbol_45to_45string) (kind))) | CList (CEmpty, range) -> (CError (CMalformedDefinitionError (range))) | CSymbol (_95, range) -> (CError (CMalformedDefinitionError (range)));;
let rec sexps_45to_45definitions = fun expressions -> match expressions with CResult (expressions) -> ((list_45map) (sexp_45to_45definition) (expressions)) | CError (error) -> (match error with CParseErrorTooFewClosingBrackets -> (CCons (CError (CMalformedSexpTooFewClosingBrackets), CEmpty)) | CParseErrorTooManyClosingBrackets -> (CCons (CError (CMalformedSexpTooManyClosingBrackets), CEmpty)));;
let rec type_45to_45sexp = fun types_45to_45sexp _type -> match _type with CSimpleType (name, range) -> (CSymbol (name, range)) | CFunctionType (arg_45types, return_45type, range) -> (CList (CCons (CSymbol ((fn_45string) (), range), CCons (CList ((types_45to_45sexp) (arg_45types), range), CCons ((type_45to_45sexp) (types_45to_45sexp) (return_45type), CEmpty))), range)) | CComplexType (name, types, range) -> (CList (CCons (CSymbol (name, range), (types_45to_45sexp) (types)), range));;
let rec types_45to_45sexp = fun types -> (list_45map) ((type_45to_45sexp) (types_45to_45sexp)) (types);;
let rec constructor_45to_45sexp = fun constructor -> match constructor with CSimpleConstructor (name, range) -> (CSymbol (name, range)) | CComplexConstructor (name, types, range) -> (CList (CCons (CSymbol (name, range), (types_45to_45sexp) (types)), range));;
let rec constructors_45to_45sexp = fun constructors -> (list_45map) (constructor_45to_45sexp) (constructors);;
let rec type_45parameter_45to_45sexp = fun parameter -> match parameter with CExistentialParameter (name, range) -> (CList (CCons (CSymbol ((exists_45string) (), range), CCons (CSymbol (name, range), CEmpty)), range)) | CUniversalParameter (name, range) -> (CSymbol (name, range));;
let rec type_45name_45to_45sexp = fun range name parameters -> match parameters with CEmpty -> (CSymbol (name, range)) | _95 -> (CList (CCons (CSymbol (name, range), (list_45map) (type_45parameter_45to_45sexp) (parameters)), range));;
let rec type_45definition_45to_45sexp = fun name parameters constructors range -> CList ((list_45concat) (CCons (CSymbol ((typ_45string) (), range), CCons ((type_45name_45to_45sexp) (range) (name) (parameters), CEmpty))) ((constructors_45to_45sexp) (constructors)), range);;
let rec function_45arguments_45to_45sexp = fun arguments range -> CList ((list_45map) (fun name -> CSymbol (name, range)) (arguments), range);;
let rec pattern_45to_45sexp = fun pattern -> match pattern with CConstructorPattern (name, CEmpty, range) -> (CSymbol (name, range)) | CConstructorPattern (name, patterns, range) -> (CList (CCons (CSymbol (name, range), (list_45map) (pattern_45to_45sexp) (patterns)), range)) | CIntegerPattern (value, range) -> (CSymbol ((string_45from_45int32) (value), range)) | CCapture (name, range) -> (CSymbol (name, range));;
let rec match_45pair_45to_45sexp = fun expression_45to_45sexp pair -> match pair with CPair (pattern, expression) -> (CCons ((pattern_45to_45sexp) (pattern), CCons ((expression_45to_45sexp) (expression), CEmpty)));;
let rec expression_45to_45sexp = fun expression -> match expression with CIntegerConstant (integer, range) -> (CSymbol ((string_45from_45int32) (integer), range)) | CIdentifier (string, range) -> (CSymbol (string, range)) | CLambda (arguments, expression, range) -> (CList (CCons (CSymbol ((fn_45string) (), range), CCons ((function_45arguments_45to_45sexp) (arguments) (range), CCons ((expression_45to_45sexp) (expression), CEmpty))), range)) | CMatch (expression, pairs, range) -> (CList (CCons (CSymbol ((match_45string) (), range), CCons ((expression_45to_45sexp) (expression), (list_45flatmap) ((match_45pair_45to_45sexp) (expression_45to_45sexp)) (pairs))), range)) | CConstructor (name, expressions, range) -> (match expressions with CEmpty -> (CSymbol (name, range)) | _95 -> (CList (CCons (CSymbol (name, range), (list_45map) (expression_45to_45sexp) (expressions)), range))) | CFunctionApplication (expressions, range) -> (CList ((list_45map) (expression_45to_45sexp) (expressions), range));;
let rec function_45definition_45to_45sexp = fun name arguments expression range kind -> CList (CCons (CSymbol (kind, range), CCons (CSymbol (name, range), CCons ((function_45arguments_45to_45sexp) (arguments) (range), CCons ((expression_45to_45sexp) (expression), CEmpty)))), range);;
let rec definition_45to_45sexp = fun definition -> match definition with CTypeDefinition (name, parameters, constructors, range) -> ((type_45definition_45to_45sexp) (name) (parameters) (constructors) (range)) | CExportDefinition (name, arguments, expression, range) -> ((function_45definition_45to_45sexp) (name) (arguments) (expression) (range) ((export_45string) ())) | CFunctionDefinition (name, arguments, expression, range) -> ((function_45definition_45to_45sexp) (name) (arguments) (expression) (range) ((def_45string) ()));;
let rec error_45to_45sexp = fun error -> CSymbol ((error_45to_45string) (error), CRange (Int32.of_int (0), Int32.of_int (0)));;
let rec render_45result = fun result -> match result with CResult (sexp) -> (sexp) | CError (sexp) -> (sexp);;
let rec definitions_45to_45sexps = fun definitions -> (list_45map) ((fun (x) -> x |> (result_45first) (definition_45to_45sexp) |> (result_45second) (error_45to_45sexp) |> render_45result)) (definitions);;
let rec compile_45error = fun () -> CCons (Int32.of_int (42), CCons (Int32.of_int (99), CCons (Int32.of_int (111), CCons (Int32.of_int (109), CCons (Int32.of_int (112), CCons (Int32.of_int (105), CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (101), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (42), CEmpty)))))))))))))));;
let rec definition_45end = fun () -> CCons (Int32.of_int (59), CCons (Int32.of_int (59), CEmpty));;
let rec let_45rec = fun () -> CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (99), CCons (Int32.of_int (32), CEmpty))))))));;
let rec _type = fun () -> CCons (Int32.of_int (116), CCons (Int32.of_int (121), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CEmpty))));;
let rec _fun = fun () -> CCons (Int32.of_int (102), CCons (Int32.of_int (117), CCons (Int32.of_int (110), CEmpty)));;
let rec arrow = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (45), CCons (Int32.of_int (62), CCons (Int32.of_int (32), CEmpty))));;
let rec equals = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (61), CCons (Int32.of_int (32), CEmpty)));;
let rec comma = fun () -> CCons (Int32.of_int (44), CCons (Int32.of_int (32), CEmpty));;
let rec vertical_45bar = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (124), CCons (Int32.of_int (32), CEmpty)));;
let rec pipe_45operator = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (124), CCons (Int32.of_int (62), CCons (Int32.of_int (32), CEmpty))));;
let rec colon = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (58), CCons (Int32.of_int (32), CEmpty)));;
let rec star = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (42), CCons (Int32.of_int (32), CEmpty)));;
let rec _if = fun () -> CCons (Int32.of_int (105), CCons (Int32.of_int (102), CEmpty));;
let rec _then = fun () -> CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (101), CCons (Int32.of_int (110), CEmpty))));;
let rec _else = fun () -> CCons (Int32.of_int (101), CCons (Int32.of_int (108), CCons (Int32.of_int (115), CCons (Int32.of_int (101), CEmpty))));;
let rec _with = fun () -> CCons (Int32.of_int (119), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CEmpty))));;
let rec _of = fun () -> CCons (Int32.of_int (111), CCons (Int32.of_int (102), CEmpty));;
let rec _class = fun () -> CCons (Int32.of_int (99), CCons (Int32.of_int (108), CCons (Int32.of_int (97), CCons (Int32.of_int (115), CCons (Int32.of_int (115), CEmpty)))));;
let rec _end = fun () -> CCons (Int32.of_int (101), CCons (Int32.of_int (110), CCons (Int32.of_int (100), CEmpty)));;
let rec _in = fun () -> CCons (Int32.of_int (105), CCons (Int32.of_int (110), CEmpty));;
let rec _let = fun () -> CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (116), CEmpty)));;
let rec _open = fun () -> CCons (Int32.of_int (111), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CCons (Int32.of_int (110), CEmpty))));;
let rec and_45string = fun () -> CCons (Int32.of_int (97), CCons (Int32.of_int (110), CCons (Int32.of_int (100), CEmpty)));;
let rec or_45string = fun () -> CCons (Int32.of_int (111), CCons (Int32.of_int (114), CEmpty));;
let rec less_45than = fun () -> CCons (Int32.of_int (32), CCons (Int32.of_int (60), CCons (Int32.of_int (32), CEmpty)));;
let rec space = fun () -> CCons (Int32.of_int (32), CEmpty);;
let rec newline = fun () -> CCons (Int32.of_int (10), CEmpty);;
let rec plus = fun () -> CCons (Int32.of_int (43), CEmpty);;
let rec multiply = fun () -> CCons (Int32.of_int (42), CEmpty);;
let rec minus = fun () -> CCons (Int32.of_int (45), CEmpty);;
let rec slash = fun () -> CCons (Int32.of_int (47), CEmpty);;
let rec percent = fun () -> CCons (Int32.of_int (37), CEmpty);;
let rec _with = fun () -> CCons (Int32.of_int (119), CCons (Int32.of_int (105), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CEmpty))));;
let rec match_45string = fun () -> CCons (Int32.of_int (109), CCons (Int32.of_int (97), CCons (Int32.of_int (116), CCons (Int32.of_int (99), CCons (Int32.of_int (104), CEmpty)))));;
let rec pipe_45string = fun () -> CCons (Int32.of_int (112), CCons (Int32.of_int (105), CCons (Int32.of_int (112), CCons (Int32.of_int (101), CEmpty))));;
let rec list_45string = fun () -> CCons (Int32.of_int (108), CCons (Int32.of_int (105), CCons (Int32.of_int (115), CCons (Int32.of_int (116), CEmpty))));;
let rec int32_45less_45than_45string = fun () -> CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (45), CCons (Int32.of_int (108), CCons (Int32.of_int (101), CCons (Int32.of_int (115), CCons (Int32.of_int (115), CCons (Int32.of_int (45), CCons (Int32.of_int (116), CCons (Int32.of_int (104), CCons (Int32.of_int (97), CCons (Int32.of_int (110), CEmpty)))))))))))))));;
let rec int32 = fun () -> CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CEmpty)))));;
let rec int32_45plus = fun () -> CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (97), CCons (Int32.of_int (100), CCons (Int32.of_int (100), CEmpty)))))))));;
let rec int32_45multiply = fun () -> CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (109), CCons (Int32.of_int (117), CCons (Int32.of_int (108), CEmpty)))))))));;
let rec int32_45minus = fun () -> CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (115), CCons (Int32.of_int (117), CCons (Int32.of_int (98), CEmpty)))))))));;
let rec int32_45divide = fun () -> CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (100), CCons (Int32.of_int (105), CCons (Int32.of_int (118), CEmpty)))))))));;
let rec int32_45modulus = fun () -> CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (114), CCons (Int32.of_int (101), CCons (Int32.of_int (109), CEmpty)))))))));;
let rec join = fun list -> (string_45join) (CEmpty) (list);;
let rec not_45empty_63 = fun string -> (not) ((string_45empty_63) (string));;
let rec with_45apostrophe = fun string -> CCons (Int32.of_int (39), string);;
let rec prefix_45constructor = fun constructor -> CCons (Int32.of_int (67), constructor);;
let rec parse_45error = fun error -> (join) (CCons (CCons (Int32.of_int (112), CCons (Int32.of_int (97), CCons (Int32.of_int (114), CCons (Int32.of_int (115), CCons (Int32.of_int (101), CCons (Int32.of_int (32), CCons (Int32.of_int (101), CCons (Int32.of_int (114), CCons (Int32.of_int (114), CCons (Int32.of_int (111), CCons (Int32.of_int (114), CCons (Int32.of_int (32), CEmpty)))))))))))), CCons ((error_45to_45string) (error), CEmpty)));;
let rec is_45alphanumeric = fun char -> (_or) ((_and) ((_62_61) (char) (Int32.of_int (65))) ((_60_61) (char) (Int32.of_int (90)))) ((_or) ((_and) ((_62_61) (char) (Int32.of_int (48))) ((_60_61) (char) (Int32.of_int (57)))) ((_and) ((_62_61) (char) (Int32.of_int (97))) ((_60_61) (char) (Int32.of_int (122)))));;
let rec escape_45char = fun char -> match (is_45alphanumeric) (char) with CTrue -> (CCons (char, CEmpty)) | CFalse -> (CCons (Int32.of_int (95), (string_45from_45int32) (char)));;
let rec string_45is_45reserved_63 = fun name -> (_or) ((string_45equal_63) (name) ((_type) ())) ((_or) ((string_45equal_63) (name) ((_if) ())) ((_or) ((string_45equal_63) (name) ((_then) ())) ((_or) ((string_45equal_63) (name) ((_else) ())) ((_or) ((string_45equal_63) (name) ((_with) ())) ((_or) ((string_45equal_63) (name) ((_of) ())) ((_or) ((string_45equal_63) (name) ((_end) ())) ((_or) ((string_45equal_63) (name) ((_in) ())) ((_or) ((string_45equal_63) (name) ((_fun) ())) ((_or) ((string_45equal_63) (name) ((_let) ())) ((_or) ((string_45equal_63) (name) ((_open) ())) ((_or) ((string_45equal_63) (name) ((and_45string) ())) ((_or) ((string_45equal_63) (name) ((or_45string) ())) ((string_45equal_63) (name) ((_class) ()))))))))))))));;
let rec escape_45identifier = fun name -> match (string_45is_45reserved_63) (name) with CTrue -> (CCons (Int32.of_int (95), name)) | CFalse -> ((list_45flatmap) (escape_45char) (name));;
let rec translate_45identifier = fun name -> match (string_45equal_63) (name) ((plus) ()) with CTrue -> ((int32_45plus) ()) | CFalse -> (match (string_45equal_63) (name) ((slash) ()) with CTrue -> ((int32_45divide) ()) | CFalse -> (match (string_45equal_63) (name) ((percent) ()) with CTrue -> ((int32_45modulus) ()) | CFalse -> (match (string_45equal_63) (name) ((minus) ()) with CTrue -> ((int32_45minus) ()) | CFalse -> (match (string_45equal_63) (name) ((multiply) ()) with CTrue -> ((int32_45multiply) ()) | CFalse -> ((escape_45identifier) (name))))));;
let rec translate_45constructor = fun translator name parameters -> match parameters with CEmpty -> ((prefix_45constructor) ((escape_45identifier) (name))) | _95 -> ((join) (CCons ((prefix_45constructor) ((escape_45identifier) (name)), CCons ((space) (), CCons ((wrap_45in_45brackets) ((string_45join) ((comma) ()) ((list_45map) (translator) (parameters))), CEmpty)))));;
let rec translate_45pattern = fun pattern -> match pattern with CCapture (name, _95) -> ((escape_45identifier) (name)) | CIntegerPattern (integer, _95) -> ((join) (CCons ((string_45from_45int32) (integer), CCons (CCons (Int32.of_int (108), CEmpty), CEmpty)))) | CConstructorPattern (name, patterns, _95) -> ((translate_45constructor) (translate_45pattern) (name) (patterns));;
let rec translate_45rule = fun translate_45expression rule -> match rule with CPair (pattern, expression) -> ((join) (CCons ((translate_45pattern) (pattern), CCons ((arrow) (), CCons ((wrap_45in_45brackets) ((translate_45expression) (expression)), CEmpty)))));;
let rec translate_45pipe = fun translate_45expression expressions -> ((fun (x) -> x |> (list_45map) (translate_45expression) |> (string_45join) ((pipe_45operator) ()) |> fun expressions -> CCons ((_fun) (), CCons ((space) (), CCons ((wrap_45in_45brackets) (CCons (Int32.of_int (120), CEmpty)), CCons ((arrow) (), CCons (CCons (Int32.of_int (120), CEmpty), CCons ((pipe_45operator) (), CCons (expressions, CEmpty))))))) |> join |> wrap_45in_45brackets)) (expressions);;
let rec translate_45list = fun translate_45expression expressions -> match expressions with CEmpty -> (CCons (Int32.of_int (67), CCons (Int32.of_int (69), CCons (Int32.of_int (109), CCons (Int32.of_int (112), CCons (Int32.of_int (116), CCons (Int32.of_int (121), CEmpty))))))) | CCons (first, rest) -> ((join) (CCons (CCons (Int32.of_int (67), CCons (Int32.of_int (67), CCons (Int32.of_int (111), CCons (Int32.of_int (110), CCons (Int32.of_int (115), CCons (Int32.of_int (32), CCons (Int32.of_int (40), CEmpty))))))), CCons ((translate_45expression) (first), CCons ((comma) (), CCons ((translate_45list) (translate_45expression) (rest), CCons (CCons (Int32.of_int (41), CEmpty), CEmpty)))))));;
let rec translate_45function_45application_39 = fun translate_45expression expressions -> match expressions with CCons (no_45args_45function, CEmpty) -> ((join) (CCons ((wrap_45in_45brackets) ((translate_45expression) (no_45args_45function)), CCons ((space) (), CCons ((wrap_45in_45brackets) (CEmpty), CEmpty))))) | _95 -> ((string_45join) ((space) ()) ((list_45map) ((fun (x) -> x |> translate_45expression |> wrap_45in_45brackets)) (expressions)));;
let rec translate_45less_45than = fun translate_45expression expressions -> match expressions with CCons (a, CCons (b, CCons (then_45case, CCons (else_45case, CEmpty)))) -> ((join) (CCons ((_if) (), CCons ((space) (), CCons ((wrap_45in_45brackets) ((translate_45expression) (a)), CCons ((less_45than) (), CCons ((wrap_45in_45brackets) ((translate_45expression) (b)), CCons ((space) (), CCons ((_then) (), CCons ((space) (), CCons ((wrap_45in_45brackets) ((translate_45expression) (then_45case)), CCons ((space) (), CCons ((_else) (), CCons ((space) (), CCons ((wrap_45in_45brackets) ((translate_45expression) (else_45case)), CEmpty))))))))))))))) | _95 -> ((compile_45error) ());;
let rec translate_45function_45application = fun translate_45expression expressions -> match expressions with CCons (CIdentifier (name, _95), rest) -> (match (string_45equal_63) (name) ((pipe_45string) ()) with CTrue -> ((translate_45pipe) (translate_45expression) (rest)) | CFalse -> (match (string_45equal_63) (name) ((list_45string) ()) with CTrue -> ((translate_45list) (translate_45expression) (rest)) | CFalse -> (match (string_45equal_63) (name) ((int32_45less_45than_45string) ()) with CTrue -> ((translate_45less_45than) (translate_45expression) (rest)) | CFalse -> ((translate_45function_45application_39) (translate_45expression) (expressions))))) | _95 -> ((translate_45function_45application_39) (translate_45expression) (expressions));;
let rec translate_45argument_45list = fun arguments -> match (list_45empty_63) (arguments) with CTrue -> ((wrap_45in_45brackets) (CEmpty)) | CFalse -> ((string_45join) ((space) ()) ((list_45map) (escape_45identifier) (arguments)));;
let rec translate_45lambda = fun translate_45expression arguments expression -> (join) (CCons ((_fun) (), CCons ((space) (), CCons ((translate_45argument_45list) (arguments), CCons ((arrow) (), CCons ((translate_45expression) (expression), CEmpty))))));;
let rec translate_45expression = fun expression -> match expression with CLambda (arguments, expression, _95) -> ((wrap_45in_45brackets) ((translate_45lambda) (translate_45expression) (arguments) (expression))) | CConstructor (name, expressions, _95) -> ((translate_45constructor) (translate_45expression) (name) (expressions)) | CFunctionApplication (expressions, _95) -> ((translate_45function_45application) (translate_45expression) (expressions)) | CIntegerConstant (integer, _95) -> ((string_45concat) (CCons (Int32.of_int (73), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (51), CCons (Int32.of_int (50), CCons (Int32.of_int (46), CCons (Int32.of_int (111), CCons (Int32.of_int (102), CCons (Int32.of_int (95), CCons (Int32.of_int (105), CCons (Int32.of_int (110), CCons (Int32.of_int (116), CCons (Int32.of_int (32), CEmpty)))))))))))))) ((wrap_45in_45brackets) ((string_45from_45int32) (integer)))) | CIdentifier (name, _95) -> ((translate_45identifier) (name)) | CMatch (expression, rules, _95) -> ((string_45join) ((space) ()) (CCons ((match_45string) (), CCons ((translate_45expression) (expression), CCons ((_with) (), CCons ((string_45join) ((vertical_45bar) ()) ((list_45map) ((translate_45rule) (translate_45expression)) (rules)), CEmpty))))));;
let rec translate_45function_45definition = fun name arguments expression -> (join) (CCons ((let_45rec) (), CCons (name, CCons ((equals) (), CCons ((translate_45lambda) (translate_45expression) (arguments) (expression), CCons ((definition_45end) (), CEmpty))))));;
let rec translate_45simple_45type = fun name parameters -> match (list_45any_63) ((string_45equal_63) (name)) (parameters) with CFalse -> ((escape_45identifier) (name)) | CTrue -> ((with_45apostrophe) ((escape_45identifier) (name)));;
let rec translate_45type_45parameter = fun parameter -> match parameter with CUniversalParameter (name, _95) -> (name) | CExistentialParameter (name, _95) -> (name);;
let rec translate_45type = fun parameters _type -> match _type with CSimpleType (name, _95) -> ((translate_45simple_45type) (name) (parameters)) | CComplexType (name, types, _95) -> (((fun (x) -> x |> (list_45map) ((translate_45type) (parameters)) |> (string_45join) ((comma) ()) |> wrap_45in_45brackets |> fun types -> (join) (CCons (types, CCons ((space) (), CCons ((escape_45identifier) (name), CEmpty)))))) (types)) | CFunctionType (argument_45types, return_45type, _95) -> ((wrap_45in_45brackets) ((join) (CCons (((fun (x) -> x |> (list_45map) ((translate_45type) (parameters)) |> (string_45join) ((arrow) ()))) (argument_45types), CCons ((arrow) (), CCons ((translate_45type) (parameters) (return_45type), CEmpty))))));;
let rec translate_45types = fun parameters types -> ((fun (x) -> x |> (list_45map) ((translate_45type) (parameters)) |> (string_45join) ((star) ()))) (types);;
let rec translate_45constructor_45definition = fun _type parameters constructor -> match constructor with CSimpleConstructor (name, _95) -> ((prefix_45constructor) ((escape_45identifier) (name))) | CComplexConstructor (name, types, _95) -> ((join) (CCons ((prefix_45constructor) ((escape_45identifier) (name)), CCons ((colon) (), CCons ((translate_45types) ((list_45map) (translate_45type_45parameter) (parameters)) (types), CCons ((arrow) (), CCons (_type, CEmpty)))))));;
let rec translate_45constructor_45definitions = fun _type parameters constructors -> ((fun (x) -> x |> (list_45map) ((translate_45constructor_45definition) (_type) (parameters)) |> (string_45join) ((vertical_45bar) ()))) (constructors);;
let rec translate_45type_45parameter_45for_45definition = fun parameter -> match parameter with CUniversalParameter (name, _95) -> ((escape_45identifier) (name)) | CExistentialParameter (_95, _95_95) -> (CEmpty);;
let rec translate_45type_45parameters = fun parameters -> ((fun (x) -> x |> (list_45map) (translate_45type_45parameter_45for_45definition) |> (list_45filter) (not_45empty_63) |> (list_45map) (with_45apostrophe) |> (string_45join) ((comma) ()))) (parameters);;
let rec translate_45type_45name = fun name parameters -> match (translate_45type_45parameters) (parameters) with CEmpty -> ((escape_45identifier) (name)) | parameters -> ((join) (CCons ((wrap_45in_45brackets) (parameters), CCons ((space) (), CCons ((escape_45identifier) (name), CEmpty)))));;
let rec translate_45type_45definition = fun name parameters constructors -> (join) (CCons ((_type) (), CCons ((space) (), CCons ((translate_45type_45name) (name) (parameters), CCons ((equals) (), CCons ((translate_45constructor_45definitions) ((translate_45type_45name) (name) (parameters)) (parameters) (constructors), CCons ((definition_45end) (), CEmpty)))))));;
let rec translate_45definition = fun definition -> match definition with CFunctionDefinition (name, arguments, expression, _95) -> ((translate_45function_45definition) ((escape_45identifier) (name)) (arguments) (expression)) | CExportDefinition (name, arguments, expression, _95) -> ((translate_45function_45definition) (name) (arguments) (expression)) | CTypeDefinition (name, parameters, constructors, _95) -> ((translate_45type_45definition) (name) (parameters) (constructors));;
let rec to_ocaml = fun definitions source -> match (result_45concat) (definitions) with CResult (definitions) -> (CResult ((string_45join) ((newline) ()) ((list_45map) (translate_45definition) (definitions)))) | CError (error) -> (CError ((parse_45error) (error)));;

let _read_line ic =
    try Some (input_line ic)
    with End_of_file -> None

let _read_lines ic =
    let rec loop acc =
        match _read_line ic with
        | Some line -> loop (line :: acc)
        | None -> List.rev acc
    in
        loop [];;

let _stdin_string = String.concat "\n" (_read_lines stdin);;

let rec _string_to_list_i = fun input i result ->
    if i > 0 then
        let sub_input = (String.sub input 0 ((String.length input) - 1)) in
            _string_to_list_i sub_input (i - 1) (CCons ((Int32.of_int (Char.code (String.get input i))), result))
    else
        CCons ((Int32.of_int (Char.code (String.get input i))), result);;

let _string_to_list = fun input ->
    if String.length input == 0
    then CEmpty
    else _string_to_list_i input ((String.length input) - 1) CEmpty;;

let rec _list_to_string_r = fun input result ->
    match input with
          CCons(x, rest) ->
            let string_from_int = (String.make 1 (Char.chr (Int32.to_int x))) in
            let new_result = (String.concat "" (result :: string_from_int :: [])) in
                (_list_to_string_r rest new_result)
        | CEmpty -> result;;

let _list_to_string = fun input -> (_list_to_string_r input "");;

let _stdin_list = _string_to_list _stdin_string;;

let output = to_ocaml (sexps_45to_45definitions (parse _stdin_list)) _stdin_list in
    match output with
        CResult (source) -> Printf.printf "%s" (_list_to_string source) ; exit 0
      | CError (error) -> Printf.eprintf "%s" (_list_to_string error) ; exit 1;;

