
(def compile-error () (list 42 99 111 109 112 105 108 101 32 101 114 114 111 114 42))
(def definition-end () (list 59 59))
(def let-rec () (list 108 101 116 32 114 101 99 32))
(def type () (list 116 121 112 101 32))
(def fun () (list 102 117 110 32))
(def arrow () (list 32 45 62 32))
(def equals () (list 32 61 32))
(def comma () (list 44 32))
(def vertical-bar () (list 32 124 32))
(def pipe-operator () (list 32 124 62 32))
(def colon () (list 32 58 32))
(def star () (list 32 42 32))
(def if-string () (list 105 102 32))
(def then-string () (list 32 116 104 101 110 32))
(def else-string () (list 32 101 108 115 101 32))
(def less-than () (list 32 60 32))

(def space () (list 32))
(def newline () (list 10))
(def plus () (list 43))
(def multiply () (list 42))
(def minus () (list 45))
(def slash () (list 47))
(def percent () (list 37))
(def with () (list 119 105 116 104))
(def match-string () (list 109 97 116 99 104))
(def pipe-string () (list 112 105 112 101))
(def list-string () (list 108 105 115 116))
(def int32-less-than-string () (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110))

(def int32 () (list 105 110 116 51 50))
(def int32-plus () (list 73 110 116 51 50 46 97 100 100))
(def int32-multiply () (list 73 110 116 51 50 46 109 117 108))
(def int32-minus () (list 73 110 116 51 50 46 115 117 98))
(def int32-divide () (list 73 110 116 51 50 46 100 105 118))
(def int32-modulus () (list 73 110 116 51 50 46 114 101 109))

(def join (list) (string-join Empty list))

(def not-empty? (string)
     (not (string-empty? string)))

(def with-apostrophe (string)
     (Cons 39 string))

(def prefix-constructor (constructor)
     (Cons 67 constructor))

(def parse-error (error)
     (join (list (list 112 97 114 115 101 32 101 114 114 111 114 32)
                 (error-to-string error))))

(def translate-identifier (name)
     (match (string-equal? name (plus))
            True  (int32-plus)
            False
     (match (string-equal? name (slash))
            True  (int32-divide)
            False
     (match (string-equal? name (percent))
            True  (int32-modulus)
            False
     (match (string-equal? name (minus))
            True  (int32-minus)
            False
     (match (string-equal? name (multiply))
            True  (int32-multiply)
            False name))))))

(def translate-constructor (translator name parameters)
     (match parameters
            Empty
                (prefix-constructor name)
            _
                (join (list (prefix-constructor name)
                            (space)
                            (wrap-in-brackets (string-join (comma) (list-map translator parameters)))))))

(def translate-pattern (pattern)
     (match pattern
            (Capture name _)
                name
            (IntegerPattern integer _)
                (join (list (string-from-int32 integer) (Cons 108 Empty)))
            (ConstructorPattern name patterns _)
                (translate-constructor translate-pattern name patterns)))

(def translate-rule (rule)
     (match rule
            (Pair pattern expression)
                 (join (list (translate-pattern pattern) (arrow) (wrap-in-brackets (translate-expression expression))))))

(def translate-pipe (expressions)
     ((pipe (list-map translate-expression)
            (string-join (pipe-operator))
            (fn (expressions)
                (list (fun)
                      (wrap-in-brackets (list 120))
                      (arrow)
                      (list 120)
                      (pipe-operator)
                      expressions))
            join
            wrap-in-brackets
      ) expressions))

(def translate-list (expressions)
     (match expressions
            Empty
                (list 67 69 109 112 116 121)
            (Cons first rest)
                (join (list (list 67 67 111 110 115 32 40)
                            (translate-expression first)
                            (comma)
                            (translate-list rest)
                            (list 41)))))

(def translate-function-application' (expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (join (list (wrap-in-brackets (translate-expression no-args-function))
                                (space)
                                (wrap-in-brackets Empty)))
            _
                    (string-join (space) (list-map (pipe translate-expression wrap-in-brackets) expressions))))

(def translate-less-than (expressions)
     (match expressions
            (Cons a (Cons b (Cons then (Cons else Empty))))
                (join (list (if-string)
                            (wrap-in-brackets (translate-expression a))
                            (less-than)
                            (wrap-in-brackets (translate-expression b))
                            (then-string)
                            (wrap-in-brackets (translate-expression then))
                            (else-string)
                            (wrap-in-brackets (translate-expression else))))
            _
                (compile-error)))

(def translate-function-application (expressions)
     (match expressions
            (Cons (Identifier name _) rest)
                    (match (string-equal? name (pipe-string))
                           True  (translate-pipe rest)
                           False
                    (match (string-equal? name (list-string))
                           True  (translate-list rest)
                           False
                    (match (string-equal? name (int32-less-than-string))
                           True  (translate-less-than rest)
                           False (translate-function-application' expressions))))
            _
                    (translate-function-application' expressions)))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (translate-lambda arguments expression)
            (Constructor name expressions _)
                (translate-constructor translate-expression name expressions)
            (FunctionApplication expressions _)
                (translate-function-application expressions)
            (IntegerConstant integer _)
                (string-concat (list 73 110 116 51 50 46 111 102 95 105 110 116 32)
                               (wrap-in-brackets (string-from-int32 integer)))
            (Identifier name _)
                (translate-identifier name)
            (Match expression rules _)
                (string-join (space) (list (match-string)
                                           (translate-expression expression)
                                           (with)
                                           (string-join (vertical-bar) (list-map translate-rule rules))))
            _
                (compile-error)))

(def translate-argument-list (arguments)
     (match (list-empty? arguments)
            True  (wrap-in-brackets Empty)
            False (string-join (space) arguments)))

(def translate-lambda (arguments expression)
     (join (list (fun)
                 (translate-argument-list arguments)
                 (arrow)
                 (translate-expression expression))))

(def translate-function-definition (name arguments expression)
     (join (list (let-rec)
                 name 
                 (equals)
                 (translate-lambda arguments expression)
                 (definition-end))))

(def translate-simple-type (name)
     (match (string-equal? name (int32))
            True  name
            False (with-apostrophe name)))

(def translate-type (type)
     (match type
            (SimpleType name _)
                (translate-simple-type name)
            (ComplexType name types _)
                ((pipe (list-map translate-type)
                       (string-join (comma))
                       wrap-in-brackets
                       (fn (types) (join (list types (space) name)))
                ) types)))

(def translate-types (types)
     ((pipe (list-map translate-type)
            (string-join (star))
     ) types))

(def translate-constructor-definition (type constructor)
     (match constructor
            (SimpleConstructor name _)
                (prefix-constructor name)
            (ComplexConstructor name types _)
                (join (list (prefix-constructor name) (colon) (translate-types types) (arrow) type))))

(def translate-constructor-definitions (type constructors)
     ((pipe (list-map (translate-constructor-definition type))
            (string-join (vertical-bar))
      ) constructors))

(def translate-type-parameter (parameter)
     (match parameter
            (UniversalParameter name _)
                name
            (ExistentialParameter _ __)
                Empty))

(def translate-type-parameters (parameters)
     ((pipe 
            (list-map translate-type-parameter)
            (list-filter not-empty?)
            (list-map with-apostrophe)
            (string-join (comma))
      ) parameters))

(def translate-type-name (name parameters)
     (match (translate-type-parameters parameters)
            Empty
                name
            parameters
                (join (list (wrap-in-brackets parameters)
                            (space)
                            name))))

(def translate-type-definition (name parameters constructors)
     (join (list (type)
                 (translate-type-name name parameters)
                 (equals)
                 (translate-constructor-definitions (translate-type-name name parameters) constructors)
                 (definition-end))))

(def translate-definition (definition)
     (match definition
        (FunctionDefinition name arguments expression _)
                (translate-function-definition name arguments expression)
        (ExportDefinition name arguments expression _)
                (translate-function-definition name arguments expression)
        (TypeDefinition name parameters constructors _)
                (translate-type-definition name parameters constructors)))

(def translate-result (result)
     (match result
            (Result definition)
                (translate-definition definition)
            (Error error)
                (parse-error error)))

(export to-ocaml (definitions)
        (string-join (newline) (list-map translate-result definitions)))
