
(def compile-error () (list 42 99 111 109 112 105 108 101 32 101 114 114 111 114 42))
(def definition-end () (list 59 59))
(def let-rec () (list 108 101 116 32 114 101 99 32))
(def type () (list 116 121 112 101))
(def fun () (list 102 117 110))
(def arrow () (list 32 45 62 32))
(def equals () (list 32 61 32))
(def comma () (list 44 32))
(def vertical-bar () (list 32 124 32))
(def pipe-operator () (list 32 124 62 32))
(def colon () (list 32 58 32))
(def star () (list 32 42 32))
(def if () (list 105 102))
(def then () (list 116 104 101 110))
(def else () (list 101 108 115 101))
(def with () (list 119 105 116 104))
(def of () (list 111 102))
(def class () (list 99 108 97 115 115))
(def end () (list 101 110 100))
(def in () (list 105 110))
(def let () (list 108 101 116))
(def open () (list 111 112 101 110))
(def and-string () (list 97 110 100))
(def or-string () (list 111 114))
(def less-than () (list 32 60 32))

(def space () (list 32))
(def newline () (list 10))
(def plus () (list 43))
(def multiply () (list 42))
(def minus () (list 45))
(def slash () (list 47))
(def percent () (list 37))
(def with () (list 119 105 116 104))
(def match-string () (list 109 97 116 99 104))
(def pipe-string () (list 112 105 112 101))
(def list-string () (list 108 105 115 116))
(def int32-less-than-string () (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110))

(def int32 () (list 105 110 116 51 50))
(def int32-plus () (list 73 110 116 51 50 46 97 100 100))
(def int32-multiply () (list 73 110 116 51 50 46 109 117 108))
(def int32-minus () (list 73 110 116 51 50 46 115 117 98))
(def int32-divide () (list 73 110 116 51 50 46 100 105 118))
(def int32-modulus () (list 73 110 116 51 50 46 114 101 109))

(def join (list) (string-join Empty list))

(def not-empty? (string)
     (not (string-empty? string)))

(def with-apostrophe (string)
     (Cons 39 string))

(def prefix-constructor (constructor)
     (Cons 67 constructor))

(def parse-error (error)
     (join (list (list 112 97 114 115 101 32 101 114 114 111 114 32)
                 (error-to-string error))))

(def is-alphanumeric (char)
     (or (and (>= char 65) (<= char 90))
     (or (and (>= char 48) (<= char 57))
         (and (>= char 97) (<= char 122)))))

(def escape-char (char)
     (match (is-alphanumeric char)
            True   (list char)
            False  (Cons 95 (string-from-int32 char))))

(def string-is-reserved? (name)
     (or (string-equal? name (type))
     (or (string-equal? name (if))
     (or (string-equal? name (then))
     (or (string-equal? name (else))
     (or (string-equal? name (with))
     (or (string-equal? name (of))
     (or (string-equal? name (end))
     (or (string-equal? name (in))
     (or (string-equal? name (fun))
     (or (string-equal? name (let))
     (or (string-equal? name (open))
     (or (string-equal? name (and-string))
     (or (string-equal? name (or-string))
         (string-equal? name (class))))))))))))))))

(def escape-identifier (name)
     (match (string-is-reserved? name)
            True   (Cons 95 name)
            False  (list-flatmap escape-char name)))

(def translate-identifier (name)
     (match (string-equal? name (plus))
            True  (int32-plus)
            False
     (match (string-equal? name (slash))
            True  (int32-divide)
            False
     (match (string-equal? name (percent))
            True  (int32-modulus)
            False
     (match (string-equal? name (minus))
            True  (int32-minus)
            False
     (match (string-equal? name (multiply))
            True  (int32-multiply)
            False (escape-identifier name)))))))

(def translate-constructor (translator name parameters)
     (match parameters
            Empty
                (prefix-constructor (escape-identifier name))
            _
                (join (list (prefix-constructor (escape-identifier name))
                            (space)
                            (wrap-in-brackets (string-join (comma) (list-map translator parameters)))))))

(def translate-pattern (pattern)
     (match pattern
            (Capture name _)
                (escape-identifier name)
            (IntegerPattern integer _)
                (join (list (string-from-int32 integer) (Cons 108 Empty)))
            (ConstructorPattern name patterns _)
                (translate-constructor translate-pattern name patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join (list (translate-pattern pattern) (arrow) (wrap-in-brackets (translate-expression expression))))))

(def translate-pipe (translate-expression expressions)
     ((pipe (list-map translate-expression)
            (string-join (pipe-operator))
            (fn (expressions)
                (list (fun)
		      (space)
                      (wrap-in-brackets (list 120))
                      (arrow)
                      (list 120)
                      (pipe-operator)
                      expressions))
            join
            wrap-in-brackets
      ) expressions))

(def translate-list (translate-expression expressions)
     (match expressions
            Empty
                (list 67 69 109 112 116 121)
            (Cons first rest)
                (join (list (list 67 67 111 110 115 32 40)
                            (translate-expression first)
                            (comma)
                            (translate-list translate-expression rest)
                            (list 41)))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (join (list (wrap-in-brackets (translate-expression no-args-function))
                                (space)
                                (wrap-in-brackets Empty)))
            _
                    (string-join (space) (list-map (pipe translate-expression wrap-in-brackets) expressions))))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join (list (if)
                            (space)
                            (wrap-in-brackets (translate-expression a))
                            (less-than)
                            (wrap-in-brackets (translate-expression b))
                            (space)
                            (then)
                            (space)
                            (wrap-in-brackets (translate-expression then-case))
                            (space)
                            (else)
                            (space)
                            (wrap-in-brackets (translate-expression else-case))))
            _
                (compile-error)))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Identifier name _) rest)
                    (match (string-equal? name (pipe-string))
                           True  (translate-pipe translate-expression rest)
                           False
                    (match (string-equal? name (list-string))
                           True  (translate-list translate-expression rest)
                           False
                    (match (string-equal? name (int32-less-than-string))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-empty? arguments)
            True  (wrap-in-brackets Empty)
            False (string-join (space) (list-map escape-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join (list (fun)
                 (space)
                 (translate-argument-list arguments)
                 (arrow)
                 (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets (translate-lambda translate-expression arguments expression))
            (Constructor name expressions _)
                (translate-constructor translate-expression name expressions)
            (FunctionApplication expressions _)
                (translate-function-application translate-expression expressions)
            (IntegerConstant integer _)
                (string-concat (list 73 110 116 51 50 46 111 102 95 105 110 116 32)
                               (wrap-in-brackets (string-from-int32 integer)))
            (Identifier name _)
                (translate-identifier name)
            (Match expression rules _)
                (string-join (space) (list (match-string)
                                           (translate-expression expression)
                                           (with)
                                           (string-join (vertical-bar) (list-map (translate-rule translate-expression) rules))))))

(def translate-function-definition (name arguments expression)
     (join (list (let-rec)
                 name
                 (equals)
                 (translate-lambda translate-expression arguments expression)
                 (definition-end))))

(def translate-simple-type (name parameters)
     (match (list-any? (string-equal? name) parameters)
            False  (escape-identifier name)
            True   (with-apostrophe (escape-identifier name))))

(def translate-type-parameter (parameter)
     (match parameter
            (UniversalParameter name _)
                name
            (ExistentialParameter name _)
                name))

(def translate-type (parameters type)
     (match type
            (SimpleType name _)
                (translate-simple-type name parameters)
            (ComplexType name types _)
                ((pipe (list-map (translate-type parameters))
                       (string-join (comma))
                       wrap-in-brackets
                       (fn (types) (join (list types (space) (escape-identifier name))))
                ) types)
            (FunctionType argument-types return-type _)
                (wrap-in-brackets (join (list ((pipe (list-map (translate-type parameters))
                                                     (string-join (arrow)))
                                                     argument-types)
                                                 (arrow)
                                                 (translate-type parameters return-type))))))

(def translate-types (parameters types)
     ((pipe (list-map (translate-type parameters))
            (string-join (star))
     ) types))

(def translate-constructor-definition (type parameters constructor)
     (match constructor
            (SimpleConstructor name _)
                (prefix-constructor (escape-identifier name))
            (ComplexConstructor name types _)
                (join (list (prefix-constructor (escape-identifier name))
                            (colon)
                            (translate-types (list-map translate-type-parameter parameters) types)
                            (arrow)
                            type))))

(def translate-constructor-definitions (type parameters constructors)
     ((pipe (list-map (translate-constructor-definition type parameters))
            (string-join (vertical-bar))
      ) constructors))

(def translate-type-parameter-for-definition (parameter)
     (match parameter
            (UniversalParameter name _)
                (escape-identifier name)
            (ExistentialParameter _ __)
                Empty))

(def translate-type-parameters (parameters)
     ((pipe 
            (list-map translate-type-parameter-for-definition)
            (list-filter not-empty?)
            (list-map with-apostrophe)
            (string-join (comma))
      ) parameters))

(def translate-type-name (name parameters)
     (match (translate-type-parameters parameters)
            Empty
                (escape-identifier name)
            parameters
                (join (list (wrap-in-brackets parameters)
                            (space)
                            (escape-identifier name)))))

(def translate-type-definition (name parameters constructors)
     (join (list (type)
                 (space)
                 (translate-type-name name parameters)
                 (equals)
                 (translate-constructor-definitions (translate-type-name name parameters) parameters constructors)
                 (definition-end))))

(def translate-definition (definition)
     (match definition
        (FunctionDefinition name arguments expression _)
                (translate-function-definition (escape-identifier name) arguments expression)
        (ExportDefinition name arguments expression _)
                (translate-function-definition name arguments expression)
        (TypeDefinition name parameters constructors _)
                (translate-type-definition name parameters constructors)))

(export to_ocaml (definitions source)
        (match (result-concat definitions)
               (Result definitions)  (Result (string-join (newline) (list-map translate-definition definitions)))
               (Error error)         (Error  (parse-error error))))
