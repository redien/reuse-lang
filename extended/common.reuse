
(def join (list) (string-join Empty list))

(def not-empty? (string)
     (not (string-empty? string)))

(def is-alphanumeric (char)
     (or (and (>= char 65) (<= char 90))
     (or (and (>= char 48) (<= char 57))
         (and (>= char 97) (<= char 122)))))

(def escape-char (char)
     (match (is-alphanumeric char)
            True   (list char)
            False  (Cons 95 (string-from-int32 char))))

(def parse-error (error)
     (join (list (data-parse-error) (error-to-string error))))

(def string-is-reserved? (name)
     (or (string-equal? name (type))
     (or (string-equal? name (if))
     (or (string-equal? name (then))
     (or (string-equal? name (else))
     (or (string-equal? name (with))
     (or (string-equal? name (of))
     (or (string-equal? name (end))
     (or (string-equal? name (in))
     (or (string-equal? name (fun))
     (or (string-equal? name (let))
     (or (string-equal? name (open))
     (or (string-equal? name (and-string))
     (or (string-equal? name (or-string))
         (string-equal? name (class))))))))))))))))

(def escape-identifier (name)
     (match (string-is-reserved? name)
            True   (Cons 95 name)
            False  (list-flatmap escape-char name)))

(def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (Pair pattern (f expression))))

(def over-subexpressions (f expression)
     (match expression
            (Lambda arguments expression range)
                (Lambda arguments
                        (over-subexpressions f (f expression))
                        range)
            (Match expression pairs range)
                (Match (over-subexpressions f (f expression))
                       (list-map (over-match-pair-expression (pipe f (over-subexpressions f))) pairs)
                       range)
            (Constructor name expressions range)
                (Constructor name
                             (list-map (pipe f (over-subexpressions f)) expressions)
                             range)
            (FunctionApplication expressions range)
                (FunctionApplication (list-map (pipe f (over-subexpressions f)) expressions)
                                     range)
            _
                expression))

(def over-expressions (f definition)
     (match definition
            (FunctionDefinition name arguments expression range)
                (FunctionDefinition name arguments (over-subexpressions f (f expression)) range)
            (ExportDefinition name arguments expression range)
                (ExportDefinition name arguments (over-subexpressions f (f expression)) range)
            (TypeDefinition _ __ ___ ____)
                definition))

(def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                expression))

(def over-identifier (f expression)
     (match expression
            (Identifier name range)
                (Identifier (f name) range)
            (Lambda arguments expression range)
                (Lambda (list-map f arguments) expression range)
            _
                expression))

(def expression-is-symbol? (symbol-name expression)
     (match expression
            (Identifier name __)
                (string-equal? symbol-name name)
            _
                False))

(def first-expression-is-symbol? (symbol-name expressions)
     ((pipe (maybe-map (expression-is-symbol? symbol-name))
            (maybe-else (fn () False)))
        (list-first expressions)))
