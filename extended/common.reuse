
(def join (list) (string-join Empty list))

(def not-empty? (string)
     (not (string-empty? string)))

(def is-alphanumeric (char)
     (or (and (>= char 65) (<= char 90))
     (or (and (>= char 48) (<= char 57))
         (and (>= char 97) (<= char 122)))))

(def escape-char (char)
     (match (is-alphanumeric char)
            True   (list char)
            False  (Cons 95 (string-from-int32 char))))

(def stringify-parse-errors (definitions)
     (list-map (result-second error-to-string) definitions))

(def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (result-first (fn (expression)
                                  (Pair pattern expression))
                              (f expression))))

(def over-match-pair-expressions (over-subexpressions f pairs)
     (result-concat (list-map (over-match-pair-expression (pipe f (result-flatmap (over-subexpressions f)))) pairs)))

(def over-subexpressions (f expression)
     (match expression
            (Lambda arguments expression range)
                (result-flatmap (fn (expression)
                (result-first   (fn (expression)
                                    (Lambda arguments expression range))
                                (over-subexpressions f expression)))
                                (f expression))
            (Match expression pairs range)
                (result-flatmap (fn (expression)
                (result-flatmap (fn (expression)
                (result-first   (fn (pairs)
                                    (Match expression pairs range))
                                (over-match-pair-expressions over-subexpressions f pairs)))
                                (over-subexpressions f expression)))
                                (f expression))
            (Constructor name expressions range)
                (result-first (fn (expressions)
                                  (Constructor name expressions range))
                              (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)))
            (FunctionApplication expressions range)
                (result-first (fn (expressions)
                                  (FunctionApplication expressions range))
                              (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)))
            _
                (result-result expression)))

(def over-definition-expressions (f definition)
     (match definition
            (FunctionDefinition name arguments expression range)
                (result-first (fn (expression)
                                  (FunctionDefinition name arguments expression range))
                              (f expression))
            (ExportDefinition name arguments expression range)
                (result-first (fn (expression)
                                  (ExportDefinition name arguments expression range))
                              (f expression))
            _
                (result-result definition)))

(def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                (result-result expression)))

(def over-identifier (f expression)
     (match expression
            (Identifier name range)
                (result-first (fn (name)
                                  (Identifier name range))
                              (f name))
            (Lambda arguments expression range)
                (result-flatmap (fn (expression)
                (result-first   (fn (arguments)
                                    (Lambda arguments expression range))
                              (result-concat (list-map f arguments))))
                              (over-identifier f expression))
            (Constructor name Empty range)
                (result-first (fn (name)
                                  (Constructor name Empty range))
                              (f name))
            (Constructor name expressions range)
                (result-flatmap (fn (expressions)
                (result-first   (fn (name)
                                    (Constructor name expressions range))
                                (f name)))
                                (result-concat (list-map (over-identifier f) expressions)))
            (FunctionApplication expressions range)
                (result-first (fn (expressions)
                                  (FunctionApplication expressions range))
                              (result-concat (list-map (over-identifier f) expressions)))
            (Match expression rules range)
                (result-flatmap (fn (rules)
                (result-first   (fn (expression)
                                    (Match expression rules range))
                              (over-identifier f expression)))
                              (result-concat (list-map (over-match-pair-expression (over-identifier f)) rules)))
            _
                (result-result expression)))

(def expression-is-symbol? (symbol-name expression)
     (match expression
            (Identifier name __)
                (string-equal? symbol-name name)
            _
                False))

(def first-expression-is-symbol? (symbol-name expressions)
     ((pipe (maybe-map (expression-is-symbol? symbol-name))
            (maybe-else (fn () False)))
        (list-first expressions)))

(def symbol-is-reserved? (name)
     (match name
            (Cons char _)  (= char 2728)
            Empty          False))

