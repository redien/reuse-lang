
(def join (list) (string-join Empty list))

(def not-empty? (string)
     (not (string-empty? string)))

(def is-alphanumeric (char)
     (or (and (>= char 65) (<= char 90))
     (or (and (>= char 48) (<= char 57))
         (and (>= char 97) (<= char 122)))))

(def escape-char (char)
     (match (is-alphanumeric char)
            True   (list char)
            False  (Cons 95 (string-from-int32 char))))

(def stringify-parse-errors (definitions)
     (list-map (result-second error-to-string) definitions))

(def over-match-pair-expression (f pair)
     (match pair
            (Pair pattern expression)
                (Pair pattern (f expression))))

(def over-subexpressions (f expression)
     (match expression
            (Lambda arguments expression range)
                (Lambda arguments
                        (over-subexpressions f (f expression))
                        range)
            (Match expression pairs range)
                (Match (over-subexpressions f (f expression))
                       (list-map (over-match-pair-expression (pipe f (over-subexpressions f))) pairs)
                       range)
            (Constructor name expressions range)
                (Constructor name
                             (list-map (pipe f (over-subexpressions f)) expressions)
                             range)
            (FunctionApplication expressions range)
                (FunctionApplication (list-map (pipe f (over-subexpressions f)) expressions)
                                     range)
            _
                expression))

(def over-definition-expressions (f definition)
     (match definition
            (Result (FunctionDefinition name arguments expression range))
                (Result (FunctionDefinition name arguments (f expression) range))
            (Result (ExportDefinition name arguments expression range))
                (Result (ExportDefinition name arguments (f expression) range))
            _
                definition))

(def over-function-application (f expression)
     (match expression
            (FunctionApplication expressions range)
                (f expressions range)
            _
                expression))

(def over-identifier (f expression)
     (match expression
            (Identifier name range)
                (Identifier (f name) range)
            (Lambda arguments expression range)
                (Lambda (list-map f arguments) (over-identifier f expression) range)
            (Constructor name Empty range)
                (Constructor (f name) Empty range)
            (Constructor name expressions range)
                (Constructor (f name) (list-map (over-identifier f) expressions) range)
            (FunctionApplication expressions range)
                (FunctionApplication (list-map (over-identifier f) expressions) range)
            (Match expression rules range)
                (Match (over-identifier f expression)
                       (list-map (over-match-pair-expression (over-identifier f)) rules)
                       range)
            _
                expression))

(def expression-is-symbol? (symbol-name expression)
     (match expression
            (Identifier name __)
                (string-equal? symbol-name name)
            _
                False))

(def first-expression-is-symbol? (symbol-name expressions)
     ((pipe (maybe-map (expression-is-symbol? symbol-name))
            (maybe-else (fn () False)))
        (list-first expressions)))

(def symbol-is-reserved? (name)
     (match name
            (Cons char _)  (= char 2728)
            Empty          False))

