
(def sym-int32 () -10000)
(def sym-int32-less-than () -10001)

(def prefix-constructor (constructor)
     (string-prepend 67 constructor))

(def reserved-identifiers ()
     (list data-if data-then data-else data-with data-of data-end data-in data-type data-let
           data-class data-do data-module data-data data-case data-deriving data-family data-default
           data-forall data-foreign data-import data-instance data-infix data-infixl data-infixr
           data-newtype data-where))

(def identifier-is-reserved? (id)
     (and (<= id -2000) (> id -3000)))

(def escape-identifier (identifier)
     (match (identifier-is-reserved? (symbol-id identifier))
            True   (string-prepend 95 (symbol-name identifier))
            False  (string-flatmap escape-char (symbol-name identifier))))

(def special-identifiers ()
     (dictionary-of (list
        (Pair (data-plus) (data-int32-plus))
        (Pair (data-slash) (data-int32-divide))
        (Pair (data-percent) (data-int32-modulus))
        (Pair (data-minus) (data-int32-minus))
        (Pair (data-multiply) (data-int32-multiply))
        (Pair (data-ampersand) (data-int32-and))
     )))

(def translate-identifier (identifier)
     (match (dictionary-get (symbol-name identifier) (special-identifiers))
            (Some translation)  translation
            None                (escape-identifier identifier)))

(def prefix-type-variable (identifier)
     (translate-identifier identifier))

(def prefix-type (identifier)
     (match (= (symbol-id identifier) (sym-int32))
            True   (data-Int32)
            False  (string-prepend 84 (translate-identifier identifier))))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join (list (data-if)
                            (data-space)
                            (translate-expression a)
                            (data-less-than)
                            (translate-expression b)
                            (data-space)
                            (data-then)
                            (data-space)
                            (translate-expression then-case)
                            (data-space)
                            (data-else)
                            (data-space)
                            (translate-expression else-case)))
            _
                (data-compile-error)))

(def translate-constructor (translator name)
     (pipe (list-map translator)
           (string-join (data-space))
           (fn (parameters)
               (list (prefix-constructor (escape-identifier name))
                     (data-space)
                     parameters))
           join
           wrap-in-brackets))

(def translate-pattern (pattern)
     (match pattern
            (Capture sym)
                (string-prepend 33 (escape-identifier sym))
            (IntegerPattern integer _)
                (match (< integer 0)
                       True   (wrap-in-brackets (string-from-int32 integer))
                       False  (string-from-int32 integer))
            (ConstructorPattern sym Empty _)
                (prefix-constructor (escape-identifier sym))
            (ConstructorPattern sym patterns _)
                ((translate-constructor translate-pattern sym) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join (list (translate-pattern pattern) (data-arrow) (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (string-join (data-semicolon))
           (fn (rules)
               (list (data-case) (translate-expression expression) (data-of) rules))
           (string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (translate-expression no-args-function)
            _
                    (string-join (data-space) (list-map translate-expression expressions))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable sym) rest)
                    (match (= (symbol-id sym) (sym-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (string-join (data-space) (list-map (pipe escape-identifier (string-prepend 33)) arguments)))

(def translate-lambda (translate-expression arguments expression)
     (match (list-empty? arguments)
            True   (translate-expression expression)
            False  (join (list (data-backslash)
                               (data-space)
                               (translate-argument-list arguments)
                               (data-arrow)
                               (translate-expression expression)))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets (translate-lambda translate-expression arguments expression))
            (Constructor sym Empty _)
                (prefix-constructor (escape-identifier sym))
            (Constructor sym expressions _)
                ((translate-constructor translate-expression sym) expressions)
            (FunctionApplication expressions _)
                (wrap-in-brackets (translate-function-application translate-expression expressions))
            (IntegerConstant integer _)
                (match (< integer 0)
                       True   (wrap-in-brackets (string-from-int32 integer))
                       False  (string-from-int32 integer))
            (Variable sym)
                (translate-identifier sym)
            (Match expression rules _)
                (wrap-in-brackets ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (name arguments expression)
     (match (list-empty? arguments)
            True  (join (list name
                              (data-equals)
                              (translate-expression expression)))
            False (join (list name
                              (data-equals)
                              (translate-lambda translate-expression arguments expression)))))

(def translate-simple-type (identifier parameters)
     (match (list-any? (. (symbol-equal? identifier) type-parameter-symbol) parameters)
            False  (prefix-type identifier)
            True   (prefix-type-variable identifier)))

(def translate-complex-types (translate-types name types)
     ((pipe (translate-types (data-space))
            (string-concat (string-concat (prefix-type name) (data-space)))
            wrap-in-brackets)
        types))

(def translate-function-type (translate-types return-type argument-types)
     ((pipe (fn (argument-types)
                (list-concat argument-types (list return-type)))
            (translate-types (data-arrow))
            wrap-in-brackets)
        argument-types))

(def translate-type (translate-types parameters type)
     (match type
            (SimpleType sym)
                (translate-simple-type sym parameters)
            (ComplexType sym types _)
                (translate-complex-types translate-types sym types)
            (FunctionType argument-types return-type _)
                (translate-function-type translate-types return-type argument-types)))

(def translate-types (parameters f separator types)
     ((pipe (list-map (pipe (translate-type (translate-types parameters id) parameters)
                            f))
            (string-join separator))
        types))

(def translate-type-parameter (parameter)
     (match parameter
            (UniversalParameter sym)
                (symbol-name sym)
            (ExistentialParameter sym)
                (symbol-name sym)))

(def translate-complex-constructor-definition (name types parameters)
     (join (list (prefix-constructor (escape-identifier name))
                 (data-space)
                 (translate-types parameters (string-prepend 33) (data-space) types))))

(def translate-constructor-definition (parameters constructor)
     (match constructor
            (SimpleConstructor sym)
                (prefix-constructor (escape-identifier sym))
            (ComplexConstructor sym types _)
                (translate-complex-constructor-definition sym types parameters)))

(def translate-constructor-definitions (parameters)
     (pipe (list-map (translate-constructor-definition parameters))
           (string-join (data-vertical-bar))))

(def translate-universal-parameters (parameters)
     (list-foldl (fn (parameter s)
                     (match parameter
                            (UniversalParameter sym)
                                (join (list s
                                            (data-space)
                                            (prefix-type-variable sym)))
                            (ExistentialParameter _)
                                s))
                 (string-empty)
                 parameters))

(def translate-existential-parameters (parameters)
     (list-foldl (fn (parameter s)
                     (match parameter
                            (UniversalParameter _)
                                s
                            (ExistentialParameter sym)
                                (join (list s
                                            (data-forall)
                                            (data-space)
                                            (prefix-type-variable sym)
                                            (data-dot)
                                            (data-space)))))
                 (string-empty)
                 parameters))

(def translate-type-definition (name parameters constructors)
     (join (list (data-data)
                 (data-space)
                 (prefix-type name)
                 (translate-universal-parameters parameters)
                 (data-equals)
                 (translate-existential-parameters parameters)
                 ((translate-constructor-definitions parameters) constructors))))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition name arguments expression ____)
                (translate-function-definition (escape-identifier name) arguments expression)
            (TypeDefinition name parameters constructors ____)
                (translate-type-definition name parameters constructors)))

(def translate-module-declaration (module-name)
     (join (list (data-module)
                 (data-space)
                 module-name
                 (data-space)
                 (data-where))))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (list-cons (data-prelude))
            (list-concat (list (data-language-exts)
                               (translate-module-declaration module-name)
                               (data-imports)))
            (string-join (string-of-char 10)))
         definitions))

(def internal-symbols ()
     (dictionary-set (data-int32-less-than) (Pair (sym-int32-less-than) (data-int32-less-than))
     (dictionary-set (data-int32) (Pair (sym-int32) (data-int32))
     (add-identifiers (reserved-identifiers) -2000
     (with-local-transform-keywords (keywords))))))
