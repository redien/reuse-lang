
(def compile-error () (list 42 99 111 109 112 105 108 101 32 101 114 114 111 114 42))
(def definition-end () (list 59 59))
(def let-rec () (list 108 101 116 32 114 101 99 32))
(def type () (list 116 121 112 101))
(def fun () (list 102 117 110))
(def arrow () (list 32 45 62 32))
(def equals () (list 32 61 32))
(def comma () (list 44 32))
(def vertical-bar () (list 32 124 32))
(def pipe-operator () (list 32 124 62 32))
(def colon () (list 32 58 32))
(def star () (list 32 42 32))
(def if () (list 105 102))
(def then () (list 116 104 101 110))
(def else () (list 101 108 115 101))
(def with () (list 119 105 116 104))
(def of () (list 111 102))
(def class () (list 99 108 97 115 115))
(def end () (list 101 110 100))
(def in () (list 105 110))
(def let () (list 108 101 116))
(def open () (list 111 112 101 110))
(def and-string () (list 97 110 100))
(def or-string () (list 111 114))
(def less-than () (list 32 60 32))

(def space () (list 32))
(def newline () (list 10))
(def plus () (list 43))
(def multiply () (list 42))
(def minus () (list 45))
(def slash () (list 47))
(def percent () (list 37))
(def with () (list 119 105 116 104))
(def match-string () (list 109 97 116 99 104))
(def pipe-string () (list 112 105 112 101))
(def list-string () (list 108 105 115 116))
(def int32-less-than-string () (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110))

(def int32 () (list 105 110 116 51 50))
(def int32-plus () (list 73 110 116 51 50 46 97 100 100))
(def int32-multiply () (list 73 110 116 51 50 46 109 117 108))
(def int32-minus () (list 73 110 116 51 50 46 115 117 98))
(def int32-divide () (list 73 110 116 51 50 46 100 105 118))
(def int32-modulus () (list 73 110 116 51 50 46 114 101 109))


(def data-cempty () (list 67 69 109 112 116 121))
(def data-ccons () (list 67 67 111 110 115))
(def data-int32 () (list 73 110 116 51 50 46 111 102 95 105 110 116 32))
(def data-parse-error () (list 112 97 114 115 101 32 101 114 114 111 114 32))
