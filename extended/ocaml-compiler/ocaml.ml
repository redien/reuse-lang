type boolean = CTrue | CFalse;;
let rec not = fun a -> (match a with CTrue -> CFalse | CFalse -> CTrue);;
let rec _and = fun a b -> (match a with CTrue -> b | CFalse -> CFalse);;
let rec _or = fun a b -> (match a with CTrue -> CTrue | CFalse -> b);;
let rec _60 = fun a b -> (if a<b then CTrue else CFalse);;
let rec _62 = fun a b -> (_60 b a);;
let rec _61 = fun a b -> (not (_or (_60 a b) (_62 a b)));;
let rec _60_61 = fun a b -> (_or (_60 a b) (_61 a b));;
let rec _62_61 = fun a b -> (_or (_62 a b) (_61 a b));;
type ('Ta,'Tb) pair = CPair : 'Ta * 'Tb -> ('Ta,'Tb) pair;;
let rec pair_45cons = fun a b -> (CPair (a,b));;
let rec pair_45left = fun pair -> (match pair with (CPair (x,_95)) -> x);;
let rec pair_45right = fun pair -> (match pair with (CPair (_95,x)) -> x);;
let rec pair_45map = fun f pair -> (match pair with (CPair (x,y)) -> (f x y));;
let rec pair_45map_45left = fun f pair -> (match pair with (CPair (x,y)) -> (CPair ((f x),y)));;
let rec pair_45map_45right = fun f pair -> (match pair with (CPair (x,y)) -> (CPair (x,(f y))));;
let rec pair_45swap = fun pair -> (match pair with (CPair (x,y)) -> (CPair (y,x)));;
type ('Ta) maybe = CSome : 'Ta -> ('Ta) maybe | CNone;;
let rec maybe_45some = fun _value -> (CSome (_value));;
let rec _constant_maybe_45none = CNone;;let rec maybe_45none = fun () -> _constant_maybe_45none;;
let rec maybe_45map = fun f maybe -> (match maybe with (CSome (x)) -> (CSome ((f x))) | CNone -> CNone);;
let rec maybe_45flatmap = fun f maybe -> (match maybe with (CSome (x)) -> (f x) | CNone -> CNone);;
let rec maybe_45filter = fun f maybe -> (match maybe with (CSome (x)) -> (match (f x) with CTrue -> maybe | CFalse -> CNone) | CNone -> CNone);;
let rec maybe_45else = fun f maybe -> (match maybe with CNone -> (f ()) | (CSome (x)) -> x);;
type ('Telement) indexed_45iterator = CIndexedIterator : 'Tcollection * int32 * ('Tcollection -> int32 -> ('Telement) maybe) * (('Telement) indexed_45iterator -> 'Tcollection -> int32 -> ('Telement) indexed_45iterator) -> ('Telement) indexed_45iterator;;
let rec indexed_45iterator_45next = fun iterator -> (match iterator with (CIndexedIterator (collection,index,_95,next)) -> (next iterator collection index));;
let rec indexed_45iterator_45get = fun iterator -> (match iterator with (CIndexedIterator (collection,index,get,_95)) -> (get collection index));;
let rec indexed_45iterator_45index = fun iterator -> (match iterator with (CIndexedIterator (_95,index,_95_95,_95_95_95)) -> index);;
let rec indexed_45iterator_45foldl = fun f initial iterator -> (match (indexed_45iterator_45get iterator) with CNone -> initial | (CSome (x)) -> (indexed_45iterator_45foldl f (f x initial) (indexed_45iterator_45next iterator)));;
type ('Tm,'Tvalue) chunk = CChunk : 'Tm * ('Tm -> int32) * (int32 -> 'Tm -> 'Tvalue) * (int32 -> int32 -> 'Tm -> ('Tm,'Tvalue) chunk) * ('Tm -> 'Tm -> boolean) -> ('Tm,'Tvalue) chunk;;
let rec chunk_45size = fun chunk -> (match chunk with (CChunk (m,size,_95,_95_95,_95_95_95)) -> (size m));;
let rec chunk_45get = fun index chunk -> (match chunk with (CChunk (m,_95,get,_95_95,_95_95_95)) -> (get index m));;
let rec chunk_45slice = fun offset size chunk -> (match chunk with (CChunk (m,_95,_95_95,slice,_95_95_95)) -> (slice offset size m));;
let rec chunk_45equal_63 = fun chunk other -> (match (chunk ()) with (CChunk (a,_95,_95_95,_95_95_95,equal_63)) -> (match (other ()) with (CChunk (b,_95,_95_95,_95_95_95,_95_95_95_95)) -> (equal_63 a b)));;
let rec chunk_45foldl_39 = fun f accumulator index size chunk -> (match (_60 index size) with CTrue -> (chunk_45foldl_39 f (f (chunk_45get index chunk) accumulator) (Int32.add index (1l)) size chunk) | CFalse -> accumulator);;
let rec chunk_45foldl = fun f initial chunk -> (chunk_45foldl_39 f initial (0l) (chunk_45size chunk) chunk);;
let rec chunk_45indexed_45iterator_45get = fun chunk index -> (match (_62_61 index (chunk_45size chunk)) with CTrue -> CNone | CFalse -> (CSome ((chunk_45get index chunk))));;
let rec chunk_45indexed_45iterator_45next = fun iterator chunk index -> (CIndexedIterator (chunk,(Int32.add index (1l)),chunk_45indexed_45iterator_45get,chunk_45indexed_45iterator_45next));;
let rec chunk_45to_45indexed_45iterator = fun chunk -> (CIndexedIterator (chunk,(0l),chunk_45indexed_45iterator_45get,chunk_45indexed_45iterator_45next));;
type ('Ta) list = CCons : 'Ta * ('Ta) list -> ('Ta) list | CEmpty;;
let rec list_45cons = fun x xs -> (CCons (x,xs));;
let rec list_45from = fun x -> (CCons (x,CEmpty));;
let rec list_45from_45range = fun from _95to -> (match (_60 from _95to) with CTrue -> (CCons (from,(list_45from_45range (Int32.add from (1l)) _95to))) | CFalse -> CEmpty);;
let rec list_45first = fun list -> (match list with (CCons (x,_95)) -> (CSome (x)) | CEmpty -> CNone);;
let rec list_45rest = fun list -> (match list with (CCons (_95,rest)) -> rest | CEmpty -> CEmpty);;
let rec list_45last = fun list -> (match list with CEmpty -> CNone | (CCons (x,CEmpty)) -> (CSome (x)) | (CCons (_95,rest)) -> (list_45last rest));;
let rec list_45empty_63 = fun list -> (match list with (CCons (_95,_95_95)) -> CFalse | CEmpty -> CTrue);;
let rec list_45size_39 = fun list size -> (match list with (CCons (_95,rest)) -> (list_45size_39 rest (Int32.add size (1l))) | CEmpty -> size);;
let rec list_45size = fun list -> (list_45size_39 list (0l));;
let rec list_45foldrk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (list_45foldrk f initial xs (fun _value -> (f x _value continue))));;
let rec list_45foldlk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (f x initial (fun new_45value -> (list_45foldlk f new_45value xs continue))));;
let rec list_45foldr = fun f initial list -> (list_45foldrk (fun x _value continue -> (continue (f x _value))) initial list (fun x -> x));;
let rec list_45foldl = fun f initial list -> (match list with CEmpty -> initial | (CCons (x,xs)) -> (list_45foldl f (f x initial) xs));;
let rec list_45concat = fun a b -> (list_45foldr list_45cons b a);;
let rec list_45append = fun x list -> (list_45foldr list_45cons (CCons (x,CEmpty)) list);;
let rec list_45reverse = fun list -> (list_45foldl list_45cons CEmpty list);;
let rec list_45map = fun f list -> (list_45foldr (fun head tail -> (list_45cons (f head) tail)) CEmpty list);;
let rec list_45flatmap = fun f list -> (list_45foldr (fun head tail -> (list_45concat (f head) tail)) CEmpty list);;
let rec list_45skip = fun count list -> (match (_62 count (0l)) with CTrue -> (list_45skip (Int32.sub count (1l)) (list_45rest list)) | CFalse -> list);;
let rec list_45take_39 = fun count list taken -> (match (_62 count (0l)) with CTrue -> (match list with (CCons (char,rest)) -> (list_45take_39 (Int32.sub count (1l)) rest (CCons (char,taken))) | CEmpty -> taken) | CFalse -> taken);;
let rec list_45take = fun count list -> (list_45reverse (list_45take_39 count list CEmpty));;
let rec list_45zip_39 = fun xs ys collected -> (match xs with CEmpty -> collected | (CCons (x,xs)) -> (match ys with CEmpty -> collected | (CCons (y,ys)) -> (list_45zip_39 xs ys (CCons ((CPair (x,y)),collected)))));;
let rec list_45zip = fun xs ys -> (list_45reverse (list_45zip_39 xs ys CEmpty));;
let rec list_45pairs = fun xs -> (match xs with (CCons (a,(CCons (b,rest)))) -> (CCons ((CPair (a,b)),(list_45pairs rest))) | _95 -> CEmpty);;
let rec list_45find_45first = fun predicate list -> (match list with CEmpty -> CNone | (CCons (x,xs)) -> (match (predicate x) with CTrue -> (CSome (x)) | CFalse -> (list_45find_45first predicate xs)));;
let rec list_45filter = fun f list -> (list_45foldr (fun head tail -> (match (f head) with CTrue -> (CCons (head,tail)) | CFalse -> tail)) CEmpty list);;
let rec list_45exclude = fun f list -> (list_45filter (fun _226_156_168x -> (not (f _226_156_168x))) list);;
let rec list_45any_63 = fun f list -> (not (list_45empty_63 (list_45filter f list)));;
let rec list_45indexed_45iterator_45get = fun collection _95 -> (match collection with (CCons (x,_95)) -> (CSome (x)) | CEmpty -> CNone);;
let rec list_45indexed_45iterator_45next = fun iterator collection index -> (match collection with (CCons (_95,xs)) -> (CIndexedIterator (xs,(Int32.add index (1l)),list_45indexed_45iterator_45get,list_45indexed_45iterator_45next)) | CEmpty -> iterator);;
let rec list_45to_45indexed_45iterator = fun list -> (CIndexedIterator (list,(0l),list_45indexed_45iterator_45get,list_45indexed_45iterator_45next));;
let rec list_45collect_45from_45indexed_45iterator_39 = fun predicate iterator initial -> (match (indexed_45iterator_45get iterator) with CNone -> (CPair (iterator,initial)) | (CSome (x)) -> (match (predicate x) with CTrue -> (list_45collect_45from_45indexed_45iterator_39 predicate (indexed_45iterator_45next iterator) (CCons (x,initial))) | CFalse -> (CPair (iterator,initial))));;
let rec list_45collect_45from_45indexed_45iterator = fun predicate iterator -> (match (list_45collect_45from_45indexed_45iterator_39 predicate iterator CEmpty) with (CPair (iterator,result)) -> (CPair (iterator,(list_45reverse result))));;
type string_45node = CFTValue : int32 -> string_45node | CFTNode2 : int32 * string_45node * string_45node -> string_45node | CFTNode3 : int32 * string_45node * string_45node * string_45node -> string_45node;;
type string = CFTEmpty | CFTSingle : string_45node -> string | CFTDeep : (string_45node) list * string * (string_45node) list -> string;;
let rec _constant_string_45empty = CFTEmpty;;let rec string_45empty = fun () -> _constant_string_45empty;;
let rec string_45of_45char = fun character -> (CFTSingle ((CFTValue (character))));;
let rec string_45node_45size_39 = fun node -> (match node with (CFTValue (_95)) -> (1l) | (CFTNode2 (size,_95,_95_95)) -> size | (CFTNode3 (size,_95,_95_95,_95_95_95)) -> size);;
let rec string_45node2_39 = fun a b -> (CFTNode2 ((Int32.add (string_45node_45size_39 a) (string_45node_45size_39 b)),a,b));;
let rec string_45node3_39 = fun a b c -> (CFTNode3 ((Int32.add (string_45node_45size_39 a) (Int32.add (string_45node_45size_39 b) (string_45node_45size_39 c))),a,b,c));;
let rec string_45prepend_45node_39 = fun a tree -> (match tree with CFTEmpty -> (CFTSingle (a)) | (CFTSingle (x)) -> (CFTDeep ((CCons (a,CEmpty)),CFTEmpty,(CCons (x,CEmpty)))) | (CFTDeep (first,middle,last)) -> (match first with (CCons (b,(CCons (c,(CCons (d,(CCons (e,CEmpty)))))))) -> (CFTDeep ((CCons (a,(CCons (b,CEmpty)))),(string_45prepend_45node_39 (string_45node3_39 c d e) middle),last)) | _95 -> (CFTDeep ((CCons (a,first)),middle,last))));;
let rec string_45prepend = fun char string -> (string_45prepend_45node_39 (CFTValue (char)) string);;
let rec string_45append_45node_39 = fun a tree -> (match tree with CFTEmpty -> (CFTSingle (a)) | (CFTSingle (x)) -> (CFTDeep ((CCons (x,CEmpty)),CFTEmpty,(CCons (a,CEmpty)))) | (CFTDeep (first,middle,last)) -> (match last with (CCons (b,(CCons (c,(CCons (d,(CCons (e,CEmpty)))))))) -> (CFTDeep (first,(string_45append_45node_39 (string_45node3_39 e d c) middle),(CCons (a,(CCons (b,CEmpty)))))) | _95 -> (CFTDeep (first,middle,(CCons (a,last))))));;
let rec string_45append = fun char string -> (string_45append_45node_39 (CFTValue (char)) string);;
let rec string_45first_45node_39 = fun node -> (match node with (CFTValue (x)) -> x | (CFTNode2 (_95,x,_95_95)) -> (string_45first_45node_39 x) | (CFTNode3 (_95,x,_95_95,_95_95_95)) -> (string_45first_45node_39 x));;
let rec string_45first = fun string -> (match string with CFTEmpty -> CNone | (CFTSingle (node)) -> (CSome ((string_45first_45node_39 node))) | (CFTDeep (first,middle,last)) -> (maybe_45map string_45first_45node_39 (list_45first first)));;
let rec string_45rest_45node_39 = fun node -> (match node with (CFTValue (_95)) -> CNone | (CFTNode2 (_95,a,b)) -> (match (string_45rest_45node_39 a) with (CSome (node)) -> (CSome ((string_45node2_39 node b))) | CNone -> (CSome (b))) | (CFTNode3 (_95,a,b,c)) -> (match (string_45rest_45node_39 a) with (CSome (node)) -> (CSome ((string_45node3_39 node b c))) | CNone -> (CSome ((string_45node2_39 b c)))));;
let rec string_45rest = fun string -> (match string with CFTEmpty -> string | (CFTSingle (node)) -> (match (string_45rest_45node_39 node) with (CSome (node)) -> (CFTSingle (node)) | CNone -> CFTEmpty) | (CFTDeep ((CCons (node,rest)),middle,last)) -> (match (string_45rest_45node_39 node) with (CSome (node)) -> (CFTDeep ((CCons (node,rest)),middle,last)) | CNone -> (match rest with CEmpty -> (list_45foldr string_45append_45node_39 middle last) | _95 -> (CFTDeep (rest,middle,last)))) | _95 -> string);;
let rec string_45foldr_45node_39 = fun f node identity -> (match node with (CFTValue (a)) -> (f a identity) | (CFTNode2 (_95,a,b)) -> (string_45foldr_45node_39 f a (string_45foldr_45node_39 f b identity)) | (CFTNode3 (_95,a,b,c)) -> (string_45foldr_45node_39 f a (string_45foldr_45node_39 f b (string_45foldr_45node_39 f c identity))));;
let rec string_45foldr = fun f identity tree -> (match tree with CFTEmpty -> identity | (CFTSingle (x)) -> (string_45foldr_45node_39 f x identity) | (CFTDeep (first,middle,last)) -> (list_45foldr (string_45foldr_45node_39 f) (string_45foldr f (list_45foldl (string_45foldr_45node_39 f) identity last) middle) first));;
let rec string_45foldl_45node_39 = fun f node identity -> (match node with (CFTValue (a)) -> (f a identity) | (CFTNode2 (_95,b,a)) -> (string_45foldl_45node_39 f a (string_45foldl_45node_39 f b identity)) | (CFTNode3 (_95,c,b,a)) -> (string_45foldl_45node_39 f a (string_45foldl_45node_39 f b (string_45foldl_45node_39 f c identity))));;
let rec string_45foldl = fun f identity tree -> (match tree with CFTEmpty -> identity | (CFTSingle (x)) -> (string_45foldl_45node_39 f x identity) | (CFTDeep (first,middle,last)) -> (list_45foldr (string_45foldl_45node_39 f) (string_45foldl f (list_45foldl (string_45foldl_45node_39 f) identity first) middle) last));;
let rec string_45size = fun string -> (match string with CFTEmpty -> (0l) | (CFTSingle (x)) -> (string_45node_45size_39 x) | (CFTDeep (first,middle,last)) -> (Int32.add (list_45foldr Int32.add (0l) (list_45map string_45node_45size_39 first)) (Int32.add (list_45foldr Int32.add (0l) (list_45map string_45node_45size_39 last)) (string_45size middle))));;
let rec string_45concat_45nodes_39 = fun nodes -> (match nodes with (CCons (a,(CCons (b,CEmpty)))) -> (CCons ((string_45node2_39 a b),CEmpty)) | (CCons (a,(CCons (b,(CCons (c,CEmpty)))))) -> (CCons ((string_45node3_39 a b c),CEmpty)) | (CCons (a,(CCons (b,(CCons (c,(CCons (d,CEmpty)))))))) -> (CCons ((string_45node2_39 a b),(CCons ((string_45node2_39 c d),CEmpty)))) | (CCons (a,(CCons (b,(CCons (c,rest)))))) -> (CCons ((string_45node3_39 a b c),(string_45concat_45nodes_39 rest))) | _95 -> CEmpty);;
type ('Ta,'Tb,'Tc) triple = CTriple : 'Ta * 'Tb * 'Tc -> ('Ta,'Tb,'Tc) triple;;
let rec string_45concat_39 = fun a nodes b -> (match (CTriple (a,nodes,b)) with (CTriple (CFTEmpty,nodes,b)) -> (list_45foldr string_45prepend_45node_39 b nodes) | (CTriple (a,nodes,CFTEmpty)) -> (list_45foldl string_45append_45node_39 a nodes) | (CTriple ((CFTSingle (x)),nodes,b)) -> (string_45prepend_45node_39 x (list_45foldr string_45prepend_45node_39 b nodes)) | (CTriple (a,nodes,(CFTSingle (x)))) -> (string_45append_45node_39 x (list_45foldl string_45append_45node_39 a nodes)) | (CTriple ((CFTDeep (first1,middle1,last1)),nodes,(CFTDeep (first2,middle2,last2)))) -> (CFTDeep (first1,(string_45concat_39 middle1 (string_45concat_45nodes_39 (list_45concat (list_45reverse last1) (list_45concat nodes first2))) middle2),last2)));;
let rec string_45concat = fun a b -> (string_45concat_39 a CEmpty b);;
let rec string_45to_45list = fun string -> (string_45foldr list_45cons CEmpty string);;
let rec string_45from_45list = fun list -> (list_45foldr string_45prepend (string_45empty ()) list);;
let rec string_45skip = fun count string -> (match (_62 count (0l)) with CTrue -> (string_45skip (Int32.sub count (1l)) (string_45rest string)) | CFalse -> string);;
let rec string_45take_39 = fun count string taken -> (match (_62 count (0l)) with CTrue -> (match (string_45first string) with (CSome (char)) -> (string_45take_39 (Int32.sub count (1l)) (string_45rest string) (string_45append char taken)) | CNone -> taken) | CFalse -> taken);;
let rec string_45take = fun count string -> (string_45take_39 count string (string_45empty ()));;
let rec string_45reverse = fun string -> (string_45foldl string_45prepend (string_45empty ()) string);;
let rec string_45substring = fun start size string -> (string_45take size (string_45skip start string));;
let rec string_45join = fun separator strings -> (match strings with (CCons (first,rest)) -> (list_45foldl (fun string joined -> (string_45concat joined (string_45concat separator string))) first rest) | CEmpty -> (string_45empty ()));;
let rec string_45flatmap = fun f string -> (string_45join (string_45empty ()) (list_45map f (string_45to_45list string)));;
let rec string_45split_39 = fun separator list current parts -> (match list with CEmpty -> (list_45reverse (CCons ((list_45reverse current),parts))) | (CCons (c,rest)) -> (match (_61 separator c) with CTrue -> (string_45split_39 separator rest CEmpty (CCons ((list_45reverse current),parts))) | CFalse -> (string_45split_39 separator rest (CCons (c,current)) parts)));;
let rec string_45split = fun separator string -> (list_45map string_45from_45list (string_45split_39 separator (string_45to_45list string) CEmpty CEmpty));;
let rec string_45trim_45start_39 = fun list -> (match list with (CCons (x,xs)) -> (match (_61 x (32l)) with CTrue -> (string_45trim_45start_39 xs) | CFalse -> list) | CEmpty -> list);;
let rec string_45trim_45start = fun string -> (string_45from_45list (string_45trim_45start_39 (string_45to_45list string)));;
let rec string_45trim_45end = fun string -> (string_45reverse (string_45trim_45start (string_45reverse string)));;
let rec string_45trim = fun string -> (string_45trim_45start (string_45trim_45end string));;
let rec string_45empty_63 = fun string -> (match (string_45first string) with (CSome (_95)) -> CFalse | CNone -> CTrue);;
let rec string_45equal_63 = fun a b -> (match (string_45first a) with (CSome (xa)) -> (match (string_45first b) with (CSome (xb)) -> (_and (_61 xa xb) (string_45equal_63 (string_45rest a) (string_45rest b))) | CNone -> (string_45empty_63 a)) | CNone -> (string_45empty_63 b));;
let rec string_45point_45is_45digit = fun point -> (_and (_62 point (47l)) (_60 point (58l)));;
let rec string_45to_45int32_39_39_39 = fun string_45to_45int32_39_39 string accumulator x -> (string_45to_45int32_39_39 string (CSome ((Int32.add (Int32.mul (10l) accumulator) (Int32.sub x (48l))))));;
let rec string_45to_45int32_39_39 = fun string accumulator -> (match string with CEmpty -> accumulator | (CCons (x,rest)) -> (maybe_45flatmap (fun accumulator -> ((fun _226_156_168x -> ((maybe_45flatmap (string_45to_45int32_39_39_39 string_45to_45int32_39_39 rest accumulator)) ((maybe_45filter string_45point_45is_45digit) _226_156_168x))) (CSome (x)))) accumulator));;
let rec string_45to_45int32_39 = fun string -> (match string with (CCons (45l,string)) -> (match (list_45empty_63 string) with CTrue -> CNone | CFalse -> (maybe_45map (fun x -> (Int32.mul (-1l) x)) (string_45to_45int32_39 string))) | _95 -> (string_45to_45int32_39_39 string (CSome ((0l)))));;
let rec string_45to_45int32 = fun string -> (string_45to_45int32_39 (string_45to_45list string));;
let rec string_45from_45int32_39_39 = fun integer string -> (match (_62 integer (9l)) with CTrue -> (string_45from_45int32_39_39 (Int32.div integer (10l)) (CCons ((Int32.add (Int32.rem integer (10l)) (48l)),string))) | CFalse -> (CCons ((Int32.add integer (48l)),string)));;
let rec string_45from_45int32_39 = fun integer -> (match (_60 integer (0l)) with CTrue -> (match (_61 integer (-2147483648l)) with CTrue -> (CCons ((45l),(CCons ((50l),(CCons ((49l),(CCons ((52l),(CCons ((55l),(CCons ((52l),(CCons ((56l),(CCons ((51l),(CCons ((54l),(CCons ((52l),(CCons ((56l),CEmpty)))))))))))))))))))))) | CFalse -> (CCons ((45l),(string_45from_45int32_39 (Int32.mul integer (-1l)))))) | CFalse -> (string_45from_45int32_39_39 integer CEmpty));;
let rec string_45from_45int32 = fun integer -> (string_45from_45list (string_45from_45int32_39 integer));;
let rec string_45collect_45from_45indexed_45iterator = fun predicate iterator -> (pair_45map_45right string_45from_45list (list_45collect_45from_45indexed_45iterator predicate iterator));;
let rec string_45from_45boolean = fun boolean -> (match boolean with CTrue -> (string_45from_45list (CCons ((84l),(CCons ((114l),(CCons ((117l),(CCons ((101l),CEmpty))))))))) | CFalse -> (string_45from_45list (CCons ((70l),(CCons ((97l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty))))))))))));;
let rec string_45from_45chunk = fun chunk -> (chunk_45foldl string_45append (string_45empty ()) chunk);;
type ('Tv,'Te) result = CResult : 'Tv -> ('Tv,'Te) result | CError : 'Te -> ('Tv,'Te) result;;
let rec result_45lift = fun result -> (CResult (result));;
let rec result_45error = fun error -> (CError (error));;
let rec result_45map = fun f result -> (match result with (CResult (x)) -> (CResult ((f x))) | (CError (error)) -> (CError (error)));;
let rec result_45map_45error = fun f result -> (match result with (CResult (x)) -> (CResult (x)) | (CError (error)) -> (CError ((f error))));;
let rec result_45flatmap = fun f result -> (match result with (CResult (x)) -> (f x) | (CError (error)) -> (CError (error)));;
let rec result_45either = fun f g result -> (match result with (CResult (x)) -> (f x) | (CError (x)) -> (g x));;
let rec result_45or_45else = fun _value result -> (match result with (CResult (x)) -> x | (CError (x)) -> _value);;
let rec result_45error_63 = fun result -> (match result with (CError (_95)) -> CTrue | _95 -> CFalse);;
let rec result_45filter_45list = fun list -> (list_45foldr (fun result new_45list -> (match result with (CResult (x)) -> (CCons (x,new_45list)) | _95 -> new_45list)) CEmpty list);;
let rec result_45concat = fun list -> (match (list_45filter result_45error_63 list) with (CCons ((CError (error)),_95)) -> (CError (error)) | (CCons ((CResult (_95)),_95_95)) -> (CResult (CEmpty)) | CEmpty -> (CResult ((result_45filter_45list list))));;
let rec result_45of_45maybe = fun error maybe -> (match maybe with (CSome (x)) -> (CResult (x)) | CNone -> (CError (error)));;
let rec result_45bind = fun result f -> (result_45flatmap f result);;
let rec result_45return = fun _value -> (result_45lift _value);;
type ('Ta,'Ti) _parser = CParser : ('Ti -> (('Ta,'Ti) pair) maybe) -> ('Ta,'Ti) _parser;;
let rec parser_45result = fun x -> (CParser ((fun input -> (CSome ((CPair (x,input)))))));;
let rec _constant_parser_45fail = (CParser ((fun _95 -> CNone)));;let rec parser_45fail = fun () -> _constant_parser_45fail;;
let rec parser_45apply = fun _parser input -> (match _parser with (CParser (p)) -> (p input));;
let rec parser_45run = fun _parser input -> (maybe_45map pair_45left (parser_45apply _parser input));;
let rec parser_45bind = fun f _parser -> (CParser ((fun input -> (match (parser_45apply _parser input) with CNone -> CNone | (CSome ((CPair (_value,rest)))) -> (parser_45apply (f _value) rest)))));;
let rec parser_45if = fun predicate _parser -> (parser_45bind (fun _value -> (match (predicate _value) with CTrue -> (parser_45result _value) | CFalse -> (parser_45fail ()))) _parser);;
let rec parser_45and = fun f parser_45a parser_45b -> (parser_45bind (fun a -> (parser_45bind (fun b -> (f a b)) parser_45b)) parser_45a);;
let rec parser_45or = fun parser_45a parser_45b -> (CParser ((fun input -> (match (parser_45apply parser_45a input) with (CSome (x)) -> (CSome (x)) | CNone -> (parser_45apply parser_45b input)))));;
let rec parser_45zero_45or_45more_39 = fun parser_45zero_45or_45more _parser f -> (parser_45bind (fun first -> (parser_45bind (fun rest -> (parser_45result (f first rest))) (parser_45zero_45or_45more _parser))) _parser);;
let rec parser_45zero_45or_45more = fun f initial _parser -> (parser_45or (parser_45zero_45or_45more_39 (parser_45zero_45or_45more f initial) _parser f) (parser_45result initial));;
let rec parser_45one_45or_45more = fun f initial _parser -> (parser_45and (fun first rest -> (parser_45result (f first rest))) _parser (parser_45zero_45or_45more f initial _parser));;
type ('Ts,'Tv) state = COperation : ('Ts -> ('Ts,'Tv) pair) -> ('Ts,'Tv) state;;
let rec state_45run = fun state operation -> (match operation with (COperation (f)) -> (f state));;
let rec state_45final_45value = fun initial_45state operation -> (match (state_45run initial_45state operation) with (CPair (_95,_value)) -> _value);;
let rec state_45return = fun _value -> (COperation ((fun state -> (CPair (state,_value)))));;
let rec state_45bind = fun operation f -> (COperation ((fun state -> (match (state_45run state operation) with (CPair (new_45state,new_45value)) -> (state_45run new_45state (f new_45value))))));;
let rec _constant_state_45get = (COperation ((fun state -> (CPair (state,state)))));;let rec state_45get = fun () -> _constant_state_45get;;
let rec state_45set = fun state -> (COperation ((fun _95 -> (CPair (state,state)))));;
let rec state_45modify = fun f -> (state_45bind (state_45get ()) (fun state -> (state_45set (f state))));;
let rec state_45let = fun _value f -> (state_45bind (state_45return _value) f);;
let rec state_45foldr = fun f initial_45value operations -> (list_45foldr (fun operation chain -> (state_45bind operation (fun x -> (state_45bind chain (fun xs -> (state_45return (f x xs))))))) (state_45return initial_45value) operations);;
let rec state_45foreach = fun f xs -> (state_45foldr list_45cons CEmpty (list_45map f xs));;
let rec state_45flatmap = fun f operation -> (state_45bind operation f);;
let rec state_45map = fun f operation -> (state_45flatmap (fun _226_156_168x -> (state_45return (f _226_156_168x))) operation);;
let rec state_45lift = fun _value -> (state_45return _value);;
type ('Tvalue) dictionary = CTrieNode : ('Tvalue) maybe * ((int32,('Tvalue) dictionary) pair) list -> ('Tvalue) dictionary;;
let rec _constant_dictionary_45empty = (CTrieNode (CNone,CEmpty));;let rec dictionary_45empty = fun () -> _constant_dictionary_45empty;;
let rec _39dictionary_45value = fun dictionary -> (match dictionary with (CTrieNode (_value,_95)) -> _value);;
let rec _39dictionary_45children = fun dictionary -> (match dictionary with (CTrieNode (_95,children)) -> children);;
let rec _39dictionary_45find_45child = fun char dictionary -> (maybe_45map pair_45right (list_45find_45first (fun _226_156_168x -> ((_61 char) (pair_45left _226_156_168x))) (_39dictionary_45children dictionary)));;
let rec _39dictionary_45remove_45child = fun char dictionary -> (match dictionary with (CTrieNode (_value,children)) -> (CTrieNode (_value,(list_45exclude (fun _226_156_168x -> ((_61 char) (pair_45left _226_156_168x))) children))));;
let rec dictionary_45entries_39_39 = fun dictionary_45entries_39 dictionary -> (list_45flatmap (fun _226_156_168x -> (dictionary_45entries_39 (pair_45right _226_156_168x))) (_39dictionary_45children dictionary));;
let rec dictionary_45entries_39 = fun key dictionary -> (match (_39dictionary_45value dictionary) with (CSome (_value)) -> (CCons ((CPair (CEmpty,_value)),(dictionary_45entries_39_39 (dictionary_45entries_39 key) dictionary))) | CNone -> (dictionary_45entries_39_39 (dictionary_45entries_39 key) dictionary));;
let rec dictionary_45entries = fun dictionary -> (dictionary_45entries_39 CEmpty dictionary);;
let rec dictionary_45set = fun key new_45value dictionary -> (match (string_45first key) with CNone -> (CTrieNode ((CSome (new_45value)),(_39dictionary_45children dictionary))) | (CSome (char)) -> ((fun _226_156_168x -> ((fun child -> (CTrieNode ((_39dictionary_45value dictionary),(CCons ((CPair (char,child)),(_39dictionary_45children (_39dictionary_45remove_45child char dictionary))))))) ((dictionary_45set (string_45rest key) new_45value) ((maybe_45else dictionary_45empty) ((_39dictionary_45find_45child char) _226_156_168x))))) dictionary));;
let rec dictionary_45get = fun key dictionary -> (match (string_45first key) with (CSome (char)) -> (maybe_45flatmap (dictionary_45get (string_45rest key)) (_39dictionary_45find_45child char dictionary)) | CNone -> (_39dictionary_45value dictionary));;
let rec dictionary_45of = fun entries -> (list_45foldl (pair_45map dictionary_45set) (dictionary_45empty ()) entries);;
let rec dictionary_45singleton = fun key _value -> (dictionary_45set key _value (dictionary_45empty ()));;
let rec dictionary_45get_45or = fun key default dictionary -> (match (dictionary_45get key dictionary) with (CSome (_value)) -> _value | CNone -> default);;
let rec whitespace_63 = fun character -> (_or (_61 character (32l)) (_or (_61 character (13l)) (_or (_61 character (9l)) (_61 character (10l)))));;
let rec atom_45character_63 = fun character -> (_and (not (_61 character (40l))) (_and (not (_61 character (41l))) (not (whitespace_63 character))));;
type range = CRange : int32 * int32 -> range;;
type sexp = CSymbol : string * range -> sexp | CList : (sexp) list * range -> sexp;;
type parse_45error = CParseErrorTooFewClosingBrackets | CParseErrorTooManyClosingBrackets;;
type ('Ti,'Te) parse_45result = CParseNext : 'Ti * 'Te -> ('Ti,'Te) parse_45result | CParseOut : 'Ti -> ('Ti,'Te) parse_45result | CParseEnd;;
let rec symbol_45range = fun start _end -> (CRange (start,_end));;
let rec collect_45while = fun predicate chunk index size -> (match (_and (_60 index size) (predicate (chunk_45get index chunk))) with CTrue -> (collect_45while predicate chunk (Int32.add index (1l)) size) | CFalse -> index);;
let rec parse_45symbol = fun chunk index size -> (match (atom_45character_63 (chunk_45get index chunk)) with CFalse -> (CParseOut (index)) | CTrue -> (match (collect_45while atom_45character_63 chunk index size) with next_45index -> (CParseNext (next_45index,(CSymbol ((string_45from_45chunk (chunk_45slice index (Int32.sub next_45index index) chunk)),(symbol_45range index next_45index)))))));;
let rec list_45range = fun start _end -> (CRange ((Int32.sub start (1l)),_end));;
let rec parse_45list = fun chunk index size parse_45sexps -> (match (parse_45sexps chunk index size CEmpty) with (CPair (next_45index,expressions)) -> (CParseNext (next_45index,(CList (expressions,(list_45range index next_45index))))));;
let rec parse_45expression = fun chunk index size parse_45sexps -> (match (_60 index size) with CFalse -> CParseEnd | CTrue -> (match (chunk_45get index chunk) with 40l -> (parse_45list chunk (Int32.add index (1l)) size parse_45sexps) | 41l -> (CParseOut ((Int32.add index (1l)))) | x -> (match (whitespace_63 x) with CTrue -> (parse_45expression chunk (Int32.add index (1l)) size parse_45sexps) | CFalse -> (parse_45symbol chunk index size))));;
let rec parse_45sexps = fun chunk index size expressions -> (match (parse_45expression chunk index size parse_45sexps) with CParseEnd -> (CPair (index,(list_45reverse expressions))) | (CParseOut (index)) -> (CPair (index,(list_45reverse expressions))) | (CParseNext (index,result)) -> (parse_45sexps chunk index size (CCons (result,expressions))));;
let rec count_45parens = fun chunk -> (chunk_45foldl (fun c count -> (match c with 40l -> (pair_45map_45left (Int32.add (1l)) count) | 41l -> (pair_45map_45right (Int32.add (1l)) count) | _95 -> count)) (CPair ((0l),(0l))) chunk);;
let rec check_45errors = fun chunk -> (match (count_45parens chunk) with (CPair (_open,close)) -> (match (_60 _open close) with CTrue -> (CSome (CParseErrorTooManyClosingBrackets)) | CFalse -> (match (_62 _open close) with CTrue -> (CSome (CParseErrorTooFewClosingBrackets)) | CFalse -> CNone)));;
let rec parse_39 = fun chunk -> (match (check_45errors chunk) with (CSome (error)) -> (CError (error)) | CNone -> (match (parse_45sexps chunk (0l) (chunk_45size chunk) CEmpty) with (CPair (_95,expressions)) -> (CResult (expressions))));;
let rec parse = fun stdin -> (parse_39 stdin);;
let rec wrap_45in_45brackets = fun string -> (string_45concat (string_45of_45char (40l)) (string_45concat string (string_45of_45char (41l))));;
let rec stringify_45sexp = fun stringify expression -> (match expression with (CSymbol (string,_95)) -> string | (CList (expressions,_95)) -> (wrap_45in_45brackets (stringify expressions)));;
let rec stringify = fun expressions -> (string_45join (string_45of_45char (32l)) (list_45map (stringify_45sexp stringify) expressions));;
let rec _constant_data_45def = (string_45from_45list (CCons ((100l),(CCons ((101l),(CCons ((102l),CEmpty)))))));;let rec data_45def = fun () -> _constant_data_45def;;
let rec _constant_data_45export = (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((111l),(CCons ((114l),(CCons ((116l),CEmpty)))))))))))));;let rec data_45export = fun () -> _constant_data_45export;;
let rec _constant_data_45typ = (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),CEmpty)))))));;let rec data_45typ = fun () -> _constant_data_45typ;;
let rec _constant_data_45fn = (string_45from_45list (CCons ((102l),(CCons ((110l),CEmpty)))));;let rec data_45fn = fun () -> _constant_data_45fn;;
let rec _constant_data_45match = (string_45from_45list (CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),CEmpty)))))))))));;let rec data_45match = fun () -> _constant_data_45match;;
let rec _constant_data_45exists = (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((115l),CEmpty)))))))))))));;let rec data_45exists = fun () -> _constant_data_45exists;;
type language = CEnglish;;
let rec i18n_45error_45range_45to_45string = fun language range -> (match range with (CRange (start,_end)) -> (string_45concat (string_45from_45list (CCons ((32l),(CCons ((97l),(CCons ((116l),(CCons ((32l),CEmpty))))))))) (string_45concat (string_45from_45int32 start) (string_45concat (string_45from_45list (CCons ((45l),CEmpty))) (string_45from_45int32 _end)))));;
let rec i18n_45malformed_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((79l),(CCons ((110l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((45l),(CCons ((32l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((97l),(CCons ((110l),(CCons ((32l),(CCons ((98l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((112l),(CCons ((32l),(CCons ((108l),(CCons ((101l),(CCons ((118l),(CCons ((101l),(CCons ((108l),(CCons ((32l),(CCons ((111l),(CCons ((102l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((89l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((110l),(CCons ((101l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((97l),(CCons ((112l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((46l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((40l),(CCons ((97l),(CCons ((114l),(CCons ((103l),(CCons ((117l),(CCons ((109l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((115l),(CCons ((41l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((79l),(CCons ((102l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45name_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((70l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((69l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45match_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((110l),(CCons ((111l),(CCons ((116l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((44l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((115l),(CCons ((117l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((115l),(CCons ((111l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((116l),(CCons ((32l),(CCons ((97l),(CCons ((108l),(CCons ((108l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((114l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((114l),(CCons ((117l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((105l),(CCons ((114l),(CCons ((115l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((49l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((49l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((50l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((50l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45symbol_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45constructor_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((84l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45sexp_45too_45few_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((102l),(CCons ((101l),(CCons ((119l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec i18n_45malformed_45sexp_45too_45many_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((110l),(CCons ((121l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec char_45is_45upper_45case_63 = fun char -> (_and (_62_61 char (65l)) (_60_61 char (90l)));;
let rec name_45of_45constructor_63 = fun name -> (match (string_45first name) with (CSome (first_45letter)) -> (char_45is_45upper_45case_63 first_45letter) | CNone -> CFalse);;
type error = CMalformedDefinitionError : range -> error | CMalformedTypeDefinitionError : range -> error | CMalformedFunctionDefinitionError : range -> error | CMalformedFunctionNameError : range -> error | CMalformedExpressionError : range -> error | CMalformedMatchExpressionError : range -> error | CMalformedSymbolError : range -> error | CMalformedConstructorError : range -> error | CMalformedTypeError : range -> error | CMalformedSexpTooFewClosingBrackets | CMalformedSexpTooManyClosingBrackets;;
let rec error_45to_45string = fun error -> (match error with (CMalformedDefinitionError (range)) -> (i18n_45malformed_45definition_45error CEnglish range) | (CMalformedFunctionDefinitionError (range)) -> (i18n_45malformed_45function_45definition_45error CEnglish range) | (CMalformedTypeDefinitionError (range)) -> (i18n_45malformed_45type_45definition_45error CEnglish range) | (CMalformedFunctionNameError (range)) -> (i18n_45malformed_45function_45name_45error CEnglish range) | (CMalformedExpressionError (range)) -> (i18n_45malformed_45expression_45error CEnglish range) | (CMalformedMatchExpressionError (range)) -> (i18n_45malformed_45match_45expression_45error CEnglish range) | (CMalformedSymbolError (range)) -> (i18n_45malformed_45symbol_45error CEnglish range) | (CMalformedConstructorError (range)) -> (i18n_45malformed_45constructor_45error CEnglish range) | (CMalformedTypeError (range)) -> (i18n_45malformed_45type_45error CEnglish range) | CMalformedSexpTooFewClosingBrackets -> (i18n_45malformed_45sexp_45too_45few_45closing_45brackets CEnglish) | CMalformedSexpTooManyClosingBrackets -> (i18n_45malformed_45sexp_45too_45many_45closing_45brackets CEnglish));;
let rec symbol_45to_45string = fun symbol -> (match symbol with (CSymbol (name,_95)) -> (CResult (name)) | (CList (_95,range)) -> (CError ((CMalformedSymbolError (range)))));;
type ('Tmeta) ast_45type = CSimpleType : string * 'Tmeta -> ('Tmeta) ast_45type | CComplexType : string * (('Tmeta) ast_45type) list * 'Tmeta -> ('Tmeta) ast_45type | CFunctionType : (('Tmeta) ast_45type) list * ('Tmeta) ast_45type * 'Tmeta -> ('Tmeta) ast_45type;;
type ('Tmeta) type_45parameter = CUniversalParameter : string * 'Tmeta -> ('Tmeta) type_45parameter | CExistentialParameter : string * 'Tmeta -> ('Tmeta) type_45parameter;;
type ('Tmeta) constructor = CSimpleConstructor : string * 'Tmeta -> ('Tmeta) constructor | CComplexConstructor : string * (('Tmeta) ast_45type) list * 'Tmeta -> ('Tmeta) constructor;;
type ('Tmeta) pattern = CCapture : string * 'Tmeta -> ('Tmeta) pattern | CIntegerPattern : int32 * 'Tmeta -> ('Tmeta) pattern | CConstructorPattern : string * (('Tmeta) pattern) list * 'Tmeta -> ('Tmeta) pattern;;
type ('Tmeta) expression = CIntegerConstant : int32 * 'Tmeta -> ('Tmeta) expression | CIdentifier : string * 'Tmeta -> ('Tmeta) expression | CLambda : (string) list * ('Tmeta) expression * 'Tmeta -> ('Tmeta) expression | CMatch : ('Tmeta) expression * ((('Tmeta) pattern,('Tmeta) expression) pair) list * 'Tmeta -> ('Tmeta) expression | CConstructor : string * (('Tmeta) expression) list * 'Tmeta -> ('Tmeta) expression | CFunctionApplication : (('Tmeta) expression) list * 'Tmeta -> ('Tmeta) expression;;
type ('Ta,'Tb) definition = CTypeDefinition : string * (('Ta) type_45parameter) list * (('Ta) constructor) list * 'Tb -> ('Ta,'Tb) definition | CExportDefinition : string * (string) list * ('Ta) expression * 'Tb -> ('Ta,'Tb) definition | CFunctionDefinition : string * (string) list * ('Ta) expression * 'Tb -> ('Ta,'Tb) definition;;
let rec definition_45meta = fun definition -> (match definition with (CTypeDefinition (_95,_95_95,_95_95_95,meta)) -> meta | (CExportDefinition (_95,_95_95,_95_95_95,meta)) -> meta | (CFunctionDefinition (_95,_95_95,_95_95_95,meta)) -> meta);;
let rec sexp_45to_45complex_45type = fun sexp_45to_45types name parameters range -> (result_45bind (sexp_45to_45types parameters) (fun sub_45types -> (result_45return (CComplexType (name,sub_45types,range)))));;
let rec sexp_45to_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> (match parameters with (CCons ((CList (arg_45types,_95)),(CCons (return_45type,CEmpty)))) -> (result_45bind (sexp_45to_45types arg_45types) (fun arg_45types -> (result_45bind (sexp_45to_45type return_45type) (fun return_45type -> (result_45return (CFunctionType (arg_45types,return_45type,range))))))) | _95 -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45complex_45or_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> (match (string_45equal_63 name (data_45fn ())) with CTrue -> (sexp_45to_45function_45type sexp_45to_45types sexp_45to_45type name parameters range) | CFalse -> (sexp_45to_45complex_45type sexp_45to_45types name parameters range));;
let rec sexp_45to_45type = fun sexp_45to_45types _type -> (match _type with (CList ((CCons ((CSymbol (name,_95)),parameters)),range)) -> (sexp_45to_45complex_45or_45function_45type sexp_45to_45types (sexp_45to_45type sexp_45to_45types) name parameters range) | (CSymbol (name,range)) -> (CResult ((CSimpleType (name,range)))) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45types = fun types -> (result_45concat (list_45map (sexp_45to_45type sexp_45to_45types) types));;
let rec sexp_45to_45complex_45constructor = fun name types range -> (result_45bind (sexp_45to_45types types) (fun types -> (result_45return (CComplexConstructor (name,types,range)))));;
let rec sexp_45to_45constructor_45definition = fun constructor -> (match constructor with (CSymbol (name,range)) -> (CResult ((CSimpleConstructor (name,range)))) | (CList ((CCons ((CSymbol (name,_95)),types)),range)) -> (sexp_45to_45complex_45constructor name types range) | (CList (_95,range)) -> (CError ((CMalformedConstructorError (range)))));;
let rec sexp_45to_45constructor_45definitions = fun constructors -> (result_45concat (list_45map sexp_45to_45constructor_45definition constructors));;
let rec sexp_45to_45type_45parameter = fun sexp -> (match sexp with (CList ((CCons (_95,(CCons ((CSymbol (name,range)),CEmpty)))),_95_95)) -> (CResult ((CExistentialParameter (name,range)))) | (CSymbol (name,range)) -> (CResult ((CUniversalParameter (name,range)))) | (CList (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexp_45to_45type_45parameters = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (_95,_95_95)),parameters)),_95_95_95)) -> (result_45concat (list_45map sexp_45to_45type_45parameter parameters)) | (CSymbol (_95,_95_95)) -> (CResult (CEmpty)) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45name = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (name,_95)),_95_95)),_95_95_95)) -> (CResult (name)) | (CSymbol (name,_95)) -> (CResult (name)) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45definition = fun type_45name constructors range -> (result_45bind (sexp_45to_45type_45name type_45name) (fun name -> (result_45bind (sexp_45to_45type_45parameters type_45name) (fun parameters -> (result_45bind (sexp_45to_45constructor_45definitions constructors) (fun constructors -> (result_45return (CTypeDefinition (name,parameters,constructors,range)))))))));;
let rec sexp_45to_45arguments = fun arguments -> (result_45concat (list_45map symbol_45to_45string arguments));;
let rec sexp_45to_45function_45body = fun range rest -> (match rest with (CCons ((CList (arguments,_95)),(CCons (expression,CEmpty)))) -> (CResult ((CPair (arguments,expression)))) | _95 -> (CError ((CMalformedFunctionDefinitionError (range)))));;
let rec sexp_45to_45lambda = fun sexp_45to_45expression rest range -> (result_45bind (sexp_45to_45function_45body range rest) (fun body -> (result_45bind (sexp_45to_45arguments (pair_45left body)) (fun arguments -> (result_45bind (sexp_45to_45expression (pair_45right body)) (fun expression -> (result_45return (CLambda (arguments,expression,range)))))))));;
let rec sexp_45to_45function_45application = fun sexp_45to_45expression range expressions -> ((fun _226_156_168x -> ((result_45map (fun expressions -> (CFunctionApplication (expressions,range)))) (result_45concat ((list_45map sexp_45to_45expression) _226_156_168x)))) expressions);;
let rec to_45constructor_45or_45capture = fun range name -> (match (name_45of_45constructor_63 name) with CTrue -> (CResult ((CConstructorPattern (name,CEmpty,range)))) | CFalse -> (CResult ((CCapture (name,range)))));;
let rec sexp_45to_45pattern = fun sexp -> (match sexp with (CList ((CCons (name,rest)),range)) -> (result_45bind (result_45concat (list_45map sexp_45to_45pattern rest)) (fun patterns -> (result_45bind (symbol_45to_45string name) (fun name -> (result_45return (CConstructorPattern (name,patterns,range))))))) | (CList (CEmpty,range)) -> (CError ((CMalformedExpressionError (range)))) | (CSymbol (name,range)) -> ((fun _226_156_168x -> ((maybe_45else (fun () -> (to_45constructor_45or_45capture range name))) ((maybe_45map (fun integer -> (CResult ((CIntegerPattern (integer,range)))))) _226_156_168x))) (string_45to_45int32 name)));;
let rec sexp_45to_45match_45pair = fun sexp_45to_45expression pair -> (match pair with (CPair (pattern,expression)) -> (result_45bind (sexp_45to_45pattern pattern) (fun pattern -> (result_45bind (sexp_45to_45expression expression) (fun expression -> (result_45return (CPair (pattern,expression))))))));;
let rec collect_45pairs = fun list -> (match list with (CCons (a,(CCons (b,rest)))) -> (maybe_45map (fun more_45pairs -> (CCons ((CPair (a,b)),more_45pairs))) (collect_45pairs rest)) | CEmpty -> (CSome (CEmpty)) | _95 -> CNone);;
let rec sexp_45to_45match_45pairs = fun sexp_45to_45expression range pairs -> ((fun _226_156_168x -> ((result_45flatmap (fun _226_156_168x -> (result_45concat ((list_45map (sexp_45to_45match_45pair sexp_45to_45expression)) _226_156_168x)))) ((result_45of_45maybe (CMalformedMatchExpressionError (range))) ((fun pairs -> (match pairs with (CSome (CEmpty)) -> CNone | other -> other)) (collect_45pairs _226_156_168x))))) pairs);;
let rec sexp_45to_45match = fun sexp_45to_45expression range rest -> (match rest with (CCons (expression,rest)) -> (result_45bind (sexp_45to_45expression expression) (fun expression -> (result_45bind (sexp_45to_45match_45pairs sexp_45to_45expression range rest) (fun pairs -> (result_45return (CMatch (expression,pairs,range))))))) | _95 -> (CError ((CMalformedExpressionError (range)))));;
let rec sexp_45to_45constructor = fun sexp_45to_45expression range name rest -> (result_45bind (result_45concat (list_45map sexp_45to_45expression rest)) (fun expressions -> (result_45return (CConstructor (name,expressions,range)))));;
let rec sexp_45to_45list_45expression = fun sexp_45to_45expression expressions range -> (match expressions with (CCons ((CSymbol (symbol,_95)),rest)) -> (match (string_45equal_63 symbol (data_45fn ())) with CTrue -> (sexp_45to_45lambda sexp_45to_45expression rest range) | CFalse -> (match (string_45equal_63 symbol (data_45match ())) with CTrue -> (sexp_45to_45match sexp_45to_45expression range rest) | CFalse -> (match (name_45of_45constructor_63 symbol) with CTrue -> (sexp_45to_45constructor sexp_45to_45expression range symbol rest) | CFalse -> (sexp_45to_45function_45application sexp_45to_45expression range expressions)))) | _95 -> (sexp_45to_45function_45application sexp_45to_45expression range expressions));;
let rec sexp_45to_45expression = fun sexp -> (match sexp with (CSymbol (symbol_45name,range)) -> (match (string_45to_45int32 symbol_45name) with (CSome (integer)) -> (CResult ((CIntegerConstant (integer,range)))) | CNone -> (match (name_45of_45constructor_63 symbol_45name) with CTrue -> (CResult ((CConstructor (symbol_45name,CEmpty,range)))) | CFalse -> (CResult ((CIdentifier (symbol_45name,range)))))) | (CList (expressions,range)) -> (match expressions with CEmpty -> (CError ((CMalformedExpressionError (range)))) | _95 -> (sexp_45to_45list_45expression sexp_45to_45expression expressions range)));;
let rec sexp_45to_45function_45definition = fun name_45symbol rest range constructor -> (result_45bind (sexp_45to_45function_45body range rest) (fun body -> (result_45bind (sexp_45to_45arguments (pair_45left body)) (fun arguments -> (result_45bind (sexp_45to_45expression (pair_45right body)) (fun expression -> (result_45bind (symbol_45to_45string name_45symbol) (fun name -> (result_45return (constructor name arguments expression range))))))))));;
let rec sexp_45to_45definition_39 = fun name rest range kind -> (match (string_45equal_63 kind (data_45typ ())) with CTrue -> (sexp_45to_45type_45definition name rest range) | CFalse -> (match (string_45equal_63 kind (data_45def ())) with CTrue -> (sexp_45to_45function_45definition name rest range (fun name arguments expression range -> (CFunctionDefinition (name,arguments,expression,range)))) | CFalse -> (match (string_45equal_63 kind (data_45export ())) with CTrue -> (sexp_45to_45function_45definition name rest range (fun name arguments expression range -> (CExportDefinition (name,arguments,expression,range)))) | CFalse -> (CError ((CMalformedDefinitionError (range)))))));;
let rec specific_45malformed_45definition_45error = fun kind range -> (match (string_45equal_63 kind (data_45typ ())) with CTrue -> (CError ((CMalformedTypeDefinitionError (range)))) | CFalse -> (match (string_45equal_63 kind (data_45def ())) with CTrue -> (CError ((CMalformedFunctionDefinitionError (range)))) | CFalse -> (CError ((CMalformedDefinitionError (range))))));;
let rec sexp_45to_45definition = fun expression -> (match expression with (CList ((CCons ((CSymbol (kind,_95)),CEmpty)),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons ((CSymbol (kind,_95)),(CCons (_95_95,CEmpty)))),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons (kind,(CCons (name,rest)))),range)) -> (result_45flatmap (sexp_45to_45definition_39 name rest range) (symbol_45to_45string kind)) | (CList ((CCons ((CList (_95,range)),CEmpty)),_95_95)) -> (CError ((CMalformedDefinitionError (range)))) | (CList (CEmpty,range)) -> (CError ((CMalformedDefinitionError (range)))) | (CSymbol (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexp_45error_45to_45ast_45error = fun error -> (match error with CParseErrorTooFewClosingBrackets -> CMalformedSexpTooFewClosingBrackets | CParseErrorTooManyClosingBrackets -> CMalformedSexpTooManyClosingBrackets);;
let rec sexps_45to_45definitions = fun expressions -> (match expressions with (CResult (expressions)) -> (list_45map sexp_45to_45definition expressions) | (CError (error)) -> (CCons ((CError ((sexp_45error_45to_45ast_45error error))),CEmpty)));;
let rec type_45to_45sexp = fun types_45to_45sexp _type -> (match _type with (CSimpleType (name,range)) -> (CSymbol (name,range)) | (CFunctionType (arg_45types,return_45type,range)) -> (CList ((CCons ((CSymbol ((data_45fn ()),range)),(CCons ((CList ((types_45to_45sexp arg_45types),range)),(CCons ((type_45to_45sexp types_45to_45sexp return_45type),CEmpty)))))),range)) | (CComplexType (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec types_45to_45sexp = fun types -> (list_45map (type_45to_45sexp types_45to_45sexp) types);;
let rec constructor_45to_45sexp = fun constructor -> (match constructor with (CSimpleConstructor (name,range)) -> (CSymbol (name,range)) | (CComplexConstructor (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec constructors_45to_45sexp = fun constructors -> (list_45map constructor_45to_45sexp constructors);;
let rec type_45parameter_45to_45sexp = fun parameter -> (match parameter with (CExistentialParameter (name,range)) -> (CList ((CCons ((CSymbol ((data_45exists ()),range)),(CCons ((CSymbol (name,range)),CEmpty)))),range)) | (CUniversalParameter (name,range)) -> (CSymbol (name,range)));;
let rec type_45name_45to_45sexp = fun range name parameters -> (match parameters with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map type_45parameter_45to_45sexp parameters))),range)));;
let rec type_45definition_45to_45sexp = fun name parameters constructors range -> (CList ((list_45concat (CCons ((CSymbol ((data_45typ ()),range)),(CCons ((type_45name_45to_45sexp range name parameters),CEmpty)))) (constructors_45to_45sexp constructors)),range));;
let rec function_45arguments_45to_45sexp = fun arguments range -> (CList ((list_45map (fun name -> (CSymbol (name,range))) arguments),range));;
let rec pattern_45to_45sexp = fun pattern -> (match pattern with (CConstructorPattern (name,CEmpty,range)) -> (CSymbol (name,range)) | (CConstructorPattern (name,patterns,range)) -> (CList ((CCons ((CSymbol (name,range)),(list_45map pattern_45to_45sexp patterns))),range)) | (CIntegerPattern (_value,range)) -> (CSymbol ((string_45from_45int32 _value),range)) | (CCapture (name,range)) -> (CSymbol (name,range)));;
let rec match_45pair_45to_45sexp = fun expression_45to_45sexp pair -> (match pair with (CPair (pattern,expression)) -> (CCons ((pattern_45to_45sexp pattern),(CCons ((expression_45to_45sexp expression),CEmpty)))));;
let rec expression_45to_45sexp = fun expression -> (match expression with (CIntegerConstant (integer,range)) -> (CSymbol ((string_45from_45int32 integer),range)) | (CIdentifier (string,range)) -> (CSymbol (string,range)) | (CLambda (arguments,expression,range)) -> (CList ((CCons ((CSymbol ((data_45fn ()),range)),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))),range)) | (CMatch (expression,pairs,range)) -> (CList ((CCons ((CSymbol ((data_45match ()),range)),(CCons ((expression_45to_45sexp expression),(list_45flatmap (match_45pair_45to_45sexp expression_45to_45sexp) pairs))))),range)) | (CConstructor (name,expressions,range)) -> (match expressions with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map expression_45to_45sexp expressions))),range))) | (CFunctionApplication (expressions,range)) -> (CList ((list_45map expression_45to_45sexp expressions),range)));;
let rec function_45definition_45to_45sexp = fun name arguments expression range kind -> (CList ((CCons ((CSymbol (kind,range)),(CCons ((CSymbol (name,range)),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))))),range));;
let rec definition_45to_45sexp = fun definition -> (match definition with (CTypeDefinition (name,parameters,constructors,range)) -> (type_45definition_45to_45sexp name parameters constructors range) | (CExportDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range (data_45export ())) | (CFunctionDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range (data_45def ())));;
let rec error_45to_45sexp = fun error -> (CSymbol ((error_45to_45string error),(CRange ((0l),(0l)))));;
let rec render_45result = fun result -> (match result with (CResult (sexp)) -> sexp | (CError (sexp)) -> sexp);;
let rec definitions_45to_45sexps = fun definitions -> (list_45map (fun _226_156_168x -> (render_45result ((result_45map_45error error_45to_45sexp) ((result_45map definition_45to_45sexp) _226_156_168x)))) definitions);;
let rec _constant_data_45space = (string_45from_45list (CCons ((32l),CEmpty)));;let rec data_45space = fun () -> _constant_data_45space;;
let rec _constant_data_45plus = (string_45from_45list (CCons ((43l),CEmpty)));;let rec data_45plus = fun () -> _constant_data_45plus;;
let rec _constant_data_45multiply = (string_45from_45list (CCons ((42l),CEmpty)));;let rec data_45multiply = fun () -> _constant_data_45multiply;;
let rec _constant_data_45minus = (string_45from_45list (CCons ((45l),CEmpty)));;let rec data_45minus = fun () -> _constant_data_45minus;;
let rec _constant_data_45slash = (string_45from_45list (CCons ((47l),CEmpty)));;let rec data_45slash = fun () -> _constant_data_45slash;;
let rec _constant_data_45percent = (string_45from_45list (CCons ((37l),CEmpty)));;let rec data_45percent = fun () -> _constant_data_45percent;;
let rec _constant_data_45match = (string_45from_45list (CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),CEmpty)))))))))));;let rec data_45match = fun () -> _constant_data_45match;;
let rec _constant_data_45pipe = (string_45from_45list (CCons ((112l),(CCons ((105l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;let rec data_45pipe = fun () -> _constant_data_45pipe;;
let rec _constant_data_45list = (string_45from_45list (CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),CEmpty)))))))));;let rec data_45list = fun () -> _constant_data_45list;;
let rec _constant_data_45int32_45less_45than = (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((45l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((45l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((110l),CEmpty)))))))))))))))))))))))))))))));;let rec data_45int32_45less_45than = fun () -> _constant_data_45int32_45less_45than;;
let rec _constant_data_45parse_45error = (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((32l),CEmpty)))))))))))))))))))))))));;let rec data_45parse_45error = fun () -> _constant_data_45parse_45error;;
let rec _constant_data_45fun = (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),CEmpty)))))));;let rec data_45fun = fun () -> _constant_data_45fun;;
let rec _constant_data_45type = (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;let rec data_45type = fun () -> _constant_data_45type;;
let rec _constant_data_45if = (string_45from_45list (CCons ((105l),(CCons ((102l),CEmpty)))));;let rec data_45if = fun () -> _constant_data_45if;;
let rec _constant_data_45then = (string_45from_45list (CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;let rec data_45then = fun () -> _constant_data_45then;;
let rec _constant_data_45else = (string_45from_45list (CCons ((101l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))));;let rec data_45else = fun () -> _constant_data_45else;;
let rec _constant_data_45with = (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;let rec data_45with = fun () -> _constant_data_45with;;
let rec _constant_data_45of = (string_45from_45list (CCons ((111l),(CCons ((102l),CEmpty)))));;let rec data_45of = fun () -> _constant_data_45of;;
let rec _constant_data_45class = (string_45from_45list (CCons ((99l),(CCons ((108l),(CCons ((97l),(CCons ((115l),(CCons ((115l),CEmpty)))))))))));;let rec data_45class = fun () -> _constant_data_45class;;
let rec _constant_data_45end = (string_45from_45list (CCons ((101l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;let rec data_45end = fun () -> _constant_data_45end;;
let rec _constant_data_45in = (string_45from_45list (CCons ((105l),(CCons ((110l),CEmpty)))));;let rec data_45in = fun () -> _constant_data_45in;;
let rec _constant_data_45let = (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),CEmpty)))))));;let rec data_45let = fun () -> _constant_data_45let;;
let rec _constant_data_45open = (string_45from_45list (CCons ((111l),(CCons ((112l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;let rec data_45open = fun () -> _constant_data_45open;;
let rec _constant_data_45and = (string_45from_45list (CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;let rec data_45and = fun () -> _constant_data_45and;;
let rec _constant_data_45or = (string_45from_45list (CCons ((111l),(CCons ((114l),CEmpty)))));;let rec data_45or = fun () -> _constant_data_45or;;
let rec _constant_data_45as = (string_45from_45list (CCons ((97l),(CCons ((115l),CEmpty)))));;let rec data_45as = fun () -> _constant_data_45as;;
let rec _constant_data_45less_45than = (string_45from_45list (CCons ((60l),CEmpty)));;let rec data_45less_45than = fun () -> _constant_data_45less_45than;;
let rec _constant_data_45assert = (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((116l),CEmpty)))))))))))));;let rec data_45assert = fun () -> _constant_data_45assert;;
let rec _constant_data_45asr = (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;let rec data_45asr = fun () -> _constant_data_45asr;;
let rec _constant_data_45begin = (string_45from_45list (CCons ((98l),(CCons ((101l),(CCons ((103l),(CCons ((105l),(CCons ((110l),CEmpty)))))))))));;let rec data_45begin = fun () -> _constant_data_45begin;;
let rec _constant_data_45constraint = (string_45from_45list (CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((97l),(CCons ((105l),(CCons ((110l),(CCons ((116l),CEmpty)))))))))))))))))))));;let rec data_45constraint = fun () -> _constant_data_45constraint;;
let rec _constant_data_45do = (string_45from_45list (CCons ((100l),(CCons ((111l),CEmpty)))));;let rec data_45do = fun () -> _constant_data_45do;;
let rec _constant_data_45done = (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((110l),(CCons ((101l),CEmpty)))))))));;let rec data_45done = fun () -> _constant_data_45done;;
let rec _constant_data_45downto = (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((119l),(CCons ((110l),(CCons ((116l),(CCons ((111l),CEmpty)))))))))))));;let rec data_45downto = fun () -> _constant_data_45downto;;
let rec _constant_data_45exception = (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((99l),(CCons ((101l),(CCons ((112l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))))));;let rec data_45exception = fun () -> _constant_data_45exception;;
let rec _constant_data_45external = (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))))));;let rec data_45external = fun () -> _constant_data_45external;;
let rec _constant_data_45false = (string_45from_45list (CCons ((102l),(CCons ((97l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))))));;let rec data_45false = fun () -> _constant_data_45false;;
let rec _constant_data_45true = (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((101l),CEmpty)))))))));;let rec data_45true = fun () -> _constant_data_45true;;
let rec _constant_data_45for = (string_45from_45list (CCons ((102l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;let rec data_45for = fun () -> _constant_data_45for;;
let rec _constant_data_45function = (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))));;let rec data_45function = fun () -> _constant_data_45function;;
let rec _constant_data_45functor = (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),CEmpty)))))))))))))));;let rec data_45functor = fun () -> _constant_data_45functor;;
let rec _constant_data_45include = (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((99l),(CCons ((108l),(CCons ((117l),(CCons ((100l),(CCons ((101l),CEmpty)))))))))))))));;let rec data_45include = fun () -> _constant_data_45include;;
let rec _constant_data_45inherit = (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((105l),(CCons ((116l),CEmpty)))))))))))))));;let rec data_45inherit = fun () -> _constant_data_45inherit;;
let rec _constant_data_45initializer = (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((97l),(CCons ((108l),(CCons ((105l),(CCons ((122l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))))))))))))));;let rec data_45initializer = fun () -> _constant_data_45initializer;;
let rec _constant_data_45land = (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))))));;let rec data_45land = fun () -> _constant_data_45land;;
let rec _constant_data_45lazy = (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((122l),(CCons ((121l),CEmpty)))))))));;let rec data_45lazy = fun () -> _constant_data_45lazy;;
let rec _constant_data_45lor = (string_45from_45list (CCons ((108l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;let rec data_45lor = fun () -> _constant_data_45lor;;
let rec _constant_data_45lsl = (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((108l),CEmpty)))))));;let rec data_45lsl = fun () -> _constant_data_45lsl;;
let rec _constant_data_45lsr = (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;let rec data_45lsr = fun () -> _constant_data_45lsr;;
let rec _constant_data_45lxor = (string_45from_45list (CCons ((108l),(CCons ((120l),(CCons ((111l),(CCons ((114l),CEmpty)))))))));;let rec data_45lxor = fun () -> _constant_data_45lxor;;
let rec _constant_data_45method = (string_45from_45list (CCons ((109l),(CCons ((101l),(CCons ((116l),(CCons ((104l),(CCons ((111l),(CCons ((100l),CEmpty)))))))))))));;let rec data_45method = fun () -> _constant_data_45method;;
let rec _constant_data_45mod = (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),CEmpty)))))));;let rec data_45mod = fun () -> _constant_data_45mod;;
let rec _constant_data_45module = (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),(CCons ((117l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))));;let rec data_45module = fun () -> _constant_data_45module;;
let rec _constant_data_45mutable = (string_45from_45list (CCons ((109l),(CCons ((117l),(CCons ((116l),(CCons ((97l),(CCons ((98l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))))));;let rec data_45mutable = fun () -> _constant_data_45mutable;;
let rec _constant_data_45new = (string_45from_45list (CCons ((110l),(CCons ((101l),(CCons ((119l),CEmpty)))))));;let rec data_45new = fun () -> _constant_data_45new;;
let rec _constant_data_45nonrec = (string_45from_45list (CCons ((110l),(CCons ((111l),(CCons ((110l),(CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))))))))));;let rec data_45nonrec = fun () -> _constant_data_45nonrec;;
let rec _constant_data_45object = (string_45from_45list (CCons ((111l),(CCons ((98l),(CCons ((106l),(CCons ((101l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;let rec data_45object = fun () -> _constant_data_45object;;
let rec _constant_data_45private = (string_45from_45list (CCons ((112l),(CCons ((114l),(CCons ((105l),(CCons ((118l),(CCons ((97l),(CCons ((116l),(CCons ((101l),CEmpty)))))))))))))));;let rec data_45private = fun () -> _constant_data_45private;;
let rec _constant_data_45rec = (string_45from_45list (CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))));;let rec data_45rec = fun () -> _constant_data_45rec;;
let rec _constant_data_45sig = (string_45from_45list (CCons ((115l),(CCons ((105l),(CCons ((103l),CEmpty)))))));;let rec data_45sig = fun () -> _constant_data_45sig;;
let rec _constant_data_45struct = (string_45from_45list (CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;let rec data_45struct = fun () -> _constant_data_45struct;;
let rec _constant_data_45try = (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((121l),CEmpty)))))));;let rec data_45try = fun () -> _constant_data_45try;;
let rec _constant_data_45val = (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),CEmpty)))))));;let rec data_45val = fun () -> _constant_data_45val;;
let rec _constant_data_45virtual = (string_45from_45list (CCons ((118l),(CCons ((105l),(CCons ((114l),(CCons ((116l),(CCons ((117l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))));;let rec data_45virtual = fun () -> _constant_data_45virtual;;
let rec _constant_data_45when = (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;let rec data_45when = fun () -> _constant_data_45when;;
let rec _constant_data_45while = (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((105l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))));;let rec data_45while = fun () -> _constant_data_45while;;
let rec _constant_data_45parser = (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))));;let rec data_45parser = fun () -> _constant_data_45parser;;
let rec _constant_data_45value = (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),(CCons ((117l),(CCons ((101l),CEmpty)))))))))));;let rec data_45value = fun () -> _constant_data_45value;;
let rec _constant_data_45to = (string_45from_45list (CCons ((116l),(CCons ((111l),CEmpty)))));;let rec data_45to = fun () -> _constant_data_45to;;
let rec _constant_data_45error_45reserved_45identifier = (string_45from_45list (CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((115l),(CCons ((32l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((120l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),(CCons ((32l),(CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((118l),(CCons ((101l),(CCons ((100l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;let rec data_45error_45reserved_45identifier = fun () -> _constant_data_45error_45reserved_45identifier;;
let rec _constant_data_45sparkle_45x = (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((120l),CEmpty)))))))));;let rec data_45sparkle_45x = fun () -> _constant_data_45sparkle_45x;;
let rec _constant_data_45sparkle = (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),CEmpty)))))));;let rec data_45sparkle = fun () -> _constant_data_45sparkle;;
let rec _constant_data_45Empty = (string_45from_45list (CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))));;let rec data_45Empty = fun () -> _constant_data_45Empty;;
let rec _constant_data_45Cons = (string_45from_45list (CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))));;let rec data_45Cons = fun () -> _constant_data_45Cons;;
let rec join = fun list -> (string_45join (string_45empty ()) list);;
let rec not_45empty_63 = fun string -> (not (string_45empty_63 string));;
let rec is_45alphanumeric = fun char -> (_or (_and (_62_61 char (65l)) (_60_61 char (90l))) (_or (_and (_62_61 char (48l)) (_60_61 char (57l))) (_and (_62_61 char (97l)) (_60_61 char (122l)))));;
let rec escape_45char = fun char -> (match (is_45alphanumeric char) with CTrue -> (string_45of_45char char) | CFalse -> (string_45prepend (95l) (string_45from_45int32 char)));;
let rec stringify_45parse_45errors = fun definitions -> (list_45map (result_45map_45error error_45to_45string) definitions);;
let rec over_45match_45pair_45expression = fun f pair -> (match pair with (CPair (pattern,expression)) -> (result_45bind (f expression) (fun expression -> (result_45return (CPair (pattern,expression))))));;
let rec over_45match_45pair_45expressions = fun over_45subexpressions f pairs -> (result_45concat (list_45map (over_45match_45pair_45expression (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x)))) pairs));;
let rec over_45subexpressions = fun f expression -> (result_45bind (f expression) (fun expression -> (match expression with (CLambda (arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45return (CLambda (arguments,expression,range))))))) | (CMatch (expression,pairs,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45bind (over_45match_45pair_45expressions over_45subexpressions f pairs) (fun pairs -> (result_45return (CMatch (expression,pairs,range))))))))) | (CConstructor (name,expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CConstructor (name,expressions,range))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | _95 -> (result_45return expression))));;
let rec over_45definition_45expressions = fun f definition -> (match definition with (CFunctionDefinition (name,arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45return (CFunctionDefinition (name,arguments,expression,range))))) | (CExportDefinition (name,arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45return (CExportDefinition (name,arguments,expression,range))))) | _95 -> (result_45return definition));;
let rec over_45function_45application = fun f expression -> (match expression with (CFunctionApplication (expressions,range)) -> (f expressions range) | _95 -> (result_45return expression));;
let rec over_45identifiers = fun f expression -> (match expression with (CIdentifier (name,range)) -> (result_45bind (f name) (fun name -> (result_45return (CIdentifier (name,range))))) | (CLambda (arguments,expression,range)) -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45bind (result_45concat (list_45map f arguments)) (fun arguments -> (result_45return (CLambda (arguments,expression,range))))))) | (CConstructor (name,CEmpty,range)) -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,CEmpty,range))))) | (CConstructor (name,expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,expressions,range))))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | (CMatch (expression,rules,range)) -> (result_45bind (result_45concat (list_45map (over_45match_45pair_45expression (over_45identifiers f)) rules)) (fun rules -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45return (CMatch (expression,rules,range))))))) | _95 -> (result_45return expression));;
let rec expression_45is_45symbol_63 = fun symbol_45name expression -> (match expression with (CIdentifier (name,_95_95)) -> (string_45equal_63 symbol_45name name) | _95 -> CFalse);;
let rec first_45expression_45is_45symbol_63 = fun symbol_45name expressions -> ((fun _226_156_168x -> ((maybe_45else (fun () -> CFalse)) ((maybe_45map (expression_45is_45symbol_63 symbol_45name)) _226_156_168x))) (list_45first expressions));;
let rec symbol_45is_45reserved_63 = fun name -> (string_45equal_63 (string_45substring (0l) (3l) name) (data_45sparkle ()));;
let rec validate_45identifier = fun identifier -> (match (symbol_45is_45reserved_63 identifier) with CTrue -> (result_45error (data_45error_45reserved_45identifier ())) | CFalse -> (result_45lift identifier));;
let rec validate_45reserved_45identifiers = fun definition -> (result_45flatmap (over_45definition_45expressions (over_45identifiers validate_45identifier)) definition);;
let rec transform_45special_45form = fun symbol_45name transformer definition -> (result_45flatmap (over_45definition_45expressions (over_45subexpressions (over_45function_45application (fun expressions range -> (match (first_45expression_45is_45symbol_63 (symbol_45name ()) expressions) with CTrue -> (result_45lift (transformer (list_45rest expressions) range)) | CFalse -> (result_45lift (CFunctionApplication (expressions,range)))))))) definition);;
let rec transform_45pipe = fun expressions range -> (CLambda ((CCons ((data_45sparkle_45x ()),CEmpty)),(list_45foldl (fun expression composed -> (CFunctionApplication ((CCons (expression,(CCons (composed,CEmpty)))),range))) (CIdentifier ((data_45sparkle_45x ()),range)) expressions),range));;
let rec transform_45list = fun expressions range -> (list_45foldr (fun expression composed -> (CConstructor ((data_45Cons ()),(CCons (expression,(CCons (composed,CEmpty)))),range))) (CConstructor ((data_45Empty ()),CEmpty,range)) expressions);;
let rec local_45transforms = fun definitions -> (list_45map (fun _226_156_168x -> ((transform_45special_45form data_45list transform_45list) ((transform_45special_45form data_45pipe transform_45pipe) _226_156_168x))) definitions);;
let rec _constant_data_45compile_45error = (string_45from_45list (CCons ((42l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((112l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((42l),CEmpty)))))))))))))))))))))))))))))));;let rec data_45compile_45error = fun () -> _constant_data_45compile_45error;;
let rec _constant_data_45arrow = (string_45from_45list (CCons ((32l),(CCons ((45l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;let rec data_45arrow = fun () -> _constant_data_45arrow;;
let rec _constant_data_45equals = (string_45from_45list (CCons ((32l),(CCons ((61l),(CCons ((32l),CEmpty)))))));;let rec data_45equals = fun () -> _constant_data_45equals;;
let rec _constant_data_45vertical_45bar = (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((32l),CEmpty)))))));;let rec data_45vertical_45bar = fun () -> _constant_data_45vertical_45bar;;
let rec _constant_data_45pipe_45operator = (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;let rec data_45pipe_45operator = fun () -> _constant_data_45pipe_45operator;;
let rec _constant_data_45colon = (string_45from_45list (CCons ((32l),(CCons ((58l),(CCons ((32l),CEmpty)))))));;let rec data_45colon = fun () -> _constant_data_45colon;;
let rec _constant_data_45star = (string_45from_45list (CCons ((32l),(CCons ((42l),(CCons ((32l),CEmpty)))))));;let rec data_45star = fun () -> _constant_data_45star;;
let rec _constant_data_45int32 = (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),CEmpty)))))))))));;let rec data_45int32 = fun () -> _constant_data_45int32;;
let rec _constant_data_45int32_45plus = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((97l),(CCons ((100l),(CCons ((100l),CEmpty)))))))))))))))))));;let rec data_45int32_45plus = fun () -> _constant_data_45int32_45plus;;
let rec _constant_data_45int32_45multiply = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((109l),(CCons ((117l),(CCons ((108l),CEmpty)))))))))))))))))));;let rec data_45int32_45multiply = fun () -> _constant_data_45int32_45multiply;;
let rec _constant_data_45int32_45minus = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((115l),(CCons ((117l),(CCons ((98l),CEmpty)))))))))))))))))));;let rec data_45int32_45minus = fun () -> _constant_data_45int32_45minus;;
let rec _constant_data_45int32_45divide = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((100l),(CCons ((105l),(CCons ((118l),CEmpty)))))))))))))))))));;let rec data_45int32_45divide = fun () -> _constant_data_45int32_45divide;;
let rec _constant_data_45int32_45modulus = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((114l),(CCons ((101l),(CCons ((109l),CEmpty)))))))))))))))))));;let rec data_45int32_45modulus = fun () -> _constant_data_45int32_45modulus;;
let rec _constant_data_45cempty = (string_45from_45list (CCons ((67l),(CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))))));;let rec data_45cempty = fun () -> _constant_data_45cempty;;
let rec _constant_data_45ccons = (string_45from_45list (CCons ((67l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))))));;let rec data_45ccons = fun () -> _constant_data_45ccons;;
let rec _constant_data_45int32 = (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((111l),(CCons ((102l),(CCons ((95l),(CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((32l),CEmpty)))))))))))))))))))))))))));;let rec data_45int32 = fun () -> _constant_data_45int32;;
let rec _constant_data_45comma = (string_45from_45list (CCons ((44l),CEmpty)));;let rec data_45comma = fun () -> _constant_data_45comma;;
let rec _constant_data_45with = (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;let rec data_45with = fun () -> _constant_data_45with;;
let rec _constant_data_45definition_45end = (string_45from_45list (CCons ((59l),(CCons ((59l),CEmpty)))));;let rec data_45definition_45end = fun () -> _constant_data_45definition_45end;;
let rec _constant_data_45let_45rec = (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((32l),CEmpty)))))))))))))))));;let rec data_45let_45rec = fun () -> _constant_data_45let_45rec;;
let rec _constant_data_45constant = (string_45from_45list (CCons ((95l),(CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((95l),CEmpty)))))))))))))))))))));;let rec data_45constant = fun () -> _constant_data_45constant;;
let rec prefix_45type_45variable = fun string -> (string_45prepend (39l) (string_45prepend (84l) string));;
let rec prefix_45constructor = fun constructor -> (string_45prepend (67l) constructor);;
let rec _constant_reserved_45strings = (dictionary_45of (CCons ((CPair ((data_45assert ()),CTrue)),(CCons ((CPair ((data_45asr ()),CTrue)),(CCons ((CPair ((data_45begin ()),CTrue)),(CCons ((CPair ((data_45constraint ()),CTrue)),(CCons ((CPair ((data_45do ()),CTrue)),(CCons ((CPair ((data_45done ()),CTrue)),(CCons ((CPair ((data_45downto ()),CTrue)),(CCons ((CPair ((data_45type ()),CTrue)),(CCons ((CPair ((data_45if ()),CTrue)),(CCons ((CPair ((data_45then ()),CTrue)),(CCons ((CPair ((data_45else ()),CTrue)),(CCons ((CPair ((data_45with ()),CTrue)),(CCons ((CPair ((data_45of ()),CTrue)),(CCons ((CPair ((data_45end ()),CTrue)),(CCons ((CPair ((data_45in ()),CTrue)),(CCons ((CPair ((data_45fun ()),CTrue)),(CCons ((CPair ((data_45let ()),CTrue)),(CCons ((CPair ((data_45open ()),CTrue)),(CCons ((CPair ((data_45and ()),CTrue)),(CCons ((CPair ((data_45or ()),CTrue)),(CCons ((CPair ((data_45as ()),CTrue)),(CCons ((CPair ((data_45class ()),CTrue)),(CCons ((CPair ((data_45exception ()),CTrue)),(CCons ((CPair ((data_45external ()),CTrue)),(CCons ((CPair ((data_45false ()),CTrue)),(CCons ((CPair ((data_45true ()),CTrue)),(CCons ((CPair ((data_45for ()),CTrue)),(CCons ((CPair ((data_45function ()),CTrue)),(CCons ((CPair ((data_45functor ()),CTrue)),(CCons ((CPair ((data_45if ()),CTrue)),(CCons ((CPair ((data_45include ()),CTrue)),(CCons ((CPair ((data_45inherit ()),CTrue)),(CCons ((CPair ((data_45initializer ()),CTrue)),(CCons ((CPair ((data_45land ()),CTrue)),(CCons ((CPair ((data_45lazy ()),CTrue)),(CCons ((CPair ((data_45lor ()),CTrue)),(CCons ((CPair ((data_45lsl ()),CTrue)),(CCons ((CPair ((data_45lsr ()),CTrue)),(CCons ((CPair ((data_45lxor ()),CTrue)),(CCons ((CPair ((data_45method ()),CTrue)),(CCons ((CPair ((data_45mod ()),CTrue)),(CCons ((CPair ((data_45module ()),CTrue)),(CCons ((CPair ((data_45mutable ()),CTrue)),(CCons ((CPair ((data_45new ()),CTrue)),(CCons ((CPair ((data_45nonrec ()),CTrue)),(CCons ((CPair ((data_45object ()),CTrue)),(CCons ((CPair ((data_45private ()),CTrue)),(CCons ((CPair ((data_45rec ()),CTrue)),(CCons ((CPair ((data_45sig ()),CTrue)),(CCons ((CPair ((data_45struct ()),CTrue)),(CCons ((CPair ((data_45try ()),CTrue)),(CCons ((CPair ((data_45val ()),CTrue)),(CCons ((CPair ((data_45virtual ()),CTrue)),(CCons ((CPair ((data_45when ()),CTrue)),(CCons ((CPair ((data_45while ()),CTrue)),(CCons ((CPair ((data_45parser ()),CTrue)),(CCons ((CPair ((data_45value ()),CTrue)),(CCons ((CPair ((data_45to ()),CTrue)),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;let rec reserved_45strings = fun () -> _constant_reserved_45strings;;
let rec string_45is_45reserved_63 = fun name -> (dictionary_45get_45or name CFalse (reserved_45strings ()));;
let rec escape_45identifier = fun name -> (match (string_45is_45reserved_63 name) with CTrue -> (string_45prepend (95l) name) | CFalse -> (string_45flatmap escape_45char name));;
let rec _constant_special_45identifiers = (dictionary_45of (CCons ((CPair ((data_45plus ()),(data_45int32_45plus ()))),(CCons ((CPair ((data_45slash ()),(data_45int32_45divide ()))),(CCons ((CPair ((data_45percent ()),(data_45int32_45modulus ()))),(CCons ((CPair ((data_45minus ()),(data_45int32_45minus ()))),(CCons ((CPair ((data_45multiply ()),(data_45int32_45multiply ()))),CEmpty)))))))))));;let rec special_45identifiers = fun () -> _constant_special_45identifiers;;
let rec translate_45identifier = fun name -> (match (dictionary_45get name (special_45identifiers ())) with (CSome (translation)) -> translation | CNone -> (escape_45identifier name));;
let rec translate_45less_45than = fun translate_45expression expressions -> (match expressions with (CCons (a,(CCons (b,(CCons (then_45case,(CCons (else_45case,CEmpty)))))))) -> (join (CCons ((data_45if ()),(CCons ((data_45space ()),(CCons ((translate_45expression a),(CCons ((data_45less_45than ()),(CCons ((translate_45expression b),(CCons ((data_45space ()),(CCons ((data_45then ()),(CCons ((data_45space ()),(CCons ((translate_45expression then_45case),(CCons ((data_45space ()),(CCons ((data_45else ()),(CCons ((data_45space ()),(CCons ((translate_45expression else_45case),CEmpty))))))))))))))))))))))))))) | _95 -> (data_45compile_45error ()));;
let rec translate_45constructor = fun translator name -> (fun _226_156_168x -> (wrap_45in_45brackets (join ((fun parameters -> (CCons ((prefix_45constructor (escape_45identifier name)),(CCons ((data_45space ()),(CCons (parameters,CEmpty))))))) (wrap_45in_45brackets ((string_45join (data_45comma ())) ((list_45map translator) _226_156_168x)))))));;
let rec translate_45pattern = fun pattern -> (match pattern with (CCapture (name,_95)) -> (escape_45identifier name) | (CIntegerPattern (integer,_95)) -> (join (CCons ((string_45from_45int32 integer),(CCons ((string_45of_45char (108l)),CEmpty))))) | (CConstructorPattern (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructorPattern (name,patterns,_95)) -> ((translate_45constructor translate_45pattern name) patterns));;
let rec translate_45rule = fun translate_45expression rule -> (match rule with (CPair (pattern,expression)) -> (join (CCons ((translate_45pattern pattern),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty))))))));;
let rec translate_45match_45expression = fun translate_45expression expression -> (fun _226_156_168x -> ((string_45join (data_45space ())) ((fun rules -> (CCons ((data_45match ()),(CCons ((translate_45expression expression),(CCons ((data_45with ()),(CCons (rules,CEmpty))))))))) ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45rule translate_45expression)) _226_156_168x)))));;
let rec translate_45function_45application_39 = fun translate_45expression expressions -> (match expressions with (CCons (no_45args_45function,CEmpty)) -> (join (CCons ((translate_45expression no_45args_45function),(CCons ((data_45space ()),(CCons ((wrap_45in_45brackets (string_45empty ())),CEmpty))))))) | _95 -> (string_45join (data_45space ()) (list_45map translate_45expression expressions)));;
let rec translate_45function_45application = fun translate_45expression expressions -> (match expressions with (CCons ((CIdentifier (name,_95)),rest)) -> (match (string_45equal_63 name (data_45int32_45less_45than ())) with CTrue -> (translate_45less_45than translate_45expression rest) | CFalse -> (translate_45function_45application_39 translate_45expression expressions)) | _95 -> (translate_45function_45application_39 translate_45expression expressions));;
let rec translate_45argument_45list = fun arguments -> (match (list_45empty_63 arguments) with CTrue -> (wrap_45in_45brackets (string_45empty ())) | CFalse -> (string_45join (data_45space ()) (list_45map escape_45identifier arguments)));;
let rec translate_45lambda = fun translate_45expression arguments expression -> (join (CCons ((data_45fun ()),(CCons ((data_45space ()),(CCons ((translate_45argument_45list arguments),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty)))))))))));;
let rec translate_45expression = fun expression -> (match expression with (CLambda (arguments,expression,_95)) -> (wrap_45in_45brackets (translate_45lambda translate_45expression arguments expression)) | (CConstructor (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructor (name,expressions,_95)) -> ((translate_45constructor translate_45expression name) expressions) | (CFunctionApplication (expressions,_95)) -> (wrap_45in_45brackets (translate_45function_45application translate_45expression expressions)) | (CIntegerConstant (integer,_95)) -> (wrap_45in_45brackets (string_45concat (string_45from_45int32 integer) (string_45of_45char (108l)))) | (CIdentifier (name,_95)) -> (translate_45identifier name) | (CMatch (expression,rules,_95)) -> (wrap_45in_45brackets ((translate_45match_45expression translate_45expression expression) rules)));;
let rec translate_45function_45definition = fun name arguments expression -> (match (list_45empty_63 arguments) with CTrue -> (join (CCons ((data_45let_45rec ()),(CCons ((string_45concat (data_45constant ()) name),(CCons ((data_45equals ()),(CCons ((translate_45expression expression),(CCons ((data_45definition_45end ()),(CCons ((data_45let_45rec ()),(CCons (name,(CCons ((data_45equals ()),(CCons ((data_45fun ()),(CCons ((data_45space ()),(CCons ((wrap_45in_45brackets (string_45empty ())),(CCons ((data_45arrow ()),(CCons ((string_45concat (data_45constant ()) name),(CCons ((data_45definition_45end ()),CEmpty))))))))))))))))))))))))))))) | CFalse -> (join (CCons ((data_45let_45rec ()),(CCons (name,(CCons ((data_45equals ()),(CCons ((translate_45lambda translate_45expression arguments expression),(CCons ((data_45definition_45end ()),CEmpty))))))))))));;
let rec translate_45simple_45type = fun name parameters -> (match (list_45any_63 (string_45equal_63 name) parameters) with CFalse -> (escape_45identifier name) | CTrue -> (prefix_45type_45variable name));;
let rec translate_45complex_45types = fun translate_45types name -> (fun _226_156_168x -> (join ((fun types -> (CCons (types,(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))) (wrap_45in_45brackets ((translate_45types (data_45comma ())) _226_156_168x)))));;
let rec translate_45function_45type = fun translate_45types return_45type -> (fun _226_156_168x -> (wrap_45in_45brackets ((translate_45types (data_45arrow ())) ((fun argument_45types -> (list_45concat argument_45types (CCons (return_45type,CEmpty)))) _226_156_168x))));;
let rec translate_45type = fun translate_45types parameters _type -> (match _type with (CSimpleType (name,_95)) -> (translate_45simple_45type name parameters) | (CComplexType (name,types,_95)) -> ((translate_45complex_45types translate_45types name) types) | (CFunctionType (argument_45types,return_45type,_95)) -> ((translate_45function_45type translate_45types return_45type) argument_45types));;
let rec translate_45types = fun parameters separator -> (fun _226_156_168x -> ((string_45join separator) ((list_45map (translate_45type (translate_45types parameters) parameters)) _226_156_168x)));;
let rec translate_45type_45parameter = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> name | (CExistentialParameter (name,_95)) -> name);;
let rec translate_45complex_45constructor_45definition = fun name _type types parameters -> (join (CCons ((prefix_45constructor (escape_45identifier name)),(CCons ((data_45colon ()),(CCons (((translate_45types (list_45map translate_45type_45parameter parameters) (data_45star ())) types),(CCons ((data_45arrow ()),(CCons (_type,CEmpty)))))))))));;
let rec translate_45constructor_45definition = fun _type parameters constructor -> (match constructor with (CSimpleConstructor (name,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CComplexConstructor (name,types,_95)) -> (translate_45complex_45constructor_45definition name _type types parameters));;
let rec translate_45constructor_45definitions = fun _type parameters -> (fun _226_156_168x -> ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45constructor_45definition _type parameters)) _226_156_168x)));;
let rec translate_45type_45parameter_45for_45definition = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> (prefix_45type_45variable name) | (CExistentialParameter (_95,_95_95)) -> (string_45empty ()));;
let rec _constant_translate_45type_45parameters = (fun _226_156_168x -> ((string_45join (data_45comma ())) ((list_45filter not_45empty_63) ((list_45map translate_45type_45parameter_45for_45definition) _226_156_168x))));;let rec translate_45type_45parameters = fun () -> _constant_translate_45type_45parameters;;
let rec translate_45type_45name_39 = fun name parameters -> (match (string_45empty_63 parameters) with CTrue -> (escape_45identifier name) | CFalse -> (join (CCons ((wrap_45in_45brackets parameters),(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))));;
let rec translate_45type_45name = fun name parameters -> (translate_45type_45name_39 name ((translate_45type_45parameters ()) parameters));;
let rec translate_45type_45definition = fun name parameters constructors -> (join (CCons ((data_45type ()),(CCons ((data_45space ()),(CCons ((translate_45type_45name name parameters),(CCons ((data_45equals ()),(CCons (((translate_45constructor_45definitions (translate_45type_45name name parameters) parameters) constructors),(CCons ((data_45definition_45end ()),CEmpty)))))))))))));;
let rec translate_45definition = fun definition -> (match definition with (CFunctionDefinition (name,arguments,expression,_95)) -> (translate_45function_45definition (escape_45identifier name) arguments expression) | (CExportDefinition (name,arguments,expression,_95)) -> (translate_45function_45definition name arguments expression) | (CTypeDefinition (name,parameters,constructors,_95)) -> (translate_45type_45definition name parameters constructors));;
let rec validate_45reserved_45identifiers_45when_45not = fun as_95minimal -> (match as_95minimal with CTrue -> (fun definitions -> definitions) | CFalse -> (list_45map validate_45reserved_45identifiers));;
let rec to_ocaml = fun definitions source as_95minimal -> ((fun _226_156_168x -> ((result_45map (string_45join (string_45of_45char (10l)))) (result_45concat ((list_45map (result_45map translate_45definition)) (local_45transforms ((validate_45reserved_45identifiers_45when_45not as_95minimal) _226_156_168x)))))) definitions);;
let getenv name = try (Sys.getenv name) with Not_found -> ""
let as_minimal = if getenv "REUSE_MINIMAL" = "true" then CTrue else CFalse;;
let performance = getenv "REUSE_TIME" = "true";;

let stdin_wrapper_start = Unix.gettimeofday ();;

let _read_line ic =
    try Some (input_line ic)
    with End_of_file -> None

let _read_lines ic =
    let rec loop acc =
        match _read_line ic with
        | Some line -> loop (line :: acc)
        | None -> List.rev acc
    in
        loop [];;

let _stdin_string = String.concat "\n" (_read_lines stdin);;

let rec _list_to_string_r = fun input result ->
    match input with
          CCons(x, rest) ->
            let string_from_int = (String.make 1 (Char.chr (Int32.to_int x))) in
            let new_result = (String.concat "" (result :: string_from_int :: [])) in
                (_list_to_string_r rest new_result)
        | CEmpty -> result;;

let _list_to_string = fun input -> (_list_to_string_r (string_45to_45list input) "");;

let _chunk_size s = Int32.of_int (String.length s);;
let _chunk_get index s =
        let string_size = String.length s in
        let i = Int32.to_int index in
        if i < 0 || i >= string_size then
                65l
        else
                Int32.of_int (Char.code (String.get s i));;
let _chunk_equal a b =
        match String.equal a b with
                | true -> CTrue
                | false -> CFalse;;
let rec _chunk_slice offset size s =
        let string_size = String.length s in
        let offset = Int32.to_int offset in
        let size = Int32.to_int size in
        if offset < 0 || size < 0 || offset + size > string_size then
                CChunk (s, _chunk_size, _chunk_get, _chunk_slice, _chunk_equal)
        else
                CChunk (String.sub s offset size, _chunk_size, _chunk_get, _chunk_slice, _chunk_equal);;

let _stdin_list =
        CChunk (_stdin_string, _chunk_size, _chunk_get, _chunk_slice, _chunk_equal);;
let stdin_wrapper_end = Unix.gettimeofday ();;
let stdin_wrapper_time = stdin_wrapper_end -. stdin_wrapper_start;;

let parse_sexp_start = Unix.gettimeofday ();;
let parse_sexp_output = (parse _stdin_list);;
let parse_sexp_end = Unix.gettimeofday ();;
let parse_sexp_time = parse_sexp_end -. parse_sexp_start;;

let parse_start = Unix.gettimeofday ();;
let parse_output = stringify_45parse_45errors (sexps_45to_45definitions parse_sexp_output);;
let parse_end = Unix.gettimeofday ();;
let parse_time = parse_end -. parse_start;;

let codegen_start = Unix.gettimeofday ();;
let codegen_output = (to_ocaml parse_output _stdin_list as_minimal);;
let codegen_end = Unix.gettimeofday ();;
let codegen_time = codegen_end -. codegen_start;;

if performance then
    (Printf.printf "%f %f %f %f" stdin_wrapper_time parse_sexp_time parse_time codegen_time ; exit 0)
else
    match codegen_output with
        CResult (source) -> Printf.printf "%s" (_list_to_string source) ; exit 0
      | CError (error) -> Printf.eprintf "%s" (_list_to_string error) ; exit 1;;

