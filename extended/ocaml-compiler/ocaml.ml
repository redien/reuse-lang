type boolean = CTrue | CFalse;;
let rec not = fun a -> (match a with CTrue -> CFalse | CFalse -> CTrue);;
let rec _and = fun a b -> (match a with CTrue -> b | CFalse -> CFalse);;
let rec _or = fun a b -> (match a with CTrue -> CTrue | CFalse -> b);;
let rec _60 = fun a b -> (if a<b then CTrue else CFalse);;
let rec _62 = fun a b -> (_60 b a);;
let rec _61 = fun a b -> (not (_or (_60 a b) (_62 a b)));;
let rec _60_61 = fun a b -> (_or (_60 a b) (_61 a b));;
let rec _62_61 = fun a b -> (_or (_62 a b) (_61 a b));;
type ('a,'b) pair = CPair : 'a * 'b -> ('a,'b) pair;;
let rec pair_45cons = fun a b -> (CPair (a,b));;
let rec pair_45left = fun pair -> (match pair with (CPair (x,_95)) -> x);;
let rec pair_45right = fun pair -> (match pair with (CPair (_95,x)) -> x);;
let rec pair_45map_45left = fun f pair -> (match pair with (CPair (x,y)) -> (CPair ((f x),y)));;
let rec pair_45map_45right = fun f pair -> (match pair with (CPair (x,y)) -> (CPair (x,(f y))));;
type ('a) maybe = CSome : 'a -> ('a) maybe | CNone;;
let rec maybe_45map = fun f maybe -> (match maybe with (CSome (x)) -> (CSome ((f x))) | CNone -> CNone);;
let rec maybe_45flatmap = fun f maybe -> (match maybe with (CSome (x)) -> (f x) | CNone -> CNone);;
let rec maybe_45filter = fun f maybe -> (match maybe with (CSome (x)) -> (match (f x) with CTrue -> maybe | CFalse -> CNone) | CNone -> CNone);;
let rec maybe_45else = fun f maybe -> (match maybe with CNone -> (f ()) | (CSome (x)) -> x);;
type ('element) indexed_45iterator = CIndexedIterator : 'collection * int32 * ('collection -> int32 -> ('element) maybe) * (('element) indexed_45iterator -> 'collection -> int32 -> ('element) indexed_45iterator) -> ('element) indexed_45iterator;;
let rec indexed_45iterator_45next = fun iterator -> (match iterator with (CIndexedIterator (collection,index,_95,next)) -> (next iterator collection index));;
let rec indexed_45iterator_45get = fun iterator -> (match iterator with (CIndexedIterator (collection,index,get,_95)) -> (get collection index));;
let rec indexed_45iterator_45index = fun iterator -> (match iterator with (CIndexedIterator (_95,index,_95_95,_95_95_95)) -> index);;
let rec indexed_45iterator_45foldl = fun f initial iterator -> (match (indexed_45iterator_45get iterator) with CNone -> initial | (CSome (x)) -> (indexed_45iterator_45foldl f (f x initial) (indexed_45iterator_45next iterator)));;
type ('a) list = CCons : 'a * ('a) list -> ('a) list | CEmpty;;
let rec list_45cons = fun x xs -> (CCons (x,xs));;
let rec list_45from = fun x -> (CCons (x,CEmpty));;
let rec list_45from_45range = fun _95from _95to -> (match (_60 _95from _95to) with CTrue -> (CCons (_95from,(list_45from_45range (Int32.add _95from (Int32.of_int  (1))) _95to))) | CFalse -> CEmpty);;
let rec list_45first = fun list -> (match list with (CCons (x,_95)) -> (CSome (x)) | CEmpty -> CNone);;
let rec list_45rest = fun list -> (match list with (CCons (_95,rest)) -> rest | CEmpty -> CEmpty);;
let rec list_45empty_63 = fun list -> (match list with (CCons (_95,_95_95)) -> CFalse | CEmpty -> CTrue);;
let rec list_45size_39 = fun list size -> (match list with (CCons (_95,rest)) -> (list_45size_39 rest (Int32.add size (Int32.of_int  (1)))) | CEmpty -> size);;
let rec list_45size = fun list -> (list_45size_39 list (Int32.of_int  (0)));;
let rec list_45foldrk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (list_45foldrk f initial xs (fun value -> (f x value continue))));;
let rec list_45foldlk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (f x initial (fun new_45value -> (list_45foldlk f new_45value xs continue))));;
let rec list_45foldr = fun f initial list -> (list_45foldrk (fun x value continue -> (continue (f x value))) initial list (fun x -> x));;
let rec list_45foldl = fun f initial list -> (match list with CEmpty -> initial | (CCons (x,xs)) -> (list_45foldl f (f x initial) xs));;
let rec list_45concat = fun a b -> (list_45foldr list_45cons b a);;
let rec list_45append = fun l x -> (list_45foldr list_45cons (CCons (x,CEmpty)) l);;
let rec list_45reverse = fun list -> (list_45foldl list_45cons CEmpty list);;
let rec list_45map = fun f list -> (list_45foldr (fun head tail -> (list_45cons (f head) tail)) CEmpty list);;
let rec list_45flatmap = fun f list -> (list_45foldr (fun head tail -> (list_45concat (f head) tail)) CEmpty list);;
let rec list_45zip_39 = fun xs ys collected -> (match xs with CEmpty -> collected | (CCons (x,xs)) -> (match ys with CEmpty -> collected | (CCons (y,ys)) -> (list_45zip_39 xs ys (CCons ((CPair (x,y)),collected)))));;
let rec list_45zip = fun xs ys -> (list_45reverse (list_45zip_39 xs ys CEmpty));;
let rec list_45find_45first = fun predicate list -> (match list with CEmpty -> CNone | (CCons (x,xs)) -> (match (predicate x) with CTrue -> (CSome (x)) | CFalse -> (list_45find_45first predicate xs)));;
let rec list_45filter = fun f list -> (list_45foldr (fun head tail -> (match (f head) with CTrue -> (CCons (head,tail)) | CFalse -> tail)) CEmpty list);;
let rec list_45any_63 = fun f list -> (not (list_45empty_63 (list_45filter f list)));;
let rec list_45indexed_45iterator_45get = fun collection _95 -> (match collection with (CCons (x,_95)) -> (CSome (x)) | CEmpty -> CNone);;
let rec list_45indexed_45iterator_45next = fun iterator collection index -> (match collection with (CCons (_95,xs)) -> (CIndexedIterator (xs,(Int32.add index (Int32.of_int  (1))),list_45indexed_45iterator_45get,list_45indexed_45iterator_45next)) | CEmpty -> iterator);;
let rec list_45to_45indexed_45iterator = fun list -> (CIndexedIterator (list,(Int32.of_int  (0)),list_45indexed_45iterator_45get,list_45indexed_45iterator_45next));;
let rec list_45collect_45from_45indexed_45iterator_39 = fun predicate iterator initial -> (match (indexed_45iterator_45get iterator) with CNone -> (CPair (iterator,initial)) | (CSome (x)) -> (match (predicate x) with CTrue -> (list_45collect_45from_45indexed_45iterator_39 predicate (indexed_45iterator_45next iterator) (CCons (x,initial))) | CFalse -> (CPair (iterator,initial))));;
let rec list_45collect_45from_45indexed_45iterator = fun predicate iterator -> (match (list_45collect_45from_45indexed_45iterator_39 predicate iterator CEmpty) with (CPair (iterator,result)) -> (CPair (iterator,(list_45reverse result))));;
let rec string_45of_45char = fun character -> (CCons (character,CEmpty));;
let rec string_45first = fun string -> (list_45first string);;
let rec string_45rest = fun string -> (list_45rest string);;
let rec string_45concat = fun a b -> (match a with CEmpty -> b | (CCons (x,xs)) -> (CCons (x,(string_45concat xs b))));;
let rec string_45append = fun a b -> (string_45concat b a);;
let rec string_45join = fun separator list -> (match list with (CCons (first,rest)) -> (list_45foldl (fun string joined -> (string_45concat joined (string_45concat separator string))) first rest) | CEmpty -> CEmpty);;
let rec string_45split_39 = fun separator string current parts -> (match string with CEmpty -> (list_45reverse (CCons ((list_45reverse current),parts))) | (CCons (c,rest)) -> (match (_61 separator c) with CTrue -> (string_45split_39 separator rest CEmpty (CCons ((list_45reverse current),parts))) | CFalse -> (string_45split_39 separator rest (CCons (c,current)) parts)));;
let rec string_45split = fun separator string -> (string_45split_39 separator string CEmpty CEmpty);;
let rec string_45trim_45start = fun string -> (match string with (CCons (x,xs)) -> (match (_61 x (Int32.of_int  (32))) with CTrue -> (string_45trim_45start xs) | CFalse -> string) | CEmpty -> string);;
let rec string_45trim_45end = fun string -> (list_45reverse (string_45trim_45start (list_45reverse string)));;
let rec string_45trim = fun string -> (string_45trim_45start (string_45trim_45end string));;
let rec string_45empty_63 = fun string -> (match string with CEmpty -> CTrue | _95 -> CFalse);;
let rec string_45equal_63 = fun a b -> (match a with (CCons (xa,xas)) -> (match b with (CCons (xb,xbs)) -> (_and (_61 xa xb) (string_45equal_63 xas xbs)) | CEmpty -> (string_45empty_63 a)) | CEmpty -> (string_45empty_63 b));;
let rec string_45point_45is_45digit = fun point -> (_and (_62 point (Int32.of_int  (47))) (_60 point (Int32.of_int  (58))));;
let rec string_45to_45int32_39_39 = fun string_45to_45int32_39 string accumulator x -> (string_45to_45int32_39 string (CSome ((Int32.add (Int32.mul (Int32.of_int  (10)) accumulator) (Int32.sub x (Int32.of_int  (48)))))));;
let rec string_45to_45int32_39 = fun string accumulator -> (match string with CEmpty -> accumulator | (CCons (x,rest)) -> (maybe_45flatmap (fun accumulator -> ((fun (_x) -> _x |> (maybe_45filter string_45point_45is_45digit) |> (maybe_45flatmap (string_45to_45int32_39_39 string_45to_45int32_39 rest accumulator))) (CSome (x)))) accumulator));;
let rec string_45to_45int32 = fun string -> (match string with (CCons (45l,string)) -> (match (string_45empty_63 string) with CTrue -> CNone | CFalse -> (maybe_45map (fun x -> (Int32.mul (Int32.of_int  (-1)) x)) (string_45to_45int32 string))) | _95 -> (string_45to_45int32_39 string (CSome ((Int32.of_int  (0))))));;
let rec string_45from_45int32_39 = fun integer string -> (match (_62 integer (Int32.of_int  (9))) with CTrue -> (string_45from_45int32_39 (Int32.div integer (Int32.of_int  (10))) (CCons ((Int32.add (Int32.rem integer (Int32.of_int  (10))) (Int32.of_int  (48))),string))) | CFalse -> (CCons ((Int32.add integer (Int32.of_int  (48))),string)));;
let rec string_45from_45int32 = fun integer -> (match (_60 integer (Int32.of_int  (0))) with CTrue -> (match (_61 integer (Int32.of_int  (-2147483648))) with CTrue -> (CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (49)),CCons ((Int32.of_int  (52)),CCons ((Int32.of_int  (55)),CCons ((Int32.of_int  (52)),CCons ((Int32.of_int  (56)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (54)),CCons ((Int32.of_int  (52)),CCons ((Int32.of_int  (56)),CEmpty)))))))))))) | CFalse -> (CCons ((Int32.of_int  (45)),(string_45from_45int32 (Int32.mul integer (Int32.of_int  (-1))))))) | CFalse -> (string_45from_45int32_39 integer CEmpty));;
type ('v,'e) result = CResult : 'v -> ('v,'e) result | CError : 'e -> ('v,'e) result;;
let rec result_45lift = fun result -> (CResult (result));;
let rec result_45error = fun error -> (CError (error));;
let rec result_45map = fun f result -> (match result with (CResult (x)) -> (CResult ((f x))) | (CError (error)) -> (CError (error)));;
let rec result_45map_45error = fun f result -> (match result with (CResult (x)) -> (CResult (x)) | (CError (error)) -> (CError ((f error))));;
let rec result_45flatmap = fun f result -> (match result with (CResult (x)) -> (f x) | (CError (error)) -> (CError (error)));;
let rec result_45error_63 = fun result -> (match result with (CError (_95)) -> CTrue | _95 -> CFalse);;
let rec result_45filter_45list = fun list -> (list_45foldr (fun result new_45list -> (match result with (CResult (x)) -> (CCons (x,new_45list)) | _95 -> new_45list)) CEmpty list);;
let rec result_45concat = fun list -> (match (list_45filter result_45error_63 list) with (CCons ((CError (error)),_95)) -> (CError (error)) | (CCons ((CResult (_95)),_95_95)) -> (CResult (CEmpty)) | CEmpty -> (CResult ((result_45filter_45list list))));;
let rec result_45of_45maybe = fun error maybe -> (match maybe with (CSome (x)) -> (CResult (x)) | CNone -> (CError (error)));;
type ('a,'i) parser = CParser : ('i -> (('a,'i) pair) maybe) -> ('a,'i) parser;;
let rec parser_45result = fun x -> (CParser ((fun input -> (CSome ((CPair (x,input)))))));;
let rec parser_45fail = fun () -> (CParser ((fun _95 -> CNone)));;
let rec parser_45apply = fun parser input -> (match parser with (CParser (p)) -> (p input));;
let rec parser_45run = fun parser input -> (maybe_45map pair_45left (parser_45apply parser input));;
let rec parser_45bind = fun f parser -> (CParser ((fun input -> (match (parser_45apply parser input) with CNone -> CNone | (CSome ((CPair (value,rest)))) -> (parser_45apply (f value) rest)))));;
let rec parser_45if = fun predicate parser -> (parser_45bind (fun value -> (match (predicate value) with CTrue -> (parser_45result value) | CFalse -> (parser_45fail ()))) parser);;
let rec parser_45and = fun f parser_45a parser_45b -> (parser_45bind (fun a -> (parser_45bind (fun b -> (f a b)) parser_45b)) parser_45a);;
let rec parser_45or = fun parser_45a parser_45b -> (CParser ((fun input -> (match (parser_45apply parser_45a input) with (CSome (x)) -> (CSome (x)) | CNone -> (parser_45apply parser_45b input)))));;
let rec parser_45zero_45or_45more_39 = fun parser_45zero_45or_45more parser f -> (parser_45bind (fun first -> (parser_45bind (fun rest -> (parser_45result (f first rest))) (parser_45zero_45or_45more parser))) parser);;
let rec parser_45zero_45or_45more = fun f initial parser -> (parser_45or (parser_45zero_45or_45more_39 (parser_45zero_45or_45more f initial) parser f) (parser_45result initial));;
let rec parser_45one_45or_45more = fun f initial parser -> (parser_45and (fun first rest -> (parser_45result (f first rest))) parser (parser_45zero_45or_45more f initial parser));;
type ('s,'v) state = COperation : ('s -> ('s,'v) pair) -> ('s,'v) state;;
let rec state_45run = fun state operation -> (match operation with (COperation (f)) -> (f state));;
let rec state_45final_45value = fun initial_45state operation -> (match (state_45run initial_45state operation) with (CPair (_95,value)) -> value);;
let rec state_45return = fun value -> (COperation ((fun state -> (CPair (state,value)))));;
let rec state_45bind = fun operation f -> (COperation ((fun state -> (match (state_45run state operation) with (CPair (new_45state,new_45value)) -> (state_45run new_45state (f new_45value))))));;
let rec state_45get = fun () -> (COperation ((fun state -> (CPair (state,state)))));;
let rec state_45set = fun state -> (COperation ((fun _95 -> (CPair (state,state)))));;
let rec state_45modify = fun f -> (state_45bind (state_45get ()) (fun state -> (state_45set (f state))));;
let rec state_45let = fun value f -> (state_45bind (state_45return value) f);;
let rec state_45foldr = fun f initial_45value operations -> (list_45foldr (fun operation chain -> (state_45bind operation (fun x -> (state_45bind chain (fun xs -> (state_45return (f x xs))))))) (state_45return initial_45value) operations);;
let rec state_45foreach = fun f xs -> (state_45foldr list_45cons CEmpty (list_45map f xs));;
let rec state_45flatmap = fun f operation -> (state_45bind operation f);;
let rec state_45map = fun f operation -> (state_45flatmap (fun (_x) -> _x |> f |> state_45return) operation);;
let rec state_45lift = fun value -> (state_45return value);;
type ('value) dictionary = CDictionary : (((int32) list,'value) pair) list -> ('value) dictionary;;
let rec dictionary_45new = fun () -> (CDictionary (CEmpty));;
let rec dictionary_45entries = fun dictionary -> (match dictionary with (CDictionary (entries)) -> entries);;
let rec entry_45get_45key_39 = fun entry -> (match entry with (CPair (key,_95)) -> key);;
let rec entry_45get_45value_39 = fun entry -> (match entry with (CPair (_95,value)) -> value);;
let rec entry_45matches_45key_39 = fun key entry -> (string_45equal_63 key (entry_45get_45key_39 entry));;
let rec entries_45matching_45key_39 = fun key dictionary -> ((fun (_x) -> _x |> dictionary_45entries |> (list_45filter (entry_45matches_45key_39 key))) dictionary);;
let rec dictionary_45lookup = fun key dictionary -> ((fun (_x) -> _x |> (entries_45matching_45key_39 key) |> list_45first |> (maybe_45map entry_45get_45value_39)) dictionary);;
let rec dictionary_45add = fun key value dictionary -> (CDictionary ((CCons ((CPair (key,value)),(dictionary_45entries dictionary)))));;
let rec whitespace_63 = fun character -> (_or (_61 character (Int32.of_int  (32))) (_or (_61 character (Int32.of_int  (13))) (_or (_61 character (Int32.of_int  (9))) (_61 character (Int32.of_int  (10))))));;
let rec atom_45character_63 = fun character -> (_and (not (_61 character (Int32.of_int  (40)))) (_and (not (_61 character (Int32.of_int  (41)))) (not (whitespace_63 character))));;
type range = CRange : int32 * int32 -> range;;
type sexp = CSymbol : (int32) list * range -> sexp | CList : (sexp) list * range -> sexp;;
type parse_45error = CParseErrorTooFewClosingBrackets | CParseErrorTooManyClosingBrackets;;
type ('i,'e) parse_45result = CParseNext : 'i * 'e -> ('i,'e) parse_45result | CParseOut : 'i -> ('i,'e) parse_45result | CParseEnd;;
let rec symbol_45range = fun start _end -> (CRange ((indexed_45iterator_45index start),(indexed_45iterator_45index _end)));;
let rec parse_45symbol = fun iterator -> (match (list_45collect_45from_45indexed_45iterator atom_45character_63 iterator) with (CPair (_95,CEmpty)) -> (CParseOut (iterator)) | (CPair (next_45iterator,name)) -> (CParseNext (next_45iterator,(CSymbol (name,(symbol_45range iterator next_45iterator))))));;
let rec list_45range = fun start _end -> (CRange ((Int32.sub (indexed_45iterator_45index start) (Int32.of_int  (1))),(indexed_45iterator_45index _end)));;
let rec parse_45list = fun iterator parse_45sexps -> (match (parse_45sexps iterator CEmpty) with (CPair (next_45iterator,expressions)) -> (CParseNext (next_45iterator,(CList (expressions,(list_45range iterator next_45iterator))))));;
let rec parse_45expression = fun iterator parse_45sexps -> (match (indexed_45iterator_45get iterator) with CNone -> CParseEnd | (CSome (40l)) -> (parse_45list (indexed_45iterator_45next iterator) parse_45sexps) | (CSome (41l)) -> (CParseOut ((indexed_45iterator_45next iterator))) | (CSome (x)) -> (match (whitespace_63 x) with CTrue -> (parse_45expression (indexed_45iterator_45next iterator) parse_45sexps) | CFalse -> (parse_45symbol iterator)));;
let rec parse_45sexps = fun iterator expressions -> (match (parse_45expression iterator parse_45sexps) with CParseEnd -> (CPair (iterator,(list_45reverse expressions))) | (CParseOut (iterator)) -> (CPair (iterator,(list_45reverse expressions))) | (CParseNext (iterator,result)) -> (parse_45sexps iterator (CCons (result,expressions))));;
let rec inc = fun x -> (Int32.add x (Int32.of_int  (1)));;
let rec count_45parens = fun iterator -> (indexed_45iterator_45foldl (fun c count -> (match c with 40l -> (pair_45map_45left inc count) | 41l -> (pair_45map_45right inc count) | _95 -> count)) (CPair ((Int32.of_int  (0)),(Int32.of_int  (0)))) iterator);;
let rec check_45errors = fun iterator -> (match (count_45parens iterator) with (CPair (_open,close)) -> (match (_60 _open close) with CTrue -> (CSome (CParseErrorTooManyClosingBrackets)) | CFalse -> (match (_62 _open close) with CTrue -> (CSome (CParseErrorTooFewClosingBrackets)) | CFalse -> CNone)));;
let rec parse = fun input -> (match (check_45errors (list_45to_45indexed_45iterator input)) with (CSome (error)) -> (CError (error)) | CNone -> (match (parse_45sexps (list_45to_45indexed_45iterator input) CEmpty) with (CPair (_95,expressions)) -> (CResult (expressions))));;
let rec wrap_45in_45brackets = fun string -> (string_45concat (string_45of_45char (Int32.of_int  (40))) (string_45concat string (string_45of_45char (Int32.of_int  (41)))));;
let rec stringify_45sexp = fun stringify expression -> (match expression with (CSymbol (name,_95)) -> name | (CList (expressions,_95)) -> (wrap_45in_45brackets (stringify expressions)));;
let rec stringify = fun expressions -> (string_45join (string_45of_45char (Int32.of_int  (32))) (list_45map (stringify_45sexp stringify) expressions));;
let rec def_45string = fun () -> (CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CEmpty))));;
let rec export_45string = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (116)),CEmpty)))))));;
let rec typ_45string = fun () -> (CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CEmpty))));;
let rec fn_45string = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (110)),CEmpty)));;
let rec match_45string = fun () -> (CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (104)),CEmpty))))));;
let rec exists_45string = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (115)),CEmpty)))))));;
type language = CEnglish;;
let rec i18n_45error_45range_45to_45string = fun language range -> (match range with (CRange (start,_end)) -> (string_45concat (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CEmpty))))) (string_45concat (string_45from_45int32 start) (string_45concat (CCons ((Int32.of_int  (45)),CEmpty)) (string_45from_45int32 _end)))));;
let rec i18n_45malformed_45definition_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (79)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (118)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (89)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (46)),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45definition_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (44)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (39)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (118)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (58)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (40)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (40)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (41)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (41)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45definition_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (44)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (39)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (118)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (58)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (40)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (78)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (79)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (67)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (41)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45name_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (77)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (70)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (78)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45expression_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (77)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45match_45expression_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (84)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (44)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (118)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (107)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (58)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (40)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (49)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (49)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (41)),CCons ((Int32.of_int  (10)),CCons ((Int32.of_int  (10)),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45symbol_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (77)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (83)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45constructor_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (77)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (67)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty)))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45error = fun language range -> (string_45concat (CCons ((Int32.of_int  (77)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (84)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45sexp_45too_45few_45closing_45brackets = fun language -> (CCons ((Int32.of_int  (84)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CEmpty))))))))))))))))))))))))))))))))))))));;
let rec i18n_45malformed_45sexp_45too_45many_45closing_45brackets = fun language -> (CCons ((Int32.of_int  (84)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CEmpty)))))))))))))))))))))))))))))))))))))));;
let rec char_45is_45upper_45case_63 = fun char -> (_and (_62_61 char (Int32.of_int  (65))) (_60_61 char (Int32.of_int  (90))));;
let rec name_45of_45constructor_63 = fun name -> (match name with (CCons (first_45letter,_95)) -> (char_45is_45upper_45case_63 first_45letter) | CEmpty -> CFalse);;
type error = CMalformedDefinitionError : range -> error | CMalformedTypeDefinitionError : range -> error | CMalformedFunctionDefinitionError : range -> error | CMalformedFunctionNameError : range -> error | CMalformedExpressionError : range -> error | CMalformedMatchExpressionError : range -> error | CMalformedSymbolError : range -> error | CMalformedConstructorError : range -> error | CMalformedTypeError : range -> error | CMalformedSexpTooFewClosingBrackets | CMalformedSexpTooManyClosingBrackets;;
let rec error_45to_45string = fun error -> (match error with (CMalformedDefinitionError (range)) -> (i18n_45malformed_45definition_45error CEnglish range) | (CMalformedFunctionDefinitionError (range)) -> (i18n_45malformed_45function_45definition_45error CEnglish range) | (CMalformedTypeDefinitionError (range)) -> (i18n_45malformed_45type_45definition_45error CEnglish range) | (CMalformedFunctionNameError (range)) -> (i18n_45malformed_45function_45name_45error CEnglish range) | (CMalformedExpressionError (range)) -> (i18n_45malformed_45expression_45error CEnglish range) | (CMalformedMatchExpressionError (range)) -> (i18n_45malformed_45match_45expression_45error CEnglish range) | (CMalformedSymbolError (range)) -> (i18n_45malformed_45symbol_45error CEnglish range) | (CMalformedConstructorError (range)) -> (i18n_45malformed_45constructor_45error CEnglish range) | (CMalformedTypeError (range)) -> (i18n_45malformed_45type_45error CEnglish range) | CMalformedSexpTooFewClosingBrackets -> (i18n_45malformed_45sexp_45too_45few_45closing_45brackets CEnglish) | CMalformedSexpTooManyClosingBrackets -> (i18n_45malformed_45sexp_45too_45many_45closing_45brackets CEnglish));;
let rec symbol_45to_45string = fun symbol -> (match symbol with (CSymbol (name,_95)) -> (CResult (name)) | (CList (_95,range)) -> (CError ((CMalformedSymbolError (range)))));;
type ('meta) ast_45type = CSimpleType : (int32) list * 'meta -> ('meta) ast_45type | CComplexType : (int32) list * (('meta) ast_45type) list * 'meta -> ('meta) ast_45type | CFunctionType : (('meta) ast_45type) list * ('meta) ast_45type * 'meta -> ('meta) ast_45type;;
type ('meta) type_45parameter = CUniversalParameter : (int32) list * 'meta -> ('meta) type_45parameter | CExistentialParameter : (int32) list * 'meta -> ('meta) type_45parameter;;
type ('meta) constructor = CSimpleConstructor : (int32) list * 'meta -> ('meta) constructor | CComplexConstructor : (int32) list * (('meta) ast_45type) list * 'meta -> ('meta) constructor;;
type ('meta) pattern = CCapture : (int32) list * 'meta -> ('meta) pattern | CIntegerPattern : int32 * 'meta -> ('meta) pattern | CConstructorPattern : (int32) list * (('meta) pattern) list * 'meta -> ('meta) pattern;;
type ('meta) expression = CIntegerConstant : int32 * 'meta -> ('meta) expression | CIdentifier : (int32) list * 'meta -> ('meta) expression | CLambda : ((int32) list) list * ('meta) expression * 'meta -> ('meta) expression | CMatch : ('meta) expression * ((('meta) pattern,('meta) expression) pair) list * 'meta -> ('meta) expression | CConstructor : (int32) list * (('meta) expression) list * 'meta -> ('meta) expression | CFunctionApplication : (('meta) expression) list * 'meta -> ('meta) expression;;
type ('a,'b) definition = CTypeDefinition : (int32) list * (('a) type_45parameter) list * (('a) constructor) list * 'b -> ('a,'b) definition | CExportDefinition : (int32) list * ((int32) list) list * ('a) expression * 'b -> ('a,'b) definition | CFunctionDefinition : (int32) list * ((int32) list) list * ('a) expression * 'b -> ('a,'b) definition;;
let rec definition_45meta = fun definition -> (match definition with (CTypeDefinition (_95,_95_95,_95_95_95,meta)) -> meta | (CExportDefinition (_95,_95_95,_95_95_95,meta)) -> meta | (CFunctionDefinition (_95,_95_95,_95_95_95,meta)) -> meta);;
let rec sexp_45to_45complex_45type = fun sexp_45to_45types name parameters range -> (result_45map (fun sub_45types -> (CComplexType (name,sub_45types,range))) (sexp_45to_45types parameters));;
let rec sexp_45to_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> (match parameters with (CCons ((CList (arg_45types,_95)),(CCons (return_45type,CEmpty)))) -> (result_45flatmap (fun arg_45types -> (result_45map (fun return_45type -> (CFunctionType (arg_45types,return_45type,range))) (sexp_45to_45type return_45type))) (sexp_45to_45types arg_45types)) | _95 -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45complex_45or_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> (match (string_45equal_63 name (fn_45string ())) with CTrue -> (sexp_45to_45function_45type sexp_45to_45types sexp_45to_45type name parameters range) | CFalse -> (sexp_45to_45complex_45type sexp_45to_45types name parameters range));;
let rec sexp_45to_45type = fun sexp_45to_45types _type -> (match _type with (CList ((CCons ((CSymbol (name,_95)),parameters)),range)) -> (sexp_45to_45complex_45or_45function_45type sexp_45to_45types (sexp_45to_45type sexp_45to_45types) name parameters range) | (CSymbol (name,range)) -> (CResult ((CSimpleType (name,range)))) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45types = fun types -> (result_45concat (list_45map (sexp_45to_45type sexp_45to_45types) types));;
let rec sexp_45to_45complex_45constructor = fun name types range -> (result_45map (fun types -> (CComplexConstructor (name,types,range))) (sexp_45to_45types types));;
let rec sexp_45to_45constructor_45definition = fun constructor -> (match constructor with (CSymbol (name,range)) -> (CResult ((CSimpleConstructor (name,range)))) | (CList ((CCons ((CSymbol (name,_95)),types)),range)) -> (sexp_45to_45complex_45constructor name types range) | (CList (_95,range)) -> (CError ((CMalformedConstructorError (range)))));;
let rec sexp_45to_45constructor_45definitions = fun constructors -> (result_45concat (list_45map sexp_45to_45constructor_45definition constructors));;
let rec sexp_45to_45type_45parameter = fun sexp -> (match sexp with (CList ((CCons (_95,(CCons ((CSymbol (name,range)),CEmpty)))),_95_95)) -> (CResult ((CExistentialParameter (name,range)))) | (CSymbol (name,range)) -> (CResult ((CUniversalParameter (name,range)))) | (CList (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexp_45to_45type_45parameters = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (_95,_95_95)),parameters)),_95_95_95)) -> (result_45concat (list_45map sexp_45to_45type_45parameter parameters)) | (CSymbol (_95,_95_95)) -> (CResult (CEmpty)) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45name = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (name,_95)),_95_95)),_95_95_95)) -> (CResult (name)) | (CSymbol (name,_95)) -> (CResult (name)) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45definition = fun type_45name constructors range -> (result_45flatmap (fun name -> (result_45flatmap (fun parameters -> (result_45map (fun constructors -> (CTypeDefinition (name,parameters,constructors,range))) (sexp_45to_45constructor_45definitions constructors))) (sexp_45to_45type_45parameters type_45name))) (sexp_45to_45type_45name type_45name));;
let rec sexp_45to_45arguments = fun arguments -> (result_45concat (list_45map symbol_45to_45string arguments));;
let rec sexp_45to_45function_45body = fun range rest -> (match rest with (CCons ((CList (arguments,_95)),(CCons (expression,CEmpty)))) -> (CResult ((CPair (arguments,expression)))) | _95 -> (CError ((CMalformedFunctionDefinitionError (range)))));;
let rec sexp_45to_45lambda = fun sexp_45to_45expression rest range -> (result_45flatmap (fun body -> (result_45flatmap (fun arguments -> (result_45map (fun expression -> (CLambda (arguments,expression,range))) (sexp_45to_45expression (pair_45right body)))) (sexp_45to_45arguments (pair_45left body)))) (sexp_45to_45function_45body range rest));;
let rec sexp_45to_45function_45application = fun sexp_45to_45expression range expressions -> ((fun (_x) -> _x |> (list_45map sexp_45to_45expression) |> result_45concat |> (result_45map (fun expressions -> (CFunctionApplication (expressions,range))))) expressions);;
let rec to_45constructor_45or_45capture = fun range name -> (match (name_45of_45constructor_63 name) with CTrue -> (CResult ((CConstructorPattern (name,CEmpty,range)))) | CFalse -> (CResult ((CCapture (name,range)))));;
let rec sexp_45to_45pattern = fun sexp -> (match sexp with (CList ((CCons (name,rest)),range)) -> (result_45flatmap (fun patterns -> (result_45map (fun name -> (CConstructorPattern (name,patterns,range))) (symbol_45to_45string name))) (result_45concat (list_45map sexp_45to_45pattern rest))) | (CList (CEmpty,range)) -> (CError ((CMalformedExpressionError (range)))) | (CSymbol (name,range)) -> ((fun (_x) -> _x |> (maybe_45map (fun integer -> (CResult ((CIntegerPattern (integer,range)))))) |> (maybe_45else (fun () -> (to_45constructor_45or_45capture range name)))) (string_45to_45int32 name)));;
let rec sexp_45to_45match_45pair = fun sexp_45to_45expression pair -> (match pair with (CPair (pattern,expression)) -> (result_45flatmap (fun pattern -> (result_45map (fun expression -> (CPair (pattern,expression))) (sexp_45to_45expression expression))) (sexp_45to_45pattern pattern)));;
let rec collect_45pairs = fun list -> (match list with (CCons (a,(CCons (b,rest)))) -> (maybe_45map (fun more_45pairs -> (CCons ((CPair (a,b)),more_45pairs))) (collect_45pairs rest)) | CEmpty -> (CSome (CEmpty)) | _95 -> CNone);;
let rec sexp_45to_45match_45pairs = fun sexp_45to_45expression range pairs -> ((fun (_x) -> _x |> collect_45pairs |> (fun pairs -> (match pairs with (CSome (CEmpty)) -> CNone | other -> other)) |> (result_45of_45maybe (CMalformedMatchExpressionError (range))) |> (result_45flatmap (fun (_x) -> _x |> (list_45map (sexp_45to_45match_45pair sexp_45to_45expression)) |> result_45concat))) pairs);;
let rec sexp_45to_45match = fun sexp_45to_45expression range rest -> (match rest with (CCons (expression,rest)) -> (result_45flatmap (fun expression -> (result_45map (fun pairs -> (CMatch (expression,pairs,range))) (sexp_45to_45match_45pairs sexp_45to_45expression range rest))) (sexp_45to_45expression expression)) | _95 -> (CError ((CMalformedExpressionError (range)))));;
let rec sexp_45to_45constructor = fun sexp_45to_45expression range name rest -> (result_45map (fun expressions -> (CConstructor (name,expressions,range))) (result_45concat (list_45map sexp_45to_45expression rest)));;
let rec sexp_45to_45list_45expression = fun sexp_45to_45expression expressions range -> (match expressions with (CCons ((CSymbol (symbol,_95)),rest)) -> (match (string_45equal_63 symbol (fn_45string ())) with CTrue -> (sexp_45to_45lambda sexp_45to_45expression rest range) | CFalse -> (match (string_45equal_63 symbol (match_45string ())) with CTrue -> (sexp_45to_45match sexp_45to_45expression range rest) | CFalse -> (match (name_45of_45constructor_63 symbol) with CTrue -> (sexp_45to_45constructor sexp_45to_45expression range symbol rest) | CFalse -> (sexp_45to_45function_45application sexp_45to_45expression range expressions)))) | _95 -> (sexp_45to_45function_45application sexp_45to_45expression range expressions));;
let rec sexp_45to_45expression = fun sexp -> (match sexp with (CSymbol (symbol_45name,range)) -> (match (string_45to_45int32 symbol_45name) with (CSome (integer)) -> (CResult ((CIntegerConstant (integer,range)))) | CNone -> (match (name_45of_45constructor_63 symbol_45name) with CTrue -> (CResult ((CConstructor (symbol_45name,CEmpty,range)))) | CFalse -> (CResult ((CIdentifier (symbol_45name,range)))))) | (CList (expressions,range)) -> (match expressions with CEmpty -> (CError ((CMalformedExpressionError (range)))) | _95 -> (sexp_45to_45list_45expression sexp_45to_45expression expressions range)));;
let rec sexp_45to_45function_45definition = fun name_45symbol rest range constructor -> (result_45flatmap (fun body -> (result_45flatmap (fun arguments -> (result_45flatmap (fun expression -> (result_45map (fun name -> (constructor name arguments expression range)) (symbol_45to_45string name_45symbol))) (sexp_45to_45expression (pair_45right body)))) (sexp_45to_45arguments (pair_45left body)))) (sexp_45to_45function_45body range rest));;
let rec sexp_45to_45definition_39 = fun name rest range kind -> (match (string_45equal_63 kind (typ_45string ())) with CTrue -> (sexp_45to_45type_45definition name rest range) | CFalse -> (match (string_45equal_63 kind (def_45string ())) with CTrue -> (sexp_45to_45function_45definition name rest range (fun name arguments expression range -> (CFunctionDefinition (name,arguments,expression,range)))) | CFalse -> (match (string_45equal_63 kind (export_45string ())) with CTrue -> (sexp_45to_45function_45definition name rest range (fun name arguments expression range -> (CExportDefinition (name,arguments,expression,range)))) | CFalse -> (CError ((CMalformedDefinitionError (range)))))));;
let rec sexp_45to_45definition = fun expression -> (match expression with (CList ((CCons ((CSymbol (kind,_95)),CEmpty)),range)) -> (match (string_45equal_63 kind (typ_45string ())) with CTrue -> (CError ((CMalformedTypeDefinitionError (range)))) | CFalse -> (match (string_45equal_63 kind (def_45string ())) with CTrue -> (CError ((CMalformedFunctionDefinitionError (range)))) | CFalse -> (CError ((CMalformedDefinitionError (range)))))) | (CList ((CCons ((CSymbol (kind,_95)),(CCons (_95_95,CEmpty)))),range)) -> (match (string_45equal_63 kind (typ_45string ())) with CTrue -> (CError ((CMalformedTypeDefinitionError (range)))) | CFalse -> (match (string_45equal_63 kind (def_45string ())) with CTrue -> (CError ((CMalformedFunctionDefinitionError (range)))) | CFalse -> (CError ((CMalformedDefinitionError (range)))))) | (CList ((CCons (kind,(CCons (name,rest)))),range)) -> (result_45flatmap (sexp_45to_45definition_39 name rest range) (symbol_45to_45string kind)) | (CList ((CCons ((CList (_95,range)),CEmpty)),_95_95)) -> (CError ((CMalformedDefinitionError (range)))) | (CList (CEmpty,range)) -> (CError ((CMalformedDefinitionError (range)))) | (CSymbol (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexps_45to_45definitions = fun expressions -> (match expressions with (CResult (expressions)) -> (list_45map sexp_45to_45definition expressions) | (CError (error)) -> (match error with CParseErrorTooFewClosingBrackets -> (CCons ((CError (CMalformedSexpTooFewClosingBrackets)),CEmpty)) | CParseErrorTooManyClosingBrackets -> (CCons ((CError (CMalformedSexpTooManyClosingBrackets)),CEmpty))));;
let rec type_45to_45sexp = fun types_45to_45sexp _type -> (match _type with (CSimpleType (name,range)) -> (CSymbol (name,range)) | (CFunctionType (arg_45types,return_45type,range)) -> (CList ((CCons ((CSymbol ((fn_45string ()),range)),CCons ((CList ((types_45to_45sexp arg_45types),range)),CCons ((type_45to_45sexp types_45to_45sexp return_45type),CEmpty)))),range)) | (CComplexType (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec types_45to_45sexp = fun types -> (list_45map (type_45to_45sexp types_45to_45sexp) types);;
let rec constructor_45to_45sexp = fun constructor -> (match constructor with (CSimpleConstructor (name,range)) -> (CSymbol (name,range)) | (CComplexConstructor (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec constructors_45to_45sexp = fun constructors -> (list_45map constructor_45to_45sexp constructors);;
let rec type_45parameter_45to_45sexp = fun parameter -> (match parameter with (CExistentialParameter (name,range)) -> (CList ((CCons ((CSymbol ((exists_45string ()),range)),CCons ((CSymbol (name,range)),CEmpty))),range)) | (CUniversalParameter (name,range)) -> (CSymbol (name,range)));;
let rec type_45name_45to_45sexp = fun range name parameters -> (match parameters with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map type_45parameter_45to_45sexp parameters))),range)));;
let rec type_45definition_45to_45sexp = fun name parameters constructors range -> (CList ((list_45concat (CCons ((CSymbol ((typ_45string ()),range)),CCons ((type_45name_45to_45sexp range name parameters),CEmpty))) (constructors_45to_45sexp constructors)),range));;
let rec function_45arguments_45to_45sexp = fun arguments range -> (CList ((list_45map (fun name -> (CSymbol (name,range))) arguments),range));;
let rec pattern_45to_45sexp = fun pattern -> (match pattern with (CConstructorPattern (name,CEmpty,range)) -> (CSymbol (name,range)) | (CConstructorPattern (name,patterns,range)) -> (CList ((CCons ((CSymbol (name,range)),(list_45map pattern_45to_45sexp patterns))),range)) | (CIntegerPattern (value,range)) -> (CSymbol ((string_45from_45int32 value),range)) | (CCapture (name,range)) -> (CSymbol (name,range)));;
let rec match_45pair_45to_45sexp = fun expression_45to_45sexp pair -> (match pair with (CPair (pattern,expression)) -> (CCons ((pattern_45to_45sexp pattern),CCons ((expression_45to_45sexp expression),CEmpty))));;
let rec expression_45to_45sexp = fun expression -> (match expression with (CIntegerConstant (integer,range)) -> (CSymbol ((string_45from_45int32 integer),range)) | (CIdentifier (string,range)) -> (CSymbol (string,range)) | (CLambda (arguments,expression,range)) -> (CList ((CCons ((CSymbol ((fn_45string ()),range)),CCons ((function_45arguments_45to_45sexp arguments range),CCons ((expression_45to_45sexp expression),CEmpty)))),range)) | (CMatch (expression,pairs,range)) -> (CList ((CCons ((CSymbol ((match_45string ()),range)),(CCons ((expression_45to_45sexp expression),(list_45flatmap (match_45pair_45to_45sexp expression_45to_45sexp) pairs))))),range)) | (CConstructor (name,expressions,range)) -> (match expressions with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map expression_45to_45sexp expressions))),range))) | (CFunctionApplication (expressions,range)) -> (CList ((list_45map expression_45to_45sexp expressions),range)));;
let rec function_45definition_45to_45sexp = fun name arguments expression range kind -> (CList ((CCons ((CSymbol (kind,range)),CCons ((CSymbol (name,range)),CCons ((function_45arguments_45to_45sexp arguments range),CCons ((expression_45to_45sexp expression),CEmpty))))),range));;
let rec definition_45to_45sexp = fun definition -> (match definition with (CTypeDefinition (name,parameters,constructors,range)) -> (type_45definition_45to_45sexp name parameters constructors range) | (CExportDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range (export_45string ())) | (CFunctionDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range (def_45string ())));;
let rec error_45to_45sexp = fun error -> (CSymbol ((error_45to_45string error),(CRange ((Int32.of_int  (0)),(Int32.of_int  (0))))));;
let rec render_45result = fun result -> (match result with (CResult (sexp)) -> sexp | (CError (sexp)) -> sexp);;
let rec definitions_45to_45sexps = fun definitions -> (list_45map (fun (_x) -> _x |> (result_45map definition_45to_45sexp) |> (result_45map_45error error_45to_45sexp) |> render_45result) definitions);;
let rec data_45space = fun () -> (CCons ((Int32.of_int  (32)),CEmpty));;
let rec data_45plus = fun () -> (CCons ((Int32.of_int  (43)),CEmpty));;
let rec data_45multiply = fun () -> (CCons ((Int32.of_int  (42)),CEmpty));;
let rec data_45minus = fun () -> (CCons ((Int32.of_int  (45)),CEmpty));;
let rec data_45slash = fun () -> (CCons ((Int32.of_int  (47)),CEmpty));;
let rec data_45percent = fun () -> (CCons ((Int32.of_int  (37)),CEmpty));;
let rec data_45match = fun () -> (CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (104)),CEmpty))))));;
let rec data_45pipe = fun () -> (CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CEmpty)))));;
let rec data_45list = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (116)),CEmpty)))));;
let rec data_45int32_45less_45than = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CEmpty))))))))))))))));;
let rec data_45parse_45error = fun () -> (CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (32)),CEmpty)))))))))))));;
let rec data_45fun = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CEmpty))));;
let rec data_45type = fun () -> (CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CEmpty)))));;
let rec data_45if = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (102)),CEmpty)));;
let rec data_45then = fun () -> (CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CEmpty)))));;
let rec data_45else = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CEmpty)))));;
let rec data_45with = fun () -> (CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CEmpty)))));;
let rec data_45of = fun () -> (CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (102)),CEmpty)));;
let rec data_45class = fun () -> (CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CEmpty))))));;
let rec data_45end = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (100)),CEmpty))));;
let rec data_45in = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CEmpty)));;
let rec data_45let = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (116)),CEmpty))));;
let rec data_45open = fun () -> (CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (110)),CEmpty)))));;
let rec data_45and = fun () -> (CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (100)),CEmpty))));;
let rec data_45or = fun () -> (CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty)));;
let rec data_45as = fun () -> (CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (115)),CEmpty)));;
let rec data_45less_45than = fun () -> (CCons ((Int32.of_int  (60)),CEmpty));;
let rec data_45assert = fun () -> (CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (116)),CEmpty)))))));;
let rec data_45asr = fun () -> (CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (114)),CEmpty))));;
let rec data_45begin = fun () -> (CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (103)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CEmpty))))));;
let rec data_45constraint = fun () -> (CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CEmpty)))))))))));;
let rec data_45do = fun () -> (CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (111)),CEmpty)));;
let rec data_45done = fun () -> (CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (101)),CEmpty)))));;
let rec data_45downto = fun () -> (CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CEmpty)))))));;
let rec data_45exception = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CEmpty))))))))));;
let rec data_45external = fun () -> (CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CEmpty)))))))));;
let rec data_45false = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CEmpty))))));;
let rec data_45true = fun () -> (CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (101)),CEmpty)))));;
let rec data_45for = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))));;
let rec data_45function = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CEmpty)))))))));;
let rec data_45functor = fun () -> (CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))))))));;
let rec data_45include = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (101)),CEmpty))))))));;
let rec data_45inherit = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CEmpty))))))));;
let rec data_45initializer = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (122)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CEmpty))))))))))));;
let rec data_45land = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (100)),CEmpty)))));;
let rec data_45lazy = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (122)),CCons ((Int32.of_int  (121)),CEmpty)))));;
let rec data_45lor = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty))));;
let rec data_45lsl = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (108)),CEmpty))));;
let rec data_45lsr = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (114)),CEmpty))));;
let rec data_45lxor = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CEmpty)))));;
let rec data_45error_45reserved_45identifier = fun () -> (CCons ((Int32.of_int  (83)),CCons ((Int32.of_int  (121)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (98)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (120)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (226)),CCons ((Int32.of_int  (156)),CCons ((Int32.of_int  (168)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (118)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (100)),CEmpty)))))))))))))))))))))))))))))))))))))));;
let rec join = fun list -> (string_45join CEmpty list);;
let rec not_45empty_63 = fun string -> (not (string_45empty_63 string));;
let rec is_45alphanumeric = fun char -> (_or (_and (_62_61 char (Int32.of_int  (65))) (_60_61 char (Int32.of_int  (90)))) (_or (_and (_62_61 char (Int32.of_int  (48))) (_60_61 char (Int32.of_int  (57)))) (_and (_62_61 char (Int32.of_int  (97))) (_60_61 char (Int32.of_int  (122))))));;
let rec escape_45char = fun char -> (match (is_45alphanumeric char) with CTrue -> (CCons (char,CEmpty)) | CFalse -> (CCons ((Int32.of_int  (95)),(string_45from_45int32 char))));;
let rec stringify_45parse_45errors = fun definitions -> (list_45map (result_45map_45error error_45to_45string) definitions);;
let rec over_45match_45pair_45expression = fun f pair -> (match pair with (CPair (pattern,expression)) -> (result_45map (fun expression -> (CPair (pattern,expression))) (f expression)));;
let rec over_45match_45pair_45expressions = fun over_45subexpressions f pairs -> (result_45concat (list_45map (over_45match_45pair_45expression (fun (_x) -> _x |> f |> (result_45flatmap (over_45subexpressions f)))) pairs));;
let rec over_45subexpressions = fun f expression -> (match expression with (CLambda (arguments,expression,range)) -> (result_45flatmap (fun expression -> (result_45map (fun expression -> (CLambda (arguments,expression,range))) (over_45subexpressions f expression))) (f expression)) | (CMatch (expression,pairs,range)) -> (result_45flatmap (fun expression -> (result_45flatmap (fun expression -> (result_45map (fun pairs -> (CMatch (expression,pairs,range))) (over_45match_45pair_45expressions over_45subexpressions f pairs))) (over_45subexpressions f expression))) (f expression)) | (CConstructor (name,expressions,range)) -> (result_45map (fun expressions -> (CConstructor (name,expressions,range))) (result_45concat (list_45map (fun (_x) -> _x |> f |> (result_45flatmap (over_45subexpressions f))) expressions))) | (CFunctionApplication (expressions,range)) -> (result_45map (fun expressions -> (CFunctionApplication (expressions,range))) (result_45concat (list_45map (fun (_x) -> _x |> f |> (result_45flatmap (over_45subexpressions f))) expressions))) | _95 -> (result_45lift expression));;
let rec over_45definition_45expressions = fun f definition -> (match definition with (CFunctionDefinition (name,arguments,expression,range)) -> (result_45map (fun expression -> (CFunctionDefinition (name,arguments,expression,range))) (f expression)) | (CExportDefinition (name,arguments,expression,range)) -> (result_45map (fun expression -> (CExportDefinition (name,arguments,expression,range))) (f expression)) | _95 -> (result_45lift definition));;
let rec over_45function_45application = fun f expression -> (match expression with (CFunctionApplication (expressions,range)) -> (f expressions range) | _95 -> (result_45lift expression));;
let rec over_45identifiers = fun f expression -> (match expression with (CIdentifier (name,range)) -> (result_45map (fun name -> (CIdentifier (name,range))) (f name)) | (CLambda (arguments,expression,range)) -> (result_45flatmap (fun expression -> (result_45map (fun arguments -> (CLambda (arguments,expression,range))) (result_45concat (list_45map f arguments)))) (over_45identifiers f expression)) | (CConstructor (name,CEmpty,range)) -> (result_45map (fun name -> (CConstructor (name,CEmpty,range))) (f name)) | (CConstructor (name,expressions,range)) -> (result_45flatmap (fun expressions -> (result_45map (fun name -> (CConstructor (name,expressions,range))) (f name))) (result_45concat (list_45map (over_45identifiers f) expressions))) | (CFunctionApplication (expressions,range)) -> (result_45map (fun expressions -> (CFunctionApplication (expressions,range))) (result_45concat (list_45map (over_45identifiers f) expressions))) | (CMatch (expression,rules,range)) -> (result_45flatmap (fun rules -> (result_45map (fun expression -> (CMatch (expression,rules,range))) (over_45identifiers f expression))) (result_45concat (list_45map (over_45match_45pair_45expression (over_45identifiers f)) rules))) | _95 -> (result_45lift expression));;
let rec expression_45is_45symbol_63 = fun symbol_45name expression -> (match expression with (CIdentifier (name,_95_95)) -> (string_45equal_63 symbol_45name name) | _95 -> CFalse);;
let rec first_45expression_45is_45symbol_63 = fun symbol_45name expressions -> ((fun (_x) -> _x |> (maybe_45map (expression_45is_45symbol_63 symbol_45name)) |> (maybe_45else (fun () -> CFalse))) (list_45first expressions));;
let rec symbol_45is_45reserved_63 = fun name -> (match name with (CCons (226l,(CCons (156l,(CCons (168l,_95)))))) -> CTrue | _95 -> CFalse);;
let rec validate_45identifier = fun identifier -> (match (symbol_45is_45reserved_63 identifier) with CTrue -> (result_45error (data_45error_45reserved_45identifier ())) | CFalse -> (result_45lift identifier));;
let rec validate_45reserved_45identifiers = fun definition -> (result_45flatmap (over_45definition_45expressions (over_45identifiers validate_45identifier)) definition);;
let rec data_45compile_45error = fun () -> (CCons ((Int32.of_int  (42)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (42)),CEmpty))))))))))))))));;
let rec data_45arrow = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (45)),CCons ((Int32.of_int  (62)),CCons ((Int32.of_int  (32)),CEmpty)))));;
let rec data_45equals = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (61)),CCons ((Int32.of_int  (32)),CEmpty))));;
let rec data_45vertical_45bar = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (124)),CCons ((Int32.of_int  (32)),CEmpty))));;
let rec data_45pipe_45operator = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (124)),CCons ((Int32.of_int  (62)),CCons ((Int32.of_int  (32)),CEmpty)))));;
let rec data_45colon = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (58)),CCons ((Int32.of_int  (32)),CEmpty))));;
let rec data_45star = fun () -> (CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (42)),CCons ((Int32.of_int  (32)),CEmpty))));;
let rec data_45int32 = fun () -> (CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CEmpty))))));;
let rec data_45int32_45plus = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (97)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (100)),CEmpty))))))))));;
let rec data_45int32_45multiply = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (108)),CEmpty))))))))));;
let rec data_45int32_45minus = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (115)),CCons ((Int32.of_int  (117)),CCons ((Int32.of_int  (98)),CEmpty))))))))));;
let rec data_45int32_45divide = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (100)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (118)),CEmpty))))))))));;
let rec data_45int32_45modulus = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (109)),CEmpty))))))))));;
let rec data_45cempty = fun () -> (CCons ((Int32.of_int  (67)),CCons ((Int32.of_int  (69)),CCons ((Int32.of_int  (109)),CCons ((Int32.of_int  (112)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (121)),CEmpty)))))));;
let rec data_45ccons = fun () -> (CCons ((Int32.of_int  (67)),CCons ((Int32.of_int  (67)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (115)),CEmpty))))));;
let rec data_45int32 = fun () -> (CCons ((Int32.of_int  (73)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (51)),CCons ((Int32.of_int  (50)),CCons ((Int32.of_int  (46)),CCons ((Int32.of_int  (111)),CCons ((Int32.of_int  (102)),CCons ((Int32.of_int  (95)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (110)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CEmpty))))))))))))));;
let rec data_45comma = fun () -> (CCons ((Int32.of_int  (44)),CEmpty));;
let rec data_45with = fun () -> (CCons ((Int32.of_int  (119)),CCons ((Int32.of_int  (105)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (104)),CEmpty)))));;
let rec data_45definition_45end = fun () -> (CCons ((Int32.of_int  (59)),CCons ((Int32.of_int  (59)),CEmpty)));;
let rec data_45let_45rec = fun () -> (CCons ((Int32.of_int  (108)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (116)),CCons ((Int32.of_int  (32)),CCons ((Int32.of_int  (114)),CCons ((Int32.of_int  (101)),CCons ((Int32.of_int  (99)),CCons ((Int32.of_int  (32)),CEmpty)))))))));;
let rec with_45apostrophe = fun string -> (CCons ((Int32.of_int  (39)),string));;
let rec prefix_45constructor = fun constructor -> (CCons ((Int32.of_int  (67)),constructor));;
let rec string_45is_45reserved_63 = fun name -> (list_45any_63 (string_45equal_63 name) (CCons ((data_45assert ()),CCons ((data_45asr ()),CCons ((data_45begin ()),CCons ((data_45constraint ()),CCons ((data_45do ()),CCons ((data_45done ()),CCons ((data_45downto ()),CCons ((data_45type ()),CCons ((data_45if ()),CCons ((data_45then ()),CCons ((data_45else ()),CCons ((data_45with ()),CCons ((data_45of ()),CCons ((data_45end ()),CCons ((data_45in ()),CCons ((data_45fun ()),CCons ((data_45let ()),CCons ((data_45open ()),CCons ((data_45and ()),CCons ((data_45or ()),CCons ((data_45as ()),CCons ((data_45class ()),CCons ((data_45exception ()),CCons ((data_45external ()),CCons ((data_45false ()),CCons ((data_45true ()),CCons ((data_45for ()),CCons ((data_45function ()),CCons ((data_45functor ()),CCons ((data_45if ()),CCons ((data_45include ()),CCons ((data_45inherit ()),CCons ((data_45initializer ()),CCons ((data_45land ()),CCons ((data_45lazy ()),CCons ((data_45lor ()),CCons ((data_45lsl ()),CCons ((data_45lsr ()),CCons ((data_45lxor ()),CEmpty)))))))))))))))))))))))))))))))))))))))));;
let rec escape_45identifier = fun name -> (match (string_45is_45reserved_63 name) with CTrue -> (CCons ((Int32.of_int  (95)),name)) | CFalse -> (list_45flatmap escape_45char name));;
let rec translate_45identifier = fun name -> (match (string_45equal_63 name (data_45plus ())) with CTrue -> (data_45int32_45plus ()) | CFalse -> (match (string_45equal_63 name (data_45slash ())) with CTrue -> (data_45int32_45divide ()) | CFalse -> (match (string_45equal_63 name (data_45percent ())) with CTrue -> (data_45int32_45modulus ()) | CFalse -> (match (string_45equal_63 name (data_45minus ())) with CTrue -> (data_45int32_45minus ()) | CFalse -> (match (string_45equal_63 name (data_45multiply ())) with CTrue -> (data_45int32_45multiply ()) | CFalse -> (escape_45identifier name))))));;
let rec translate_45pipe = fun translate_45expression -> (fun (_x) -> _x |> (list_45map translate_45expression) |> (string_45join (data_45pipe_45operator ())) |> (fun expressions -> (CCons ((data_45fun ()),CCons ((data_45space ()),CCons ((wrap_45in_45brackets (CCons ((Int32.of_int  (95)),CCons ((Int32.of_int  (120)),CEmpty)))),CCons ((data_45arrow ()),CCons ((CCons ((Int32.of_int  (95)),CCons ((Int32.of_int  (120)),CEmpty))),CCons ((data_45pipe_45operator ()),CCons (expressions,CEmpty))))))))) |> join);;
let rec translate_45list = fun translate_45expression expressions -> (match expressions with CEmpty -> (data_45cempty ()) | (CCons (first,rest)) -> (join (CCons ((data_45ccons ()),CCons ((data_45space ()),CCons ((CCons ((Int32.of_int  (40)),CEmpty)),CCons ((translate_45expression first),CCons ((data_45comma ()),CCons ((translate_45list translate_45expression rest),CCons ((CCons ((Int32.of_int  (41)),CEmpty)),CEmpty))))))))));;
let rec translate_45less_45than = fun translate_45expression expressions -> (match expressions with (CCons (a,(CCons (b,(CCons (then_45case,(CCons (else_45case,CEmpty)))))))) -> (join (CCons ((data_45if ()),CCons ((data_45space ()),CCons ((translate_45expression a),CCons ((data_45less_45than ()),CCons ((translate_45expression b),CCons ((data_45space ()),CCons ((data_45then ()),CCons ((data_45space ()),CCons ((translate_45expression then_45case),CCons ((data_45space ()),CCons ((data_45else ()),CCons ((data_45space ()),CCons ((translate_45expression else_45case),CEmpty))))))))))))))) | _95 -> (data_45compile_45error ()));;
let rec translate_45constructor = fun translator name -> (fun (_x) -> _x |> (list_45map translator) |> (string_45join (data_45comma ())) |> wrap_45in_45brackets |> (fun parameters -> (CCons ((prefix_45constructor (escape_45identifier name)),CCons ((data_45space ()),CCons (parameters,CEmpty))))) |> join |> wrap_45in_45brackets);;
let rec translate_45pattern = fun pattern -> (match pattern with (CCapture (name,_95)) -> (escape_45identifier name) | (CIntegerPattern (integer,_95)) -> (join (CCons ((string_45from_45int32 integer),CCons ((CCons ((Int32.of_int  (108)),CEmpty)),CEmpty)))) | (CConstructorPattern (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructorPattern (name,patterns,_95)) -> ((translate_45constructor translate_45pattern name) patterns));;
let rec translate_45rule = fun translate_45expression rule -> (match rule with (CPair (pattern,expression)) -> (join (CCons ((translate_45pattern pattern),CCons ((data_45arrow ()),CCons ((translate_45expression expression),CEmpty))))));;
let rec translate_45match_45expression = fun translate_45expression expression -> (fun (_x) -> _x |> (list_45map (translate_45rule translate_45expression)) |> (string_45join (data_45vertical_45bar ())) |> (fun rules -> (CCons ((match_45string ()),CCons ((translate_45expression expression),CCons ((data_45with ()),CCons (rules,CEmpty)))))) |> (string_45join (data_45space ())));;
let rec translate_45function_45application_39 = fun translate_45expression expressions -> (match expressions with (CCons (no_45args_45function,CEmpty)) -> (join (CCons ((translate_45expression no_45args_45function),CCons ((data_45space ()),CCons ((wrap_45in_45brackets CEmpty),CEmpty))))) | _95 -> (string_45join (data_45space ()) (list_45map translate_45expression expressions)));;
let rec translate_45function_45application = fun translate_45expression expressions -> (match expressions with (CCons ((CIdentifier (name,_95)),rest)) -> (match (string_45equal_63 name (data_45pipe ())) with CTrue -> ((translate_45pipe translate_45expression) rest) | CFalse -> (match (string_45equal_63 name (data_45list ())) with CTrue -> (translate_45list translate_45expression rest) | CFalse -> (match (string_45equal_63 name (data_45int32_45less_45than ())) with CTrue -> (translate_45less_45than translate_45expression rest) | CFalse -> (translate_45function_45application_39 translate_45expression expressions)))) | _95 -> (translate_45function_45application_39 translate_45expression expressions));;
let rec translate_45argument_45list = fun arguments -> (match (list_45empty_63 arguments) with CTrue -> (wrap_45in_45brackets CEmpty) | CFalse -> (string_45join (data_45space ()) (list_45map escape_45identifier arguments)));;
let rec translate_45lambda = fun translate_45expression arguments expression -> (join (CCons ((data_45fun ()),CCons ((data_45space ()),CCons ((translate_45argument_45list arguments),CCons ((data_45arrow ()),CCons ((translate_45expression expression),CEmpty)))))));;
let rec translate_45expression = fun expression -> (match expression with (CLambda (arguments,expression,_95)) -> (wrap_45in_45brackets (translate_45lambda translate_45expression arguments expression)) | (CConstructor (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructor (name,expressions,_95)) -> ((translate_45constructor translate_45expression name) expressions) | (CFunctionApplication (expressions,_95)) -> (wrap_45in_45brackets (translate_45function_45application translate_45expression expressions)) | (CIntegerConstant (integer,_95)) -> (wrap_45in_45brackets (join (CCons ((data_45int32 ()),CCons ((data_45space ()),CCons ((wrap_45in_45brackets (string_45from_45int32 integer)),CEmpty)))))) | (CIdentifier (name,_95)) -> (translate_45identifier name) | (CMatch (expression,rules,_95)) -> (wrap_45in_45brackets ((translate_45match_45expression translate_45expression expression) rules)));;
let rec translate_45function_45definition = fun name arguments expression -> (join (CCons ((data_45let_45rec ()),CCons (name,CCons ((data_45equals ()),CCons ((translate_45lambda translate_45expression arguments expression),CCons ((data_45definition_45end ()),CEmpty)))))));;
let rec translate_45simple_45type = fun name parameters -> (match (list_45any_63 (string_45equal_63 name) parameters) with CFalse -> (escape_45identifier name) | CTrue -> (with_45apostrophe (escape_45identifier name)));;
let rec translate_45complex_45types = fun translate_45types name -> (fun (_x) -> _x |> (translate_45types (data_45comma ())) |> wrap_45in_45brackets |> (fun types -> (CCons (types,CCons ((data_45space ()),CCons ((escape_45identifier name),CEmpty))))) |> join);;
let rec translate_45function_45type = fun translate_45types return_45type -> (fun (_x) -> _x |> (fun argument_45types -> (list_45concat argument_45types (CCons (return_45type,CEmpty)))) |> (translate_45types (data_45arrow ())) |> wrap_45in_45brackets);;
let rec translate_45type = fun translate_45types parameters _type -> (match _type with (CSimpleType (name,_95)) -> (translate_45simple_45type name parameters) | (CComplexType (name,types,_95)) -> ((translate_45complex_45types translate_45types name) types) | (CFunctionType (argument_45types,return_45type,_95)) -> ((translate_45function_45type translate_45types return_45type) argument_45types));;
let rec translate_45types = fun parameters separator -> (fun (_x) -> _x |> (list_45map (translate_45type (translate_45types parameters) parameters)) |> (string_45join separator));;
let rec translate_45type_45parameter = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> name | (CExistentialParameter (name,_95)) -> name);;
let rec translate_45complex_45constructor_45definition = fun name _type types parameters -> (join (CCons ((prefix_45constructor (escape_45identifier name)),CCons ((data_45colon ()),CCons (((translate_45types (list_45map translate_45type_45parameter parameters) (data_45star ())) types),CCons ((data_45arrow ()),CCons (_type,CEmpty)))))));;
let rec translate_45constructor_45definition = fun _type parameters constructor -> (match constructor with (CSimpleConstructor (name,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CComplexConstructor (name,types,_95)) -> (translate_45complex_45constructor_45definition name _type types parameters));;
let rec translate_45constructor_45definitions = fun _type parameters -> (fun (_x) -> _x |> (list_45map (translate_45constructor_45definition _type parameters)) |> (string_45join (data_45vertical_45bar ())));;
let rec translate_45type_45parameter_45for_45definition = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> (escape_45identifier name) | (CExistentialParameter (_95,_95_95)) -> CEmpty);;
let rec translate_45type_45parameters = fun () -> (fun (_x) -> _x |> (list_45map translate_45type_45parameter_45for_45definition) |> (list_45filter not_45empty_63) |> (list_45map with_45apostrophe) |> (string_45join (data_45comma ())));;
let rec translate_45type_45name = fun name parameters -> (match ((translate_45type_45parameters ()) parameters) with CEmpty -> (escape_45identifier name) | parameters -> (join (CCons ((wrap_45in_45brackets parameters),CCons ((data_45space ()),CCons ((escape_45identifier name),CEmpty))))));;
let rec translate_45type_45definition = fun name parameters constructors -> (join (CCons ((data_45type ()),CCons ((data_45space ()),CCons ((translate_45type_45name name parameters),CCons ((data_45equals ()),CCons (((translate_45constructor_45definitions (translate_45type_45name name parameters) parameters) constructors),CCons ((data_45definition_45end ()),CEmpty))))))));;
let rec translate_45definition = fun definition -> (match definition with (CResult ((CFunctionDefinition (name,arguments,expression,_95)))) -> (CResult ((translate_45function_45definition (escape_45identifier name) arguments expression))) | (CResult ((CExportDefinition (name,arguments,expression,_95)))) -> (CResult ((translate_45function_45definition name arguments expression))) | (CResult ((CTypeDefinition (name,parameters,constructors,_95)))) -> (CResult ((translate_45type_45definition name parameters constructors))) | (CError (error)) -> (CError (error)));;
let rec validate_45reserved_45identifiers_45when_45not = fun as_95minimal -> (match as_95minimal with CTrue -> (fun definition -> definition) | CFalse -> (fun definition -> (validate_45reserved_45identifiers definition)));;
let rec to_ocaml = fun definitions source as_95minimal -> ((fun (_x) -> _x |> (list_45map (fun (_x) -> _x |> (validate_45reserved_45identifiers_45when_45not as_95minimal) |> translate_45definition)) |> result_45concat |> (result_45map (string_45join (CCons ((Int32.of_int  (10)),CEmpty))))) definitions);;

let _read_line ic =
    try Some (input_line ic)
    with End_of_file -> None

let _read_lines ic =
    let rec loop acc =
        match _read_line ic with
        | Some line -> loop (line :: acc)
        | None -> List.rev acc
    in
        loop [];;

let _stdin_string = String.concat "\n" (_read_lines stdin);;

let rec _string_to_list_i = fun input i result ->
    if i > 0 then
        let sub_input = (String.sub input 0 ((String.length input) - 1)) in
            _string_to_list_i sub_input (i - 1) (CCons ((Int32.of_int (Char.code (String.get input i))), result))
    else
        CCons ((Int32.of_int (Char.code (String.get input i))), result);;

let _string_to_list = fun input ->
    if String.length input == 0
    then CEmpty
    else _string_to_list_i input ((String.length input) - 1) CEmpty;;

let rec _list_to_string_r = fun input result ->
    match input with
          CCons(x, rest) ->
            let string_from_int = (String.make 1 (Char.chr (Int32.to_int x))) in
            let new_result = (String.concat "" (result :: string_from_int :: [])) in
                (_list_to_string_r rest new_result)
        | CEmpty -> result;;

let _list_to_string = fun input -> (_list_to_string_r input "");;

let _stdin_list = _string_to_list _stdin_string;;

let parse' str = stringify_45parse_45errors (sexps_45to_45definitions (parse str));;
let getenv name = try (Sys.getenv name) with Not_found -> ""
let as_minimal = if getenv "REUSE_MINIMAL" = "true" then CTrue else CFalse;;

let output = to_ocaml (parse' _stdin_list) _stdin_list as_minimal in
    match output with
        CResult (source) -> Printf.printf "%s" (_list_to_string source) ; exit 0
      | CError (error) -> Printf.eprintf "%s" (_list_to_string error) ; exit 1;;

