
(def sym-int32-less-than () -10000)

(def prefix-type-variable (identifier)
     (string-prepend 39 (string-prepend 84 (symbol-name identifier))))

(def prefix-constructor (constructor)
     (string-prepend 67 constructor))

(def reserved-identifiers ()
     (list data-assert data-asr data-begin data-constraint data-do data-done data-downto data-type data-if
           data-then data-else data-with data-of data-end data-in data-fun data-let data-open data-and
           data-or data-as data-class data-exception data-external data-false data-true data-for data-function
           data-functor data-if data-include data-inherit data-initializer data-land data-lazy data-lor data-lsl
           data-lsr data-lxor data-method data-mod data-module data-mutable data-new data-nonrec data-object
           data-private data-rec data-sig data-struct data-try data-val data-virtual data-when data-while
           data-parser data-value data-to))

(def identifier-is-reserved? (id)
     (and (<= id -2000) (> id -3000)))

(def special-identifiers ()
     (list data-plus data-slash data-percent data-minus data-multiply data-ampersand))

(def identifier-is-special? (id)
     (and (<= id -3000) (> id -4000)))

(def escape-identifier (identifier)
     (match (identifier-is-reserved? (symbol-id identifier))
            True   (string-prepend 95 (symbol-name identifier))
            False  (string-flatmap escape-char (symbol-name identifier))))

(def special-identifier-map ()
     (dictionary-of (list
        (Pair (data-plus) (data-int32-plus))
        (Pair (data-slash) (data-int32-divide))
        (Pair (data-percent) (data-int32-modulus))
        (Pair (data-minus) (data-int32-minus))
        (Pair (data-multiply) (data-int32-multiply))
        (Pair (data-ampersand) (data-int32-and))
     )))

(def translate-identifier (identifier)
     (match (identifier-is-special? (symbol-id identifier))
            True   (match (dictionary-get (symbol-name identifier) (special-identifier-map))
                          (Some translation)  translation
                          None                (escape-identifier identifier))
            False  (escape-identifier identifier)))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join (list (data-if)
                            (data-space)
                            (translate-expression a)
                            (data-less-than)
                            (translate-expression b)
                            (data-space)
                            (data-then)
                            (data-space)
                            (translate-expression then-case)
                            (data-space)
                            (data-else)
                            (data-space)
                            (translate-expression else-case)))
            _
                (data-compile-error)))

(def translate-constructor (translator identifier)
     (pipe (list-map translator)
           (string-join (data-comma))
           wrap-in-brackets
           (fn (parameters)
               (list (prefix-constructor (escape-identifier identifier))
                     (data-space)
                     parameters))
           join
           wrap-in-brackets))

(def translate-pattern (pattern)
     (match pattern
            (Capture sym)
                (escape-identifier sym)
            (IntegerPattern integer _)
                (join (list (string-from-int32 integer) (string-of-char 108)))
            (ConstructorPattern sym Empty _)
                (prefix-constructor (escape-identifier sym))
            (ConstructorPattern sym patterns _)
                ((translate-constructor translate-pattern sym) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join (list (translate-pattern pattern) (data-arrow) (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (string-join (data-vertical-bar))
           (fn (rules)
               (list (data-match) (translate-expression expression) (data-with) rules))
           (string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (join (list (translate-expression no-args-function)
                                (data-space)
                                (wrap-in-brackets (string-empty))))
            _
                    (string-join (data-space) (list-map translate-expression expressions))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Variable sym) rest)
                    (match (= (symbol-id sym) (sym-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-empty? arguments)
            True  (wrap-in-brackets (string-empty))
            False (string-join (data-space) (list-map escape-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join (list (data-fun)
                 (data-space)
                 (translate-argument-list arguments)
                 (data-arrow)
                 (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets (translate-lambda translate-expression arguments expression))
            (Constructor sym Empty _)
                (prefix-constructor (escape-identifier sym))
            (Constructor sym expressions _)
                ((translate-constructor translate-expression sym) expressions)
            (FunctionApplication expressions _)
                (wrap-in-brackets (translate-function-application translate-expression expressions))
            (IntegerConstant integer _)
                (wrap-in-brackets (string-concat (string-from-int32 integer) (string-of-char 108)))
            (Variable sym)
                (translate-identifier sym)
            (Match expression rules _)
                (wrap-in-brackets ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (identifier arguments expression)
     (join (list (data-let-rec)
                 (escape-identifier identifier)
                 (data-equals)
                 (translate-lambda translate-expression arguments expression)
                 (data-definition-end))))

(def translate-simple-type (identifier parameters)
     (match (list-any? (. (symbol-equal? identifier) type-parameter-symbol) parameters)
            False  (escape-identifier identifier)
            True   (prefix-type-variable identifier)))

(def translate-complex-types (translate-types name types)
     ((pipe (translate-types (data-comma))
            wrap-in-brackets
            (fn (types) (list types (data-space) (escape-identifier name)))
            join)
        types))

(def translate-function-type (translate-types return-type argument-types)
     ((pipe (fn (argument-types)
                (list-concat argument-types (list return-type)))
            (translate-types (data-arrow))
            wrap-in-brackets)
        argument-types))

(def translate-type (translate-types parameters type)
     (match type
            (SimpleType sym)
                (translate-simple-type sym parameters)
            (ComplexType sym types _)
                (translate-complex-types translate-types sym types)
            (FunctionType argument-types return-type _)
                (translate-function-type translate-types return-type argument-types)))

(def translate-types (parameters separator types)
     ((pipe (list-map (translate-type (translate-types parameters) parameters))
            (string-join separator))
        types))

(def translate-complex-constructor-definition (name type types parameters)
     (join (list (prefix-constructor (escape-identifier name))
                 (data-colon)
                 (translate-types parameters (data-star) types)
                 (data-arrow)
                 type)))

(def translate-constructor-definition (type parameters constructor)
     (match constructor
            (SimpleConstructor sym)
                (prefix-constructor (escape-identifier sym))
            (ComplexConstructor sym types _)
                (translate-complex-constructor-definition sym type types parameters)))

(def translate-constructor-definitions (type parameters constructors)
     ((pipe (list-map (translate-constructor-definition type parameters))
            (string-join (data-vertical-bar)))
        constructors))

(def translate-type-parameter-for-definition (parameter)
     (match parameter
            (UniversalParameter sym)
                (prefix-type-variable sym)
            (ExistentialParameter _)
                (string-empty)))

(def translate-type-parameters (parameters)
     ((pipe (list-map translate-type-parameter-for-definition)
            (list-filter (. not string-empty?))
            (string-join (data-comma)))
        parameters))

(def translate-type-name' (name parameter-string)
     (match (string-empty? parameter-string)
            True
                (escape-identifier name)
            False
                (join (list (wrap-in-brackets parameter-string)
                            (data-space)
                            (escape-identifier name)))))

(def translate-type-name (name parameters)
     (translate-type-name' name (translate-type-parameters parameters)))

(def translate-type-definition (name parameters constructors)
     (join (list (data-type)
                 (data-space)
                 (translate-type-name name parameters)
                 (data-equals)
                 (translate-constructor-definitions (translate-type-name name parameters) parameters constructors)
                 (data-definition-end))))

(def translate-definition (definition)
     (match definition
            (FunctionDefinition identifier arguments expression _)
                (translate-function-definition identifier arguments expression)
            (TypeDefinition name parameters constructors _)
                (translate-type-definition name parameters constructors)
            (TargetDefinition _ data)
                (string-from-indexed-iterator data)))

(def generate-source (module-name definitions)
     ((pipe (list-map translate-definition)
            (string-join (string-of-char 10)))
        definitions))

(def internal-symbols ()
     (dictionary-set (data-int32-less-than) (Pair (sym-int32-less-than) (data-int32-less-than))
     (add-identifiers (reserved-identifiers) -2000
     (add-identifiers (special-identifiers) -3000
     (with-local-transform-keywords (keywords))))))

(def perform-transformations? () True)
