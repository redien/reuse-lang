
(def prefix-type-variable (string)
     (Cons 39 (Cons 84 string)))

(def prefix-constructor (constructor)
     (Cons 67 constructor))

(def string-is-reserved? (name)
     (list-any? (string-equal? name) (list
        (data-assert) (data-asr) (data-begin) (data-constraint) (data-do)
        (data-done) (data-downto) (data-type) (data-if) (data-then)
        (data-else) (data-with) (data-of) (data-end) (data-in) (data-fun)
        (data-let) (data-open) (data-and) (data-or) (data-as) (data-class)
        (data-exception) (data-external) (data-false) (data-true) (data-for)
        (data-function) (data-functor) (data-if) (data-include)
        (data-inherit) (data-initializer) (data-land) (data-lazy) (data-lor)
        (data-lsl) (data-lsr) (data-lxor) (data-method) (data-mod) (data-module)
        (data-mutable) (data-new) (data-nonrec) (data-object) (data-private)
        (data-rec) (data-sig) (data-struct) (data-try) (data-val) (data-virtual)
        (data-when) (data-while) (data-parser) (data-value)
     )))

(def escape-identifier (name)
     (match (string-is-reserved? name)
            True   (Cons 95 name)
            False  (list-flatmap escape-char name)))

(def translate-identifier (name)
     (match (string-equal? name (data-plus))
            True  (data-int32-plus)
            False
     (match (string-equal? name (data-slash))
            True  (data-int32-divide)
            False
     (match (string-equal? name (data-percent))
            True  (data-int32-modulus)
            False
     (match (string-equal? name (data-minus))
            True  (data-int32-minus)
            False
     (match (string-equal? name (data-multiply))
            True  (data-int32-multiply)
            False (escape-identifier name)))))))

(def translate-less-than (translate-expression expressions)
     (match expressions
            (Cons a (Cons b (Cons then-case (Cons else-case Empty))))
                (join (list (data-if)
                            (data-space)
                            (translate-expression a)
                            (data-less-than)
                            (translate-expression b)
                            (data-space)
                            (data-then)
                            (data-space)
                            (translate-expression then-case)
                            (data-space)
                            (data-else)
                            (data-space)
                            (translate-expression else-case)))
            _
                (data-compile-error)))

(def translate-constructor (translator name)
     (pipe (list-map translator)
           (string-join (data-comma))
           wrap-in-brackets
           (fn (parameters)
               (list (prefix-constructor (escape-identifier name))
                     (data-space)
                     parameters))
           join
           wrap-in-brackets))

(def translate-pattern (pattern)
     (match pattern
            (Capture name _)
                (escape-identifier name)
            (IntegerPattern integer _)
                (join (list (string-from-int32 integer) (list 108)))
            (ConstructorPattern name Empty _)
                (prefix-constructor (escape-identifier name))
            (ConstructorPattern name patterns _)
                ((translate-constructor translate-pattern name) patterns)))

(def translate-rule (translate-expression rule)
     (match rule
            (Pair pattern expression)
                 (join (list (translate-pattern pattern) (data-arrow) (translate-expression expression)))))

(def translate-match-expression (translate-expression expression)
     (pipe (list-map (translate-rule translate-expression))
           (string-join (data-vertical-bar))
           (fn (rules)
               (list (data-match) (translate-expression expression) (data-with) rules))
           (string-join (data-space))))

(def translate-function-application' (translate-expression expressions)
     (match expressions
            (Cons no-args-function Empty)
                    (join (list (translate-expression no-args-function)
                                (data-space)
                                (wrap-in-brackets Empty)))
            _
                    (string-join (data-space) (list-map translate-expression expressions))))

(def translate-function-application (translate-expression expressions)
     (match expressions
            (Cons (Identifier name _) rest)
                    (match (string-equal? name (data-int32-less-than))
                           True  (translate-less-than translate-expression rest)
                           False (translate-function-application' translate-expression expressions))
            _
                    (translate-function-application' translate-expression expressions)))

(def translate-argument-list (arguments)
     (match (list-empty? arguments)
            True  (wrap-in-brackets Empty)
            False (string-join (data-space) (list-map escape-identifier arguments))))

(def translate-lambda (translate-expression arguments expression)
     (join (list (data-fun)
                 (data-space)
                 (translate-argument-list arguments)
                 (data-arrow)
                 (translate-expression expression))))

(def translate-expression (expression)
     (match expression
            (Lambda arguments expression _)
                (wrap-in-brackets (translate-lambda translate-expression arguments expression))
            (Constructor name Empty _)
                (prefix-constructor (escape-identifier name))
            (Constructor name expressions _)
                ((translate-constructor translate-expression name) expressions)
            (FunctionApplication expressions _)
                (wrap-in-brackets (translate-function-application translate-expression expressions))
            (IntegerConstant integer _)
                (wrap-in-brackets (string-concat (string-from-int32 integer) (list 108)))
            (Identifier name _)
                (translate-identifier name)
            (Match expression rules _)
                (wrap-in-brackets ((translate-match-expression translate-expression expression) rules))))

(def translate-function-definition (name arguments expression)
     (join (list (data-let-rec)
                 name
                 (data-equals)
                 (translate-lambda translate-expression arguments expression)
                 (data-definition-end))))

(def translate-simple-type (name parameters)
     (match (list-any? (string-equal? name) parameters)
            False  (escape-identifier name)
            True   (prefix-type-variable name)))

(def translate-complex-types (translate-types name)
     (pipe (translate-types (data-comma))
           wrap-in-brackets
           (fn (types) (list types (data-space) (escape-identifier name)))
           join))

(def translate-function-type (translate-types return-type)
     (pipe (fn (argument-types)
               (list-concat argument-types (list return-type)))
           (translate-types (data-arrow))
           wrap-in-brackets))

(def translate-type (translate-types parameters type)
     (match type
            (SimpleType name _)
                (translate-simple-type name parameters)
            (ComplexType name types _)
                ((translate-complex-types translate-types name) types)
            (FunctionType argument-types return-type _)
                ((translate-function-type translate-types return-type) argument-types)))

(def translate-types (parameters separator)
     (pipe (list-map (translate-type (translate-types parameters) parameters))
           (string-join separator)))

(def translate-type-parameter (parameter)
     (match parameter
            (UniversalParameter name _)
                name
            (ExistentialParameter name _)
                name))

(def translate-complex-constructor-definition (name type types parameters)
     (join (list (prefix-constructor (escape-identifier name))
                 (data-colon)
                 ((translate-types (list-map translate-type-parameter parameters) (data-star)) types)
                 (data-arrow)
                 type)))

(def translate-constructor-definition (type parameters constructor)
     (match constructor
            (SimpleConstructor name _)
                (prefix-constructor (escape-identifier name))
            (ComplexConstructor name types _)
                (translate-complex-constructor-definition name type types parameters)))

(def translate-constructor-definitions (type parameters)
     (pipe (list-map (translate-constructor-definition type parameters))
           (string-join (data-vertical-bar))))

(def translate-type-parameter-for-definition (parameter)
     (match parameter
            (UniversalParameter name _)
                (prefix-type-variable name)
            (ExistentialParameter _ __)
                Empty))

(def translate-type-parameters ()
     (pipe (list-map translate-type-parameter-for-definition)
           (list-filter not-empty?)
           (string-join (data-comma))))

(def translate-type-name (name parameters)
     (match ((translate-type-parameters) parameters)
            Empty
                (escape-identifier name)
            parameters
                (join (list (wrap-in-brackets parameters)
                            (data-space)
                            (escape-identifier name)))))

(def translate-type-definition (name parameters constructors)
     (join (list (data-type)
                 (data-space)
                 (translate-type-name name parameters)
                 (data-equals)
                 ((translate-constructor-definitions (translate-type-name name parameters) parameters) constructors)
                 (data-definition-end))))

(def translate-definition (definition)
     (match definition
        (Result (FunctionDefinition name arguments expression _))
                (Result (translate-function-definition (escape-identifier name) arguments expression))
        (Result (ExportDefinition name arguments expression _))
                (Result (translate-function-definition name arguments expression))
        (Result (TypeDefinition name parameters constructors _))
                (Result (translate-type-definition name parameters constructors))
        (Error error)
                (Error error)))

(def validate-reserved-identifiers-when-not (as_minimal)
     (match as_minimal
            True   (fn (definition) definition)
            False  (fn (definition) (validate-reserved-identifiers definition))))

(export to_ocaml (definitions source as_minimal)
        ((pipe (list-map (validate-reserved-identifiers-when-not as_minimal))
               local-transforms
               (list-map translate-definition)
               result-concat
               (result-map (string-join (list 10))))
            definitions))
