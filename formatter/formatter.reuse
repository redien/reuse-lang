
(def stringify-error (error)
     (match error
            ParseErrorTooFewClosingBrackets   (data-ParseErrorTooFewClosingBrackets)
            ParseErrorTooManyClosingBrackets  (data-ParseErrorTooManyClosingBrackets)))

(def language-identifiers ()
     (list (Pair (data-def) (Pair -1 (data-def)))
           (Pair (data-typ) (Pair -2 (data-typ)))
           (Pair (data-fn) (Pair -3 (data-fn)))
           (Pair (data-match) (Pair -4 (data-match)))
           (Pair (data-exists) (Pair -5 (data-exists)))
           (Pair (data-pub) (Pair -6 (data-pub)))))

(def space ()
     (string-of-char 32))

(def newline ()
     (string-of-char 10))

(def indent (n)
     (string-concat (newline) (string-repeat (space) n)))

(def list-with-space (items)
     (wrap-in-brackets (string-join (space) items)))

(def list-without-space (items)
     (wrap-in-brackets (string-join (string-empty) items)))

(def add-modifiers (public? rest)
     (match public?
          True
               (Cons (data-pub) rest)
          False
               rest))

(def format-pattern (pattern)
     (match pattern
            (List patterns _)
               (list-with-space (list-map format-pattern patterns))
            x
               (stringify-sexp x)))

(def format-match-rule (format-expression depth rule)
     (match rule
            (Pair pattern expression)
               (string-join (string-empty) (list
                    (format-pattern pattern)
                    (indent (+ depth 3))
                    (format-expression (+ depth 3) expression)))))

(def format-match-rules (format-expression depth rules)
     (string-join (indent depth) (list-map (format-match-rule format-expression depth) rules)))

(def format-expression (depth expression)
     (match expression
            (List (Cons (Symbol -3 _ __) (Cons arguments (Cons expression Empty))) ____)
                (list-without-space (list
                    (data-fn)
                    (space)
                    (stringify-sexp arguments)
                    (indent (+ depth 4))
                    (format-expression (+ depth 4) expression)))
            (List (Cons (Symbol -4 _ __) (Cons expression rules)) range)
                (list-without-space (list
                    (data-match)
                    (space)
                    (format-expression depth expression)
                    (indent (+ depth 7))
                    (format-match-rules format-expression (+ depth 7) (list-pairs rules))))
            (List expressions range)
                (list-with-space (list-map (format-expression depth) expressions))
            x
                (stringify-sexp x)))

(def format-type (type)
     (match type
          (List (Cons (Symbol -3 _ __) (Cons (List argument-types ___) (Cons return-type Empty))) ____)
               (list-with-space (list
                    (data-fn)
                    (list-with-space (list-map format-type argument-types))
                    (format-type return-type)))
          (List (Cons identifier parameters) _)
               (list-with-space (Cons (stringify-sexp identifier) (list-map format-type parameters)))
          x
               (stringify-sexp x)))

(def format-type-constructor (constructor)
     (match constructor
            (List (Cons identifier types) _)
               (list-with-space (Cons (stringify-sexp identifier) (list-map format-type types)))
            x
               (stringify-sexp x)))

(def format-type-parameter (parameter)
     (match parameter
          (List (Cons (Symbol -5 _ __) (Cons identifier Empty)) ___)
               (list-with-space (list (data-exists) (stringify-sexp identifier)))
          _
               (stringify-sexp parameter)))

(def format-type-definition-name (name parameters)
     (match parameters
          Empty
               (stringify-sexp name)
          _
               (list-with-space (Cons (stringify-sexp name) (list-map format-type-parameter parameters)))))

(def format-type-definition-constructors (constructors)
     (match constructors
          (Cons constructor Empty)
               (string-concat (space) (format-type-constructor constructor))
          _
               (string-concat (indent 5) (string-join (indent 5) (list-map format-type-constructor constructors)))))

(def format-type-definition (public? name parameters constructors)
     (list-without-space (add-modifiers public? (list
          (data-typ)
          (space)
          (format-type-definition-name name parameters)
          (format-type-definition-constructors constructors)))))

(def format-function-definition (public? name arguments expression)
     (list-without-space (add-modifiers public? (list
          (data-def)
          (space)
          (stringify-sexp name)
          (space)
          (wrap-in-brackets (string-join (space) (list-map stringify-sexp arguments)))
          (indent 5)
          (format-expression 5 expression)))))

(def format-definition (definition)
     (match definition
            (List (Cons (Symbol -6 _ __) (Cons (Symbol -2 _ __) (Cons (List (Cons name parameters) ___) constructors))) range)
               (format-type-definition True name parameters constructors)
            (List (Cons (Symbol -6 _ __)(Cons (Symbol -2 _ __) (Cons name constructors))) range)
               (format-type-definition True name Empty constructors)
            (List (Cons (Symbol -2 _ __) (Cons (List (Cons name parameters) ___) constructors)) range)
               (format-type-definition False name parameters constructors)
            (List (Cons (Symbol -2 _ __) (Cons name constructors)) range)
               (format-type-definition False name Empty constructors)
            
            (List (Cons (Symbol -6 _ __) (Cons (Symbol -1 _ __) (Cons name (Cons (List arguments ___) (Cons expression Empty))))) range)
               (format-function-definition True name arguments expression)
            (List (Cons (Symbol -1 _ __) (Cons name (Cons (List arguments ___) (Cons expression Empty)))) range)
               (format-function-definition False name arguments expression)

            _
               (string-empty)))

(def format-file (definitions)
     (match (list-is-empty? definitions)
            True
               (string-empty)
            False
               ((pipe (list-map format-definition)
                      (string-join (string-repeat (newline) 2))
                      ((flip string-concat) (newline))
                      (string-concat (newline)))
                     definitions)))

(def format-source-file (file)
     ((pipe source-file-content
            (parse-sexps (Pair 0 (dictionary-of (language-identifiers))))
            (result-bimap (pipe pair-right format-file string-to-slice) stringify-error))
          file))

(def result-from-pair (pair)
     (result-map (pair-cons (pair-left pair)) (pair-right pair)))

(pub def format-source-files (files)
     (result-concat (list-map (pipe pair-dup (pair-bimap source-file-path format-source-file) result-from-pair) files)))
