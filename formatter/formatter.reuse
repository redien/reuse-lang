
(def stringify-error (error)
     (match error
            (MalformedDefinitionError            _)        (data-MalformedDefinitionError            )
            (MalformedTypeDefinitionError        _)        (data-MalformedTypeDefinitionError        )
            (MalformedFunctionDefinitionError    _ __)     (data-MalformedFunctionDefinitionError    )
            (MalformedFunctionNameError          _)        (data-MalformedFunctionNameError          )
            (MalformedExpressionError            _)        (data-MalformedExpressionError            )
            (MalformedMatchExpressionError       _)        (data-MalformedMatchExpressionError       )
            (MalformedSymbolError                _)        (data-MalformedSymbolError                )
            (MalformedConstructorError           _)        (data-MalformedConstructorError           )
            (MalformedTypeError                  _)        (data-MalformedTypeError                  )
            (ErrorNotDefined                     _ __ ___) (data-ErrorNotDefined                     )
            (ErrorAlreadyDefined                 _)        (data-ErrorAlreadyDefined                 )
            (ErrorReservedIdentifier             _ __ ___) (data-ErrorReservedIdentifier             )
             MalformedSexpTooFewClosingBrackets            (data-MalformedSexpTooFewClosingBrackets  )
             MalformedSexpTooManyClosingBrackets           (data-MalformedSexpTooManyClosingBrackets )))

(def space ()
     (string-of-char 32))

(def indent (n)
     (string-concat (string-of-char 10) (string-repeat (space) n)))

(def add-modifiers (public? rest)
     (match public?
          True
               (Cons (data-pub) rest)
          False
               rest))

(def format-expression (expression)
     (match expression
            (IntegerConstant integer _)
                (string-from-int32 integer)
            (Variable identifier)
                (space)
            (Lambda arguments expression range)
                (space)
            (Match expression pairs range)
                (space)
            (Constructor identifier expressions range)
                (space)
            (FunctionApplication expressions range)
                (space)))

(def format-definition (definition)
     (match definition
            (TypeDefinition identifier public? parameters constructors _)
               (space)
            (FunctionDefinition name public? arguments expression range)
               (wrap-in-brackets (string-join (string-empty) (add-modifiers public? (list
                    (data-def)
                    (space)
                    (identifier-name name)
                    (space)
                    (wrap-in-brackets (string-join (space) (list-map identifier-name arguments)))
                    (indent 5)
                    (format-expression expression)))))
            (TargetDefinition _ data)
                (string-from-slice data)))

(def format-file (definitions)
     (match (list-is-empty? definitions)
            True
               (string-empty)
            False
               ((pipe (list-map format-definition)
                      (string-join (string-repeat (string-of-char 10) 2))
                      ((flip string-concat) (string-of-char 10)))
                     definitions)))

(def definition-file-path (definition)
     (source-reference-file-path (definition-source-reference definition)))

(def definitions-partition-by-file-name (definitions)
     (list-partition-by (fn (a b) (string-equal? (definition-file-path a) (definition-file-path b)))))

(def first-file-path (definitions)
     (maybe-map definition-file-path (list-first definitions)))

(def format-definitions (definitions)
     (match (first-file-path definitions)
            (Some file-path)
               (list (Pair file-path (string-to-slice (format-file definitions))))
            None
               Empty))

(pub def format-source-files (files)
     (result-bimap format-definitions
                   stringify-error
                   (parse-source-files (list-empty) files)))
