type _slice = bytes;;
let slice_empty x = Bytes.empty;;
let slice_of x = if x >= 0l && x < 256l then Bytes.make 1 (Char.chr (Int32.to_int x)) else Bytes.make 1 (Char.chr 0);;
let slice_size slice = Int32.of_int (Bytes.length slice);;
let slice_get slice index =
    if index >= 0l && index < (slice_size slice) then
        Int32.of_int (Char.code (Bytes.get slice (Int32.to_int index)))
    else
        0l ;;
let slice_concat a b = Bytes.concat (Bytes.empty) [a; b];;
let slice_foldl f ys xs =
    let rec slice_foldl i f ys xs =
        if i < Bytes.length xs then
            slice_foldl (i + 1) f (f (Int32.of_int (Char.code (Bytes.get xs i))) ys) xs
        else
            ys in
    slice_foldl 0 f ys xs;;
let slice_subslice slice s e =
    let size = slice_size slice in
    let s' = if s < 0l then 0l else (if s >= size then (Int32.sub size 1l) else s) in
    let e' = if e < 0l then 0l else (if e >= size then (Int32.sub size 1l) else e) in
    if Int32.sub e s <= 0l then
        slice_empty ()
    else
        Bytes.sub slice (Int32.to_int s') (Int32.to_int e');;
let rec id = fun x7 -> x7;;
let rec const = fun a b -> a;;
let rec flip = fun f -> (fun b2 a2 -> (f a2 b2));;
let rec x = fun f2 g x8 -> (f2 (g x8));;
let rec fix = fun f3 -> (f3 (fix f3));;
type boolean = True | False;;
let rec not = fun a3 -> (match a3 with True -> False | False -> True);;
let rec and2 = fun a4 b3 -> (match a4 with True -> b3 | False -> False);;
let rec or2 = fun a5 b4 -> (match a5 with True -> True | False -> b4);;
let rec x2 = fun a6 b5 -> (if a6<b5 then True else False);;
let rec x3 = fun a7 b6 -> (x2 b6 a7);;
let rec x4 = fun a8 b7 -> (not (or2 (x2 a8 b7) (x3 a8 b7)));;
let rec x5 = fun a9 b8 -> (or2 (x2 a9 b8) (x4 a9 b8));;
let rec x6 = fun a10 b9 -> (or2 (x3 a10 b9) (x4 a10 b9));;
type ('Ta11,'Tb10) pair = Pair : 'Ta11 * 'Tb10 -> ('Ta11,'Tb10) pair;;
let rec pair_cons = fun a12 b11 -> (Pair (a12,b11));;
let rec pair_left = fun pair2 -> (match pair2 with (Pair (x9,x10)) -> x9);;
let rec pair_right = fun pair3 -> (match pair3 with (Pair (x11,x12)) -> x12);;
let rec pair_map = fun f4 pair4 -> (match pair4 with (Pair (x13,y)) -> (f4 x13 y));;
let rec pair_bimap = fun f5 g2 pair5 -> (match pair5 with (Pair (x14,y2)) -> (Pair ((f5 x14),(g2 y2))));;
let rec pair_map_left = fun f6 pair6 -> (match pair6 with (Pair (x15,y3)) -> (Pair ((f6 x15),y3)));;
let rec pair_map_right = fun f7 pair7 -> (match pair7 with (Pair (x16,y4)) -> (Pair (x16,(f7 y4))));;
let rec pair_swap = fun pair8 -> (match pair8 with (Pair (x17,y5)) -> (Pair (y5,x17)));;
type ('Ta13) maybe = Some : 'Ta13 -> ('Ta13) maybe | None;;
let rec maybe_map = fun f8 maybe2 -> (match maybe2 with (Some (x18)) -> (Some ((f8 x18))) | None -> None);;
let rec maybe_flatmap = fun f9 maybe3 -> (match maybe3 with (Some (x19)) -> (f9 x19) | None -> None);;
let rec maybe_bind = fun maybe4 f10 -> (maybe_flatmap f10 maybe4);;
let rec maybe_return = fun x20 -> (Some (x20));;
let rec maybe_filter = fun f11 maybe5 -> (match maybe5 with (Some (x21)) -> (match (f11 x21) with True -> maybe5 | False -> None) | None -> None);;
let rec maybe_else = fun f12 maybe6 -> (match maybe6 with None -> (f12 ()) | (Some (x22)) -> x22);;
let rec maybe_or_else = fun value2 maybe7 -> (match maybe7 with None -> value2 | (Some (x23)) -> x23);;
type ('Tcollection,'Telement) iterable_class = IterableClass : ('Tcollection -> (('Telement) maybe,'Tcollection) pair) -> ('Tcollection,'Telement) iterable_class;;
let rec iterable_next = fun class2 collection2 -> (match class2 with (IterableClass (next)) -> (next collection2));;
type ('Telement2) indexed_iterator = IndexedIterator : ('Titerable,'Telement2) iterable_class * 'Titerable * int32 -> ('Telement2) indexed_iterator;;
let rec indexed_iterator_from_iterable = fun i iterable2 -> (IndexedIterator (i,iterable2,(0l)));;
let rec indexed_iterator_next = fun iterator -> (match iterator with (IndexedIterator (i2,iterable3,index)) -> (match (iterable_next i2 iterable3) with (Pair (value3,next_iterable)) -> (Pair (value3,(IndexedIterator (i2,next_iterable,(Int32.add index (1l))))))));;
let rec indexed_iterator_index = fun iterator2 -> (match iterator2 with (IndexedIterator (x24,x25,index2)) -> index2);;
type ('Ta14) list = Cons : 'Ta14 * ('Ta14) list -> ('Ta14) list | Empty;;
let rec list_empty = fun () -> Empty;;
let rec list_cons = fun x26 xs -> (Cons (x26,xs));;
let rec list_from = fun x27 -> (Cons (x27,Empty));;
let rec list_from_range2 = fun from to2 rest -> (match (x3 to2 from) with True -> (list_from_range2 from (Int32.sub to2 (1l)) (Cons ((Int32.sub to2 (1l)),rest))) | False -> rest);;
let rec list_from_range = fun from2 to3 -> (list_from_range2 from2 to3 Empty);;
let rec list_first = fun list2 -> (match list2 with (Cons (x28,x29)) -> (Some (x28)) | Empty -> None);;
let rec list_rest = fun list3 -> (match list3 with (Cons (x30,rest2)) -> rest2 | Empty -> Empty);;
let rec list_last = fun list4 -> (match list4 with Empty -> None | (Cons (x31,Empty)) -> (Some (x31)) | (Cons (x32,rest3)) -> (list_last rest3));;
let rec list_is_empty = fun list5 -> (match list5 with (Cons (x33,x34)) -> False | Empty -> True);;
let rec list_size2 = fun list6 size -> (match list6 with (Cons (x35,rest4)) -> (list_size2 rest4 (Int32.add size (1l))) | Empty -> size);;
let rec list_size = fun list7 -> (list_size2 list7 (0l));;
let rec list_foldrk = fun f13 initial list8 continue -> (match list8 with Empty -> (continue initial) | (Cons (x36,xs2)) -> (list_foldrk f13 initial xs2 (fun value4 -> (f13 x36 value4 continue))));;
let rec list_foldlk = fun f14 initial2 list9 continue2 -> (match list9 with Empty -> (continue2 initial2) | (Cons (x37,xs3)) -> (f14 x37 initial2 (fun new_value -> (list_foldlk f14 new_value xs3 continue2))));;
let rec list_foldr = fun f15 initial3 list10 -> (list_foldrk (fun x38 value5 continue3 -> (continue3 (f15 x38 value5))) initial3 list10 (fun x39 -> x39));;
let rec list_foldl = fun f16 initial4 list11 -> (match list11 with Empty -> initial4 | (Cons (x40,xs4)) -> (list_foldl f16 (f16 x40 initial4) xs4));;
let rec list_concat = fun a15 b12 -> (list_foldr list_cons b12 a15);;
let rec list_reverse = fun list12 -> (list_foldl list_cons Empty list12);;
let rec list_map = fun f17 list13 -> (list_foldr (fun head tail -> (list_cons (f17 head) tail)) Empty list13);;
let rec list_flatmap = fun f18 list14 -> (list_foldr (fun head2 tail2 -> (list_concat (f18 head2) tail2)) Empty list14);;
let rec list_flatten = fun list15 -> (list_foldr list_concat Empty list15);;
let rec list_split_at2 = fun n a16 b13 -> (match (x3 n (0l)) with True -> (match b13 with (Cons (x41,xs5)) -> (list_split_at2 (Int32.sub n (1l)) (Cons (x41,a16)) xs5) | Empty -> (Pair ((list_reverse a16),b13))) | False -> (Pair ((list_reverse a16),b13)));;
let rec list_split_at = fun n2 xs6 -> (list_split_at2 n2 Empty xs6);;
let rec list_partition2 = fun n3 xs7 partitions -> (match (list_split_at n3 xs7) with (Pair (Empty,x42)) -> partitions | (Pair (partition,xs8)) -> (list_partition2 n3 xs8 (Cons (partition,partitions))));;
let rec list_partition = fun n4 xs9 -> (list_reverse (list_partition2 n4 xs9 Empty));;
let rec list_partition_by2 = fun x43 xs10 -> (match xs10 with (Cons (partition2,rest5)) -> (Cons ((Cons (x43,partition2)),rest5)) | Empty -> xs10);;
let rec list_partition_by = fun f19 xs11 -> (match xs11 with Empty -> Empty | (Cons (x44,Empty)) -> (Cons ((Cons (x44,Empty)),Empty)) | (Cons (x45,(Cons (x46,rest6)))) -> (match (f19 x45 x46) with True -> (list_partition_by2 x45 (list_partition_by f19 (Cons (x46,rest6)))) | False -> (Cons ((Cons (x45,Empty)),(list_partition_by f19 (Cons (x46,rest6)))))));;
let rec list_skip = fun count list16 -> (pair_right (list_split_at count list16));;
let rec list_take = fun count2 list17 -> (pair_left (list_split_at count2 list17));;
let rec list_zip2 = fun xs12 ys collected -> (match xs12 with Empty -> collected | (Cons (x47,xs13)) -> (match ys with Empty -> collected | (Cons (y6,ys2)) -> (list_zip2 xs13 ys2 (Cons ((Pair (x47,y6)),collected)))));;
let rec list_zip = fun xs14 ys3 -> (list_reverse (list_zip2 xs14 ys3 Empty));;
let rec list_pairs = fun xs15 -> (match xs15 with (Cons (a17,(Cons (b14,rest7)))) -> (Cons ((Pair (a17,b14)),(list_pairs rest7))) | x48 -> Empty);;
let rec list_find_first = fun predicate list18 -> (match list18 with Empty -> None | (Cons (x49,xs16)) -> (match (predicate x49) with True -> (Some (x49)) | False -> (list_find_first predicate xs16)));;
let rec list_filter = fun f20 list19 -> (list_foldr (fun head3 tail3 -> (match (f20 head3) with True -> (Cons (head3,tail3)) | False -> tail3)) Empty list19);;
let rec list_exclude = fun f21 list20 -> (list_filter (fun x50 -> (not (f21 x50))) list20);;
let rec list_any = fun f22 list21 -> (match (list_find_first f22 list21) with (Some (x51)) -> True | x52 -> False);;
let rec list_every = fun f23 list22 -> (match (list_find_first (fun x53 -> (not (f23 x53))) list22) with (Some (x54)) -> False | x55 -> True);;
let rec list_from_maybe = fun maybe8 -> (match maybe8 with (Some (x56)) -> (Cons (x56,Empty)) | None -> Empty);;
let rec list_collect_from_indexed_iterator2 = fun predicate2 iterator3 initial5 -> (match (indexed_iterator_next iterator3) with (Pair (None,x57)) -> (Pair (iterator3,initial5)) | (Pair ((Some (x58)),next2)) -> (match (predicate2 x58) with True -> (list_collect_from_indexed_iterator2 predicate2 next2 (Cons (x58,initial5))) | False -> (Pair (iterator3,initial5))));;
let rec list_collect_from_indexed_iterator = fun predicate3 iterator4 -> (match (list_collect_from_indexed_iterator2 predicate3 iterator4 Empty) with (Pair (iterator5,result2)) -> (Pair (iterator5,(list_reverse result2))));;
type string_node = FTValue : int32 -> string_node | FTNode2 : int32 * string_node * string_node -> string_node | FTNode3 : int32 * string_node * string_node * string_node -> string_node;;
type string = FTEmpty | FTSingle : string_node -> string | FTDeep : (string_node) list * string * (string_node) list -> string;;
let rec string_empty = fun () -> FTEmpty;;
let rec string_of_char = fun character -> (FTSingle ((FTValue (character))));;
let rec string_node_size = fun node -> (match node with (FTValue (x59)) -> (1l) | (FTNode2 (size2,x60,x61)) -> size2 | (FTNode3 (size3,x62,x63,x64)) -> size3);;
let rec string_node2 = fun a18 b15 -> (FTNode2 ((Int32.add (string_node_size a18) (string_node_size b15)),a18,b15));;
let rec string_node3 = fun a19 b16 c -> (FTNode3 ((Int32.add (string_node_size a19) (Int32.add (string_node_size b16) (string_node_size c))),a19,b16,c));;
let rec string_prepend_node = fun a20 tree -> (match tree with FTEmpty -> (FTSingle (a20)) | (FTSingle (x65)) -> (FTDeep ((Cons (a20,Empty)),FTEmpty,(Cons (x65,Empty)))) | (FTDeep (first,middle,last)) -> (match first with (Cons (b17,(Cons (c2,(Cons (d,(Cons (e,Empty)))))))) -> (FTDeep ((Cons (a20,(Cons (b17,Empty)))),(string_prepend_node (string_node3 c2 d e) middle),last)) | x66 -> (FTDeep ((Cons (a20,first)),middle,last))));;
let rec string_prepend = fun char string2 -> (string_prepend_node (FTValue (char)) string2);;
let rec string_append_node = fun a21 tree2 -> (match tree2 with FTEmpty -> (FTSingle (a21)) | (FTSingle (x67)) -> (FTDeep ((Cons (x67,Empty)),FTEmpty,(Cons (a21,Empty)))) | (FTDeep (first2,middle2,last2)) -> (match last2 with (Cons (b18,(Cons (c3,(Cons (d2,(Cons (e2,Empty)))))))) -> (FTDeep (first2,(string_append_node (string_node3 e2 d2 c3) middle2),(Cons (a21,(Cons (b18,Empty)))))) | x68 -> (FTDeep (first2,middle2,(Cons (a21,last2))))));;
let rec string_append = fun char2 string3 -> (string_append_node (FTValue (char2)) string3);;
let rec string_first_node = fun node2 -> (match node2 with (FTValue (x69)) -> x69 | (FTNode2 (x70,x71,x72)) -> (string_first_node x71) | (FTNode3 (x73,x74,x75,x76)) -> (string_first_node x74));;
let rec string_first = fun string4 -> (match string4 with FTEmpty -> None | (FTSingle (node3)) -> (Some ((string_first_node node3))) | (FTDeep (first3,middle3,last3)) -> (maybe_map string_first_node (list_first first3)));;
let rec string_rest_node = fun node4 -> (match node4 with (FTValue (x77)) -> None | (FTNode2 (x78,a22,b19)) -> (match (string_rest_node a22) with (Some (node5)) -> (Some ((string_node2 node5 b19))) | None -> (Some (b19))) | (FTNode3 (x79,a23,b20,c4)) -> (match (string_rest_node a23) with (Some (node6)) -> (Some ((string_node3 node6 b20 c4))) | None -> (Some ((string_node2 b20 c4)))));;
let rec string_rest = fun string5 -> (match string5 with FTEmpty -> string5 | (FTSingle (node7)) -> (match (string_rest_node node7) with (Some (node8)) -> (FTSingle (node8)) | None -> FTEmpty) | (FTDeep ((Cons (node9,rest8)),middle4,last4)) -> (match (string_rest_node node9) with (Some (node10)) -> (FTDeep ((Cons (node10,rest8)),middle4,last4)) | None -> (match rest8 with Empty -> (list_foldr string_append_node middle4 last4) | x80 -> (FTDeep (rest8,middle4,last4)))) | x81 -> string5);;
let rec string_foldr_node = fun f24 node11 identity -> (match node11 with (FTValue (a24)) -> (f24 a24 identity) | (FTNode2 (x82,a25,b21)) -> (string_foldr_node f24 a25 (string_foldr_node f24 b21 identity)) | (FTNode3 (x83,a26,b22,c5)) -> (string_foldr_node f24 a26 (string_foldr_node f24 b22 (string_foldr_node f24 c5 identity))));;
let rec string_foldr = fun f25 identity2 tree3 -> (match tree3 with FTEmpty -> identity2 | (FTSingle (x84)) -> (string_foldr_node f25 x84 identity2) | (FTDeep (first4,middle5,last5)) -> (list_foldr (string_foldr_node f25) (string_foldr f25 (list_foldl (string_foldr_node f25) identity2 last5) middle5) first4));;
let rec string_foldl_node = fun f26 node12 identity3 -> (match node12 with (FTValue (a27)) -> (f26 a27 identity3) | (FTNode2 (x85,b23,a28)) -> (string_foldl_node f26 a28 (string_foldl_node f26 b23 identity3)) | (FTNode3 (x86,c6,b24,a29)) -> (string_foldl_node f26 a29 (string_foldl_node f26 b24 (string_foldl_node f26 c6 identity3))));;
let rec string_foldl = fun f27 identity4 tree4 -> (match tree4 with FTEmpty -> identity4 | (FTSingle (x87)) -> (string_foldl_node f27 x87 identity4) | (FTDeep (first5,middle6,last6)) -> (list_foldr (string_foldl_node f27) (string_foldl f27 (list_foldl (string_foldl_node f27) identity4 first5) middle6) last6));;
let rec string_size = fun string6 -> (match string6 with FTEmpty -> (0l) | (FTSingle (x88)) -> (string_node_size x88) | (FTDeep (first6,middle7,last7)) -> (Int32.add (list_foldr Int32.add (0l) (list_map string_node_size first6)) (Int32.add (list_foldr Int32.add (0l) (list_map string_node_size last7)) (string_size middle7))));;
let rec string_concat_nodes = fun nodes -> (match nodes with (Cons (a30,(Cons (b25,Empty)))) -> (Cons ((string_node2 a30 b25),Empty)) | (Cons (a31,(Cons (b26,(Cons (c7,Empty)))))) -> (Cons ((string_node3 a31 b26 c7),Empty)) | (Cons (a32,(Cons (b27,(Cons (c8,(Cons (d3,Empty)))))))) -> (Cons ((string_node2 a32 b27),(Cons ((string_node2 c8 d3),Empty)))) | (Cons (a33,(Cons (b28,(Cons (c9,rest9)))))) -> (Cons ((string_node3 a33 b28 c9),(string_concat_nodes rest9))) | x89 -> Empty);;
type ('Ta34,'Tb29,'Tc10) triple = Triple : 'Ta34 * 'Tb29 * 'Tc10 -> ('Ta34,'Tb29,'Tc10) triple;;
let rec string_concat2 = fun a35 nodes2 b30 -> (match (Triple (a35,nodes2,b30)) with (Triple (FTEmpty,nodes3,b31)) -> (list_foldr string_prepend_node b31 nodes3) | (Triple (a36,nodes4,FTEmpty)) -> (list_foldl string_append_node a36 nodes4) | (Triple ((FTSingle (x90)),nodes5,b32)) -> (string_prepend_node x90 (list_foldr string_prepend_node b32 nodes5)) | (Triple (a37,nodes6,(FTSingle (x91)))) -> (string_append_node x91 (list_foldl string_append_node a37 nodes6)) | (Triple ((FTDeep (first1,middle1,last1)),nodes7,(FTDeep (first22,middle22,last22)))) -> (FTDeep (first1,(string_concat2 middle1 (string_concat_nodes (list_concat (list_reverse last1) (list_concat nodes7 first22))) middle22),last22)));;
let rec string_concat = fun a38 b33 -> (string_concat2 a38 Empty b33);;
let rec string_is_empty = fun string7 -> (match (string_first string7) with (Some (x92)) -> False | None -> True);;
let rec string_any = fun predicate4 string8 -> (string_foldl (fun x93 b34 -> (or2 (predicate4 x93) b34)) False string8);;
let rec string_every = fun predicate5 string9 -> (string_foldl (fun x94 b35 -> (and2 (predicate5 x94) b35)) True string9);;
let rec string_to_list = fun string10 -> (string_foldr list_cons Empty string10);;
let rec string_from_list = fun list23 -> (list_foldl string_append (string_empty ()) list23);;
let rec string_skip = fun count3 string11 -> (match string11 with FTEmpty -> FTEmpty | x95 -> (match (x3 count3 (0l)) with True -> (string_skip (Int32.sub count3 (1l)) (string_rest string11)) | False -> string11));;
let rec string_take2 = fun count4 string12 taken -> (match (x3 count4 (0l)) with True -> (match (string_first string12) with (Some (char3)) -> (string_take2 (Int32.sub count4 (1l)) (string_rest string12) (string_append char3 taken)) | None -> taken) | False -> taken);;
let rec string_take = fun count5 string13 -> (string_take2 count5 string13 (string_empty ()));;
let rec string_reverse = fun string14 -> (string_foldl string_prepend (string_empty ()) string14);;
let rec string_substring = fun start size4 string15 -> (string_take size4 (string_skip start string15));;
let rec string_join = fun separator strings -> (match strings with (Cons (first7,rest10)) -> (list_foldl (fun string16 joined -> (string_concat joined (string_concat separator string16))) first7 rest10) | Empty -> (string_empty ()));;
let rec string_flatmap = fun f28 string17 -> (string_foldl (fun x96 xs17 -> (string_concat xs17 (f28 x96))) (string_empty ()) string17);;
let rec string_split2 = fun separator2 list24 current parts -> (match list24 with Empty -> (list_reverse (Cons ((list_reverse current),parts))) | (Cons (c11,rest11)) -> (match (x4 separator2 c11) with True -> (string_split2 separator2 rest11 Empty (Cons ((list_reverse current),parts))) | False -> (string_split2 separator2 rest11 (Cons (c11,current)) parts)));;
let rec string_split = fun separator3 string18 -> (list_map string_from_list (string_split2 separator3 (string_to_list string18) Empty Empty));;
let rec string_trim_start2 = fun list25 -> (match list25 with (Cons (x97,xs18)) -> (match (x4 x97 (32l)) with True -> (string_trim_start2 xs18) | False -> list25) | Empty -> list25);;
let rec string_trim_start = fun string19 -> (string_from_list (string_trim_start2 (string_to_list string19)));;
let rec string_trim_end = fun string20 -> (string_reverse (string_trim_start (string_reverse string20)));;
let rec string_trim = fun string21 -> (string_trim_start (string_trim_end string21));;
let rec string_equal = fun a39 b36 -> (match (string_first a39) with (Some (xa)) -> (match (string_first b36) with (Some (xb)) -> (and2 (x4 xa xb) (string_equal (string_rest a39) (string_rest b36))) | None -> (string_is_empty a39)) | None -> (string_is_empty b36));;
let rec string_index_of = fun index3 substring string22 -> (match (x6 index3 (string_size string22)) with True -> None | False -> (match (string_equal substring (string_substring index3 (string_size substring) string22)) with True -> (Some (index3)) | False -> (string_index_of (Int32.add index3 (1l)) substring string22)));;
let rec string_point_is_digit = fun point -> (match (x3 point (47l)) with False -> False | True -> (match (x2 point (58l)) with True -> True | False -> False));;
let rec string_to_int322 = fun string_to_int323 string23 accumulator x98 -> (string_to_int323 string23 (Some ((Int32.add (Int32.mul (10l) accumulator) (Int32.sub x98 (48l))))));;
let rec string_to_int324 = fun string24 accumulator2 -> (match string24 with Empty -> accumulator2 | (Cons (x99,rest12)) -> (maybe_flatmap (fun accumulator3 -> ((fun x50 -> ((maybe_flatmap (string_to_int322 string_to_int324 rest12 accumulator3)) ((maybe_filter string_point_is_digit) x50))) (Some (x99)))) accumulator2));;
let rec string_to_int325 = fun string25 -> (match string25 with (Cons (45l,string26)) -> (match (list_is_empty string26) with True -> None | False -> (maybe_map (fun x100 -> (Int32.mul (-1l) x100)) (string_to_int325 string26))) | (Cons (x101,rest13)) -> (match (string_point_is_digit x101) with True -> (string_to_int324 string25 (Some ((0l)))) | False -> None) | Empty -> None);;
let rec string_to_int32 = fun string27 -> (string_to_int325 (string_to_list string27));;
let rec string_from_int322 = fun integer string28 -> (match (x3 integer (9l)) with True -> (string_from_int322 (Int32.div integer (10l)) (Cons ((Int32.add (Int32.rem integer (10l)) (48l)),string28))) | False -> (Cons ((Int32.add integer (48l)),string28)));;
let rec string_from_int323 = fun integer2 -> (match (x2 integer2 (0l)) with True -> (match (x4 integer2 (-2147483648l)) with True -> (Cons ((45l),(Cons ((50l),(Cons ((49l),(Cons ((52l),(Cons ((55l),(Cons ((52l),(Cons ((56l),(Cons ((51l),(Cons ((54l),(Cons ((52l),(Cons ((56l),Empty)))))))))))))))))))))) | False -> (Cons ((45l),(string_from_int323 (Int32.mul integer2 (-1l)))))) | False -> (string_from_int322 integer2 Empty));;
let rec string_from_int32 = fun integer3 -> (string_from_list (string_from_int323 integer3));;
let rec string_collect_from_slice2 = fun predicate6 index4 slice2 initial6 -> (match (x2 index4 (slice_size slice2)) with False -> (Pair (index4,initial6)) | True -> (match (predicate6 (slice_get slice2 index4)) with True -> (string_collect_from_slice2 predicate6 (Int32.add index4 (1l)) slice2 (string_append (slice_get slice2 index4) initial6)) | False -> (Pair (index4,initial6))));;
let rec string_collect_from_slice = fun predicate7 index5 slice3 -> (string_collect_from_slice2 predicate7 index5 slice3 (string_empty ()));;
let rec string_to_slice = fun string29 -> (string_foldl (fun c12 slice4 -> (slice_concat slice4 (slice_of c12))) (slice_empty ()) string29);;
let rec string_from_slice = fun slice5 -> (slice_foldl string_append (string_empty ()) slice5);;
let rec string_collect_from_indexed_iterator2 = fun predicate8 iterator6 initial7 -> (match (indexed_iterator_next iterator6) with (Pair (None,x102)) -> (Pair (iterator6,initial7)) | (Pair ((Some (x103)),next3)) -> (match (predicate8 x103) with True -> (string_collect_from_indexed_iterator2 predicate8 next3 (string_append x103 initial7)) | False -> (Pair (iterator6,initial7))));;
let rec string_collect_from_indexed_iterator = fun predicate9 iterator7 -> (string_collect_from_indexed_iterator2 predicate9 iterator7 (string_empty ()));;
let rec string_from_indexed_iterator = fun iterator8 -> (pair_right (string_collect_from_indexed_iterator (fun x104 -> True) iterator8));;
let rec string_iterable = fun () -> (IterableClass ((fun string30 -> (Pair ((string_first string30),(string_rest string30))))));;
let rec string_from_boolean = fun boolean2 -> (match boolean2 with True -> (string_from_list (Cons ((84l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty))))))))) | False -> (string_from_list (Cons ((70l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty))))))))))));;
type ('Tv,'Te3) result = Result : 'Tv -> ('Tv,'Te3) result | Error : 'Te3 -> ('Tv,'Te3) result;;
let rec result_lift = fun result3 -> (Result (result3));;
let rec result_error = fun error2 -> (Error (error2));;
let rec result_prod = fun return result4 -> (match result4 with (Result (m)) -> m | (Error (error3)) -> (return (Error (error3))));;
let rec result_bimap = fun f29 g3 result5 -> (match result5 with (Result (x105)) -> (Result ((f29 x105))) | (Error (y7)) -> (Error ((g3 y7))));;
let rec result_either = fun f30 g4 result6 -> (match result6 with (Result (x106)) -> (f30 x106) | (Error (x107)) -> (g4 x107));;
let rec result_map = fun f31 result7 -> (result_bimap f31 id result7);;
let rec result_flatmap = fun f32 result8 -> (match result8 with (Result (x108)) -> (f32 x108) | (Error (error4)) -> (Error (error4)));;
let rec result_or_else = fun value6 result9 -> (match result9 with (Result (x109)) -> x109 | (Error (x110)) -> value6);;
let rec result_error2 = fun result10 -> (match result10 with (Error (x111)) -> True | x112 -> False);;
let rec result_filter_list = fun list26 -> (list_foldr (fun result11 new_list -> (match result11 with (Result (x113)) -> (Cons (x113,new_list)) | x114 -> new_list)) Empty list26);;
let rec result_concat = fun list27 -> (match (list_filter result_error2 list27) with (Cons ((Error (error5)),x115)) -> (Error (error5)) | (Cons ((Result (x116)),x117)) -> (Result (Empty)) | Empty -> (Result ((result_filter_list list27))));;
let rec result_of_maybe = fun error6 maybe9 -> (match maybe9 with (Some (x118)) -> (Result (x118)) | None -> (Error (error6)));;
let rec result_bind = fun result12 f33 -> (result_flatmap f33 result12);;
let rec result_return = fun value7 -> (result_lift value7);;
type ('Ts,'Tv2) state = Operation : ('Ts -> ('Ts,'Tv2) pair) -> ('Ts,'Tv2) state;;
let rec state_run = fun state2 operation -> (match operation with (Operation (f34)) -> (f34 state2));;
let rec state_final_value = fun initial_state operation2 -> (match (state_run initial_state operation2) with (Pair (x119,value8)) -> value8);;
let rec state_return = fun value9 -> (Operation ((fun state3 -> (Pair (state3,value9)))));;
let rec state_bind = fun operation3 f35 -> (Operation ((fun state4 -> (match (state_run state4 operation3) with (Pair (new_state,new_value2)) -> (state_run new_state (f35 new_value2))))));;
let rec state_get = fun () -> (Operation ((fun state5 -> (Pair (state5,state5)))));;
let rec state_set = fun state6 -> (Operation ((fun x120 -> (Pair (state6,state6)))));;
let rec state_modify = fun f36 -> (state_bind (state_get ()) (fun state7 -> (state_set (f36 state7))));;
let rec state_let = fun value10 f37 -> (state_bind (state_return value10) f37);;
let rec state_foldr = fun f38 initial_value operations -> (list_foldr (fun operation4 chain -> (state_bind operation4 (fun x121 -> (state_bind chain (fun xs19 -> (state_return (f38 x121 xs19))))))) (state_return initial_value) operations);;
let rec state_foreach = fun f39 xs20 -> (state_foldr list_cons Empty (list_map f39 xs20));;
let rec state_flatmap = fun f40 operation5 -> (state_bind operation5 f40);;
let rec state_map = fun f41 operation6 -> (state_flatmap (fun x50 -> (state_return (f41 x50))) operation6);;
let rec state_lift = fun value11 -> (state_return value11);;
type array_color = ArrayRed | ArrayBlack;;
type ('Tvalue12) array = ArrayEmpty | ArrayTree : array_color * ('Tvalue12) array * (int32,'Tvalue12) pair * ('Tvalue12) array -> ('Tvalue12) array;;
let rec array_empty = fun () -> ArrayEmpty;;
let rec array_make_black = fun array2 -> (match array2 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x122,a40,y8,b37)) -> (ArrayTree (ArrayBlack,a40,y8,b37)));;
let rec array_balance = fun array3 -> (match array3 with (ArrayTree (ArrayBlack,(ArrayTree (ArrayRed,(ArrayTree (ArrayRed,a41,x123,b38)),y9,c13)),z,d4)) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a41,x123,b38)),y9,(ArrayTree (ArrayBlack,c13,z,d4)))) | (ArrayTree (ArrayBlack,(ArrayTree (ArrayRed,a42,x124,(ArrayTree (ArrayRed,b39,y10,c14)))),z2,d5)) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a42,x124,b39)),y10,(ArrayTree (ArrayBlack,c14,z2,d5)))) | (ArrayTree (ArrayBlack,a43,x125,(ArrayTree (ArrayRed,(ArrayTree (ArrayRed,b40,y11,c15)),z3,d6)))) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a43,x125,b40)),y11,(ArrayTree (ArrayBlack,c15,z3,d6)))) | (ArrayTree (ArrayBlack,a44,x126,(ArrayTree (ArrayRed,b41,y12,(ArrayTree (ArrayRed,c16,z4,d7)))))) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a44,x126,b41)),y12,(ArrayTree (ArrayBlack,c16,z4,d7)))) | rest14 -> rest14);;
let rec array_set2 = fun x127 value13 array4 -> (match array4 with ArrayEmpty -> (ArrayTree (ArrayRed,ArrayEmpty,(Pair (x127,value13)),ArrayEmpty)) | (ArrayTree (color,a45,y13,b42)) -> (match (x2 x127 (pair_left y13)) with True -> (array_balance (ArrayTree (color,(array_set2 x127 value13 a45),y13,b42))) | False -> (match (x3 x127 (pair_left y13)) with True -> (array_balance (ArrayTree (color,a45,y13,(array_set2 x127 value13 b42)))) | False -> (ArrayTree (color,a45,(Pair (x127,value13)),b42)))));;
let rec array_set = fun x128 value14 array5 -> (array_make_black (array_set2 x128 value14 array5));;
let rec array_get = fun x129 array6 -> (match array6 with ArrayEmpty -> None | (ArrayTree (x130,a46,(Pair (y14,value15)),b43)) -> (match (x2 x129 y14) with True -> (array_get x129 a46) | False -> (match (x3 x129 y14) with True -> (array_get x129 b43) | False -> (Some (value15)))));;
let rec array_min = fun array7 default -> (match array7 with ArrayEmpty -> default | (ArrayTree (x131,ArrayEmpty,y15,x132)) -> y15 | (ArrayTree (x133,a47,x134,x135)) -> (array_min a47 default));;
let rec array_remove_min = fun array8 -> (match array8 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x136,ArrayEmpty,y16,b44)) -> b44 | (ArrayTree (color2,a48,y17,b45)) -> (array_balance (ArrayTree (color2,(array_remove_min a48),y17,b45))));;
let rec array_remove_root = fun array9 -> (match array9 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x137,ArrayEmpty,y18,ArrayEmpty)) -> ArrayEmpty | (ArrayTree (x138,a49,y19,ArrayEmpty)) -> a49 | (ArrayTree (x139,ArrayEmpty,y20,b46)) -> b46 | (ArrayTree (color3,a50,y21,b47)) -> (array_balance (ArrayTree (color3,a50,(array_min b47 y21),(array_remove_min b47)))));;
let rec array_remove2 = fun x140 array10 -> (match array10 with ArrayEmpty -> ArrayEmpty | (ArrayTree (color4,a51,y22,b48)) -> (match (x2 x140 (pair_left y22)) with True -> (array_balance (ArrayTree (color4,(array_remove2 x140 a51),y22,b48))) | False -> (match (x3 x140 (pair_left y22)) with True -> (array_balance (ArrayTree (color4,a51,y22,(array_remove2 x140 b48)))) | False -> (array_remove_root array10))));;
let rec array_remove = fun x141 array11 -> (array_make_black (array_remove2 x141 array11));;
let rec array_entries = fun array12 -> (match array12 with ArrayEmpty -> Empty | (ArrayTree (x142,a52,entry,b49)) -> (list_flatten (Cons ((array_entries a52),(Cons ((Cons (entry,Empty)),(Cons ((array_entries b49),Empty))))))));;
let rec array_from_list2 = fun entries index6 array13 -> (match entries with (Cons (x143,xs21)) -> (array_from_list2 xs21 (Int32.add index6 (1l)) (array_set index6 x143 array13)) | Empty -> array13);;
let rec array_from_list = fun entries2 -> (array_from_list2 entries2 (0l) ArrayEmpty);;
let rec array_of = fun entries3 -> (list_foldl (fun entry2 array14 -> (match entry2 with (Pair (key,value16)) -> (array_set key value16 array14))) ArrayEmpty entries3);;
let rec array_singleton = fun index7 value17 -> (ArrayTree (ArrayBlack,ArrayEmpty,(Pair (index7,value17)),ArrayEmpty));;
let rec array_get_or = fun index8 default2 array15 -> (match (array_get index8 array15) with (Some (value18)) -> value18 | None -> default2);;
let rec array_size = fun array16 -> (list_size (array_entries array16));;
type ('Tvalue19) dictionary = Dictionary : (((string,'Tvalue19) pair) list) array -> ('Tvalue19) dictionary;;
let rec dictionary_empty = fun () -> (Dictionary ((array_empty ())));;
let rec dictionary_bucket_from_key = fun key2 -> (string_foldl (fun c17 h -> (Int32.add (Int32.mul h (33l)) c17)) (5381l) key2);;
let rec dictionary_set = fun key3 new_value3 dictionary2 -> (match dictionary2 with (Dictionary (array17)) -> (match (dictionary_bucket_from_key key3) with bucket_id -> (match (array_get bucket_id array17) with (Some (bucket)) -> (match (list_filter (fun entry3 -> (not (string_equal (pair_left entry3) key3))) bucket) with new_bucket -> (Dictionary ((array_set bucket_id (Cons ((Pair (key3,new_value3)),new_bucket)) array17)))) | None -> (Dictionary ((array_set bucket_id (Cons ((Pair (key3,new_value3)),Empty)) array17))))));;
let rec dictionary_get = fun key4 dictionary3 -> (match dictionary3 with (Dictionary (array18)) -> (match (dictionary_bucket_from_key key4) with bucket_id2 -> (match (array_get bucket_id2 array18) with (Some (bucket2)) -> (maybe_map pair_right (list_find_first (fun entry4 -> (string_equal (pair_left entry4) key4)) bucket2)) | None -> None)));;
let rec dictionary_remove = fun key5 dictionary4 -> (match dictionary4 with (Dictionary (array19)) -> (match (dictionary_bucket_from_key key5) with bucket_id3 -> (match (array_get bucket_id3 array19) with (Some (bucket3)) -> (match (list_filter (fun entry5 -> (not (string_equal (pair_left entry5) key5))) bucket3) with new_bucket2 -> (Dictionary ((array_set bucket_id3 new_bucket2 array19)))) | None -> dictionary4)));;
let rec dictionary_entries = fun dictionary5 -> (match dictionary5 with (Dictionary (array20)) -> (list_flatten (list_map pair_right (array_entries array20))));;
let rec dictionary_of = fun entries4 -> (list_foldl (pair_map dictionary_set) (dictionary_empty ()) entries4);;
let rec dictionary_singleton = fun key6 value20 -> (dictionary_set key6 value20 (dictionary_empty ()));;
let rec dictionary_get_or = fun key7 default3 dictionary6 -> (match (dictionary_get key7 dictionary6) with (Some (value21)) -> value21 | None -> default3);;
let rec dictionary_size = fun dictionary7 -> (list_size (dictionary_entries dictionary7));;

let ml_string_to_reuse s =
    Seq.fold_left (fun a b -> string_append (Int32.of_int (Char.code b)) a)
                  (string_empty ())
                  (String.to_seq s);;

let ml_list_to_reuse l =
    List.fold_right list_cons l Empty;;

let reuse_string_to_ml s =
    Buffer.contents (string_foldl (fun a b -> Buffer.add_char b (Char.chr (Int32.to_int a)); b) (Buffer.create 32) s);;

let reuse_boolean_to_ml b =
    match b with
      | True -> true
      | False -> false;;

let ml_string_get s index =
    let i = (Int32.to_int index) in
    if i < (String.length s) && i >= 0 then
            Some (Int32.of_int (Char.code (String.get s i)))
    else
            None;;

let ml_string_next iterable =
    match iterable with
        Pair (s, index) -> Pair (
            (ml_string_get s index),
            Pair (s, Int32.add index 1l));;
let ml_string_to_indexed_iterator s = indexed_iterator_from_iterable (IterableClass (ml_string_next)) (Pair (s, 0l));;

let rec whitespace = fun character2 -> (match character2 with 32l -> True | 13l -> True | 9l -> True | 10l -> True | x144 -> False);;
let rec atom_character = fun character3 -> (match character3 with 40l -> False | 41l -> False | x145 -> (not (whitespace character3)));;
type range = Range : int32 * int32 -> range;;
type sexp = Symbol : int32 * string * range -> sexp | Integer : int32 * range -> sexp | List : (sexp) list * range -> sexp;;
type parse_error = ParseErrorTooFewClosingBrackets | ParseErrorTooManyClosingBrackets;;
let rec intern_string = fun index9 next_index name symbol_state next4 -> (match symbol_state with (Pair (token,symbols)) -> (match (dictionary_get name symbols) with (Some ((Pair (token2,name2)))) -> (next4 next_index symbol_state (Symbol (token2,name2,(Range (index9,next_index))))) | None -> (next4 next_index (Pair ((Int32.add token (1l)),(dictionary_set name (Pair (token,name)) symbols))) (Symbol (token,name,(Range (index9,next_index)))))));;
let rec parse_symbol = fun index10 slice6 symbols2 next5 end2 -> (match (string_collect_from_slice atom_character index10 slice6) with (Pair (next_index2,name3)) -> (match (string_to_int32 name3) with (Some (integer4)) -> (next5 next_index2 symbols2 (Integer (integer4,(Range (index10,next_index2))))) | None -> (match (string_is_empty name3) with False -> (intern_string index10 next_index2 name3 symbols2 next5) | True -> (end2 index10))));;
let rec parse_list = fun index11 slice7 parse_sexps2 symbols3 error7 next6 -> (parse_sexps2 index11 slice7 symbols3 Empty error7 (fun next_index3 symbols4 expressions -> (next6 next_index3 symbols4 (List (expressions,(Range ((Int32.sub index11 (1l)),next_index3)))))));;
let rec parse_expression = fun depth index12 slice8 parse_sexps3 symbols5 error8 next7 end3 -> (match (x2 index12 (slice_size slice8)) with False -> (match depth with 0l -> (end3 index12) | x146 -> (error8 ParseErrorTooFewClosingBrackets)) | True -> (match (slice_get slice8 index12) with 40l -> (parse_list (Int32.add index12 (1l)) slice8 (parse_sexps3 (Int32.add depth (1l))) symbols5 error8 next7) | 41l -> (match depth with 0l -> (error8 ParseErrorTooManyClosingBrackets) | x147 -> (end3 (Int32.add index12 (1l)))) | x148 -> (match (whitespace x148) with True -> (parse_expression depth (Int32.add index12 (1l)) slice8 parse_sexps3 symbols5 error8 next7 end3) | False -> (parse_symbol index12 slice8 symbols5 next7 end3))));;
let rec parse_sexps4 = fun depth2 index13 slice9 symbols6 expressions2 error9 end4 -> (parse_expression depth2 index13 slice9 parse_sexps4 symbols6 error9 (fun index14 symbols7 expression2 -> (parse_sexps4 depth2 index14 slice9 symbols7 (Cons (expression2,expressions2)) error9 end4)) (fun index15 -> (end4 index15 symbols6 (list_reverse expressions2))));;
let rec parse_sexps = fun symbols8 slice10 -> (parse_sexps4 (0l) (0l) slice10 symbols8 Empty (fun error10 -> (Error (error10))) (fun x149 symbols9 expressions3 -> (Result ((Pair (symbols9,expressions3))))));;
let rec wrap_in_brackets = fun string31 -> (string_concat (string_of_char (40l)) (string_concat string31 (string_of_char (41l))));;
let rec stringify_sexp = fun stringify_sexps2 expression3 -> (match expression3 with (Symbol (x150,name4,x151)) -> name4 | (Integer (integer5,x152)) -> (string_from_int32 integer5) | (List (expressions4,x153)) -> (wrap_in_brackets (stringify_sexps2 expressions4)));;
let rec stringify_sexps = fun expressions5 -> (string_join (string_of_char (32l)) (list_map (stringify_sexp stringify_sexps) expressions5));;
let rec parts_are_empty = fun parts2 -> (match parts2 with Empty -> True | (Cons (part,Empty)) -> (string_is_empty part) | x154 -> False);;
let rec transform_line = fun line -> (match (string_split (124l) line) with (Cons (name5,parts3)) -> (string_concat (string_from_list (Cons ((40l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((32l),(Cons ((100l),(Cons ((97l),(Cons ((116l),(Cons ((97l),(Cons ((45l),Empty))))))))))))))))))))) (string_concat (string_trim name5) (string_concat (string_from_list (Cons ((32l),(Cons ((40l),(Cons ((41l),(Cons ((32l),(Cons ((40l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((45l),(Cons ((102l),(Cons ((114l),(Cons ((111l),(Cons ((109l),(Cons ((45l),(Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((32l),Empty))))))))))))))))))))))))))))))))))))))))))))) (match (parts_are_empty parts3) with True -> (string_from_list (Cons ((69l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),(Cons ((41l),(Cons ((41l),Empty))))))))))))))) | False -> (string_concat (string_from_list (Cons ((40l),(Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((32l),Empty))))))))))))) (string_concat (string_join (string_of_char (32l)) (list_map string_from_int32 (string_to_list (string_join (string_of_char (124l)) parts3)))) (string_from_list (Cons ((41l),(Cons ((41l),(Cons ((41l),Empty))))))))))))) | Empty -> (string_empty ()));;
let rec string_gen = fun stdin_iterator -> (match (string_collect_from_slice (fun x155 -> True) (0l) stdin_iterator) with (Pair (x156,stdin)) -> (Result ((string_join (string_of_char (10l)) (list_map transform_line (string_split (10l) stdin))))));;
type module_reference = ModulePath : string * boolean -> module_reference | ModuleSelf;;
type source_reference = SourceReference : string * module_reference -> source_reference;;
type identifier = Identifier : int32 * string * source_reference * range * (int32) maybe -> identifier;;
type ast_type = SimpleType : identifier -> ast_type | ComplexType : identifier * (ast_type) list * range -> ast_type | FunctionType : (ast_type) list * ast_type * range -> ast_type;;
type type_parameter = UniversalParameter : identifier -> type_parameter | ExistentialParameter : identifier -> type_parameter;;
type constructor = SimpleConstructor : identifier -> constructor | ComplexConstructor : identifier * (ast_type) list * range -> constructor;;
type pattern = Capture : identifier -> pattern | IntegerPattern : int32 * range -> pattern | ConstructorPattern : identifier * (pattern) list * range -> pattern;;
type expression = IntegerConstant : int32 * range -> expression | Variable : identifier -> expression | Lambda : (identifier) list * expression * range -> expression | Match : expression * ((pattern,expression) pair) list * range -> expression | Constructor : identifier * (expression) list * range -> expression | FunctionApplication : (expression) list * range -> expression;;
type definition = TypeDefinition : identifier * boolean * (type_parameter) list * (constructor) list * range -> definition | FunctionDefinition : identifier * boolean * (identifier) list * expression * range -> definition | TargetDefinition : source_reference * _slice -> definition;;
let rec source_reference_file_path = fun source_reference2 -> (match source_reference2 with (SourceReference (file_path,x157)) -> file_path);;
let rec source_reference_module = fun source_reference3 -> (match source_reference3 with (SourceReference (x158,module2)) -> module2);;
let rec identifier_token = fun identifier2 -> (match identifier2 with (Identifier (token3,x159,x160,x161,x162)) -> token3);;
let rec identifier_name = fun identifier3 -> (match identifier3 with (Identifier (x163,name6,x164,x165,x166)) -> name6);;
let rec identifier_with_name = fun name7 identifier4 -> (match identifier4 with (Identifier (x167,x168,x169,x170,x171)) -> (Identifier (x167,name7,x169,x170,x171)));;
let rec identifier_source_reference = fun identifier5 -> (match identifier5 with (Identifier (x172,x173,source_reference4,x174,x175)) -> source_reference4);;
let rec identifier_module = fun identifier6 -> (source_reference_module (identifier_source_reference identifier6));;
let rec identifier_range = fun identifier7 -> (match identifier7 with (Identifier (x176,x177,x178,range2,x179)) -> range2);;
let rec identifier_id = fun identifier8 -> (match identifier8 with (Identifier (x180,x181,x182,x183,id2)) -> id2);;
let rec identifier_is = fun identifier9 id3 -> (match (identifier_id identifier9) with (Some (a53)) -> (x4 a53 id3) | None -> False);;
let rec identifier_with_id = fun id4 identifier10 -> (match identifier10 with (Identifier (x184,x185,x186,x187,x188)) -> (Identifier (x184,x185,x186,x187,id4)));;
let rec identifier_equal = fun a54 b50 -> (x4 (identifier_token a54) (identifier_token b50));;
let rec module_equal = fun a55 b51 -> (match a55 with (ModulePath (a56,x189)) -> (match b51 with (ModulePath (b52,x190)) -> (string_equal a56 b52) | ModuleSelf -> False) | ModuleSelf -> (match b51 with (ModulePath (x191,x192)) -> False | ModuleSelf -> True));;
let rec definition_source_reference = fun definition2 -> (match definition2 with (TypeDefinition (identifier11,x193,x194,x195,x196)) -> (identifier_source_reference identifier11) | (FunctionDefinition (identifier12,x197,x198,x199,x200)) -> (identifier_source_reference identifier12) | (TargetDefinition (source_reference5,x201)) -> source_reference5);;
let rec definition_module = fun definition3 -> (source_reference_module (definition_source_reference definition3));;
let rec definition_public = fun definition4 -> (match definition4 with (TypeDefinition (x202,public,x203,x204,x205)) -> public | (FunctionDefinition (x206,public2,x207,x208,x209)) -> public2 | (TargetDefinition (x210,x211)) -> False);;
let rec definition_identifier = fun definition5 -> (match definition5 with (TypeDefinition (identifier13,x212,x213,x214,x215)) -> (Some (identifier13)) | (FunctionDefinition (identifier14,x216,x217,x218,x219)) -> (Some (identifier14)) | (TargetDefinition (x220,x221)) -> None);;
let rec constructor_identifier = fun constructor2 -> (match constructor2 with (ComplexConstructor (identifier15,x222,x223)) -> identifier15 | (SimpleConstructor (identifier16)) -> identifier16);;
let rec type_parameter_identifier = fun parameter -> (match parameter with (UniversalParameter (identifier17)) -> identifier17 | (ExistentialParameter (identifier18)) -> identifier18);;
let rec captured_identifiers_from_pattern = fun pattern2 -> (match pattern2 with (Capture (identifier19)) -> (Cons (identifier19,Empty)) | (ConstructorPattern (x224,patterns,x225)) -> (list_flatmap captured_identifiers_from_pattern patterns) | x226 -> Empty);;
let rec identifiers_from_definition = fun definition6 -> (match definition6 with (TypeDefinition (name8,x227,x228,constructors,x229)) -> (Cons (name8,(list_map constructor_identifier constructors))) | (FunctionDefinition (name9,x230,arguments,x231,x232)) -> (Cons (name9,Empty)) | (TargetDefinition (x233,x234)) -> Empty);;
let rec public_identifiers = fun definitions -> ((fun x50 -> ((list_flatmap list_from_maybe) ((list_map definition_identifier) ((list_filter definition_public) x50)))) definitions);;
let rec over_match_pair_expression = fun f42 pair9 -> (match pair9 with (Pair (pattern3,expression4)) -> (result_bind (f42 expression4) (fun expression5 -> (result_return (Pair (pattern3,expression5))))));;
let rec over_match_pair_expressions = fun over_subexpressions2 f43 pairs -> (result_concat (list_map (over_match_pair_expression (fun x50 -> ((result_flatmap (over_subexpressions2 f43)) (f43 x50)))) pairs));;
let rec over_subexpressions = fun f44 expression6 -> (result_bind (f44 expression6) (fun expression7 -> (match expression7 with (Lambda (arguments2,expression8,range3)) -> (result_bind (f44 expression8) (fun expression9 -> (result_bind (over_subexpressions f44 expression9) (fun expression10 -> (result_return (Lambda (arguments2,expression10,range3))))))) | (Match (expression11,pairs2,range4)) -> (result_bind (f44 expression11) (fun expression12 -> (result_bind (over_subexpressions f44 expression12) (fun expression13 -> (result_bind (over_match_pair_expressions over_subexpressions f44 pairs2) (fun pairs3 -> (result_return (Match (expression13,pairs3,range4))))))))) | (Constructor (identifier20,expressions6,range5)) -> (result_bind (result_concat (list_map (fun x50 -> ((result_flatmap (over_subexpressions f44)) (f44 x50))) expressions6)) (fun expressions7 -> (result_return (Constructor (identifier20,expressions7,range5))))) | (FunctionApplication (expressions8,range6)) -> (result_bind (result_concat (list_map (fun x50 -> ((result_flatmap (over_subexpressions f44)) (f44 x50))) expressions8)) (fun expressions9 -> (result_return (FunctionApplication (expressions9,range6))))) | x235 -> (result_return expression7))));;
let rec over_definition_expressions = fun f45 definition7 -> (match definition7 with (FunctionDefinition (identifier21,public3,arguments3,expression14,range7)) -> (result_bind (f45 expression14) (fun expression15 -> (result_return (FunctionDefinition (identifier21,public3,arguments3,expression15,range7))))) | x236 -> (result_return definition7));;
let rec over_function_application = fun f46 expression16 -> (match expression16 with (FunctionApplication (expressions10,range8)) -> (f46 expressions10 range8) | x237 -> (result_return expression16));;
let rec over_match_expression = fun f47 expression17 -> (match expression17 with (Match (expression18,pairs4,range9)) -> (f47 expression18 pairs4 range9) | x238 -> (result_return expression17));;
let rec over_identifiers = fun f48 expression19 -> (match expression19 with (Variable (name10)) -> (result_bind (f48 name10) (fun name11 -> (result_return (Variable (name11))))) | (Lambda (arguments4,expression20,range10)) -> (result_bind (over_identifiers f48 expression20) (fun expression21 -> (result_bind (result_concat (list_map f48 arguments4)) (fun arguments5 -> (result_return (Lambda (arguments5,expression21,range10))))))) | (Constructor (name12,Empty,range11)) -> (result_bind (f48 name12) (fun name13 -> (result_return (Constructor (name13,Empty,range11))))) | (Constructor (name14,expressions11,range12)) -> (result_bind (result_concat (list_map (over_identifiers f48) expressions11)) (fun expressions12 -> (result_bind (f48 name14) (fun name15 -> (result_return (Constructor (name15,expressions12,range12))))))) | (FunctionApplication (expressions13,range13)) -> (result_bind (result_concat (list_map (over_identifiers f48) expressions13)) (fun expressions14 -> (result_return (FunctionApplication (expressions14,range13))))) | (Match (expression22,rules,range14)) -> (result_bind (result_concat (list_map (over_match_pair_expression (over_identifiers f48)) rules)) (fun rules2 -> (result_bind (over_identifiers f48 expression22) (fun expression23 -> (result_return (Match (expression23,rules2,range14))))))) | x239 -> (result_return expression19));;
let rec data_strings_file_ending = fun () -> (string_from_list (Cons ((46l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((115l),Empty)))))))))))))))));;
let rec data_reuse_file_ending = fun () -> (string_from_list (Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))));;
type source_file = SourceFile : module_reference * string * _slice -> source_file;;
type source_file_type = SourceFileTypeReuse | SourceFileTypeStrings | SourceFileTypeTargetLanguage;;
let rec source_file_of = fun module3 path iterator9 -> (SourceFile (module3,path,iterator9));;
let rec source_file_module = fun file -> (match file with (SourceFile (module4,x240,x241)) -> module4);;
let rec source_file_path = fun file2 -> (match file2 with (SourceFile (x242,path2,x243)) -> path2);;
let rec source_file_content = fun file3 -> (match file3 with (SourceFile (x244,x245,content)) -> content);;
let rec source_file_size = fun file4 -> (match file4 with (SourceFile (x246,x247,content2)) -> (slice_size content2));;
let rec last_n_chars = fun n5 path3 -> (string_substring (Int32.sub (string_size path3) n5) n5 path3);;
let rec source_file_type2 = fun file5 -> (match (string_equal (last_n_chars (6l) (source_file_path file5)) (data_reuse_file_ending ())) with True -> SourceFileTypeReuse | False -> (match (string_equal (last_n_chars (8l) (source_file_path file5)) (data_strings_file_ending ())) with True -> SourceFileTypeStrings | False -> SourceFileTypeTargetLanguage));;
type parser_scope = ParserScope : (int32) array * parser_scope -> parser_scope | ParserScopeRoot : (int32) array -> parser_scope;;
let rec parser_scope_empty = fun () -> (ParserScopeRoot ((array_empty ())));;
let rec parser_scope_new = fun parent -> (ParserScope ((array_empty ()),parent));;
let rec parser_scope_set = fun identifier_token2 symbol_table_id scope -> (match scope with (ParserScope (symbols10,parent2)) -> (ParserScope ((array_set identifier_token2 symbol_table_id symbols10),parent2)) | (ParserScopeRoot (symbols11)) -> (ParserScopeRoot ((array_set identifier_token2 symbol_table_id symbols11))));;
let rec parser_scope_set2 = fun identifier22 scope2 -> (maybe_or_else scope2 (maybe_map (fun symbol_table_id2 -> (parser_scope_set (identifier_token identifier22) symbol_table_id2 scope2)) (identifier_id identifier22)));;
let rec parser_scope_set_all = fun syms scope3 -> (list_foldl parser_scope_set2 scope3 syms);;
let rec parser_scope_resolve = fun identifier23 scope4 -> (match scope4 with (ParserScope (symbols12,parent3)) -> (match (array_get (identifier_token identifier23) symbols12) with None -> (parser_scope_resolve identifier23 parent3) | id5 -> (identifier_with_id id5 identifier23)) | (ParserScopeRoot (symbols13)) -> (identifier_with_id (array_get (identifier_token identifier23) symbols13) identifier23));;
let rec parser_scope_set_list = fun symbols14 scope5 -> (list_foldl (pair_map parser_scope_set) scope5 symbols14);;
type symbol_table_entry = SymbolTableEntry : int32 * string -> symbol_table_entry;;
type symbol_table = SymbolTable : int32 * (symbol_table_entry) array -> symbol_table;;
let rec symbol_table_empty = fun () -> (SymbolTable ((0l),(array_empty ())));;
let rec symbol_table_id3 = fun table -> (match table with (SymbolTable (id6,x248)) -> id6);;
let rec symbol_table_bind = fun string32 table2 -> (match table2 with (SymbolTable (id7,array21)) -> (SymbolTable ((Int32.add id7 (1l)),(array_set id7 (SymbolTableEntry (id7,string32)) array21))));;
let rec symbol_table_bind_list = fun names table3 -> (list_foldl symbol_table_bind table3 names);;
let rec data_def = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_ = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__ = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_2 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_3 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_4 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_5 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_slice_empty = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((101l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),Empty)))))))))))))))))))))));;
let rec data_slice_of = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((111l),(Cons ((102l),Empty)))))))))))))))));;
let rec data_slice_size = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((115l),(Cons ((105l),(Cons ((122l),(Cons ((101l),Empty)))))))))))))))))))));;
let rec data_slice_get = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((103l),(Cons ((101l),(Cons ((116l),Empty)))))))))))))))))));;
let rec data_slice_concat = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((99l),(Cons ((97l),(Cons ((116l),Empty)))))))))))))))))))))))));;
let rec data_slice_foldl = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((100l),(Cons ((108l),Empty)))))))))))))))))))))));;
let rec data_slice_subslice = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((115l),(Cons ((117l),(Cons ((98l),(Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))))))))))))))))))))));;
let rec data_slice = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))));;
let rec data_int32 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),Empty)))))))))));;
let rec identifier_def = fun () -> (-1l);;
let rec identifier_typ = fun () -> (-2l);;
let rec identifier_fn = fun () -> (-3l);;
let rec identifier_match = fun () -> (-4l);;
let rec identifier_exists = fun () -> (-5l);;
let rec identifier_pub = fun () -> (-6l);;
let rec identifier_ = fun () -> (0l);;
let rec identifier__ = fun () -> (1l);;
let rec identifier_2 = fun () -> (2l);;
let rec identifier_3 = fun () -> (3l);;
let rec identifier_4 = fun () -> (4l);;
let rec identifier_5 = fun () -> (5l);;
let rec identifier_int32_less_than = fun () -> (6l);;
let rec identifier_list = fun () -> (7l);;
let rec identifier_pipe = fun () -> (8l);;
let rec identifier_slice_empty = fun () -> (9l);;
let rec identifier_slice_of = fun () -> (10l);;
let rec identifier_slice_size = fun () -> (11l);;
let rec identifier_slice_get = fun () -> (12l);;
let rec identifier_slice_concat = fun () -> (13l);;
let rec identifier_slice_foldl = fun () -> (14l);;
let rec identifier_slice_subslice = fun () -> (15l);;
let rec identifier_int32 = fun () -> (16l);;
let rec identifier_slice = fun () -> (17l);;
let rec default_symbol_count = fun () -> (18l);;
let rec intrinsic_identifiers = fun () -> (Cons ((Pair ((identifier_ ()),(data_ ()))),(Cons ((Pair ((identifier__ ()),(data__ ()))),(Cons ((Pair ((identifier_2 ()),(data_2 ()))),(Cons ((Pair ((identifier_3 ()),(data_3 ()))),(Cons ((Pair ((identifier_4 ()),(data_4 ()))),(Cons ((Pair ((identifier_5 ()),(data_5 ()))),(Cons ((Pair ((identifier_int32_less_than ()),(data_int32_less_than ()))),(Cons ((Pair ((identifier_list ()),(data_list ()))),(Cons ((Pair ((identifier_pipe ()),(data_pipe ()))),(Cons ((Pair ((identifier_slice_empty ()),(data_slice_empty ()))),(Cons ((Pair ((identifier_slice_foldl ()),(data_slice_foldl ()))),(Cons ((Pair ((identifier_slice_of ()),(data_slice_of ()))),(Cons ((Pair ((identifier_slice_size ()),(data_slice_size ()))),(Cons ((Pair ((identifier_slice_get ()),(data_slice_get ()))),(Cons ((Pair ((identifier_slice_concat ()),(data_slice_concat ()))),(Cons ((Pair ((identifier_slice_subslice ()),(data_slice_subslice ()))),(Cons ((Pair ((identifier_int32 ()),(data_int32 ()))),(Cons ((Pair ((identifier_slice ()),(data_slice ()))),Empty))))))))))))))))))))))))))))))))))));;
let rec default_symbol_table = fun () -> (symbol_table_bind_list (list_map pair_right (intrinsic_identifiers ())) (symbol_table_empty ()));;
let rec default_scope = fun () -> (parser_scope_set_list (list_map (x (fun x249 -> (Pair (x249,x249))) pair_left) (intrinsic_identifiers ())) (parser_scope_empty ()));;
let rec default_identifiers = fun () -> (dictionary_set (data_def ()) (Pair ((identifier_def ()),(data_def ()))) (dictionary_set (data_typ ()) (Pair ((identifier_typ ()),(data_typ ()))) (dictionary_set (data_fn ()) (Pair ((identifier_fn ()),(data_fn ()))) (dictionary_set (data_match ()) (Pair ((identifier_match ()),(data_match ()))) (dictionary_set (data_exists ()) (Pair ((identifier_pub ()),(data_exists ()))) (dictionary_set (data_pub ()) (Pair ((identifier_pub ()),(data_pub ()))) (dictionary_of (list_map (fun pair10 -> (Pair ((pair_right pair10),pair10))) (intrinsic_identifiers ())))))))));;
let rec token_is_operator = fun token4 -> (and2 (x6 token4 (0l)) (x5 token4 (5l)));;
let rec data_6 = fun () -> (string_from_list (Cons ((58l),Empty)));;
type ('Tdefinition8) parser_context = ParserContext : source_reference * (int32,((int32,string) pair) dictionary) pair * parser_scope * parser_scope * symbol_table * ('Tdefinition8) array -> ('Tdefinition8) parser_context;;
let rec parser_context_add_constructors = fun definition9 array22 -> (match definition9 with (TypeDefinition (x250,x251,x252,constructors2,x253)) -> (list_foldl (fun constructor3 array23 -> (array_set (identifier_token (constructor_identifier constructor3)) definition9 array23)) array22 constructors2) | x254 -> array22);;
let rec prefix_module_symbol = fun module5 identifier24 -> (match module5 with (ModulePath (name16,open2)) -> (match open2 with True -> identifier24 | False -> (identifier_with_name (string_join (data_6 ()) (Cons (name16,(Cons ((identifier_name identifier24),Empty))))) identifier24)) | ModuleSelf -> identifier24);;
let rec prefix_module_symbols = fun module6 syms2 -> (list_map (prefix_module_symbol module6) syms2);;
let rec parser_context_add_definition = fun definition10 context -> (match context with (ParserContext (source_reference6,symbols15,module_scope,global_scope,symbol_table2,constructors3)) -> (match (identifiers_from_definition definition10) with definition_symbols -> (match (source_reference_module source_reference6) with module7 -> (ParserContext (source_reference6,symbols15,(parser_scope_set_all definition_symbols module_scope),(match (definition_public definition10) with True -> (parser_scope_set_all (prefix_module_symbols module7 definition_symbols) global_scope) | False -> global_scope),symbol_table2,(parser_context_add_constructors definition10 constructors3))))));;
let rec parser_context_token_is_constructor = fun token5 context2 -> (match context2 with (ParserContext (x255,x256,x257,x258,x259,constructors4)) -> (match (array_get token5 constructors4) with (Some (x260)) -> True | None -> False));;
let rec parser_context_new_module = fun context3 -> (match context3 with (ParserContext (source_reference7,symbols16,x261,global_scope2,symbol_table3,constructors5)) -> (ParserContext (source_reference7,symbols16,(parser_scope_new global_scope2),global_scope2,symbol_table3,constructors5)));;
let rec parser_context_module_scope = fun context4 -> (match context4 with (ParserContext (x262,x263,module_scope2,x264,x265,x266)) -> module_scope2);;
let rec parser_context_bind_symbol = fun identifier25 context5 -> (match context5 with (ParserContext (source_reference8,symbols17,module_scope3,global_scope3,symbol_table4,constructors6)) -> (ParserContext (source_reference8,symbols17,module_scope3,global_scope3,(symbol_table_bind (identifier_name identifier25) symbol_table4),constructors6)));;
let rec parser_context_symbols = fun context6 -> (match context6 with (ParserContext (x267,symbols18,x268,x269,x270,x271)) -> symbols18);;
let rec parser_context_with_symbols = fun symbols19 context7 -> (match context7 with (ParserContext (source_reference9,x272,module_scope4,global_scope4,symbol_table5,constructors7)) -> (ParserContext (source_reference9,symbols19,module_scope4,global_scope4,symbol_table5,constructors7)));;
let rec parser_context_symbol_id = fun context8 -> (match context8 with (ParserContext (x273,x274,x275,x276,symbol_table6,x277)) -> (symbol_table_id3 symbol_table6));;
let rec parser_context_source_reference = fun context9 -> (match context9 with (ParserContext (source_reference10,x278,x279,x280,x281,x282)) -> source_reference10);;
let rec parser_context_with_source_reference = fun source_reference11 context10 -> (match context10 with (ParserContext (x283,symbols20,module_scope5,global_scope5,symbol_table7,constructors8)) -> (ParserContext (source_reference11,symbols20,module_scope5,global_scope5,symbol_table7,constructors8)));;
let rec parser_run = fun symbols21 parser2 -> (match (state_run (ParserContext ((SourceReference ((string_empty ()),ModuleSelf)),(Pair ((default_symbol_count ()),symbols21)),(default_scope ()),(default_scope ()),(default_symbol_table ()),(array_empty ()))) parser2) with (Pair (x284,result13)) -> result13);;
let rec parser_return = fun value22 -> (state_return (result_return value22));;
let rec parser_error = fun error11 -> (state_return (result_error error11));;
let rec parser_bind = fun parser3 f49 -> (state_bind parser3 (fun result14 -> (result_prod state_return (result_bind result14 (fun value23 -> (result_return (f49 value23)))))));;
let rec parser_token_is_constructor = fun token6 -> (state_bind (state_get ()) (fun context11 -> (parser_return (parser_context_token_is_constructor token6 context11))));;
let rec parser_add_definition = fun definition11 -> (state_bind (state_modify (parser_context_add_definition definition11)) (fun x285 -> (parser_return definition11)));;
let rec parser_get_symbols = fun () -> (state_bind (state_get ()) (fun state8 -> (parser_return (parser_context_symbols state8))));;
let rec parser_set_symbols = fun symbols22 -> (state_bind (state_modify (parser_context_with_symbols symbols22)) (fun x286 -> (parser_return symbols22)));;
let rec parser_get_module_scope = fun () -> (state_bind (state_get ()) (fun state9 -> (parser_return (parser_context_module_scope state9))));;
let rec parser_new_module = fun () -> (state_bind (state_modify parser_context_new_module) (fun state10 -> (parser_return state10)));;
let rec parser_bind_symbol = fun identifier26 -> (state_bind (state_modify (parser_context_bind_symbol identifier26)) (fun state11 -> (parser_return (identifier_with_id (Some ((Int32.sub (parser_context_symbol_id state11) (1l)))) identifier26))));;
let rec parser_get_source_reference = fun () -> (state_bind (state_get ()) (fun state12 -> (parser_return (parser_context_source_reference state12))));;
let rec parser_set_source_reference = fun source_reference12 -> (state_bind (state_modify (parser_context_with_source_reference source_reference12)) (fun x287 -> (parser_return source_reference12)));;
let rec parser_sequence = fun list28 -> (list_foldr (fun a57 b53 -> (parser_bind a57 (fun a58 -> (parser_bind b53 (fun b54 -> (parser_return (Cons (a58,b54)))))))) (parser_return Empty) list28);;
let rec parser_bind_symbols = fun syms3 -> (parser_sequence (list_map parser_bind_symbol syms3));;
type error = MalformedDefinitionError : range -> error | MalformedTypeDefinitionError : range -> error | MalformedFunctionDefinitionError : source_reference * range -> error | MalformedFunctionNameError : range -> error | MalformedExpressionError : range -> error | MalformedMatchExpressionError : range -> error | MalformedSymbolError : range -> error | MalformedConstructorError : range -> error | MalformedTypeError : range -> error | ErrorNotDefined : string * source_reference * range -> error | ErrorAlreadyDefined : string -> error | ErrorReservedIdentifier : string * source_reference * range -> error | MalformedSexpTooFewClosingBrackets | MalformedSexpTooManyClosingBrackets;;
let rec symbol_to_identifier = fun symbol -> (match symbol with (Symbol (token7,name17,range15)) -> (parser_bind (parser_get_source_reference ()) (fun source_reference13 -> (parser_return (Identifier (token7,name17,source_reference13,range15,None))))) | (Integer (x288,range16)) -> (parser_error (MalformedSymbolError (range16))) | (List (x289,range17)) -> (parser_error (MalformedSymbolError (range17))));;
let rec resolve_symbol = fun symbol2 scope6 -> (parser_bind (symbol_to_identifier symbol2) (fun identifier27 -> (match (parser_scope_resolve identifier27 scope6) with (Identifier (x290,name18,source_reference14,range18,None)) -> (parser_error (ErrorNotDefined (name18,source_reference14,range18))) | identifier28 -> (parser_return identifier28))));;
let rec sexp_to_complex_type = fun sexp_to_type scope7 symbol3 parameters range19 -> (parser_bind (resolve_symbol symbol3 scope7) (fun identifier29 -> (parser_bind (parser_sequence (list_map (sexp_to_type scope7) parameters)) (fun sub_types -> (parser_return (ComplexType (identifier29,sub_types,range19)))))));;
let rec sexp_to_function_type = fun sexp_to_type2 parameters2 range20 -> (match parameters2 with (Cons ((List (arg_types,x291)),(Cons (return_type,Empty)))) -> (parser_bind (parser_sequence (list_map sexp_to_type2 arg_types)) (fun arg_types2 -> (parser_bind (sexp_to_type2 return_type) (fun return_type2 -> (parser_return (FunctionType (arg_types2,return_type2,range20))))))) | x292 -> (parser_error (MalformedTypeError (range20))));;
let rec sexp_to_type3 = fun scope8 type2 -> (match type2 with (List ((Cons (symbol4,parameters3)),range21)) -> (parser_bind (symbol_to_identifier symbol4) (fun identifier30 -> (match (x4 (identifier_token identifier30) (identifier_fn ())) with True -> (sexp_to_function_type (sexp_to_type3 scope8) parameters3 range21) | False -> (sexp_to_complex_type sexp_to_type3 scope8 symbol4 parameters3 range21)))) | (Integer (x293,range22)) -> (parser_error (MalformedTypeError (range22))) | (List (x294,range23)) -> (parser_error (MalformedTypeError (range23))) | symbol5 -> (parser_bind (resolve_symbol symbol5 scope8) (fun identifier31 -> (parser_return (SimpleType (identifier31))))));;
let rec sexp_to_constructor_definition = fun scope9 constructor4 -> (match constructor4 with (List ((Cons (name19,types)),range24)) -> (parser_bind (symbol_to_identifier name19) (fun name20 -> (parser_bind (parser_bind_symbol name20) (fun name21 -> (parser_bind (parser_sequence (list_map (sexp_to_type3 scope9) types)) (fun types2 -> (parser_return (ComplexConstructor (name21,types2,range24))))))))) | (Integer (x295,range25)) -> (parser_error (MalformedConstructorError (range25))) | (List (x296,range26)) -> (parser_error (MalformedConstructorError (range26))) | symbol6 -> (parser_bind (symbol_to_identifier symbol6) (fun name22 -> (parser_bind (parser_bind_symbol name22) (fun name23 -> (parser_return (SimpleConstructor (name23))))))));;
let rec sexp_to_type_parameter = fun sexp2 -> (match sexp2 with (List ((Cons (x297,(Cons (name24,Empty)))),x298)) -> (parser_bind (symbol_to_identifier name24) (fun name25 -> (parser_bind (parser_bind_symbol name25) (fun name26 -> (parser_return (ExistentialParameter (name26))))))) | (Integer (x299,range27)) -> (parser_error (MalformedDefinitionError (range27))) | (List (x300,range28)) -> (parser_error (MalformedDefinitionError (range28))) | symbol7 -> (parser_bind (symbol_to_identifier symbol7) (fun name27 -> (parser_bind (parser_bind_symbol name27) (fun name28 -> (parser_return (UniversalParameter (name28))))))));;
let rec sexp_to_lambda = fun sexp_to_expression scope10 rest15 range29 -> (match rest15 with (Cons ((List (arguments6,x301)),(Cons (expression24,Empty)))) -> (parser_bind (parser_sequence (list_map symbol_to_identifier arguments6)) (fun arguments7 -> (parser_bind (parser_bind_symbols arguments7) (fun arguments8 -> (match (parser_scope_new scope10) with scope11 -> (match (parser_scope_set_all arguments8 scope11) with scope12 -> (parser_bind (sexp_to_expression scope12 expression24) (fun expression25 -> (parser_return (Lambda (arguments8,expression25,range29))))))))))) | x302 -> (parser_bind (parser_get_source_reference ()) (fun source_reference15 -> (parser_error (MalformedFunctionDefinitionError (source_reference15,range29))))));;
let rec sexp_to_function_application = fun sexp_to_expression2 range30 expressions15 -> (parser_bind (parser_sequence (list_map sexp_to_expression2 expressions15)) (fun expressions16 -> (parser_return (FunctionApplication (expressions16,range30)))));;
let rec to_constructor_or_capture = fun scope13 symbol8 -> (parser_bind (symbol_to_identifier symbol8) (fun identifier32 -> (parser_bind (parser_token_is_constructor (identifier_token identifier32)) (fun constructor5 -> (match constructor5 with True -> (parser_bind (resolve_symbol symbol8 scope13) (fun identifier33 -> (parser_return (ConstructorPattern (identifier33,Empty,(identifier_range identifier33)))))) | False -> (parser_bind (parser_bind_symbol identifier32) (fun identifier34 -> (parser_return (Capture (identifier34))))))))));;
let rec sexp_to_pattern = fun scope14 sexp3 -> (match sexp3 with (List ((Cons (name29,rest16)),range31)) -> (parser_bind (parser_sequence (list_map (sexp_to_pattern scope14) rest16)) (fun patterns2 -> (parser_bind (resolve_symbol name29 scope14) (fun identifier35 -> (parser_return (ConstructorPattern (identifier35,patterns2,range31))))))) | (List (Empty,range32)) -> (parser_error (MalformedExpressionError (range32))) | (Integer (integer6,range33)) -> (parser_return (IntegerPattern (integer6,range33))) | symbol9 -> (to_constructor_or_capture scope14 symbol9));;
let rec sexp_to_match_pair = fun sexp_to_expression3 scope15 range34 pair11 -> (match pair11 with (Cons (pattern4,(Cons (expression26,Empty)))) -> (parser_bind (sexp_to_pattern scope15 pattern4) (fun pattern5 -> (match (captured_identifiers_from_pattern pattern5) with captures -> (match (parser_scope_new scope15) with scope16 -> (match (parser_scope_set_all captures scope16) with scope17 -> (parser_bind (sexp_to_expression3 scope17 expression26) (fun expression27 -> (parser_return (Pair (pattern5,expression27)))))))))) | x303 -> (parser_error (MalformedMatchExpressionError (range34))));;
let rec sexp_to_match_pairs = fun sexp_to_expression4 scope18 range35 xs22 -> (match (list_partition (2l) xs22) with Empty -> (parser_error (MalformedMatchExpressionError (range35))) | pairs5 -> (parser_sequence (list_map (sexp_to_match_pair sexp_to_expression4 scope18 range35) pairs5)));;
let rec sexp_to_match = fun sexp_to_expression5 scope19 range36 rest17 -> (match rest17 with (Cons (expression28,rest18)) -> (parser_bind (sexp_to_expression5 scope19 expression28) (fun expression29 -> (parser_bind (sexp_to_match_pairs sexp_to_expression5 scope19 range36 rest18) (fun pairs6 -> (parser_return (Match (expression29,pairs6,range36))))))) | x304 -> (parser_error (MalformedExpressionError (range36))));;
let rec sexp_to_constructor = fun sexp_to_expression6 range37 symbol10 rest19 scope20 -> (parser_bind (symbol_to_identifier symbol10) (fun identifier36 -> (parser_bind (resolve_symbol symbol10 scope20) (fun identifier37 -> (parser_bind (parser_sequence (list_map sexp_to_expression6 rest19)) (fun expressions17 -> (parser_return (Constructor (identifier37,expressions17,range37)))))))));;
let rec sexp_to_list_expression = fun sexp_to_expression7 scope21 expressions18 range38 -> (match expressions18 with (Cons ((Symbol (token8,name30,symbol_range)),rest20)) -> (match (x4 token8 (identifier_fn ())) with True -> (sexp_to_lambda sexp_to_expression7 scope21 rest20 range38) | False -> (match (x4 token8 (identifier_match ())) with True -> (sexp_to_match sexp_to_expression7 scope21 range38 rest20) | False -> (parser_bind (parser_token_is_constructor token8) (fun constructor6 -> (match constructor6 with True -> (sexp_to_constructor (sexp_to_expression7 scope21) range38 (Symbol (token8,name30,symbol_range)) rest20 scope21) | False -> (sexp_to_function_application (sexp_to_expression7 scope21) range38 expressions18)))))) | x305 -> (sexp_to_function_application (sexp_to_expression7 scope21) range38 expressions18));;
let rec sexp_to_expression8 = fun scope22 sexp4 -> (match sexp4 with (Integer (integer7,range39)) -> (parser_return (IntegerConstant (integer7,range39))) | (List (expressions19,range40)) -> (match expressions19 with Empty -> (parser_error (MalformedExpressionError (range40))) | x306 -> (sexp_to_list_expression sexp_to_expression8 scope22 expressions19 range40)) | symbol11 -> (parser_bind (resolve_symbol symbol11 scope22) (fun identifier38 -> (parser_bind (parser_token_is_constructor (identifier_token identifier38)) (fun constructor7 -> (parser_return (match constructor7 with True -> (Constructor (identifier38,Empty,(identifier_range identifier38))) | False -> (Variable (identifier38)))))))));;
let rec sexp_to_type_definition = fun scope23 type_name public4 rest21 range41 -> (match type_name with (List ((Cons (name31,parameters4)),x307)) -> (parser_bind (symbol_to_identifier name31) (fun name32 -> (parser_bind (parser_bind_symbol name32) (fun name33 -> (parser_bind (parser_sequence (list_map sexp_to_type_parameter parameters4)) (fun parameters5 -> (match (list_map type_parameter_identifier parameters5) with parameter_identifiers -> (match (parser_scope_new scope23) with scope24 -> (match (parser_scope_set_all (Cons (name33,parameter_identifiers)) scope24) with scope25 -> (parser_bind (parser_sequence (list_map (sexp_to_constructor_definition scope25) rest21)) (fun constructors9 -> (parser_return (TypeDefinition (name33,public4,parameters5,constructors9,range41)))))))))))))) | (Integer (x308,range42)) -> (parser_error (MalformedTypeError (range42))) | (List (x309,range43)) -> (parser_error (MalformedTypeError (range43))) | symbol12 -> (parser_bind (symbol_to_identifier symbol12) (fun name34 -> (parser_bind (parser_bind_symbol name34) (fun name35 -> (match (parser_scope_new scope23) with scope26 -> (match (parser_scope_set2 name35 scope26) with scope27 -> (parser_bind (parser_sequence (list_map (sexp_to_constructor_definition scope27) rest21)) (fun constructors10 -> (parser_return (TypeDefinition (name35,public4,Empty,constructors10,range41))))))))))));;
let rec sexp_to_function_definition = fun scope28 name_symbol public5 rest22 range44 -> (match rest22 with (Cons ((List (arguments9,x310)),(Cons (expression30,Empty)))) -> (parser_bind (symbol_to_identifier name_symbol) (fun name36 -> (parser_bind (parser_bind_symbol name36) (fun name37 -> (parser_bind (parser_sequence (list_map symbol_to_identifier arguments9)) (fun arguments10 -> (parser_bind (parser_bind_symbols arguments10) (fun arguments11 -> (match (parser_scope_new scope28) with scope29 -> (match (parser_scope_set_all (Cons (name37,arguments11)) scope29) with scope30 -> (parser_bind (sexp_to_expression8 scope30 expression30) (fun expression31 -> (parser_return (FunctionDefinition (name37,public5,arguments11,expression31,range44))))))))))))))) | x311 -> (parser_bind (parser_get_source_reference ()) (fun source_reference16 -> (parser_error (MalformedFunctionDefinitionError (source_reference16,range44))))));;
let rec sexp_to_definition = fun scope31 name38 public6 rest23 range45 kind -> (match (x4 kind (identifier_typ ())) with True -> (sexp_to_type_definition scope31 name38 public6 rest23 range45) | False -> (match (x4 kind (identifier_def ())) with True -> (sexp_to_function_definition scope31 name38 public6 rest23 range45) | False -> (parser_error (MalformedDefinitionError (range45)))));;
let rec specific_malformed_definition_error = fun kind2 range46 -> (match (x4 kind2 (identifier_typ ())) with True -> (parser_error (MalformedTypeDefinitionError (range46))) | False -> (match (x4 kind2 (identifier_def ())) with True -> (parser_bind (parser_get_source_reference ()) (fun source_reference17 -> (parser_error (MalformedFunctionDefinitionError (source_reference17,range46))))) | False -> (parser_error (MalformedDefinitionError (range46)))));;
let rec sexp_to_definition2 = fun scope32 expression32 -> (match expression32 with (List ((Cons ((Symbol (kind3,x312,x313)),Empty)),range47)) -> (specific_malformed_definition_error kind3 range47) | (List ((Cons ((Symbol (kind4,x314,x315)),(Cons (x316,Empty)))),range48)) -> (specific_malformed_definition_error kind4 range48) | (List ((Cons ((Symbol (-6l,x317,x318)),(Cons ((Symbol (kind5,x319,x320)),(Cons (name39,rest24)))))),range49)) -> (sexp_to_definition scope32 name39 True rest24 range49 kind5) | (List ((Cons ((Symbol (kind6,x321,x322)),(Cons (name40,rest25)))),range50)) -> (sexp_to_definition scope32 name40 False rest25 range50 kind6) | (List ((Cons ((List (x323,range51)),Empty)),x324)) -> (parser_error (MalformedDefinitionError (range51))) | (List (x325,range52)) -> (parser_error (MalformedDefinitionError (range52))) | (Integer (x326,range53)) -> (parser_error (MalformedDefinitionError (range53))) | (Symbol (x327,x328,range54)) -> (parser_error (MalformedDefinitionError (range54))));;
let rec parse_definition = fun expression33 -> (parser_bind (parser_get_module_scope ()) (fun scope33 -> (parser_bind (sexp_to_definition2 scope33 expression33) (fun definition12 -> (parser_add_definition definition12)))));;
let rec sexp_error_to_ast_error = fun error12 -> (match error12 with ParseErrorTooFewClosingBrackets -> MalformedSexpTooFewClosingBrackets | ParseErrorTooManyClosingBrackets -> MalformedSexpTooManyClosingBrackets);;
let rec parse_definitions = fun module8 file_path2 iterator10 -> (parser_bind (parser_set_source_reference (SourceReference (file_path2,module8))) (fun x329 -> (parser_bind (parser_get_symbols ()) (fun symbols23 -> (match (parse_sexps symbols23 iterator10) with (Result ((Pair (symbols24,expressions20)))) -> (parser_bind (parser_set_symbols symbols24) (fun x330 -> (parser_sequence (list_map parse_definition expressions20)))) | (Error (error13)) -> (parser_error (sexp_error_to_ast_error error13)))))));;
let rec transform_strings = fun path4 content3 -> (match (string_gen content3) with (Result (string33)) -> (string_to_slice string33) | (Error (error14)) -> (slice_empty ()));;
let rec parse_reuse_file = fun file6 -> (match file6 with (SourceFile (module9,path5,content4)) -> (parse_definitions module9 path5 content4));;
let rec parse_strings_file = fun file7 -> (match file7 with (SourceFile (module10,path6,content5)) -> (parse_definitions module10 path6 (transform_strings path6 content5)));;
let rec parse_target_file = fun file8 -> (match file8 with (SourceFile (module11,path7,content6)) -> (parser_return (Cons ((TargetDefinition ((SourceReference (path7,module11)),content6)),Empty))));;
let rec parse_source_file = fun file9 -> (match (source_file_type2 file9) with SourceFileTypeStrings -> (parse_strings_file file9) | SourceFileTypeReuse -> (parse_reuse_file file9) | SourceFileTypeTargetLanguage -> (parse_target_file file9));;
let rec parse_module = fun files -> (parser_bind (parser_new_module ()) (fun x331 -> (parser_bind (parser_sequence (list_map parse_source_file files)) (fun definitions2 -> (parser_return (list_flatten definitions2))))));;
let rec parse_source_files = fun internal_symbols files2 -> ((fun x50 -> ((result_map list_flatten) ((parser_run internal_symbols) (parser_sequence ((list_map parse_module) ((list_partition_by (fun a59 b55 -> (module_equal (source_file_module a59) (source_file_module b55)))) x50)))))) files2);;
let rec identifier_to_symbol = fun identifier39 -> (match identifier39 with (Identifier (token9,name41,x332,range55,x333)) -> (Symbol (token9,name41,range55)));;
let rec type_to_sexp = fun types_to_sexp type3 -> (match type3 with (SimpleType (identifier40)) -> (identifier_to_symbol identifier40) | (FunctionType (arg_types3,return_type3,range56)) -> (List ((Cons ((Symbol ((identifier_fn ()),(data_fn ()),range56)),(Cons ((List ((types_to_sexp arg_types3),range56)),(Cons ((type_to_sexp types_to_sexp return_type3),Empty)))))),range56)) | (ComplexType (identifier41,types3,range57)) -> (List ((Cons ((identifier_to_symbol identifier41),(types_to_sexp types3))),range57)));;
let rec types_to_sexp2 = fun types4 -> (list_map (type_to_sexp types_to_sexp2) types4);;
let rec constructor_to_sexp = fun constructor8 -> (match constructor8 with (SimpleConstructor (identifier42)) -> (identifier_to_symbol identifier42) | (ComplexConstructor (identifier43,types5,range58)) -> (List ((Cons ((identifier_to_symbol identifier43),(types_to_sexp2 types5))),range58)));;
let rec constructors_to_sexp = fun constructors11 -> (list_map constructor_to_sexp constructors11);;
let rec type_parameter_to_sexp = fun parameter2 -> (match parameter2 with (ExistentialParameter (identifier44)) -> (List ((Cons ((Symbol ((identifier_exists ()),(data_exists ()),(identifier_range identifier44))),(Cons ((identifier_to_symbol identifier44),Empty)))),(identifier_range identifier44))) | (UniversalParameter (identifier45)) -> (identifier_to_symbol identifier45));;
let rec type_name_to_sexp = fun token10 range59 name42 parameters6 -> (match parameters6 with Empty -> (Symbol (token10,name42,range59)) | x334 -> (List ((Cons ((Symbol (token10,name42,range59)),(list_map type_parameter_to_sexp parameters6))),range59)));;
let rec function_arguments_to_sexp = fun arguments12 range60 -> (List ((list_map identifier_to_symbol arguments12),range60));;
let rec pattern_to_sexp = fun pattern6 -> (match pattern6 with (ConstructorPattern (identifier46,Empty,x335)) -> (identifier_to_symbol identifier46) | (ConstructorPattern (identifier47,patterns3,range61)) -> (List ((Cons ((identifier_to_symbol identifier47),(list_map pattern_to_sexp patterns3))),range61)) | (IntegerPattern (value24,range62)) -> (Integer (value24,range62)) | (Capture (identifier48)) -> (identifier_to_symbol identifier48));;
let rec match_pair_to_sexp = fun expression_to_sexp2 pair12 -> (match pair12 with (Pair (pattern7,expression34)) -> (Cons ((pattern_to_sexp pattern7),(Cons ((expression_to_sexp2 expression34),Empty)))));;
let rec expression_to_sexp = fun expression35 -> (match expression35 with (IntegerConstant (integer8,range63)) -> (Integer (integer8,range63)) | (Variable ((Identifier (token11,string34,x336,range64,x337)))) -> (Symbol (token11,string34,range64)) | (Lambda (arguments13,expression36,range65)) -> (List ((Cons ((Symbol ((identifier_fn ()),(data_fn ()),range65)),(Cons ((function_arguments_to_sexp arguments13 range65),(Cons ((expression_to_sexp expression36),Empty)))))),range65)) | (Match (expression37,pairs7,range66)) -> (List ((Cons ((Symbol ((identifier_match ()),(data_match ()),range66)),(Cons ((expression_to_sexp expression37),(list_flatmap (match_pair_to_sexp expression_to_sexp) pairs7))))),range66)) | (Constructor (identifier49,expressions21,range67)) -> (match expressions21 with Empty -> (identifier_to_symbol identifier49) | x338 -> (List ((Cons ((identifier_to_symbol identifier49),(list_map expression_to_sexp expressions21))),range67))) | (FunctionApplication (expressions22,range68)) -> (List ((list_map expression_to_sexp expressions22),range68)));;
let rec type_definition_to_sexp = fun token12 name43 parameters7 constructors12 range69 -> (list_concat (Cons ((Symbol ((identifier_typ ()),(data_typ ()),range69)),(Cons ((type_name_to_sexp token12 range69 name43 parameters7),Empty)))) (constructors_to_sexp constructors12));;
let rec function_definition_to_sexp = fun name44 arguments14 expression38 range70 -> (Cons ((Symbol ((identifier_def ()),(data_def ()),range70)),(Cons ((identifier_to_symbol name44),(Cons ((function_arguments_to_sexp arguments14 range70),(Cons ((expression_to_sexp expression38),Empty))))))));;
let rec definition_to_sexp2 = fun public7 range71 sexp5 -> (List ((match public7 with True -> (Cons ((Symbol ((identifier_pub ()),(data_pub ()),range71)),sexp5)) | False -> sexp5),range71));;
let rec definition_to_sexp = fun definition13 -> (match definition13 with (TypeDefinition ((Identifier (token13,name45,x339,x340,x341)),public8,parameters8,constructors13,range72)) -> (definition_to_sexp2 public8 range72 (type_definition_to_sexp token13 name45 parameters8 constructors13 range72)) | (FunctionDefinition (name46,public9,arguments15,expression39,range73)) -> (definition_to_sexp2 public9 range73 (function_definition_to_sexp name46 arguments15 expression39 range73)) | (TargetDefinition (x342,data)) -> (Symbol ((0l),(string_from_slice data),(Range ((0l),(0l))))));;
let rec definitions_to_sexps = fun definitions3 -> (list_map definition_to_sexp definitions3);;
let rec data_double_dash = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),Empty)))));;
type cli_arguments = CliArguments : ((string,string) pair) list * (string) list -> cli_arguments | CliErrorMissingValue : string -> cli_arguments;;
let rec is_key = fun argument -> (string_equal (data_double_dash ()) (string_take (2l) argument));;
let rec parse_arguments2 = fun arguments16 kv_args inputs -> (match arguments16 with (Cons (first8,(Cons (second,rest26)))) -> (match (is_key first8) with True -> (parse_arguments2 (list_rest (list_rest arguments16)) (Cons ((Pair (first8,second)),kv_args)) inputs) | False -> (parse_arguments2 (list_rest arguments16) kv_args (Cons (first8,inputs)))) | (Cons (first9,Empty)) -> (match (is_key first9) with True -> (CliErrorMissingValue (first9)) | False -> (CliArguments ((list_reverse kv_args),(list_reverse (Cons (first9,inputs)))))) | Empty -> (CliArguments ((list_reverse kv_args),(list_reverse inputs))));;
let rec parse_arguments = fun arguments17 -> (parse_arguments2 arguments17 Empty Empty);;
let rec data_sparkle_x = fun () -> (string_from_list (Cons ((226l),(Cons ((156l),(Cons ((168l),(Cons ((120l),Empty)))))))));;
let rec data_empty = fun () -> (string_from_list (Cons ((69l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),Empty)))))))))));;
let rec data_cons = fun () -> (string_from_list (Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),Empty)))))))));;
let rec identifier_sparkle_x = fun () -> (-1000l);;
let rec identifier_cons = fun () -> (-1001l);;
let rec identifier_empty = fun () -> (-1002l);;
let rec with_local_transform_keywords = fun dictionary8 -> (dictionary_set (data_sparkle_x ()) (Pair ((identifier_sparkle_x ()),(data_sparkle_x ()))) (dictionary_set (data_cons ()) (Pair ((identifier_cons ()),(data_cons ()))) (dictionary_set (data_empty ()) (Pair ((identifier_empty ()),(data_empty ()))) dictionary8)));;
let rec expression_is_token = fun token14 expression40 -> (match expression40 with (Variable ((Identifier (expression_token,x343,x344,x345,x346)))) -> (x4 expression_token token14) | x347 -> False);;
let rec first_expression_is_token = fun token15 expressions23 -> ((fun x50 -> ((maybe_else (fun () -> False)) ((maybe_map (expression_is_token token15)) x50))) (list_first expressions23));;
let rec transform_special_form = fun token16 transformer definition14 -> (over_definition_expressions (over_subexpressions (over_function_application (fun expressions24 range74 -> (result_return (match (first_expression_is_token token16 expressions24) with True -> (transformer (definition_source_reference definition14) (list_rest expressions24) range74) | False -> (FunctionApplication (expressions24,range74))))))) definition14);;
let rec transform_special_forms = fun token17 transformer2 definitions4 -> (result_concat (list_map (transform_special_form token17 transformer2) definitions4));;
let rec transform_pipe = fun source_reference18 expressions25 range75 -> (Lambda ((Cons ((Identifier ((identifier_sparkle_x ()),(data_sparkle_x ()),source_reference18,range75,(Some ((-1l))))),Empty)),(list_foldl (fun expression41 composed -> (FunctionApplication ((Cons (expression41,(Cons (composed,Empty)))),range75))) (Variable ((Identifier ((identifier_sparkle_x ()),(data_sparkle_x ()),source_reference18,range75,(Some ((-1l))))))) expressions25),range75));;
let rec transform_list = fun cons empty source_reference19 expressions26 range76 -> (list_foldr (fun expression42 composed2 -> (Constructor (cons,(Cons (expression42,(Cons (composed2,Empty)))),range76))) (Constructor (empty,Empty,range76)) expressions26);;
let rec transform_match_expression = fun expression43 pairs8 range77 -> (result_return (Match (expression43,pairs8,range77)));;
let rec transform_match_expressions = fun definition15 -> (over_definition_expressions (over_subexpressions (over_match_expression (fun expression44 pairs9 range78 -> (transform_match_expression expression44 pairs9 range78)))) definition15);;
let rec find_constructor = fun token18 definitions5 -> (list_find_first (fun identifier50 -> (x4 token18 (identifier_token identifier50))) (list_flatmap identifiers_from_definition definitions5));;
let rec transform_list_special_form = fun definitions6 -> (match (find_constructor (identifier_cons ()) definitions6) with None -> (result_return definitions6) | (Some (cons2)) -> (match (find_constructor (identifier_empty ()) definitions6) with None -> (result_return definitions6) | (Some (empty2)) -> (transform_special_forms (identifier_list ()) (transform_list cons2 empty2) definitions6)));;
let rec local_transforms = fun definitions7 -> (result_bind definitions7 (fun definitions8 -> (result_bind (transform_special_forms (identifier_pipe ()) transform_pipe definitions8) (fun definitions9 -> (result_bind (transform_list_special_form definitions9) (fun definitions10 -> (result_bind (result_concat (list_map transform_match_expressions definitions10)) (fun definitions11 -> (result_return definitions11)))))))));;
let rec data_reserved_identifier_error = fun () -> (string_from_list (Cons ((83l),(Cons ((121l),(Cons ((109l),(Cons ((98l),(Cons ((111l),(Cons ((108l),(Cons ((115l),(Cons ((32l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((120l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),(Cons ((32l),(Cons ((226l),(Cons ((156l),(Cons ((168l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((101l),(Cons ((100l),(Cons ((58l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_not_defined_error = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((108l),(Cons ((111l),(Cons ((119l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((105l),(Cons ((100l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((114l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((115l),(Cons ((32l),(Cons ((110l),(Cons ((111l),(Cons ((116l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((100l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_already_defined_error = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((108l),(Cons ((111l),(Cons ((119l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((105l),(Cons ((100l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((114l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((115l),(Cons ((32l),(Cons ((97l),(Cons ((108l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((121l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((100l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_malformed_function_definition = fun () -> (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((117l),(Cons ((110l),(Cons ((100l),(Cons ((58l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_no_location_information = fun () -> (string_from_list (Cons ((40l),(Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((108l),(Cons ((111l),(Cons ((99l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((97l),(Cons ((118l),(Cons ((97l),(Cons ((105l),(Cons ((108l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_line = fun () -> (string_from_list (Cons ((76l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))));;
let rec data_column = fun () -> (string_from_list (Cons ((67l),(Cons ((111l),(Cons ((108l),(Cons ((117l),(Cons ((109l),(Cons ((110l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))));;
let rec data_file = fun () -> (string_from_list (Cons ((70l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))));;
let rec data_range = fun () -> (string_from_list (Cons ((82l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))));;
let rec data_7 = fun () -> (string_from_list Empty);;
let rec i18n_error_range_to_string = fun range79 -> (match range79 with (Range (start2,end5)) -> (string_concat (string_from_list (Cons ((32l),(Cons ((97l),(Cons ((116l),(Cons ((32l),Empty))))))))) (string_concat (string_from_int32 start2) (string_concat (string_from_list (Cons ((45l),Empty))) (string_from_int32 end5)))));;
let rec i18n_malformed_definition_error = fun range80 -> (string_concat (string_from_list (Cons ((79l),(Cons ((110l),(Cons ((108l),(Cons ((121l),(Cons ((32l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((45l),(Cons ((32l),(Cons ((111l),(Cons ((114l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((97l),(Cons ((110l),(Cons ((32l),(Cons ((98l),(Cons ((101l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((112l),(Cons ((32l),(Cons ((108l),(Cons ((101l),(Cons ((118l),(Cons ((101l),(Cons ((108l),(Cons ((32l),(Cons ((111l),(Cons ((102l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((32l),(Cons ((89l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((110l),(Cons ((101l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((119l),(Cons ((114l),(Cons ((97l),(Cons ((112l),(Cons ((32l),(Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((46l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range80));;
let rec i18n_malformed_type_definition_error = fun range81 -> (string_concat (string_from_list (Cons ((73l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((110l),(Cons ((107l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((119l),(Cons ((114l),(Cons ((105l),(Cons ((116l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((44l),(Cons ((32l),(Cons ((98l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((105l),(Cons ((116l),(Cons ((32l),(Cons ((100l),(Cons ((111l),(Cons ((101l),(Cons ((115l),(Cons ((110l),(Cons ((39l),(Cons ((116l),(Cons ((32l),(Cons ((104l),(Cons ((97l),(Cons ((118l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((114l),(Cons ((105l),(Cons ((103l),(Cons ((104l),(Cons ((116l),(Cons ((32l),(Cons ((115l),(Cons ((104l),(Cons ((97l),(Cons ((112l),(Cons ((101l),(Cons ((46l),(Cons ((32l),(Cons ((73l),(Cons ((116l),(Cons ((32l),(Cons ((115l),(Cons ((104l),(Cons ((111l),(Cons ((117l),(Cons ((108l),(Cons ((100l),(Cons ((32l),(Cons ((108l),(Cons ((111l),(Cons ((111l),(Cons ((107l),(Cons ((32l),(Cons ((108l),(Cons ((105l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((58l),(Cons ((10l),(Cons ((10l),(Cons ((40l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((110l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((45l),(Cons ((111l),(Cons ((102l),(Cons ((45l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((78l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((79l),(Cons ((102l),(Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),(Cons ((32l),(Cons ((46l),(Cons ((46l),(Cons ((46l),(Cons ((41l),(Cons ((10l),(Cons ((10l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range81));;
let rec i18n_malformed_function_name_error = fun range82 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((70l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((78l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range82));;
let rec i18n_malformed_expression_error = fun range83 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((69l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range83));;
let rec i18n_malformed_match_expression_error = fun range84 -> (string_concat (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((105l),(Cons ((115l),(Cons ((32l),(Cons ((110l),(Cons ((111l),(Cons ((116l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((114l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((116l),(Cons ((44l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((115l),(Cons ((117l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((104l),(Cons ((97l),(Cons ((118l),(Cons ((101l),(Cons ((32l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((114l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((116l),(Cons ((108l),(Cons ((121l),(Cons ((32l),(Cons ((115l),(Cons ((111l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((116l),(Cons ((32l),(Cons ((97l),(Cons ((108l),(Cons ((108l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((114l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((114l),(Cons ((117l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((101l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((105l),(Cons ((114l),(Cons ((115l),(Cons ((32l),(Cons ((108l),(Cons ((105l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((58l),(Cons ((10l),(Cons ((10l),(Cons ((40l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((101l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((116l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((49l),(Cons ((32l),(Cons ((32l),(Cons ((101l),(Cons ((49l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((116l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((50l),(Cons ((32l),(Cons ((32l),(Cons ((101l),(Cons ((50l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((46l),(Cons ((46l),(Cons ((46l),(Cons ((41l),(Cons ((10l),(Cons ((10l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range84));;
let rec i18n_malformed_symbol_error = fun range85 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((83l),(Cons ((121l),(Cons ((109l),(Cons ((98l),(Cons ((111l),(Cons ((108l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range85));;
let rec i18n_malformed_constructor_error = fun range86 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range86));;
let rec i18n_malformed_type_error = fun range87 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((84l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range87));;
let rec i18n_malformed_sexp_too_few_closing_brackets = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((111l),(Cons ((32l),(Cons ((102l),(Cons ((101l),(Cons ((119l),(Cons ((32l),(Cons ((99l),(Cons ((108l),(Cons ((111l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec i18n_malformed_sexp_too_many_closing_brackets = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((111l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((110l),(Cons ((121l),(Cons ((32l),(Cons ((99l),(Cons ((108l),(Cons ((111l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec string_format = fun list29 -> (string_join (string_of_char (10l)) (list_map (string_join (string_empty ())) list29));;
let rec find_file_matching = fun files3 source_reference20 -> (list_find_first (x (string_equal (source_reference_file_path source_reference20)) source_file_path) files3);;
let rec range_information = fun range88 -> (match range88 with (Range (start3,end6)) -> (string_join (string_of_char (45l)) (Cons ((string_from_int32 start3),(Cons ((string_from_int32 end6),Empty))))));;
let rec count_lines = fun index16 lines source -> (match (string_index_of index16 (string_of_char (10l)) source) with (Some (index17)) -> (count_lines (Int32.add index17 (1l)) (Int32.add lines (1l)) source) | None -> (Pair (lines,(Int32.add (Int32.sub (string_size source) index16) (1l)))));;
let rec line_information = fun file10 range89 -> (match range89 with (Range (start4,x348)) -> (match (string_from_slice (source_file_content file10)) with content7 -> (count_lines (0l) (1l) (string_substring (0l) start4 content7))));;
let rec next_newline = fun content8 index18 -> (match (string_index_of index18 (string_of_char (10l)) content8) with (Some (index19)) -> (Int32.add index19 (1l)) | None -> index18);;
let rec source_paragraph = fun file11 range90 -> (match range90 with (Range (start5,end7)) -> (match (string_from_slice (source_file_content file11)) with content9 -> (match (next_newline content9 (Int32.sub start5 (100l))) with paragraph_start -> (match (Int32.sub (next_newline content9 (Int32.add end7 (50l))) paragraph_start) with paragraph_size -> (match (string_substring paragraph_start paragraph_size content9) with region -> region)))));;
let rec location_information = fun files4 source_reference21 range91 -> (match (find_file_matching files4 source_reference21) with (Some (file12)) -> (match (line_information file12 range91) with (Pair (lines2,column)) -> (string_format (Cons (Empty,(Cons ((Cons ((source_paragraph file12 range91),Empty)),(Cons (Empty,(Cons ((Cons ((data_line ()),(Cons ((string_from_int32 lines2),Empty)))),(Cons ((Cons ((data_column ()),(Cons ((string_from_int32 column),Empty)))),(Cons ((Cons ((data_range ()),(Cons ((range_information range91),Empty)))),(Cons ((Cons ((data_file ()),(Cons ((source_file_path file12),Empty)))),Empty)))))))))))))))) | None -> (data_no_location_information ()));;
let rec error_to_string = fun files5 error15 -> (match error15 with (MalformedDefinitionError (range92)) -> (i18n_malformed_definition_error range92) | (MalformedFunctionDefinitionError (source_reference22,range93)) -> (string_format (Cons ((Cons ((data_malformed_function_definition ()),Empty)),(Cons ((Cons ((location_information files5 source_reference22 range93),Empty)),Empty))))) | (MalformedTypeDefinitionError (range94)) -> (i18n_malformed_type_definition_error range94) | (MalformedFunctionNameError (range95)) -> (i18n_malformed_function_name_error range95) | (MalformedExpressionError (range96)) -> (i18n_malformed_expression_error range96) | (MalformedMatchExpressionError (range97)) -> (i18n_malformed_match_expression_error range97) | (MalformedSymbolError (range98)) -> (i18n_malformed_symbol_error range98) | (MalformedConstructorError (range99)) -> (i18n_malformed_constructor_error range99) | (MalformedTypeError (range100)) -> (i18n_malformed_type_error range100) | (ErrorNotDefined (name47,source_reference23,range101)) -> (string_format (Cons ((Cons ((string_concat (data_not_defined_error ()) name47),Empty)),(Cons ((Cons ((location_information files5 source_reference23 range101),Empty)),Empty))))) | (ErrorAlreadyDefined (name48)) -> (string_concat (data_already_defined_error ()) name48) | (ErrorReservedIdentifier (name49,source_reference24,range102)) -> (string_format (Cons ((Cons ((string_concat (data_reserved_identifier_error ()) name49),Empty)),(Cons ((Cons ((location_information files5 source_reference24 range102),Empty)),Empty))))) | MalformedSexpTooFewClosingBrackets -> (i18n_malformed_sexp_too_few_closing_brackets ()) | MalformedSexpTooManyClosingBrackets -> (i18n_malformed_sexp_too_many_closing_brackets ()));;
let rec data_sparkle = fun () -> (string_from_list (Cons ((226l),(Cons ((156l),(Cons ((168l),Empty)))))));;
let rec data_8 = fun () -> (string_from_list Empty);;
let rec identifier_is_reserved = fun identifier51 -> (string_equal (string_substring (0l) (3l) (identifier_name identifier51)) (data_sparkle ()));;
let rec validate_identifier = fun identifier52 -> (match (identifier_is_reserved identifier52) with True -> (result_error (ErrorReservedIdentifier ((identifier_name identifier52),(identifier_source_reference identifier52),(identifier_range identifier52)))) | False -> (result_lift identifier52));;
let rec validate_reserved_identifiers = fun definitions12 -> (result_flatmap (x result_concat (list_map (over_definition_expressions (over_identifiers validate_identifier)))) definitions12);;
let rec data_space = fun () -> (string_from_list (Cons ((32l),Empty)));;
let rec data_parse_error = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((101l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),(Cons ((32l),Empty)))))))))))))))))))))))));;
let rec data_fun = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),Empty)))))));;
let rec data_type = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_if = fun () -> (string_from_list (Cons ((105l),(Cons ((102l),Empty)))));;
let rec data_then = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_else = fun () -> (string_from_list (Cons ((101l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_with = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_of = fun () -> (string_from_list (Cons ((111l),(Cons ((102l),Empty)))));;
let rec data_class = fun () -> (string_from_list (Cons ((99l),(Cons ((108l),(Cons ((97l),(Cons ((115l),(Cons ((115l),Empty)))))))))));;
let rec data_end = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_in = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),Empty)))));;
let rec data_let = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),Empty)))))));;
let rec data_open = fun () -> (string_from_list (Cons ((111l),(Cons ((112l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_and = fun () -> (string_from_list (Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_or = fun () -> (string_from_list (Cons ((111l),(Cons ((114l),Empty)))));;
let rec data_as = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),Empty)))));;
let rec data_less_than = fun () -> (string_from_list (Cons ((60l),Empty)));;
let rec data_assert = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_asr = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_begin = fun () -> (string_from_list (Cons ((98l),(Cons ((101l),(Cons ((103l),(Cons ((105l),(Cons ((110l),Empty)))))))))));;
let rec data_constraint = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((105l),(Cons ((110l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_do = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),Empty)))));;
let rec data_done = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((110l),(Cons ((101l),Empty)))))))));;
let rec data_downto = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((119l),(Cons ((110l),(Cons ((116l),(Cons ((111l),Empty)))))))))))));;
let rec data_exception = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((99l),(Cons ((101l),(Cons ((112l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))));;
let rec data_external = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))))));;
let rec data_false = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))))));;
let rec data_true = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_for = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_function = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_functor = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),Empty)))))))))))))));;
let rec data_include = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),Empty)))))))))))))));;
let rec data_inherit = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((116l),Empty)))))))))))))));;
let rec data_initializer = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))))))))));;
let rec data_land = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))));;
let rec data_lazy = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((122l),(Cons ((121l),Empty)))))))));;
let rec data_lor = fun () -> (string_from_list (Cons ((108l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_lsl = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((108l),Empty)))))));;
let rec data_lsr = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_lxor = fun () -> (string_from_list (Cons ((108l),(Cons ((120l),(Cons ((111l),(Cons ((114l),Empty)))))))));;
let rec data_method = fun () -> (string_from_list (Cons ((109l),(Cons ((101l),(Cons ((116l),(Cons ((104l),(Cons ((111l),(Cons ((100l),Empty)))))))))))));;
let rec data_mod = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))));;
let rec data_module = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_mutable = fun () -> (string_from_list (Cons ((109l),(Cons ((117l),(Cons ((116l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))));;
let rec data_new = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),Empty)))))));;
let rec data_nonrec = fun () -> (string_from_list (Cons ((110l),(Cons ((111l),(Cons ((110l),(Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))))))))));;
let rec data_object = fun () -> (string_from_list (Cons ((111l),(Cons ((98l),(Cons ((106l),(Cons ((101l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_private = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((97l),(Cons ((116l),(Cons ((101l),Empty)))))))))))))));;
let rec data_rec = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))));;
let rec data_sig = fun () -> (string_from_list (Cons ((115l),(Cons ((105l),(Cons ((103l),Empty)))))));;
let rec data_struct = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_try = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((121l),Empty)))))));;
let rec data_val = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),Empty)))))));;
let rec data_virtual = fun () -> (string_from_list (Cons ((118l),(Cons ((105l),(Cons ((114l),(Cons ((116l),(Cons ((117l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))));;
let rec data_when = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_while = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((105l),(Cons ((108l),(Cons ((101l),Empty)))))))))));;
let rec data_parser = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_value = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),(Cons ((117l),(Cons ((101l),Empty)))))))))));;
let rec data_to = fun () -> (string_from_list (Cons ((116l),(Cons ((111l),Empty)))));;
let rec data_def2 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ2 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn2 = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match2 = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists2 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub2 = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_9 = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__2 = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_10 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_11 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_12 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_13 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe2 = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list2 = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_module_language = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_ocaml_language = fun () -> (string_from_list (Cons ((111l),(Cons ((99l),(Cons ((97l),(Cons ((109l),(Cons ((108l),Empty)))))))))));;
type identifier_transformation = IdentifierTransformationNone | IdentifierTransformationLowercase | IdentifierTransformationCapitalize;;
type source_string = SourceStringEmpty | SourceStringChar : int32 -> source_string | SourceString : string -> source_string | SourceStringIdentifier : identifier * identifier_transformation -> source_string | SourceStringConcat : source_string * source_string -> source_string;;
let rec source_string_string = fun string35 -> (SourceString (string35));;
let rec source_string_empty = fun () -> SourceStringEmpty;;
let rec source_string_concat = fun a60 b56 -> (SourceStringConcat (a60,b56));;
let rec source_string_join = fun separator4 strings2 -> (match strings2 with (Cons (first10,rest27)) -> (list_foldl (fun string36 joined2 -> (source_string_concat joined2 (source_string_concat (SourceString (separator4)) string36))) first10 rest27) | Empty -> (source_string_empty ()));;
let rec add_identifiers = fun identifiers offset dictionary9 -> (match identifiers with (Cons (identifier53,rest28)) -> (add_identifiers rest28 (Int32.sub offset (1l)) (dictionary_set (identifier53 ()) (Pair (offset,(identifier53 ()))) dictionary9)) | Empty -> dictionary9);;
let rec join = fun strings3 -> (source_string_join (string_empty ()) strings3);;
let rec wrap_in_brackets2 = fun string37 -> (source_string_concat (SourceStringChar ((40l))) (source_string_concat string37 (SourceStringChar ((41l)))));;
let rec data_compile_error = fun () -> (string_from_list (Cons ((42l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((101l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),(Cons ((42l),Empty)))))))))))))))))))))))))))))));;
let rec data_arrow = fun () -> (string_from_list (Cons ((32l),(Cons ((45l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_equals = fun () -> (string_from_list (Cons ((32l),(Cons ((61l),(Cons ((32l),Empty)))))));;
let rec data_vertical_bar = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((32l),Empty)))))));;
let rec data_pipe_operator = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_colon = fun () -> (string_from_list (Cons ((32l),(Cons ((58l),(Cons ((32l),Empty)))))));;
let rec data_star = fun () -> (string_from_list (Cons ((32l),(Cons ((42l),(Cons ((32l),Empty)))))));;
let rec data_unit = fun () -> (string_from_list (Cons ((32l),(Cons ((117l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((32l),Empty)))))))))))));;
let rec data_int32_plus = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((97l),(Cons ((100l),(Cons ((100l),Empty)))))))))))))))))));;
let rec data_int32_multiply = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((109l),(Cons ((117l),(Cons ((108l),Empty)))))))))))))))))));;
let rec data_int32_minus = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((115l),(Cons ((117l),(Cons ((98l),Empty)))))))))))))))))));;
let rec data_int32_divide = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((100l),(Cons ((105l),(Cons ((118l),Empty)))))))))))))))))));;
let rec data_int32_modulus = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((109l),Empty)))))))))))))))))));;
let rec data_int32_and = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((108l),(Cons ((111l),(Cons ((103l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))))))))))))))))))));;
let rec data_int322 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((111l),(Cons ((102l),(Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((32l),Empty)))))))))))))))))))))))))));;
let rec data_comma = fun () -> (string_from_list (Cons ((44l),Empty)));;
let rec data_with2 = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_slice2 = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))));;
let rec data_slice_type = fun () -> (string_from_list (Cons ((95l),(Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))))));;
let rec data_definition_end = fun () -> (string_from_list (Cons ((59l),(Cons ((59l),Empty)))));;
let rec data_let_rec = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),(Cons ((32l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((32l),Empty)))))))))))))))));;
let rec data_constant = fun () -> (string_from_list (Cons ((95l),(Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((95l),Empty)))))))))))))))))))));;
let rec data_preamble_filename = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((109l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((109l),(Cons ((108l),Empty)))))))))))))))))))))));;
let rec data_pervasives_filename = fun () -> (string_from_list (Cons ((112l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((105l),(Cons ((118l),(Cons ((101l),(Cons ((115l),(Cons ((46l),(Cons ((109l),(Cons ((108l),Empty)))))))))))))))))))))))))));;
let rec reserved_identifiers = fun () -> (Cons (data_assert,(Cons (data_asr,(Cons (data_begin,(Cons (data_constraint,(Cons (data_do,(Cons (data_done,(Cons (data_downto,(Cons (data_type,(Cons (data_if,(Cons (data_then,(Cons (data_else,(Cons (data_with2,(Cons (data_of,(Cons (data_end,(Cons (data_in,(Cons (data_fun,(Cons (data_let,(Cons (data_open,(Cons (data_and,(Cons (data_or,(Cons (data_as,(Cons (data_class,(Cons (data_exception,(Cons (data_external,(Cons (data_false,(Cons (data_true,(Cons (data_for,(Cons (data_function,(Cons (data_functor,(Cons (data_if,(Cons (data_include,(Cons (data_inherit,(Cons (data_initializer,(Cons (data_land,(Cons (data_lazy,(Cons (data_lor,(Cons (data_lsl,(Cons (data_lsr,(Cons (data_lxor,(Cons (data_method,(Cons (data_mod,(Cons (data_module,(Cons (data_mutable,(Cons (data_new,(Cons (data_nonrec,(Cons (data_object,(Cons (data_private,(Cons (data_rec,(Cons (data_sig,(Cons (data_struct,(Cons (data_try,(Cons (data_val,(Cons (data_virtual,(Cons (data_when,(Cons (data_while,(Cons (data_parser,(Cons (data_value,(Cons (data_to,(Cons (data_slice2,Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec operator_translation_map = fun () -> (dictionary_of (Cons ((Pair ((data_9 ()),(SourceString ((data_int32_plus ()))))),(Cons ((Pair ((data__2 ()),(SourceString ((data_int32_minus ()))))),(Cons ((Pair ((data_10 ()),(SourceString ((data_int32_multiply ()))))),(Cons ((Pair ((data_11 ()),(SourceString ((data_int32_divide ()))))),(Cons ((Pair ((data_12 ()),(SourceString ((data_int32_modulus ()))))),(Cons ((Pair ((data_13 ()),(SourceString ((data_int32_and ()))))),Empty)))))))))))));;
let rec translate_type_variable = fun identifier54 -> (source_string_concat (SourceStringChar ((39l))) (source_string_concat (SourceStringChar ((84l))) (SourceStringIdentifier (identifier54,IdentifierTransformationNone))));;
let rec escape_identifier = fun identifier55 -> (SourceStringIdentifier (identifier55,IdentifierTransformationNone));;
let rec lowercase_identifier = fun identifier56 -> (SourceStringIdentifier (identifier56,IdentifierTransformationLowercase));;
let rec translate_type_identifier = fun identifier57 -> (match (identifier_is identifier57 (identifier_slice ())) with True -> (SourceString ((data_slice_type ()))) | False -> (escape_identifier identifier57));;
let rec translate_constructor_identifier = fun identifier58 -> (SourceStringIdentifier (identifier58,IdentifierTransformationCapitalize));;
let rec translate_identifier = fun identifier59 -> (match (token_is_operator (identifier_token identifier59)) with True -> (match (dictionary_get (identifier_name identifier59) (operator_translation_map ())) with (Some (translation)) -> translation | None -> (SourceStringIdentifier (identifier59,IdentifierTransformationNone))) | False -> (SourceStringIdentifier (identifier59,IdentifierTransformationNone)));;
let rec translate_less_than = fun translate_expression expressions27 -> (match expressions27 with (Cons (a61,(Cons (b57,(Cons (then_case,(Cons (else_case,Empty)))))))) -> (join (Cons ((SourceString ((data_if ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression a61),(Cons ((SourceString ((data_less_than ()))),(Cons ((translate_expression b57),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((data_then ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression then_case),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((data_else ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression else_case),Empty))))))))))))))))))))))))))) | x349 -> (SourceString ((data_compile_error ()))));;
let rec translate_constructor = fun translator identifier60 -> (fun x50 -> (wrap_in_brackets2 (join ((fun parameters9 -> (Cons ((translate_constructor_identifier identifier60),(Cons ((SourceString ((data_space ()))),(Cons (parameters9,Empty))))))) (wrap_in_brackets2 ((source_string_join (data_comma ())) ((list_map translator) x50)))))));;
let rec translate_pattern = fun pattern8 -> (match pattern8 with (Capture (identifier61)) -> (escape_identifier identifier61) | (IntegerPattern (integer9,x350)) -> (join (Cons ((SourceString ((string_from_int32 integer9))),(Cons ((SourceStringChar ((108l))),Empty))))) | (ConstructorPattern (identifier62,Empty,x351)) -> (translate_constructor_identifier identifier62) | (ConstructorPattern (identifier63,patterns4,x352)) -> ((translate_constructor translate_pattern identifier63) patterns4));;
let rec translate_rule = fun translate_expression2 rule -> (match rule with (Pair (pattern9,expression45)) -> (join (Cons ((translate_pattern pattern9),(Cons ((SourceString ((data_arrow ()))),(Cons ((translate_expression2 expression45),Empty))))))));;
let rec translate_match_expression = fun translate_expression3 expression46 -> (fun x50 -> ((source_string_join (data_space ())) ((fun rules3 -> (Cons ((SourceString ((data_match2 ()))),(Cons ((translate_expression3 expression46),(Cons ((SourceString ((data_with2 ()))),(Cons (rules3,Empty))))))))) ((source_string_join (data_vertical_bar ())) ((list_map (translate_rule translate_expression3)) x50)))));;
let rec translate_function_application = fun translate_expression4 expressions28 -> (match expressions28 with (Cons (no_args_function,Empty)) -> (join (Cons ((translate_expression4 no_args_function),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((wrap_in_brackets (string_empty ())))),Empty))))))) | x353 -> (source_string_join (data_space ()) (list_map translate_expression4 expressions28)));;
let rec translate_function_application2 = fun translate_expression5 expressions29 -> (match expressions29 with (Cons ((Variable (identifier64)),rest29)) -> (match (x4 (identifier_token identifier64) (identifier_int32_less_than ())) with True -> (translate_less_than translate_expression5 rest29) | False -> (translate_function_application translate_expression5 expressions29)) | x354 -> (translate_function_application translate_expression5 expressions29));;
let rec translate_argument_list = fun arguments18 -> (match (list_is_empty arguments18) with True -> (SourceString ((wrap_in_brackets (string_empty ())))) | False -> (source_string_join (data_space ()) (list_map lowercase_identifier arguments18)));;
let rec translate_lambda = fun translate_expression6 arguments19 expression47 -> (join (Cons ((SourceString ((data_fun ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_argument_list arguments19),(Cons ((SourceString ((data_arrow ()))),(Cons ((translate_expression6 expression47),Empty)))))))))));;
let rec translate_expression7 = fun expression48 -> (match expression48 with (Lambda (arguments20,expression49,x355)) -> (wrap_in_brackets2 (translate_lambda translate_expression7 arguments20 expression49)) | (Constructor (identifier65,Empty,x356)) -> (translate_constructor_identifier identifier65) | (Constructor (identifier66,expressions30,x357)) -> ((translate_constructor translate_expression7 identifier66) expressions30) | (FunctionApplication (expressions31,x358)) -> (wrap_in_brackets2 (translate_function_application2 translate_expression7 expressions31)) | (IntegerConstant (integer10,x359)) -> (wrap_in_brackets2 (SourceString ((string_concat (string_from_int32 integer10) (string_of_char (108l)))))) | (Variable (identifier67)) -> (translate_identifier identifier67) | (Match (expression50,rules4,x360)) -> (wrap_in_brackets2 ((translate_match_expression translate_expression7 expression50) rules4)));;
let rec translate_function_definition = fun identifier68 arguments21 expression51 -> (join (Cons ((SourceString ((data_let_rec ()))),(Cons ((lowercase_identifier identifier68),(Cons ((SourceString ((data_equals ()))),(Cons ((translate_lambda translate_expression7 arguments21 expression51),(Cons ((SourceString ((data_definition_end ()))),Empty)))))))))));;
let rec translate_simple_type = fun identifier69 parameters10 -> (match (list_any (x (identifier_equal identifier69) type_parameter_identifier) parameters10) with False -> (translate_type_identifier identifier69) | True -> (translate_type_variable identifier69));;
let rec translate_complex_types = fun translate_types name50 types6 -> ((fun x50 -> (join ((fun types7 -> (Cons (types7,(Cons ((SourceString ((data_space ()))),(Cons ((translate_type_identifier name50),Empty))))))) (wrap_in_brackets2 ((translate_types (data_comma ())) x50))))) types6);;
let rec translate_function_type = fun translate_types2 return_type4 argument_types -> (match (list_is_empty argument_types) with True -> (wrap_in_brackets2 (join (Cons ((SourceString ((data_unit ()))),(Cons ((SourceString ((data_arrow ()))),(Cons ((translate_types2 (data_arrow ()) (Cons (return_type4,Empty))),Empty)))))))) | False -> (wrap_in_brackets2 (translate_types2 (data_arrow ()) (list_concat argument_types (Cons (return_type4,Empty))))));;
let rec translate_type = fun translate_types3 parameters11 type4 -> (match type4 with (SimpleType (identifier70)) -> (translate_simple_type identifier70 parameters11) | (ComplexType (identifier71,types8,x361)) -> (translate_complex_types translate_types3 identifier71 types8) | (FunctionType (argument_types2,return_type5,x362)) -> (translate_function_type translate_types3 return_type5 argument_types2));;
let rec translate_types4 = fun parameters12 separator5 types9 -> ((fun x50 -> ((source_string_join separator5) ((list_map (translate_type (translate_types4 parameters12) parameters12)) x50))) types9);;
let rec translate_complex_constructor_definition = fun name51 type5 types10 parameters13 -> (join (Cons ((translate_constructor_identifier name51),(Cons ((SourceString ((data_colon ()))),(Cons ((translate_types4 parameters13 (data_star ()) types10),(Cons ((SourceString ((data_arrow ()))),(Cons (type5,Empty)))))))))));;
let rec translate_constructor_definition = fun type6 parameters14 constructor9 -> (match constructor9 with (SimpleConstructor (identifier72)) -> (translate_constructor_identifier identifier72) | (ComplexConstructor (identifier73,types11,x363)) -> (translate_complex_constructor_definition identifier73 type6 types11 parameters14));;
let rec translate_constructor_definitions = fun type7 parameters15 constructors14 -> ((fun x50 -> ((source_string_join (data_vertical_bar ())) ((list_map (translate_constructor_definition type7 parameters15)) x50))) constructors14);;
let rec translate_type_parameter_for_definition = fun parameter3 -> (match parameter3 with (UniversalParameter (identifier74)) -> (translate_type_variable identifier74) | (ExistentialParameter (x364)) -> SourceStringEmpty);;
let rec translate_type_parameters = fun parameters16 -> ((fun x50 -> ((source_string_join (data_comma ())) ((list_filter (fun parameter4 -> (match parameter4 with SourceStringEmpty -> False | x365 -> True))) ((list_map translate_type_parameter_for_definition) x50)))) parameters16);;
let rec translate_type_name = fun name52 parameters17 parameter_string -> (match (list_is_empty parameters17) with True -> (lowercase_identifier name52) | False -> (join (Cons ((wrap_in_brackets2 parameter_string),(Cons ((SourceString ((data_space ()))),(Cons ((lowercase_identifier name52),Empty))))))));;
let rec translate_type_name2 = fun name53 parameters18 -> (translate_type_name name53 parameters18 (translate_type_parameters parameters18));;
let rec translate_type_definition = fun name54 parameters19 constructors15 -> (join (Cons ((SourceString ((data_type ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_type_name2 name54 parameters19),(Cons ((SourceString ((data_equals ()))),(Cons ((translate_constructor_definitions (translate_type_name2 name54 parameters19) parameters19 constructors15),(Cons ((SourceString ((data_definition_end ()))),Empty)))))))))))));;
let rec translate_definition = fun definition16 -> (match definition16 with (FunctionDefinition (identifier75,x366,arguments22,expression52,x367)) -> (translate_function_definition identifier75 arguments22 expression52) | (TypeDefinition (name55,x368,parameters20,constructors16,x369)) -> (translate_type_definition name55 parameters20 constructors16) | (TargetDefinition (x370,data2)) -> (SourceString ((string_from_slice data2))));;
let rec generate_source = fun module_name definitions13 -> ((fun x50 -> ((pair_cons (list_map (pair_cons IdentifierTransformationLowercase) (public_identifiers definitions13))) ((source_string_join (string_of_char (10l))) ((list_map translate_definition) x50)))) definitions13);;
let rec perform_transformations = fun () -> True;;
let rec path_filename = fun path8 -> (match (list_last (string_split (47l) path8)) with (Some (filename)) -> filename | None -> path8);;
let rec path_filename_without_extension = fun path9 -> (match (list_first (string_split (46l) (path_filename path9))) with (Some (name56)) -> name56 | None -> (path_filename path9));;
let rec path_filename_extension = fun path10 -> (match (list_last (string_split (46l) (path_filename path10))) with (Some (name57)) -> name57 | None -> (string_empty ()));;
let rec path_join = fun paths -> (string_join (data_11 ()) paths);;
type ('Tcompilation_result) compiler_backend = Backend : string * (string) list * (string) list * (string -> (definition) list -> 'Tcompilation_result) * boolean -> ('Tcompilation_result) compiler_backend;;
let rec compiler_backend_name = fun backend -> (match backend with (Backend (name58,x371,x372,x373,x374)) -> name58);;
let rec compiler_backend_preamble_files = fun backend2 -> (match backend2 with (Backend (x375,files6,x376,x377,x378)) -> files6);;
let rec compiler_backend_pervasives_files = fun backend3 -> (match backend3 with (Backend (x379,x380,files7,x381,x382)) -> files7);;
let rec compiler_backend_generate_source = fun backend4 module_name2 definitions14 -> (match backend4 with (Backend (x383,x384,x385,generate,x386)) -> (generate module_name2 definitions14));;
let rec compiler_backend_perform_transformations = fun backend5 -> (match backend5 with (Backend (x387,x388,x389,x390,transform)) -> transform);;
let rec compiler_backend_ocaml = fun () -> (Backend ((data_ocaml_language ()),(Cons ((data_preamble_filename ()),Empty)),(Cons ((data_pervasives_filename ()),Empty)),generate_source,(perform_transformations ())));;
let rec generate_source_module = fun module_name3 definitions15 -> ((fun x50 -> ((pair_cons (list_empty ())) (source_string_string ((string_join (string_of_char (10l))) ((list_map (x (stringify_sexp stringify_sexps) definition_to_sexp)) ((list_filter (x (module_equal ModuleSelf) definition_module)) x50)))))) definitions15);;
let rec compiler_backend_module = fun () -> (Backend ((data_module_language ()),Empty,Empty,generate_source_module,False));;
let rec compiler_backends = fun () -> (Cons ((compiler_backend_ocaml ()),(Cons ((compiler_backend_module ()),Empty))));;
let rec parse = fun file_entries -> (parse_source_files (with_local_transform_keywords (default_identifiers ())) file_entries);;
let rec transform2 = fun backend6 definitions16 -> (match (compiler_backend_perform_transformations backend6) with False -> definitions16 | True -> (local_transforms (validate_reserved_identifiers definitions16)));;
let rec generate2 = fun backend7 module_name4 definitions17 -> (result_map (compiler_backend_generate_source backend7 module_name4) definitions17);;
let rec data_no_input_files = fun () -> (string_from_list (Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))));;
let rec data_no_output_path = fun () -> (string_from_list (Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((115l),(Cons ((112l),(Cons ((101l),(Cons ((99l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((100l),(Cons ((44l),(Cons ((32l),(Cons ((112l),(Cons ((108l),(Cons ((101l),(Cons ((97l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((117l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((91l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((93l),(Cons ((32l),(Cons ((102l),(Cons ((108l),(Cons ((97l),(Cons ((103l),(Cons ((46l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_output_key = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),Empty)))))))))))))))));;
let rec data_stdlib = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((115l),(Cons ((116l),(Cons ((100l),(Cons ((108l),(Cons ((105l),(Cons ((98l),Empty)))))))))))))))));;
let rec data_parser_flag = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))));;
let rec data_module_flag = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))))));;
let rec data_language_flag = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),Empty)))))))))))))))))))));;
let rec data_diagnostics_flag = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),(Cons ((100l),(Cons ((105l),(Cons ((97l),(Cons ((103l),(Cons ((110l),(Cons ((111l),(Cons ((115l),(Cons ((116l),(Cons ((105l),(Cons ((99l),(Cons ((115l),Empty)))))))))))))))))))))))))));;
let rec data_read_files = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))));;
let rec data_write_files = fun () -> (string_from_list (Cons ((119l),(Cons ((114l),(Cons ((105l),(Cons ((116l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))));;
let rec data_bytes_read = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((98l),(Cons ((121l),(Cons ((116l),(Cons ((101l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))));;
let rec data_max_heap_size = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((120l),(Cons ((32l),(Cons ((104l),(Cons ((101l),(Cons ((97l),(Cons ((112l),(Cons ((32l),(Cons ((115l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((32l),(Cons ((40l),(Cons ((98l),(Cons ((121l),(Cons ((116l),(Cons ((101l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))));;
let rec data_parse_time = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))));;
let rec data_transform_time = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((116l),(Cons ((32l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((110l),(Cons ((115l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_generate_time = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((100l),(Cons ((101l),(Cons ((32l),(Cons ((103l),(Cons ((101l),(Cons ((110l),(Cons ((101l),(Cons ((114l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))));;
let rec data_standard_library_filename = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((100l),(Cons ((97l),(Cons ((114l),(Cons ((100l),(Cons ((45l),(Cons ((108l),(Cons ((105l),(Cons ((98l),(Cons ((114l),(Cons ((97l),(Cons ((114l),(Cons ((121l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))))))))))))))))))))))));;
let rec data_parser_filename = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))));;
type cli_program = CliTime : (int32 -> cli_program) -> cli_program | CliMaxHeapSize : (int32 -> cli_program) -> cli_program | CliRenderSource : (((identifier_transformation,identifier) pair) list,source_string) pair * (_slice -> cli_program) -> cli_program | CliReadFiles : ((module_reference,string) pair) list * ((source_file) list -> cli_program) -> cli_program | CliWriteFiles : ((string,_slice) pair) list * ( unit  -> cli_program) -> cli_program | CliOutput : string * ( unit  -> cli_program) -> cli_program | CliError : string * ( unit  -> cli_program) -> cli_program | CliExit : int32 -> cli_program;;
let rec flag_is_true = fun flag default4 arguments23 -> (match (dictionary_get flag arguments23) with (Some (value25)) -> (string_equal value25 (data_true ())) | None -> default4);;
let rec find_backend = fun arguments24 -> (maybe_or_else (compiler_backend_ocaml ()) (maybe_bind (dictionary_get (data_language_flag ()) arguments24) (fun language -> (list_find_first (x (string_equal language) compiler_backend_name) (compiler_backends ())))));;
let rec module_name_and_path = fun open3 path11 -> (Pair ((ModulePath ((path_filename_without_extension path11),open3)),path11));;
let rec standard_library_files = fun backend8 data_path -> (Cons ((path_join (Cons (data_path,(Cons ((data_standard_library_filename ()),Empty))))),(list_map (fun filename2 -> (path_join (Cons (data_path,(Cons (filename2,Empty)))))) (compiler_backend_pervasives_files backend8))));;
let rec modules_from_arguments = fun backend9 data_path2 arguments25 -> ((fun x50 -> ((match (flag_is_true (data_stdlib ()) True (dictionary_of arguments25)) with True -> (list_concat (list_map (module_name_and_path True) (standard_library_files backend9 data_path2))) | False -> id) ((match (flag_is_true (data_parser_flag ()) False (dictionary_of arguments25)) with True -> (list_cons (module_name_and_path True (path_join (Cons (data_path2,(Cons ((data_parser_filename ()),Empty))))))) | False -> id) ((list_map (x (module_name_and_path False) pair_right)) ((list_filter (x (string_equal (data_module_flag ())) pair_left)) x50))))) arguments25);;
let rec table_to_string = fun table4 -> (string_join (string_of_char (10l)) (list_map (string_join (data_space ())) table4));;
let rec print_diagnostics = fun arguments26 file_entries2 max_heap_size start_parse end_parse start_transform end_transform start_generate end_generate start_read_files end_read_files start_write_files end_write_files k -> (match (flag_is_true (data_diagnostics_flag ()) False arguments26) with True -> (CliError ((table_to_string (Cons ((Cons ((string_from_int32 (list_foldl (fun file13 bytes -> (Int32.add bytes (source_file_size file13))) (0l) file_entries2)),(Cons ((data_bytes_read ()),Empty)))),(Cons ((Cons ((string_from_int32 max_heap_size),(Cons ((data_max_heap_size ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_parse start_parse)),(Cons ((data_parse_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_transform start_transform)),(Cons ((data_transform_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_generate start_generate)),(Cons ((data_generate_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_read_files start_read_files)),(Cons ((data_read_files ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_write_files start_write_files)),(Cons ((data_write_files ()),Empty)))),Empty))))))))))))))),k)) | False -> (k ()));;
let rec cli_main = fun data_path3 argv -> (match (parse_arguments argv) with (CliArguments (x391,Empty)) -> (CliError ((data_no_input_files ()),(fun () -> (CliExit ((1l)))))) | (CliErrorMissingValue (key8)) -> (CliError (key8,(fun () -> (CliExit ((1l)))))) | (CliArguments (argument_list,input_files)) -> (match (dictionary_of argument_list) with arguments27 -> (match (find_backend arguments27) with backend10 -> (CliTime ((fun start_read_files2 -> (CliReadFiles ((list_concat (list_map (fun filename3 -> (Pair (ModuleSelf,(string_concat data_path3 filename3)))) (compiler_backend_preamble_files backend10)) (list_concat (modules_from_arguments backend10 data_path3 argument_list) (list_map (pair_cons ModuleSelf) input_files))),(fun file_entries3 -> (CliTime ((fun end_read_files2 -> (match (dictionary_get (data_output_key ()) arguments27) with (Some (output_path)) -> (match (path_filename_without_extension output_path) with module_name5 -> (CliTime ((fun start_parse2 -> (match (parse file_entries3) with definitions18 -> (CliTime ((fun end_parse2 -> (CliTime ((fun start_transform2 -> (match (transform2 backend10 definitions18) with definitions19 -> (CliTime ((fun end_transform2 -> (CliTime ((fun start_generate2 -> (match (generate2 backend10 module_name5 definitions19) with (Result (source2)) -> (CliTime ((fun end_generate2 -> (CliTime ((fun start_write_files2 -> (CliRenderSource (source2,(fun source3 -> (CliWriteFiles ((Cons ((Pair (output_path,source3)),Empty)),(fun () -> (CliTime ((fun end_write_files2 -> (CliMaxHeapSize ((fun max_heap_size2 -> (print_diagnostics arguments27 file_entries3 max_heap_size2 start_parse2 end_parse2 start_transform2 end_transform2 start_generate2 end_generate2 start_read_files2 end_read_files2 start_write_files2 end_write_files2 (fun () -> (CliExit ((0l))))))))))))))))))))))) | (Error (error16)) -> (CliError ((error_to_string file_entries3 error16),(fun () -> (CliExit ((1l))))))))))))))))))))))))) | None -> (CliError ((data_no_output_path ()),(fun () -> (CliExit ((1l)))))))))))))))))));;