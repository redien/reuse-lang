type _slice = bytes;;
let slice_empty x = Bytes.empty;;
let slice_of x = if x >= 0l && x < 256l then Bytes.make 1 (Char.chr (Int32.to_int x)) else Bytes.make 1 (Char.chr 0);;
let slice_size slice = Int32.of_int (Bytes.length slice);;
let slice_get slice index =
    if index >= 0l && index < (slice_size slice) then
        Int32.of_int (Char.code (Bytes.get slice (Int32.to_int index)))
    else
        0l ;;
let slice_concat a b = Bytes.concat (Bytes.empty) [a; b];;
let slice_foldl f ys xs =
    let rec slice_foldl i f ys xs =
        if i < Bytes.length xs then
            slice_foldl (i + 1) f (f (Int32.of_int (Char.code (Bytes.get xs i))) ys) xs
        else
            ys in
    slice_foldl 0 f ys xs;;
let slice_subslice slice s e =
    let size = slice_size slice in
    let s' = if s < 0l then 0l else (if s >= size then (Int32.sub size 1l) else s) in
    let e' = if e < 0l then 0l else (if e >= size then (Int32.sub size 1l) else e) in
    if Int32.sub e s <= 0l then
        slice_empty ()
    else
        Bytes.sub slice (Int32.to_int s') (Int32.to_int (Int32.sub e' s'));;
let rec id = fun x7 -> x7;;
let rec const = fun a b -> a;;
let rec flip = fun f -> (fun b2 a2 -> (f a2 b2));;
let rec x = fun f2 g x8 -> (f2 (g x8));;
let rec fix = fun f3 -> (f3 (fix f3));;
type boolean = True | False;;
let rec not = fun a3 -> (match a3 with True -> False | False -> True);;
let rec and2 = fun a4 b3 -> (match a4 with True -> b3 | False -> False);;
let rec or2 = fun a5 b4 -> (match a5 with True -> True | False -> b4);;
let rec x2 = fun a6 b5 -> (if a6<b5 then True else False);;
let rec x3 = fun a7 b6 -> (x2 b6 a7);;
let rec x4 = fun a8 b7 -> (not (or2 (x2 a8 b7) (x3 a8 b7)));;
let rec x5 = fun a9 b8 -> (or2 (x2 a9 b8) (x4 a9 b8));;
let rec x6 = fun a10 b9 -> (or2 (x3 a10 b9) (x4 a10 b9));;
type ('Ta11,'Tb10) pair = Pair : 'Ta11 * 'Tb10 -> ('Ta11,'Tb10) pair;;
let rec pair_cons = fun a12 b11 -> (Pair (a12,b11));;
let rec pair_left = fun pair2 -> (match pair2 with (Pair (x9,x10)) -> x9);;
let rec pair_right = fun pair3 -> (match pair3 with (Pair (x11,x12)) -> x12);;
let rec pair_map = fun f4 pair4 -> (match pair4 with (Pair (x13,y)) -> (f4 x13 y));;
let rec pair_bimap = fun f5 g2 pair5 -> (match pair5 with (Pair (x14,y2)) -> (Pair ((f5 x14),(g2 y2))));;
let rec pair_map_left = fun f6 pair6 -> (match pair6 with (Pair (x15,y3)) -> (Pair ((f6 x15),y3)));;
let rec pair_map_right = fun f7 pair7 -> (match pair7 with (Pair (x16,y4)) -> (Pair (x16,(f7 y4))));;
let rec pair_swap = fun pair8 -> (match pair8 with (Pair (x17,y5)) -> (Pair (y5,x17)));;
type ('Ta13) maybe = Some : 'Ta13 -> ('Ta13) maybe | None;;
let rec maybe_map = fun f8 maybe2 -> (match maybe2 with (Some (x18)) -> (Some ((f8 x18))) | None -> None);;
let rec maybe_flatmap = fun f9 maybe3 -> (match maybe3 with (Some (x19)) -> (f9 x19) | None -> None);;
let rec maybe_bind = fun maybe4 f10 -> (maybe_flatmap f10 maybe4);;
let rec maybe_return = fun x20 -> (Some (x20));;
let rec maybe_filter = fun f11 maybe5 -> (match maybe5 with (Some (x21)) -> (match (f11 x21) with True -> maybe5 | False -> None) | None -> None);;
let rec maybe_else = fun f12 maybe6 -> (match maybe6 with None -> (f12 ()) | (Some (x22)) -> x22);;
let rec maybe_or_else = fun value2 maybe7 -> (match maybe7 with None -> value2 | (Some (x23)) -> x23);;
type ('Tcollection,'Telement) iterable_class = IterableClass : ('Tcollection -> (('Telement) maybe,'Tcollection) pair) -> ('Tcollection,'Telement) iterable_class;;
let rec iterable_next = fun class2 collection2 -> (match class2 with (IterableClass (next)) -> (next collection2));;
type ('Telement2) indexed_iterator = IndexedIterator : ('Titerable,'Telement2) iterable_class * 'Titerable * int32 -> ('Telement2) indexed_iterator;;
let rec indexed_iterator_from_iterable = fun i iterable2 -> (IndexedIterator (i,iterable2,(0l)));;
let rec indexed_iterator_next = fun iterator -> (match iterator with (IndexedIterator (i2,iterable3,index)) -> (match (iterable_next i2 iterable3) with (Pair (value3,next_iterable)) -> (Pair (value3,(IndexedIterator (i2,next_iterable,(Int32.add index (1l))))))));;
let rec indexed_iterator_index = fun iterator2 -> (match iterator2 with (IndexedIterator (x24,x25,index2)) -> index2);;
type ('Ta14) list = Cons : 'Ta14 * ('Ta14) list -> ('Ta14) list | Empty;;
let rec list_empty = fun () -> Empty;;
let rec list_cons = fun x26 xs -> (Cons (x26,xs));;
let rec list_from = fun x27 -> (Cons (x27,Empty));;
let rec list_from_range2 = fun from to2 rest -> (match (x3 to2 from) with True -> (list_from_range2 from (Int32.sub to2 (1l)) (Cons ((Int32.sub to2 (1l)),rest))) | False -> rest);;
let rec list_from_range = fun from2 to3 -> (list_from_range2 from2 to3 Empty);;
let rec list_first = fun list2 -> (match list2 with (Cons (x28,x29)) -> (Some (x28)) | Empty -> None);;
let rec list_rest = fun list3 -> (match list3 with (Cons (x30,rest2)) -> rest2 | Empty -> Empty);;
let rec list_last = fun list4 -> (match list4 with Empty -> None | (Cons (x31,Empty)) -> (Some (x31)) | (Cons (x32,rest3)) -> (list_last rest3));;
let rec list_is_empty = fun list5 -> (match list5 with (Cons (x33,x34)) -> False | Empty -> True);;
let rec list_size2 = fun list6 size -> (match list6 with (Cons (x35,rest4)) -> (list_size2 rest4 (Int32.add size (1l))) | Empty -> size);;
let rec list_size = fun list7 -> (list_size2 list7 (0l));;
let rec list_foldrk = fun f13 initial list8 continue -> (match list8 with Empty -> (continue initial) | (Cons (x36,xs2)) -> (list_foldrk f13 initial xs2 (fun value4 -> (f13 x36 value4 continue))));;
let rec list_foldlk = fun f14 initial2 list9 continue2 -> (match list9 with Empty -> (continue2 initial2) | (Cons (x37,xs3)) -> (f14 x37 initial2 (fun new_value -> (list_foldlk f14 new_value xs3 continue2))));;
let rec list_foldr = fun f15 initial3 list10 -> (list_foldrk (fun x38 value5 continue3 -> (continue3 (f15 x38 value5))) initial3 list10 (fun x39 -> x39));;
let rec list_foldl = fun f16 initial4 list11 -> (match list11 with Empty -> initial4 | (Cons (x40,xs4)) -> (list_foldl f16 (f16 x40 initial4) xs4));;
let rec list_concat = fun a15 b12 -> (list_foldr list_cons b12 a15);;
let rec list_reverse = fun list12 -> (list_foldl list_cons Empty list12);;
let rec list_map = fun f17 list13 -> (list_foldr (fun head tail -> (list_cons (f17 head) tail)) Empty list13);;
let rec list_flatmap = fun f18 list14 -> (list_foldr (fun head2 tail2 -> (list_concat (f18 head2) tail2)) Empty list14);;
let rec list_flatten = fun list15 -> (list_foldr list_concat Empty list15);;
let rec list_split_at2 = fun n a16 b13 -> (match (x3 n (0l)) with True -> (match b13 with (Cons (x41,xs5)) -> (list_split_at2 (Int32.sub n (1l)) (Cons (x41,a16)) xs5) | Empty -> (Pair ((list_reverse a16),b13))) | False -> (Pair ((list_reverse a16),b13)));;
let rec list_split_at = fun n2 xs6 -> (list_split_at2 n2 Empty xs6);;
let rec list_partition2 = fun n3 xs7 partitions -> (match (list_split_at n3 xs7) with (Pair (Empty,x42)) -> partitions | (Pair (partition,xs8)) -> (list_partition2 n3 xs8 (Cons (partition,partitions))));;
let rec list_partition = fun n4 xs9 -> (list_reverse (list_partition2 n4 xs9 Empty));;
let rec list_partition_by2 = fun x43 xs10 -> (match xs10 with (Cons (partition2,rest5)) -> (Cons ((Cons (x43,partition2)),rest5)) | Empty -> xs10);;
let rec list_partition_by = fun f19 xs11 -> (match xs11 with Empty -> Empty | (Cons (x44,Empty)) -> (Cons ((Cons (x44,Empty)),Empty)) | (Cons (x45,(Cons (x46,rest6)))) -> (match (f19 x45 x46) with True -> (list_partition_by2 x45 (list_partition_by f19 (Cons (x46,rest6)))) | False -> (Cons ((Cons (x45,Empty)),(list_partition_by f19 (Cons (x46,rest6)))))));;
let rec list_skip = fun count list16 -> (pair_right (list_split_at count list16));;
let rec list_take = fun count2 list17 -> (pair_left (list_split_at count2 list17));;
let rec list_zip2 = fun xs12 ys collected -> (match xs12 with Empty -> collected | (Cons (x47,xs13)) -> (match ys with Empty -> collected | (Cons (y6,ys2)) -> (list_zip2 xs13 ys2 (Cons ((Pair (x47,y6)),collected)))));;
let rec list_zip = fun xs14 ys3 -> (list_reverse (list_zip2 xs14 ys3 Empty));;
let rec list_pairs = fun xs15 -> (match xs15 with (Cons (a17,(Cons (b14,rest7)))) -> (Cons ((Pair (a17,b14)),(list_pairs rest7))) | x48 -> Empty);;
let rec list_find_first = fun predicate list18 -> (match list18 with Empty -> None | (Cons (x49,xs16)) -> (match (predicate x49) with True -> (Some (x49)) | False -> (list_find_first predicate xs16)));;
let rec list_filter = fun f20 list19 -> (list_foldr (fun head3 tail3 -> (match (f20 head3) with True -> (Cons (head3,tail3)) | False -> tail3)) Empty list19);;
let rec list_exclude = fun f21 list20 -> (list_filter (fun x50 -> (not (f21 x50))) list20);;
let rec list_any = fun f22 list21 -> (match (list_find_first f22 list21) with (Some (x51)) -> True | x52 -> False);;
let rec list_every = fun f23 list22 -> (match (list_find_first (fun x53 -> (not (f23 x53))) list22) with (Some (x54)) -> False | x55 -> True);;
let rec list_from_maybe = fun maybe8 -> (match maybe8 with (Some (x56)) -> (Cons (x56,Empty)) | None -> Empty);;
let rec list_collect_from_indexed_iterator2 = fun predicate2 iterator3 initial5 -> (match (indexed_iterator_next iterator3) with (Pair (None,x57)) -> (Pair (iterator3,initial5)) | (Pair ((Some (x58)),next2)) -> (match (predicate2 x58) with True -> (list_collect_from_indexed_iterator2 predicate2 next2 (Cons (x58,initial5))) | False -> (Pair (iterator3,initial5))));;
let rec list_collect_from_indexed_iterator = fun predicate3 iterator4 -> (match (list_collect_from_indexed_iterator2 predicate3 iterator4 Empty) with (Pair (iterator5,result2)) -> (Pair (iterator5,(list_reverse result2))));;
type string_node = FTValue : int32 -> string_node | FTNode2 : int32 * string_node * string_node -> string_node | FTNode3 : int32 * string_node * string_node * string_node -> string_node;;
type string = FTEmpty | FTSingle : string_node -> string | FTDeep : (string_node) list * string * (string_node) list -> string;;
let rec string_empty = fun () -> FTEmpty;;
let rec string_of_char = fun character -> (FTSingle ((FTValue (character))));;
let rec string_node_size = fun node -> (match node with (FTValue (x59)) -> (1l) | (FTNode2 (size2,x60,x61)) -> size2 | (FTNode3 (size3,x62,x63,x64)) -> size3);;
let rec string_node2 = fun a18 b15 -> (FTNode2 ((Int32.add (string_node_size a18) (string_node_size b15)),a18,b15));;
let rec string_node3 = fun a19 b16 c -> (FTNode3 ((Int32.add (string_node_size a19) (Int32.add (string_node_size b16) (string_node_size c))),a19,b16,c));;
let rec string_prepend_node = fun a20 tree -> (match tree with FTEmpty -> (FTSingle (a20)) | (FTSingle (x65)) -> (FTDeep ((Cons (a20,Empty)),FTEmpty,(Cons (x65,Empty)))) | (FTDeep (first,middle,last)) -> (match first with (Cons (b17,(Cons (c2,(Cons (d,(Cons (e,Empty)))))))) -> (FTDeep ((Cons (a20,(Cons (b17,Empty)))),(string_prepend_node (string_node3 c2 d e) middle),last)) | x66 -> (FTDeep ((Cons (a20,first)),middle,last))));;
let rec string_prepend = fun char string2 -> (string_prepend_node (FTValue (char)) string2);;
let rec string_append_node = fun a21 tree2 -> (match tree2 with FTEmpty -> (FTSingle (a21)) | (FTSingle (x67)) -> (FTDeep ((Cons (x67,Empty)),FTEmpty,(Cons (a21,Empty)))) | (FTDeep (first2,middle2,last2)) -> (match last2 with (Cons (b18,(Cons (c3,(Cons (d2,(Cons (e2,Empty)))))))) -> (FTDeep (first2,(string_append_node (string_node3 e2 d2 c3) middle2),(Cons (a21,(Cons (b18,Empty)))))) | x68 -> (FTDeep (first2,middle2,(Cons (a21,last2))))));;
let rec string_append = fun char2 string3 -> (string_append_node (FTValue (char2)) string3);;
let rec string_first_node = fun node2 -> (match node2 with (FTValue (x69)) -> x69 | (FTNode2 (x70,x71,x72)) -> (string_first_node x71) | (FTNode3 (x73,x74,x75,x76)) -> (string_first_node x74));;
let rec string_first = fun string4 -> (match string4 with FTEmpty -> None | (FTSingle (node3)) -> (Some ((string_first_node node3))) | (FTDeep (first3,middle3,last3)) -> (maybe_map string_first_node (list_first first3)));;
let rec string_rest_node = fun node4 -> (match node4 with (FTValue (x77)) -> None | (FTNode2 (x78,a22,b19)) -> (match (string_rest_node a22) with (Some (node5)) -> (Some ((string_node2 node5 b19))) | None -> (Some (b19))) | (FTNode3 (x79,a23,b20,c4)) -> (match (string_rest_node a23) with (Some (node6)) -> (Some ((string_node3 node6 b20 c4))) | None -> (Some ((string_node2 b20 c4)))));;
let rec string_rest = fun string5 -> (match string5 with FTEmpty -> string5 | (FTSingle (node7)) -> (match (string_rest_node node7) with (Some (node8)) -> (FTSingle (node8)) | None -> FTEmpty) | (FTDeep ((Cons (node9,rest8)),middle4,last4)) -> (match (string_rest_node node9) with (Some (node10)) -> (FTDeep ((Cons (node10,rest8)),middle4,last4)) | None -> (match rest8 with Empty -> (list_foldr string_append_node middle4 last4) | x80 -> (FTDeep (rest8,middle4,last4)))) | x81 -> string5);;
let rec string_foldr_node = fun f24 node11 identity -> (match node11 with (FTValue (a24)) -> (f24 a24 identity) | (FTNode2 (x82,a25,b21)) -> (string_foldr_node f24 a25 (string_foldr_node f24 b21 identity)) | (FTNode3 (x83,a26,b22,c5)) -> (string_foldr_node f24 a26 (string_foldr_node f24 b22 (string_foldr_node f24 c5 identity))));;
let rec string_foldr = fun f25 identity2 tree3 -> (match tree3 with FTEmpty -> identity2 | (FTSingle (x84)) -> (string_foldr_node f25 x84 identity2) | (FTDeep (first4,middle5,last5)) -> (list_foldr (string_foldr_node f25) (string_foldr f25 (list_foldl (string_foldr_node f25) identity2 last5) middle5) first4));;
let rec string_foldl_node = fun f26 node12 identity3 -> (match node12 with (FTValue (a27)) -> (f26 a27 identity3) | (FTNode2 (x85,b23,a28)) -> (string_foldl_node f26 a28 (string_foldl_node f26 b23 identity3)) | (FTNode3 (x86,c6,b24,a29)) -> (string_foldl_node f26 a29 (string_foldl_node f26 b24 (string_foldl_node f26 c6 identity3))));;
let rec string_foldl = fun f27 identity4 tree4 -> (match tree4 with FTEmpty -> identity4 | (FTSingle (x87)) -> (string_foldl_node f27 x87 identity4) | (FTDeep (first5,middle6,last6)) -> (list_foldr (string_foldl_node f27) (string_foldl f27 (list_foldl (string_foldl_node f27) identity4 first5) middle6) last6));;
let rec string_size = fun string6 -> (match string6 with FTEmpty -> (0l) | (FTSingle (x88)) -> (string_node_size x88) | (FTDeep (first6,middle7,last7)) -> (Int32.add (list_foldr Int32.add (0l) (list_map string_node_size first6)) (Int32.add (list_foldr Int32.add (0l) (list_map string_node_size last7)) (string_size middle7))));;
let rec string_concat_nodes = fun nodes -> (match nodes with (Cons (a30,(Cons (b25,Empty)))) -> (Cons ((string_node2 a30 b25),Empty)) | (Cons (a31,(Cons (b26,(Cons (c7,Empty)))))) -> (Cons ((string_node3 a31 b26 c7),Empty)) | (Cons (a32,(Cons (b27,(Cons (c8,(Cons (d3,Empty)))))))) -> (Cons ((string_node2 a32 b27),(Cons ((string_node2 c8 d3),Empty)))) | (Cons (a33,(Cons (b28,(Cons (c9,rest9)))))) -> (Cons ((string_node3 a33 b28 c9),(string_concat_nodes rest9))) | x89 -> Empty);;
type ('Ta34,'Tb29,'Tc10) triple = Triple : 'Ta34 * 'Tb29 * 'Tc10 -> ('Ta34,'Tb29,'Tc10) triple;;
let rec string_concat2 = fun a35 nodes2 b30 -> (match (Triple (a35,nodes2,b30)) with (Triple (FTEmpty,nodes3,b31)) -> (list_foldr string_prepend_node b31 nodes3) | (Triple (a36,nodes4,FTEmpty)) -> (list_foldl string_append_node a36 nodes4) | (Triple ((FTSingle (x90)),nodes5,b32)) -> (string_prepend_node x90 (list_foldr string_prepend_node b32 nodes5)) | (Triple (a37,nodes6,(FTSingle (x91)))) -> (string_append_node x91 (list_foldl string_append_node a37 nodes6)) | (Triple ((FTDeep (first1,middle1,last1)),nodes7,(FTDeep (first22,middle22,last22)))) -> (FTDeep (first1,(string_concat2 middle1 (string_concat_nodes (list_concat (list_reverse last1) (list_concat nodes7 first22))) middle22),last22)));;
let rec string_concat = fun a38 b33 -> (string_concat2 a38 Empty b33);;
let rec string_is_empty = fun string7 -> (match (string_first string7) with (Some (x92)) -> False | None -> True);;
let rec string_any = fun predicate4 string8 -> (string_foldl (fun x93 b34 -> (or2 (predicate4 x93) b34)) False string8);;
let rec string_every = fun predicate5 string9 -> (string_foldl (fun x94 b35 -> (and2 (predicate5 x94) b35)) True string9);;
let rec string_to_list = fun string10 -> (string_foldr list_cons Empty string10);;
let rec string_from_list = fun list23 -> (list_foldl string_append (string_empty ()) list23);;
let rec string_skip = fun count3 string11 -> (match string11 with FTEmpty -> FTEmpty | x95 -> (match (x3 count3 (0l)) with True -> (string_skip (Int32.sub count3 (1l)) (string_rest string11)) | False -> string11));;
let rec string_take2 = fun count4 string12 taken -> (match (x3 count4 (0l)) with True -> (match (string_first string12) with (Some (char3)) -> (string_take2 (Int32.sub count4 (1l)) (string_rest string12) (string_append char3 taken)) | None -> taken) | False -> taken);;
let rec string_take = fun count5 string13 -> (string_take2 count5 string13 (string_empty ()));;
let rec string_reverse = fun string14 -> (string_foldl string_prepend (string_empty ()) string14);;
let rec string_substring = fun start size4 string15 -> (string_take size4 (string_skip start string15));;
let rec string_join = fun separator strings -> (match strings with (Cons (first7,rest10)) -> (list_foldl (fun string16 joined -> (string_concat joined (string_concat separator string16))) first7 rest10) | Empty -> (string_empty ()));;
let rec string_flatmap = fun f28 string17 -> (string_foldl (fun x96 xs17 -> (string_concat xs17 (f28 x96))) (string_empty ()) string17);;
let rec string_split2 = fun separator2 list24 current parts -> (match list24 with Empty -> (list_reverse (Cons ((list_reverse current),parts))) | (Cons (c11,rest11)) -> (match (x4 separator2 c11) with True -> (string_split2 separator2 rest11 Empty (Cons ((list_reverse current),parts))) | False -> (string_split2 separator2 rest11 (Cons (c11,current)) parts)));;
let rec string_split = fun separator3 string18 -> (list_map string_from_list (string_split2 separator3 (string_to_list string18) Empty Empty));;
let rec string_trim_start2 = fun list25 -> (match list25 with (Cons (x97,xs18)) -> (match (x4 x97 (32l)) with True -> (string_trim_start2 xs18) | False -> list25) | Empty -> list25);;
let rec string_trim_start = fun string19 -> (string_from_list (string_trim_start2 (string_to_list string19)));;
let rec string_trim_end = fun string20 -> (string_reverse (string_trim_start (string_reverse string20)));;
let rec string_trim = fun string21 -> (string_trim_start (string_trim_end string21));;
let rec string_equal = fun a39 b36 -> (match (string_first a39) with (Some (xa)) -> (match (string_first b36) with (Some (xb)) -> (and2 (x4 xa xb) (string_equal (string_rest a39) (string_rest b36))) | None -> (string_is_empty a39)) | None -> (string_is_empty b36));;
let rec string_index_of = fun index3 substring string22 -> (match (x6 index3 (string_size string22)) with True -> None | False -> (match (string_equal substring (string_substring index3 (string_size substring) string22)) with True -> (Some (index3)) | False -> (string_index_of (Int32.add index3 (1l)) substring string22)));;
let rec string_point_is_digit = fun point -> (match (x3 point (47l)) with False -> False | True -> (match (x2 point (58l)) with True -> True | False -> False));;
let rec string_to_int322 = fun string_to_int323 string23 accumulator x98 -> (string_to_int323 string23 (Some ((Int32.add (Int32.mul (10l) accumulator) (Int32.sub x98 (48l))))));;
let rec string_to_int324 = fun string24 accumulator2 -> (match string24 with Empty -> accumulator2 | (Cons (x99,rest12)) -> (maybe_flatmap (fun accumulator3 -> ((fun x50 -> ((maybe_flatmap (string_to_int322 string_to_int324 rest12 accumulator3)) ((maybe_filter string_point_is_digit) x50))) (Some (x99)))) accumulator2));;
let rec string_to_int325 = fun string25 -> (match string25 with (Cons (45l,string26)) -> (match (list_is_empty string26) with True -> None | False -> (maybe_map (fun x100 -> (Int32.mul (-1l) x100)) (string_to_int325 string26))) | (Cons (x101,rest13)) -> (match (string_point_is_digit x101) with True -> (string_to_int324 string25 (Some ((0l)))) | False -> None) | Empty -> None);;
let rec string_to_int32 = fun string27 -> (string_to_int325 (string_to_list string27));;
let rec string_from_int322 = fun integer string28 -> (match (x3 integer (9l)) with True -> (string_from_int322 (Int32.div integer (10l)) (Cons ((Int32.add (Int32.rem integer (10l)) (48l)),string28))) | False -> (Cons ((Int32.add integer (48l)),string28)));;
let rec string_from_int323 = fun integer2 -> (match (x2 integer2 (0l)) with True -> (match (x4 integer2 (-2147483648l)) with True -> (Cons ((45l),(Cons ((50l),(Cons ((49l),(Cons ((52l),(Cons ((55l),(Cons ((52l),(Cons ((56l),(Cons ((51l),(Cons ((54l),(Cons ((52l),(Cons ((56l),Empty)))))))))))))))))))))) | False -> (Cons ((45l),(string_from_int323 (Int32.mul integer2 (-1l)))))) | False -> (string_from_int322 integer2 Empty));;
let rec string_from_int32 = fun integer3 -> (string_from_list (string_from_int323 integer3));;
let rec string_collect_from_slice2 = fun predicate6 index4 slice2 initial6 -> (match (x2 index4 (slice_size slice2)) with False -> (Pair (index4,initial6)) | True -> (match (predicate6 (slice_get slice2 index4)) with True -> (string_collect_from_slice2 predicate6 (Int32.add index4 (1l)) slice2 (string_append (slice_get slice2 index4) initial6)) | False -> (Pair (index4,initial6))));;
let rec string_collect_from_slice = fun predicate7 index5 slice3 -> (string_collect_from_slice2 predicate7 index5 slice3 (string_empty ()));;
let rec string_to_slice = fun string29 -> (string_foldl (fun c12 slice4 -> (slice_concat slice4 (slice_of c12))) (slice_empty ()) string29);;
let rec string_from_slice = fun slice5 -> (slice_foldl string_append (string_empty ()) slice5);;
let rec string_collect_from_indexed_iterator2 = fun predicate8 iterator6 initial7 -> (match (indexed_iterator_next iterator6) with (Pair (None,x102)) -> (Pair (iterator6,initial7)) | (Pair ((Some (x103)),next3)) -> (match (predicate8 x103) with True -> (string_collect_from_indexed_iterator2 predicate8 next3 (string_append x103 initial7)) | False -> (Pair (iterator6,initial7))));;
let rec string_collect_from_indexed_iterator = fun predicate9 iterator7 -> (string_collect_from_indexed_iterator2 predicate9 iterator7 (string_empty ()));;
let rec string_from_indexed_iterator = fun iterator8 -> (pair_right (string_collect_from_indexed_iterator (fun x104 -> True) iterator8));;
let rec string_iterable = fun () -> (IterableClass ((fun string30 -> (Pair ((string_first string30),(string_rest string30))))));;
let rec string_from_boolean = fun boolean2 -> (match boolean2 with True -> (string_from_list (Cons ((84l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty))))))))) | False -> (string_from_list (Cons ((70l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty))))))))))));;
let rec valid_string_from_unicode_code_point = fun point2 -> (match (x3 point2 (65535l)) with True -> (string_from_list (Cons ((Int32.add (240l) (Int32.div (Int32.logand point2 (1835008l)) (262144l))),(Cons ((Int32.add (128l) (Int32.div (Int32.logand point2 (258048l)) (4096l))),(Cons ((Int32.add (128l) (Int32.div (Int32.logand point2 (4032l)) (64l))),(Cons ((Int32.add (128l) (Int32.logand point2 (63l))),Empty))))))))) | False -> (match (x3 point2 (2047l)) with True -> (string_from_list (Cons ((Int32.add (224l) (Int32.div (Int32.logand point2 (61440l)) (4096l))),(Cons ((Int32.add (128l) (Int32.div (Int32.logand point2 (4032l)) (64l))),(Cons ((Int32.add (128l) (Int32.logand point2 (63l))),Empty))))))) | False -> (match (x3 point2 (127l)) with True -> (string_from_list (Cons ((Int32.add (192l) (Int32.div (Int32.logand point2 (1984l)) (64l))),(Cons ((Int32.add (128l) (Int32.logand point2 (63l))),Empty))))) | False -> (string_of_char point2))));;
let rec invalid_code_point = fun () -> (string_from_list (Cons ((255l),(Cons ((253l),Empty)))));;
let rec string_from_unicode_code_point = fun point3 -> (match (x3 point3 (1114111l)) with True -> (invalid_code_point ()) | False -> (match (x3 point3 (55295l)) with True -> (match (x2 point3 (57344l)) with True -> (invalid_code_point ()) | False -> (valid_string_from_unicode_code_point point3)) | False -> (valid_string_from_unicode_code_point point3)));;
type ('Tv,'Te3) result = Result : 'Tv -> ('Tv,'Te3) result | Error : 'Te3 -> ('Tv,'Te3) result;;
let rec result_lift = fun result3 -> (Result (result3));;
let rec result_error = fun error2 -> (Error (error2));;
let rec result_prod = fun return result4 -> (match result4 with (Result (m)) -> m | (Error (error3)) -> (return (Error (error3))));;
let rec result_bimap = fun f29 g3 result5 -> (match result5 with (Result (x105)) -> (Result ((f29 x105))) | (Error (y7)) -> (Error ((g3 y7))));;
let rec result_either = fun f30 g4 result6 -> (match result6 with (Result (x106)) -> (f30 x106) | (Error (x107)) -> (g4 x107));;
let rec result_map = fun f31 result7 -> (result_bimap f31 id result7);;
let rec result_flatmap = fun f32 result8 -> (match result8 with (Result (x108)) -> (f32 x108) | (Error (error4)) -> (Error (error4)));;
let rec result_or_else = fun value6 result9 -> (match result9 with (Result (x109)) -> x109 | (Error (x110)) -> value6);;
let rec result_error2 = fun result10 -> (match result10 with (Error (x111)) -> True | x112 -> False);;
let rec result_filter_list = fun list26 -> (list_foldr (fun result11 new_list -> (match result11 with (Result (x113)) -> (Cons (x113,new_list)) | x114 -> new_list)) Empty list26);;
let rec result_concat = fun list27 -> (match (list_filter result_error2 list27) with (Cons ((Error (error5)),x115)) -> (Error (error5)) | (Cons ((Result (x116)),x117)) -> (Result (Empty)) | Empty -> (Result ((result_filter_list list27))));;
let rec result_of_maybe = fun error6 maybe9 -> (match maybe9 with (Some (x118)) -> (Result (x118)) | None -> (Error (error6)));;
let rec result_bind = fun result12 f33 -> (result_flatmap f33 result12);;
let rec result_return = fun value7 -> (result_lift value7);;
type ('Ts,'Tv2) state = Operation : ('Ts -> ('Ts,'Tv2) pair) -> ('Ts,'Tv2) state;;
let rec state_run = fun state2 operation -> (match operation with (Operation (f34)) -> (f34 state2));;
let rec state_final_value = fun initial_state operation2 -> (match (state_run initial_state operation2) with (Pair (x119,value8)) -> value8);;
let rec state_return = fun value9 -> (Operation ((fun state3 -> (Pair (state3,value9)))));;
let rec state_bind = fun operation3 f35 -> (Operation ((fun state4 -> (match (state_run state4 operation3) with (Pair (new_state,new_value2)) -> (state_run new_state (f35 new_value2))))));;
let rec state_get = fun () -> (Operation ((fun state5 -> (Pair (state5,state5)))));;
let rec state_set = fun state6 -> (Operation ((fun x120 -> (Pair (state6,state6)))));;
let rec state_modify = fun f36 -> (state_bind (state_get ()) (fun state7 -> (state_set (f36 state7))));;
let rec state_let = fun value10 f37 -> (state_bind (state_return value10) f37);;
let rec state_foldr = fun f38 initial_value operations -> (list_foldr (fun operation4 chain -> (state_bind operation4 (fun x121 -> (state_bind chain (fun xs19 -> (state_return (f38 x121 xs19))))))) (state_return initial_value) operations);;
let rec state_foreach = fun f39 xs20 -> (state_foldr list_cons Empty (list_map f39 xs20));;
let rec state_flatmap = fun f40 operation5 -> (state_bind operation5 f40);;
let rec state_map = fun f41 operation6 -> (state_flatmap (fun x50 -> (state_return (f41 x50))) operation6);;
let rec state_lift = fun value11 -> (state_return value11);;
type array_color = ArrayRed | ArrayBlack;;
type ('Tvalue12) array = ArrayEmpty | ArrayTree : array_color * ('Tvalue12) array * (int32,'Tvalue12) pair * ('Tvalue12) array -> ('Tvalue12) array;;
let rec array_empty = fun () -> ArrayEmpty;;
let rec array_make_black = fun array2 -> (match array2 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x122,a40,y8,b37)) -> (ArrayTree (ArrayBlack,a40,y8,b37)));;
let rec array_balance = fun array3 -> (match array3 with (ArrayTree (ArrayBlack,(ArrayTree (ArrayRed,(ArrayTree (ArrayRed,a41,x123,b38)),y9,c13)),z,d4)) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a41,x123,b38)),y9,(ArrayTree (ArrayBlack,c13,z,d4)))) | (ArrayTree (ArrayBlack,(ArrayTree (ArrayRed,a42,x124,(ArrayTree (ArrayRed,b39,y10,c14)))),z2,d5)) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a42,x124,b39)),y10,(ArrayTree (ArrayBlack,c14,z2,d5)))) | (ArrayTree (ArrayBlack,a43,x125,(ArrayTree (ArrayRed,(ArrayTree (ArrayRed,b40,y11,c15)),z3,d6)))) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a43,x125,b40)),y11,(ArrayTree (ArrayBlack,c15,z3,d6)))) | (ArrayTree (ArrayBlack,a44,x126,(ArrayTree (ArrayRed,b41,y12,(ArrayTree (ArrayRed,c16,z4,d7)))))) -> (ArrayTree (ArrayRed,(ArrayTree (ArrayBlack,a44,x126,b41)),y12,(ArrayTree (ArrayBlack,c16,z4,d7)))) | rest14 -> rest14);;
let rec array_set2 = fun x127 value13 array4 -> (match array4 with ArrayEmpty -> (ArrayTree (ArrayRed,ArrayEmpty,(Pair (x127,value13)),ArrayEmpty)) | (ArrayTree (color,a45,y13,b42)) -> (match (x2 x127 (pair_left y13)) with True -> (array_balance (ArrayTree (color,(array_set2 x127 value13 a45),y13,b42))) | False -> (match (x3 x127 (pair_left y13)) with True -> (array_balance (ArrayTree (color,a45,y13,(array_set2 x127 value13 b42)))) | False -> (ArrayTree (color,a45,(Pair (x127,value13)),b42)))));;
let rec array_set = fun x128 value14 array5 -> (array_make_black (array_set2 x128 value14 array5));;
let rec array_get = fun x129 array6 -> (match array6 with ArrayEmpty -> None | (ArrayTree (x130,a46,(Pair (y14,value15)),b43)) -> (match (x2 x129 y14) with True -> (array_get x129 a46) | False -> (match (x3 x129 y14) with True -> (array_get x129 b43) | False -> (Some (value15)))));;
let rec array_min = fun array7 default -> (match array7 with ArrayEmpty -> default | (ArrayTree (x131,ArrayEmpty,y15,x132)) -> y15 | (ArrayTree (x133,a47,x134,x135)) -> (array_min a47 default));;
let rec array_remove_min = fun array8 -> (match array8 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x136,ArrayEmpty,y16,b44)) -> b44 | (ArrayTree (color2,a48,y17,b45)) -> (array_balance (ArrayTree (color2,(array_remove_min a48),y17,b45))));;
let rec array_remove_root = fun array9 -> (match array9 with ArrayEmpty -> ArrayEmpty | (ArrayTree (x137,ArrayEmpty,y18,ArrayEmpty)) -> ArrayEmpty | (ArrayTree (x138,a49,y19,ArrayEmpty)) -> a49 | (ArrayTree (x139,ArrayEmpty,y20,b46)) -> b46 | (ArrayTree (color3,a50,y21,b47)) -> (array_balance (ArrayTree (color3,a50,(array_min b47 y21),(array_remove_min b47)))));;
let rec array_remove2 = fun x140 array10 -> (match array10 with ArrayEmpty -> ArrayEmpty | (ArrayTree (color4,a51,y22,b48)) -> (match (x2 x140 (pair_left y22)) with True -> (array_balance (ArrayTree (color4,(array_remove2 x140 a51),y22,b48))) | False -> (match (x3 x140 (pair_left y22)) with True -> (array_balance (ArrayTree (color4,a51,y22,(array_remove2 x140 b48)))) | False -> (array_remove_root array10))));;
let rec array_remove = fun x141 array11 -> (array_make_black (array_remove2 x141 array11));;
let rec array_entries = fun array12 -> (match array12 with ArrayEmpty -> Empty | (ArrayTree (x142,a52,entry,b49)) -> (list_flatten (Cons ((array_entries a52),(Cons ((Cons (entry,Empty)),(Cons ((array_entries b49),Empty))))))));;
let rec array_from_list2 = fun entries index6 array13 -> (match entries with (Cons (x143,xs21)) -> (array_from_list2 xs21 (Int32.add index6 (1l)) (array_set index6 x143 array13)) | Empty -> array13);;
let rec array_from_list = fun entries2 -> (array_from_list2 entries2 (0l) ArrayEmpty);;
let rec array_of = fun entries3 -> (list_foldl (fun entry2 array14 -> (match entry2 with (Pair (key,value16)) -> (array_set key value16 array14))) ArrayEmpty entries3);;
let rec array_singleton = fun index7 value17 -> (ArrayTree (ArrayBlack,ArrayEmpty,(Pair (index7,value17)),ArrayEmpty));;
let rec array_get_or = fun index8 default2 array15 -> (match (array_get index8 array15) with (Some (value18)) -> value18 | None -> default2);;
let rec array_size = fun array16 -> (list_size (array_entries array16));;
type ('Tvalue19) dictionary = Dictionary : (((string,'Tvalue19) pair) list) array -> ('Tvalue19) dictionary;;
let rec dictionary_empty = fun () -> (Dictionary ((array_empty ())));;
let rec dictionary_bucket_from_key = fun key2 -> (string_foldl (fun c17 h -> (Int32.add (Int32.mul h (33l)) c17)) (5381l) key2);;
let rec dictionary_set = fun key3 new_value3 dictionary2 -> (match dictionary2 with (Dictionary (array17)) -> (match (dictionary_bucket_from_key key3) with bucket_id -> (match (array_get bucket_id array17) with (Some (bucket)) -> (match (list_filter (fun entry3 -> (not (string_equal (pair_left entry3) key3))) bucket) with new_bucket -> (Dictionary ((array_set bucket_id (Cons ((Pair (key3,new_value3)),new_bucket)) array17)))) | None -> (Dictionary ((array_set bucket_id (Cons ((Pair (key3,new_value3)),Empty)) array17))))));;
let rec dictionary_get = fun key4 dictionary3 -> (match dictionary3 with (Dictionary (array18)) -> (match (dictionary_bucket_from_key key4) with bucket_id2 -> (match (array_get bucket_id2 array18) with (Some (bucket2)) -> (maybe_map pair_right (list_find_first (fun entry4 -> (string_equal (pair_left entry4) key4)) bucket2)) | None -> None)));;
let rec dictionary_remove = fun key5 dictionary4 -> (match dictionary4 with (Dictionary (array19)) -> (match (dictionary_bucket_from_key key5) with bucket_id3 -> (match (array_get bucket_id3 array19) with (Some (bucket3)) -> (match (list_filter (fun entry5 -> (not (string_equal (pair_left entry5) key5))) bucket3) with new_bucket2 -> (Dictionary ((array_set bucket_id3 new_bucket2 array19)))) | None -> dictionary4)));;
let rec dictionary_entries = fun dictionary5 -> (match dictionary5 with (Dictionary (array20)) -> (list_flatten (list_map pair_right (array_entries array20))));;
let rec dictionary_of = fun entries4 -> (list_foldl (pair_map dictionary_set) (dictionary_empty ()) entries4);;
let rec dictionary_singleton = fun key6 value20 -> (dictionary_set key6 value20 (dictionary_empty ()));;
let rec dictionary_get_or = fun key7 default3 dictionary6 -> (match (dictionary_get key7 dictionary6) with (Some (value21)) -> value21 | None -> default3);;
let rec dictionary_size = fun dictionary7 -> (list_size (dictionary_entries dictionary7));;
let rec dictionary_has = fun key8 dictionary8 -> (match (dictionary_get key8 dictionary8) with (Some (x144)) -> True | None -> False);;
let rec dictionary_values = fun dictionary9 -> (list_map pair_right (dictionary_entries dictionary9));;
let rec dictionary_keys = fun dictionary10 -> (list_map pair_left (dictionary_entries dictionary10));;
type bigint = Bigint : boolean * (int32) list -> bigint;;
let rec bigint_trim_parts_reversed = fun parts2 -> (match parts2 with (Cons (x145,Empty)) -> parts2 | (Cons (x146,xs22)) -> (match (x4 x146 (0l)) with True -> (bigint_trim_parts_reversed xs22) | False -> parts2) | Empty -> Empty);;
let rec bigint_trim_parts = fun parts3 -> (list_reverse (bigint_trim_parts_reversed (list_reverse parts3)));;
let rec bigint_from_string = fun string31 -> (match (string_first string31) with (Some (45l)) -> (Bigint (True,(bigint_trim_parts (list_reverse (list_map ((flip Int32.sub) (48l)) (string_to_list (string_rest string31))))))) | x147 -> (Bigint (False,(bigint_trim_parts (list_reverse (list_map ((flip Int32.sub) (48l)) (string_to_list string31)))))));;
let rec bigint_from = fun int -> (bigint_from_string (string_from_int32 int));;
let rec bigint_zero = fun () -> (Bigint (False,(Cons ((0l),Empty))));;
let rec bigint_one = fun () -> (Bigint (False,(Cons ((1l),Empty))));;
let rec bigint_negate = fun int2 -> (match int2 with (Bigint (negative,(Cons (0l,Empty)))) -> int2 | (Bigint (negative2,parts4)) -> (Bigint ((match negative2 with True -> False | False -> True),parts4)));;
let rec stringify_parts = fun parts5 -> (string_join (string_empty ()) (list_reverse (list_map string_from_int32 parts5)));;
let rec bigint_to_string = fun int3 -> (match int3 with (Bigint (True,parts6)) -> (string_prepend (45l) (stringify_parts parts6)) | (Bigint (False,parts7)) -> (stringify_parts parts7));;
let rec less_than_with_carry = fun x148 y23 previous_less_than -> (match (x2 x148 y23) with True -> True | False -> (match (x4 x148 y23) with True -> previous_less_than | False -> False));;
let rec bigint_less_than_parts = fun a53 b50 previous_less_than2 -> (match (Pair (a53,b50)) with (Pair (Empty,Empty)) -> False | (Pair ((Cons (x149,x150)),Empty)) -> False | (Pair (Empty,(Cons (x151,x152)))) -> True | (Pair ((Cons (x153,Empty)),(Cons (y24,Empty)))) -> (less_than_with_carry x153 y24 previous_less_than2) | (Pair ((Cons (x154,xs23)),(Cons (y25,ys4)))) -> (bigint_less_than_parts xs23 ys4 (less_than_with_carry x154 y25 previous_less_than2)));;
let rec bigint_less_than = fun a54 b51 -> (match (Pair (a54,b51)) with (Pair ((Bigint (True,x155)),(Bigint (False,x156)))) -> True | (Pair ((Bigint (False,x157)),(Bigint (True,x158)))) -> False | (Pair ((Bigint (True,a_parts)),(Bigint (True,b_parts)))) -> (bigint_less_than_parts b_parts a_parts False) | (Pair ((Bigint (x159,a_parts2)),(Bigint (x160,b_parts2)))) -> (bigint_less_than_parts a_parts2 b_parts2 False));;
let rec bigint_subtract_parts = fun a55 b52 carry -> (match (Pair (a55,b52)) with (Pair ((Cons (x161,xs24)),Empty)) -> (bigint_subtract_parts a55 (Cons ((0l),Empty)) carry) | (Pair ((Cons (x162,xs25)),(Cons (y26,ys5)))) -> (match (x2 (Int32.sub x162 (Int32.add y26 carry)) (0l)) with True -> (Cons ((Int32.sub (Int32.add x162 (10l)) (Int32.add y26 carry)),(bigint_subtract_parts xs25 ys5 (1l)))) | False -> (Cons ((Int32.sub x162 (Int32.add y26 carry)),(bigint_subtract_parts xs25 ys5 (0l))))) | x163 -> Empty);;
let rec bigint_add_parts = fun a56 b53 carry2 -> (match (Pair (a56,b53)) with (Pair ((Cons (x164,xs26)),(Cons (y27,ys6)))) -> (match (x3 (Int32.add x164 (Int32.add y27 carry2)) (9l)) with True -> (Cons ((Int32.sub (Int32.add x164 (Int32.add y27 carry2)) (10l)),(bigint_add_parts xs26 ys6 (1l)))) | False -> (Cons ((Int32.add x164 (Int32.add y27 carry2)),(bigint_add_parts xs26 ys6 (0l))))) | (Pair ((Cons (x165,x166)),Empty)) -> (bigint_add_parts a56 (Cons ((0l),Empty)) carry2) | (Pair (Empty,(Cons (x167,x168)))) -> (bigint_add_parts (Cons ((0l),Empty)) b53 carry2) | (Pair (Empty,Empty)) -> (match (x3 carry2 (0l)) with True -> (Cons (carry2,Empty)) | False -> Empty));;
let rec bigint_add_zeroes = fun n5 digits -> (match n5 with 0l -> digits | x169 -> (bigint_add_zeroes (Int32.sub n5 (1l)) (Cons ((0l),digits))));;
let rec bigint_multiply_digit = fun x170 digits2 carry3 -> (match digits2 with Empty -> (match (x3 carry3 (0l)) with True -> (Cons (carry3,Empty)) | False -> Empty) | (Cons (y28,ys7)) -> (Cons ((Int32.rem (Int32.add (Int32.mul x170 y28) carry3) (10l)),(bigint_multiply_digit x170 ys7 (Int32.div (Int32.add (Int32.mul x170 y28) carry3) (10l))))));;
let rec bigint_multiply_parts = fun a57 b54 base -> (match a57 with (Cons (x171,xs27)) -> (bigint_add_parts (bigint_add_zeroes base (bigint_multiply_digit x171 b54 (0l))) (bigint_multiply_parts xs27 b54 (Int32.add base (1l))) (0l)) | Empty -> Empty);;
let rec bigint_subtract = fun a58 b55 -> (match (Pair (a58,b55)) with (Pair ((Bigint (False,a_parts3)),(Bigint (True,b_parts3)))) -> (Bigint (False,(bigint_add_parts a_parts3 b_parts3 (0l)))) | (Pair ((Bigint (True,a_parts4)),(Bigint (False,b_parts4)))) -> (Bigint (True,(bigint_add_parts a_parts4 b_parts4 (0l)))) | (Pair ((Bigint (True,a_parts5)),(Bigint (True,b_parts5)))) -> (match (bigint_less_than a58 b55) with True -> (Bigint (True,(bigint_trim_parts (bigint_subtract_parts a_parts5 b_parts5 (0l))))) | False -> (Bigint (False,(bigint_trim_parts (bigint_subtract_parts b_parts5 a_parts5 (0l)))))) | (Pair ((Bigint (False,a_parts6)),(Bigint (False,b_parts6)))) -> (match (bigint_less_than a58 b55) with True -> (Bigint (True,(bigint_trim_parts (bigint_subtract_parts b_parts6 a_parts6 (0l))))) | False -> (Bigint (False,(bigint_trim_parts (bigint_subtract_parts a_parts6 b_parts6 (0l)))))));;
let rec bigint_add = fun a59 b56 -> (match (Pair (a59,b56)) with (Pair ((Bigint (False,a_parts7)),(Bigint (False,b_parts7)))) -> (Bigint (False,(bigint_add_parts a_parts7 b_parts7 (0l)))) | (Pair ((Bigint (True,a_parts8)),(Bigint (True,b_parts8)))) -> (Bigint (True,(bigint_add_parts a_parts8 b_parts8 (0l)))) | (Pair ((Bigint (True,x172)),(Bigint (False,x173)))) -> (bigint_subtract b56 (bigint_negate a59)) | (Pair ((Bigint (False,x174)),(Bigint (True,x175)))) -> (bigint_subtract a59 (bigint_negate b56)));;
let rec bigint_multiply = fun a60 b57 -> (match (Pair (a60,b57)) with (Pair ((Bigint (x176,(Cons (0l,Empty)))),(Bigint (x177,x178)))) -> (Bigint (False,(Cons ((0l),Empty)))) | (Pair ((Bigint (x179,x180)),(Bigint (x181,(Cons (0l,Empty)))))) -> (Bigint (False,(Cons ((0l),Empty)))) | (Pair ((Bigint (True,a_parts9)),(Bigint (False,b_parts9)))) -> (Bigint (True,(bigint_multiply_parts a_parts9 b_parts9 (0l)))) | (Pair ((Bigint (False,a_parts10)),(Bigint (True,b_parts10)))) -> (Bigint (True,(bigint_trim_parts (bigint_multiply_parts a_parts10 b_parts10 (0l))))) | (Pair ((Bigint (x182,a_parts11)),(Bigint (x183,b_parts11)))) -> (Bigint (False,(bigint_trim_parts (bigint_multiply_parts a_parts11 b_parts11 (0l))))));;

let ml_string_to_reuse s =
    Seq.fold_left (fun a b -> string_append (Int32.of_int (Char.code b)) a)
                  (string_empty ())
                  (String.to_seq s);;

let ml_list_to_reuse l =
    List.fold_right list_cons l Empty;;

let reuse_string_to_ml s =
    Buffer.contents (string_foldl (fun a b -> Buffer.add_char b (Char.chr (Int32.to_int a)); b) (Buffer.create 32) s);;

let reuse_boolean_to_ml b =
    match b with
      | True -> true
      | False -> false;;

let ml_string_get s index =
    let i = (Int32.to_int index) in
    if i < (String.length s) && i >= 0 then
            Some (Int32.of_int (Char.code (String.get s i)))
    else
            None;;

let ml_string_next iterable =
    match iterable with
        Pair (s, index) -> Pair (
            (ml_string_get s index),
            Pair (s, Int32.add index 1l));;
let ml_string_to_indexed_iterator s = indexed_iterator_from_iterable (IterableClass (ml_string_next)) (Pair (s, 0l));;

let rec whitespace = fun character2 -> (match character2 with 32l -> True | 13l -> True | 9l -> True | 10l -> True | x184 -> False);;
let rec atom_character = fun character3 -> (match character3 with 40l -> False | 41l -> False | x185 -> (not (whitespace character3)));;
type range = Range : int32 * int32 -> range;;
type sexp = Symbol : int32 * string * range -> sexp | Integer : int32 * range -> sexp | List : (sexp) list * range -> sexp;;
type parse_error = ParseErrorTooFewClosingBrackets | ParseErrorTooManyClosingBrackets;;
let rec intern_string = fun index9 next_index name symbol_state next4 -> (match symbol_state with (Pair (token,symbols)) -> (match (dictionary_get name symbols) with (Some ((Pair (token2,name2)))) -> (next4 next_index symbol_state (Symbol (token2,name2,(Range (index9,next_index))))) | None -> (next4 next_index (Pair ((Int32.add token (1l)),(dictionary_set name (Pair (token,name)) symbols))) (Symbol (token,name,(Range (index9,next_index)))))));;
let rec parse_symbol = fun index10 slice6 symbols2 next5 end2 -> (match (string_collect_from_slice atom_character index10 slice6) with (Pair (next_index2,name3)) -> (match (string_to_int32 name3) with (Some (integer4)) -> (next5 next_index2 symbols2 (Integer (integer4,(Range (index10,next_index2))))) | None -> (match (string_is_empty name3) with False -> (intern_string index10 next_index2 name3 symbols2 next5) | True -> (end2 index10))));;
let rec parse_list = fun index11 slice7 parse_sexps2 symbols3 error7 next6 -> (parse_sexps2 index11 slice7 symbols3 Empty error7 (fun next_index3 symbols4 expressions -> (next6 next_index3 symbols4 (List (expressions,(Range ((Int32.sub index11 (1l)),next_index3)))))));;
let rec parse_expression = fun depth index12 slice8 parse_sexps3 symbols5 error8 next7 end3 -> (match (x2 index12 (slice_size slice8)) with False -> (match depth with 0l -> (end3 index12) | x186 -> (error8 ParseErrorTooFewClosingBrackets)) | True -> (match (slice_get slice8 index12) with 40l -> (parse_list (Int32.add index12 (1l)) slice8 (parse_sexps3 (Int32.add depth (1l))) symbols5 error8 next7) | 41l -> (match depth with 0l -> (error8 ParseErrorTooManyClosingBrackets) | x187 -> (end3 (Int32.add index12 (1l)))) | x188 -> (match (whitespace x188) with True -> (parse_expression depth (Int32.add index12 (1l)) slice8 parse_sexps3 symbols5 error8 next7 end3) | False -> (parse_symbol index12 slice8 symbols5 next7 end3))));;
let rec parse_sexps4 = fun depth2 index13 slice9 symbols6 expressions2 error9 end4 -> (parse_expression depth2 index13 slice9 parse_sexps4 symbols6 error9 (fun index14 symbols7 expression2 -> (parse_sexps4 depth2 index14 slice9 symbols7 (Cons (expression2,expressions2)) error9 end4)) (fun index15 -> (end4 index15 symbols6 (list_reverse expressions2))));;
let rec parse_sexps = fun symbols8 slice10 -> (parse_sexps4 (0l) (0l) slice10 symbols8 Empty (fun error10 -> (Error (error10))) (fun x189 symbols9 expressions3 -> (Result ((Pair (symbols9,expressions3))))));;
let rec wrap_in_brackets = fun string32 -> (string_concat (string_of_char (40l)) (string_concat string32 (string_of_char (41l))));;
let rec stringify_sexp = fun stringify_sexps2 expression3 -> (match expression3 with (Symbol (x190,name4,x191)) -> name4 | (Integer (integer5,x192)) -> (string_from_int32 integer5) | (List (expressions4,x193)) -> (wrap_in_brackets (stringify_sexps2 expressions4)));;
let rec stringify_sexps = fun expressions5 -> (string_join (string_of_char (32l)) (list_map (stringify_sexp stringify_sexps) expressions5));;
let rec parts_are_empty = fun parts8 -> (match parts8 with Empty -> True | (Cons (part,Empty)) -> (string_is_empty part) | x194 -> False);;
let rec transform_line = fun line -> (match (string_split (124l) line) with (Cons (name5,parts9)) -> (string_concat (string_from_list (Cons ((40l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((32l),(Cons ((100l),(Cons ((97l),(Cons ((116l),(Cons ((97l),(Cons ((45l),Empty))))))))))))))))))))) (string_concat (string_trim name5) (string_concat (string_from_list (Cons ((32l),(Cons ((40l),(Cons ((41l),(Cons ((32l),(Cons ((40l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((45l),(Cons ((102l),(Cons ((114l),(Cons ((111l),(Cons ((109l),(Cons ((45l),(Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((32l),Empty))))))))))))))))))))))))))))))))))))))))))))) (match (parts_are_empty parts9) with True -> (string_from_list (Cons ((69l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),(Cons ((41l),(Cons ((41l),Empty))))))))))))))) | False -> (string_concat (string_from_list (Cons ((40l),(Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((32l),Empty))))))))))))) (string_concat (string_join (string_of_char (32l)) (list_map string_from_int32 (string_to_list (string_join (string_of_char (124l)) parts9)))) (string_from_list (Cons ((41l),(Cons ((41l),(Cons ((41l),Empty))))))))))))) | Empty -> (string_empty ()));;
let rec string_gen = fun stdin_iterator -> (match (string_collect_from_slice (fun x195 -> True) (0l) stdin_iterator) with (Pair (x196,stdin)) -> (Result ((string_join (string_of_char (10l)) (list_map transform_line (string_split (10l) stdin))))));;
type module_reference = ModulePath : string * boolean -> module_reference | ModuleSelf;;
type source_reference = SourceReference : string * module_reference -> source_reference;;
type identifier = Identifier : int32 * string * source_reference * range * (int32) maybe -> identifier;;
type ast_type = SimpleType : identifier -> ast_type | ComplexType : identifier * (ast_type) list * range -> ast_type | FunctionType : (ast_type) list * ast_type * range -> ast_type;;
type type_parameter = UniversalParameter : identifier -> type_parameter | ExistentialParameter : identifier -> type_parameter;;
type constructor = SimpleConstructor : identifier -> constructor | ComplexConstructor : identifier * (ast_type) list * range -> constructor;;
type pattern = Capture : identifier -> pattern | IntegerPattern : int32 * range -> pattern | ConstructorPattern : identifier * (pattern) list * range -> pattern;;
type expression = IntegerConstant : int32 * range -> expression | Variable : identifier -> expression | Lambda : (identifier) list * expression * range -> expression | Match : expression * ((pattern,expression) pair) list * range -> expression | Constructor : identifier * (expression) list * range -> expression | FunctionApplication : (expression) list * range -> expression;;
type definition = TypeDefinition : identifier * boolean * (type_parameter) list * (constructor) list * range -> definition | FunctionDefinition : identifier * boolean * (identifier) list * expression * range -> definition | TargetDefinition : source_reference * _slice -> definition;;
let rec source_reference_file_path = fun source_reference2 -> (match source_reference2 with (SourceReference (file_path,x197)) -> file_path);;
let rec source_reference_module = fun source_reference3 -> (match source_reference3 with (SourceReference (x198,module2)) -> module2);;
let rec identifier_token = fun identifier2 -> (match identifier2 with (Identifier (token3,x199,x200,x201,x202)) -> token3);;
let rec identifier_name = fun identifier3 -> (match identifier3 with (Identifier (x203,name6,x204,x205,x206)) -> name6);;
let rec identifier_with_name = fun name7 identifier4 -> (match identifier4 with (Identifier (x207,x208,x209,x210,x211)) -> (Identifier (x207,name7,x209,x210,x211)));;
let rec identifier_source_reference = fun identifier5 -> (match identifier5 with (Identifier (x212,x213,source_reference4,x214,x215)) -> source_reference4);;
let rec identifier_module = fun identifier6 -> (source_reference_module (identifier_source_reference identifier6));;
let rec identifier_range = fun identifier7 -> (match identifier7 with (Identifier (x216,x217,x218,range2,x219)) -> range2);;
let rec identifier_id = fun identifier8 -> (match identifier8 with (Identifier (x220,x221,x222,x223,id2)) -> id2);;
let rec identifier_is = fun identifier9 id3 -> (match (identifier_id identifier9) with (Some (a61)) -> (x4 a61 id3) | None -> False);;
let rec identifier_with_id = fun id4 identifier10 -> (match identifier10 with (Identifier (x224,x225,x226,x227,x228)) -> (Identifier (x224,x225,x226,x227,id4)));;
let rec identifier_equal = fun a62 b58 -> (x4 (identifier_token a62) (identifier_token b58));;
let rec module_equal = fun a63 b59 -> (match a63 with (ModulePath (a64,x229)) -> (match b59 with (ModulePath (b60,x230)) -> (string_equal a64 b60) | ModuleSelf -> False) | ModuleSelf -> (match b59 with (ModulePath (x231,x232)) -> False | ModuleSelf -> True));;
let rec definition_source_reference = fun definition2 -> (match definition2 with (TypeDefinition (identifier11,x233,x234,x235,x236)) -> (identifier_source_reference identifier11) | (FunctionDefinition (identifier12,x237,x238,x239,x240)) -> (identifier_source_reference identifier12) | (TargetDefinition (source_reference5,x241)) -> source_reference5);;
let rec definition_module = fun definition3 -> (source_reference_module (definition_source_reference definition3));;
let rec definition_public = fun definition4 -> (match definition4 with (TypeDefinition (x242,public,x243,x244,x245)) -> public | (FunctionDefinition (x246,public2,x247,x248,x249)) -> public2 | (TargetDefinition (x250,x251)) -> False);;
let rec definition_identifier = fun definition5 -> (match definition5 with (TypeDefinition (identifier13,x252,x253,x254,x255)) -> (Some (identifier13)) | (FunctionDefinition (identifier14,x256,x257,x258,x259)) -> (Some (identifier14)) | (TargetDefinition (x260,x261)) -> None);;
let rec constructor_identifier = fun constructor2 -> (match constructor2 with (ComplexConstructor (identifier15,x262,x263)) -> identifier15 | (SimpleConstructor (identifier16)) -> identifier16);;
let rec type_parameter_identifier = fun parameter -> (match parameter with (UniversalParameter (identifier17)) -> identifier17 | (ExistentialParameter (identifier18)) -> identifier18);;
let rec captured_identifiers_from_pattern = fun pattern2 -> (match pattern2 with (Capture (identifier19)) -> (Cons (identifier19,Empty)) | (ConstructorPattern (x264,patterns,x265)) -> (list_flatmap captured_identifiers_from_pattern patterns) | x266 -> Empty);;
let rec identifiers_from_definition = fun definition6 -> (match definition6 with (TypeDefinition (name8,x267,x268,constructors,x269)) -> (Cons (name8,(list_map constructor_identifier constructors))) | (FunctionDefinition (name9,x270,arguments,x271,x272)) -> (Cons (name9,Empty)) | (TargetDefinition (x273,x274)) -> Empty);;
let rec public_identifiers = fun definitions -> ((fun x50 -> ((list_flatmap list_from_maybe) ((list_map definition_identifier) ((list_filter definition_public) x50)))) definitions);;
let rec over_match_pair_expression = fun f42 pair9 -> (match pair9 with (Pair (pattern3,expression4)) -> (result_bind (f42 expression4) (fun expression5 -> (result_return (Pair (pattern3,expression5))))));;
let rec over_match_pair_expressions = fun over_subexpressions2 f43 pairs -> (result_concat (list_map (over_match_pair_expression (fun x50 -> ((result_flatmap (over_subexpressions2 f43)) (f43 x50)))) pairs));;
let rec over_subexpressions = fun f44 expression6 -> (result_bind (f44 expression6) (fun expression7 -> (match expression7 with (Lambda (arguments2,expression8,range3)) -> (result_bind (f44 expression8) (fun expression9 -> (result_bind (over_subexpressions f44 expression9) (fun expression10 -> (result_return (Lambda (arguments2,expression10,range3))))))) | (Match (expression11,pairs2,range4)) -> (result_bind (f44 expression11) (fun expression12 -> (result_bind (over_subexpressions f44 expression12) (fun expression13 -> (result_bind (over_match_pair_expressions over_subexpressions f44 pairs2) (fun pairs3 -> (result_return (Match (expression13,pairs3,range4))))))))) | (Constructor (identifier20,expressions6,range5)) -> (result_bind (result_concat (list_map (fun x50 -> ((result_flatmap (over_subexpressions f44)) (f44 x50))) expressions6)) (fun expressions7 -> (result_return (Constructor (identifier20,expressions7,range5))))) | (FunctionApplication (expressions8,range6)) -> (result_bind (result_concat (list_map (fun x50 -> ((result_flatmap (over_subexpressions f44)) (f44 x50))) expressions8)) (fun expressions9 -> (result_return (FunctionApplication (expressions9,range6))))) | x275 -> (result_return expression7))));;
let rec over_definition_expressions = fun f45 definition7 -> (match definition7 with (FunctionDefinition (identifier21,public3,arguments3,expression14,range7)) -> (result_bind (f45 expression14) (fun expression15 -> (result_return (FunctionDefinition (identifier21,public3,arguments3,expression15,range7))))) | x276 -> (result_return definition7));;
let rec over_function_application = fun f46 expression16 -> (match expression16 with (FunctionApplication (expressions10,range8)) -> (f46 expressions10 range8) | x277 -> (result_return expression16));;
let rec over_match_expression = fun f47 expression17 -> (match expression17 with (Match (expression18,pairs4,range9)) -> (f47 expression18 pairs4 range9) | x278 -> (result_return expression17));;
let rec over_identifiers = fun f48 expression19 -> (match expression19 with (Variable (name10)) -> (result_bind (f48 name10) (fun name11 -> (result_return (Variable (name11))))) | (Lambda (arguments4,expression20,range10)) -> (result_bind (over_identifiers f48 expression20) (fun expression21 -> (result_bind (result_concat (list_map f48 arguments4)) (fun arguments5 -> (result_return (Lambda (arguments5,expression21,range10))))))) | (Constructor (name12,Empty,range11)) -> (result_bind (f48 name12) (fun name13 -> (result_return (Constructor (name13,Empty,range11))))) | (Constructor (name14,expressions11,range12)) -> (result_bind (result_concat (list_map (over_identifiers f48) expressions11)) (fun expressions12 -> (result_bind (f48 name14) (fun name15 -> (result_return (Constructor (name15,expressions12,range12))))))) | (FunctionApplication (expressions13,range13)) -> (result_bind (result_concat (list_map (over_identifiers f48) expressions13)) (fun expressions14 -> (result_return (FunctionApplication (expressions14,range13))))) | (Match (expression22,rules,range14)) -> (result_bind (result_concat (list_map (over_match_pair_expression (over_identifiers f48)) rules)) (fun rules2 -> (result_bind (over_identifiers f48 expression22) (fun expression23 -> (result_return (Match (expression23,rules2,range14))))))) | x279 -> (result_return expression19));;
let rec expression_calls_function_in_tail_position = fun name16 expression24 -> (match expression24 with (FunctionApplication ((Cons ((Variable (f49)),rest15)),x280)) -> (identifier_equal name16 f49) | (Match (x281,rules3,x282)) -> (list_any (fun pair10 -> (match pair10 with (Pair (pattern4,expression25)) -> (and2 (not (list_any (identifier_equal name16) (captured_identifiers_from_pattern pattern4))) (expression_calls_function_in_tail_position name16 expression25)))) rules3) | x283 -> False);;
let rec over_tail_recursive_match_rule = fun name17 f50 over_tail_recursive_call2 rule -> (match rule with (Pair (pattern5,expression26)) -> (match (list_any (identifier_equal name17) (captured_identifiers_from_pattern pattern5)) with True -> (Pair (pattern5,expression26)) | False -> (Pair (pattern5,(over_tail_recursive_call2 name17 f50 expression26)))));;
let rec over_tail_recursive_call = fun name18 f51 expression27 -> (match expression27 with (FunctionApplication ((Cons ((Variable (applied_name)),rest16)),range15)) -> (match (identifier_equal name18 applied_name) with True -> (f51 rest16 range15) | False -> expression27) | (Match (expression28,rules4,range16)) -> (Match (expression28,(list_map (over_tail_recursive_match_rule name18 f51 over_tail_recursive_call) rules4),range16)) | x284 -> expression27);;
let rec data_strings_file_ending = fun () -> (string_from_list (Cons ((46l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((115l),Empty)))))))))))))))));;
let rec data_reuse_file_ending = fun () -> (string_from_list (Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))));;
type source_file = SourceFile : module_reference * string * _slice -> source_file;;
type source_file_type = SourceFileTypeReuse | SourceFileTypeStrings | SourceFileTypeTargetLanguage;;
let rec source_file_of = fun module3 path iterator9 -> (SourceFile (module3,path,iterator9));;
let rec source_file_module = fun file -> (match file with (SourceFile (module4,x285,x286)) -> module4);;
let rec source_file_path = fun file2 -> (match file2 with (SourceFile (x287,path2,x288)) -> path2);;
let rec source_file_content = fun file3 -> (match file3 with (SourceFile (x289,x290,content)) -> content);;
let rec source_file_size = fun file4 -> (match file4 with (SourceFile (x291,x292,content2)) -> (slice_size content2));;
let rec last_n_chars = fun n6 path3 -> (string_substring (Int32.sub (string_size path3) n6) n6 path3);;
let rec source_file_type2 = fun file5 -> (match (string_equal (last_n_chars (6l) (source_file_path file5)) (data_reuse_file_ending ())) with True -> SourceFileTypeReuse | False -> (match (string_equal (last_n_chars (8l) (source_file_path file5)) (data_strings_file_ending ())) with True -> SourceFileTypeStrings | False -> SourceFileTypeTargetLanguage));;
type parser_scope = ParserScope : (int32) array * parser_scope -> parser_scope | ParserScopeRoot : (int32) array -> parser_scope;;
let rec parser_scope_empty = fun () -> (ParserScopeRoot ((array_empty ())));;
let rec parser_scope_new = fun parent -> (ParserScope ((array_empty ()),parent));;
let rec parser_scope_set = fun identifier_token2 symbol_table_id scope -> (match scope with (ParserScope (symbols10,parent2)) -> (ParserScope ((array_set identifier_token2 symbol_table_id symbols10),parent2)) | (ParserScopeRoot (symbols11)) -> (ParserScopeRoot ((array_set identifier_token2 symbol_table_id symbols11))));;
let rec parser_scope_set2 = fun identifier22 scope2 -> (maybe_or_else scope2 (maybe_map (fun symbol_table_id2 -> (parser_scope_set (identifier_token identifier22) symbol_table_id2 scope2)) (identifier_id identifier22)));;
let rec parser_scope_set_all = fun syms scope3 -> (list_foldl parser_scope_set2 scope3 syms);;
let rec parser_scope_resolve = fun identifier23 scope4 -> (match scope4 with (ParserScope (symbols12,parent3)) -> (match (array_get (identifier_token identifier23) symbols12) with None -> (parser_scope_resolve identifier23 parent3) | id5 -> (identifier_with_id id5 identifier23)) | (ParserScopeRoot (symbols13)) -> (identifier_with_id (array_get (identifier_token identifier23) symbols13) identifier23));;
let rec parser_scope_set_list = fun symbols14 scope5 -> (list_foldl (pair_map parser_scope_set) scope5 symbols14);;
type symbol_table_entry = SymbolTableEntry : int32 * string -> symbol_table_entry;;
type symbol_table = SymbolTable : int32 * (symbol_table_entry) array -> symbol_table;;
let rec symbol_table_empty = fun () -> (SymbolTable ((0l),(array_empty ())));;
let rec symbol_table_id3 = fun table -> (match table with (SymbolTable (id6,x293)) -> id6);;
let rec symbol_table_bind = fun string33 table2 -> (match table2 with (SymbolTable (id7,array21)) -> (SymbolTable ((Int32.add id7 (1l)),(array_set id7 (SymbolTableEntry (id7,string33)) array21))));;
let rec symbol_table_bind_list = fun names table3 -> (list_foldl symbol_table_bind table3 names);;
let rec data_def = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_ = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__ = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_2 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_3 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_4 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_5 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_slice_empty = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((101l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),Empty)))))))))))))))))))))));;
let rec data_slice_of = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((111l),(Cons ((102l),Empty)))))))))))))))));;
let rec data_slice_size = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((115l),(Cons ((105l),(Cons ((122l),(Cons ((101l),Empty)))))))))))))))))))));;
let rec data_slice_get = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((103l),(Cons ((101l),(Cons ((116l),Empty)))))))))))))))))));;
let rec data_slice_concat = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((99l),(Cons ((97l),(Cons ((116l),Empty)))))))))))))))))))))))));;
let rec data_slice_foldl = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((100l),(Cons ((108l),Empty)))))))))))))))))))))));;
let rec data_slice_subslice = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),(Cons ((45l),(Cons ((115l),(Cons ((117l),(Cons ((98l),(Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))))))))))))))))))))));;
let rec data_slice = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))));;
let rec data_int32 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),Empty)))))))))));;
let rec identifier_def = fun () -> (-1l);;
let rec identifier_typ = fun () -> (-2l);;
let rec identifier_fn = fun () -> (-3l);;
let rec identifier_match = fun () -> (-4l);;
let rec identifier_exists = fun () -> (-5l);;
let rec identifier_pub = fun () -> (-6l);;
let rec identifier_ = fun () -> (0l);;
let rec identifier__ = fun () -> (1l);;
let rec identifier_2 = fun () -> (2l);;
let rec identifier_3 = fun () -> (3l);;
let rec identifier_4 = fun () -> (4l);;
let rec identifier_5 = fun () -> (5l);;
let rec identifier_int32_less_than = fun () -> (6l);;
let rec identifier_list = fun () -> (7l);;
let rec identifier_pipe = fun () -> (8l);;
let rec identifier_slice_empty = fun () -> (9l);;
let rec identifier_slice_of = fun () -> (10l);;
let rec identifier_slice_size = fun () -> (11l);;
let rec identifier_slice_get = fun () -> (12l);;
let rec identifier_slice_concat = fun () -> (13l);;
let rec identifier_slice_foldl = fun () -> (14l);;
let rec identifier_slice_subslice = fun () -> (15l);;
let rec identifier_int32 = fun () -> (16l);;
let rec identifier_slice = fun () -> (17l);;
let rec default_symbol_count = fun () -> (18l);;
let rec intrinsic_identifiers = fun () -> (Cons ((Pair ((identifier_ ()),(data_ ()))),(Cons ((Pair ((identifier__ ()),(data__ ()))),(Cons ((Pair ((identifier_2 ()),(data_2 ()))),(Cons ((Pair ((identifier_3 ()),(data_3 ()))),(Cons ((Pair ((identifier_4 ()),(data_4 ()))),(Cons ((Pair ((identifier_5 ()),(data_5 ()))),(Cons ((Pair ((identifier_int32_less_than ()),(data_int32_less_than ()))),(Cons ((Pair ((identifier_list ()),(data_list ()))),(Cons ((Pair ((identifier_pipe ()),(data_pipe ()))),(Cons ((Pair ((identifier_slice_empty ()),(data_slice_empty ()))),(Cons ((Pair ((identifier_slice_foldl ()),(data_slice_foldl ()))),(Cons ((Pair ((identifier_slice_of ()),(data_slice_of ()))),(Cons ((Pair ((identifier_slice_size ()),(data_slice_size ()))),(Cons ((Pair ((identifier_slice_get ()),(data_slice_get ()))),(Cons ((Pair ((identifier_slice_concat ()),(data_slice_concat ()))),(Cons ((Pair ((identifier_slice_subslice ()),(data_slice_subslice ()))),(Cons ((Pair ((identifier_int32 ()),(data_int32 ()))),(Cons ((Pair ((identifier_slice ()),(data_slice ()))),Empty))))))))))))))))))))))))))))))))))));;
let rec default_symbol_table = fun () -> (symbol_table_bind_list (list_map pair_right (intrinsic_identifiers ())) (symbol_table_empty ()));;
let rec default_scope = fun () -> (parser_scope_set_list (list_map (x (fun x294 -> (Pair (x294,x294))) pair_left) (intrinsic_identifiers ())) (parser_scope_empty ()));;
let rec default_identifiers = fun () -> (dictionary_set (data_def ()) (Pair ((identifier_def ()),(data_def ()))) (dictionary_set (data_typ ()) (Pair ((identifier_typ ()),(data_typ ()))) (dictionary_set (data_fn ()) (Pair ((identifier_fn ()),(data_fn ()))) (dictionary_set (data_match ()) (Pair ((identifier_match ()),(data_match ()))) (dictionary_set (data_exists ()) (Pair ((identifier_pub ()),(data_exists ()))) (dictionary_set (data_pub ()) (Pair ((identifier_pub ()),(data_pub ()))) (dictionary_of (list_map (fun pair11 -> (Pair ((pair_right pair11),pair11))) (intrinsic_identifiers ())))))))));;
let rec token_is_operator = fun token4 -> (and2 (x6 token4 (0l)) (x5 token4 (5l)));;
let rec data_6 = fun () -> (string_from_list (Cons ((58l),Empty)));;
type ('Tdefinition8) parser_context = ParserContext : source_reference * (int32,((int32,string) pair) dictionary) pair * parser_scope * parser_scope * symbol_table * ('Tdefinition8) array -> ('Tdefinition8) parser_context;;
let rec parser_context_add_constructors = fun definition9 array22 -> (match definition9 with (TypeDefinition (x295,x296,x297,constructors2,x298)) -> (list_foldl (fun constructor3 array23 -> (array_set (identifier_token (constructor_identifier constructor3)) definition9 array23)) array22 constructors2) | x299 -> array22);;
let rec prefix_module_symbol = fun module5 identifier24 -> (match module5 with (ModulePath (name19,open2)) -> (match open2 with True -> identifier24 | False -> (identifier_with_name (string_join (data_6 ()) (Cons (name19,(Cons ((identifier_name identifier24),Empty))))) identifier24)) | ModuleSelf -> identifier24);;
let rec prefix_module_symbols = fun module6 syms2 -> (list_map (prefix_module_symbol module6) syms2);;
let rec parser_context_add_definition = fun definition10 context -> (match context with (ParserContext (source_reference6,symbols15,module_scope,global_scope,symbol_table2,constructors3)) -> (match (identifiers_from_definition definition10) with definition_symbols -> (match (source_reference_module source_reference6) with module7 -> (ParserContext (source_reference6,symbols15,(parser_scope_set_all definition_symbols module_scope),(match (definition_public definition10) with True -> (parser_scope_set_all (prefix_module_symbols module7 definition_symbols) global_scope) | False -> global_scope),symbol_table2,(parser_context_add_constructors definition10 constructors3))))));;
let rec parser_context_token_is_constructor = fun token5 context2 -> (match context2 with (ParserContext (x300,x301,x302,x303,x304,constructors4)) -> (match (array_get token5 constructors4) with (Some (x305)) -> True | None -> False));;
let rec parser_context_new_module = fun context3 -> (match context3 with (ParserContext (source_reference7,symbols16,x306,global_scope2,symbol_table3,constructors5)) -> (ParserContext (source_reference7,symbols16,(parser_scope_new global_scope2),global_scope2,symbol_table3,constructors5)));;
let rec parser_context_module_scope = fun context4 -> (match context4 with (ParserContext (x307,x308,module_scope2,x309,x310,x311)) -> module_scope2);;
let rec parser_context_bind_symbol = fun identifier25 context5 -> (match context5 with (ParserContext (source_reference8,symbols17,module_scope3,global_scope3,symbol_table4,constructors6)) -> (ParserContext (source_reference8,symbols17,module_scope3,global_scope3,(symbol_table_bind (identifier_name identifier25) symbol_table4),constructors6)));;
let rec parser_context_symbols = fun context6 -> (match context6 with (ParserContext (x312,symbols18,x313,x314,x315,x316)) -> symbols18);;
let rec parser_context_with_symbols = fun symbols19 context7 -> (match context7 with (ParserContext (source_reference9,x317,module_scope4,global_scope4,symbol_table5,constructors7)) -> (ParserContext (source_reference9,symbols19,module_scope4,global_scope4,symbol_table5,constructors7)));;
let rec parser_context_symbol_id = fun context8 -> (match context8 with (ParserContext (x318,x319,x320,x321,symbol_table6,x322)) -> (symbol_table_id3 symbol_table6));;
let rec parser_context_source_reference = fun context9 -> (match context9 with (ParserContext (source_reference10,x323,x324,x325,x326,x327)) -> source_reference10);;
let rec parser_context_with_source_reference = fun source_reference11 context10 -> (match context10 with (ParserContext (x328,symbols20,module_scope5,global_scope5,symbol_table7,constructors8)) -> (ParserContext (source_reference11,symbols20,module_scope5,global_scope5,symbol_table7,constructors8)));;
let rec parser_run = fun symbols21 parser2 -> (match (state_run (ParserContext ((SourceReference ((string_empty ()),ModuleSelf)),(Pair ((default_symbol_count ()),symbols21)),(default_scope ()),(default_scope ()),(default_symbol_table ()),(array_empty ()))) parser2) with (Pair (x329,result13)) -> result13);;
let rec parser_return = fun value22 -> (state_return (result_return value22));;
let rec parser_error = fun error11 -> (state_return (result_error error11));;
let rec parser_bind = fun parser3 f52 -> (state_bind parser3 (fun result14 -> (result_prod state_return (result_bind result14 (fun value23 -> (result_return (f52 value23)))))));;
let rec parser_token_is_constructor = fun token6 -> (state_bind (state_get ()) (fun context11 -> (parser_return (parser_context_token_is_constructor token6 context11))));;
let rec parser_add_definition = fun definition11 -> (state_bind (state_modify (parser_context_add_definition definition11)) (fun x330 -> (parser_return definition11)));;
let rec parser_get_symbols = fun () -> (state_bind (state_get ()) (fun state8 -> (parser_return (parser_context_symbols state8))));;
let rec parser_set_symbols = fun symbols22 -> (state_bind (state_modify (parser_context_with_symbols symbols22)) (fun x331 -> (parser_return symbols22)));;
let rec parser_get_module_scope = fun () -> (state_bind (state_get ()) (fun state9 -> (parser_return (parser_context_module_scope state9))));;
let rec parser_new_module = fun () -> (state_bind (state_modify parser_context_new_module) (fun state10 -> (parser_return state10)));;
let rec parser_bind_symbol = fun identifier26 -> (state_bind (state_modify (parser_context_bind_symbol identifier26)) (fun state11 -> (parser_return (identifier_with_id (Some ((Int32.sub (parser_context_symbol_id state11) (1l)))) identifier26))));;
let rec parser_get_source_reference = fun () -> (state_bind (state_get ()) (fun state12 -> (parser_return (parser_context_source_reference state12))));;
let rec parser_set_source_reference = fun source_reference12 -> (state_bind (state_modify (parser_context_with_source_reference source_reference12)) (fun x332 -> (parser_return source_reference12)));;
let rec parser_sequence = fun list28 -> (list_foldr (fun a65 b61 -> (parser_bind a65 (fun a66 -> (parser_bind b61 (fun b62 -> (parser_return (Cons (a66,b62)))))))) (parser_return Empty) list28);;
let rec parser_bind_symbols = fun syms3 -> (parser_sequence (list_map parser_bind_symbol syms3));;
type error = MalformedDefinitionError : range -> error | MalformedTypeDefinitionError : range -> error | MalformedFunctionDefinitionError : source_reference * range -> error | MalformedFunctionNameError : range -> error | MalformedExpressionError : range -> error | MalformedMatchExpressionError : range -> error | MalformedSymbolError : range -> error | MalformedConstructorError : range -> error | MalformedTypeError : range -> error | ErrorNotDefined : string * source_reference * range -> error | ErrorAlreadyDefined : string -> error | ErrorReservedIdentifier : string * source_reference * range -> error | MalformedSexpTooFewClosingBrackets | MalformedSexpTooManyClosingBrackets;;
let rec symbol_to_identifier = fun symbol -> (match symbol with (Symbol (token7,name20,range17)) -> (parser_bind (parser_get_source_reference ()) (fun source_reference13 -> (parser_return (Identifier (token7,name20,source_reference13,range17,None))))) | (Integer (x333,range18)) -> (parser_error (MalformedSymbolError (range18))) | (List (x334,range19)) -> (parser_error (MalformedSymbolError (range19))));;
let rec resolve_symbol = fun symbol2 scope6 -> (parser_bind (symbol_to_identifier symbol2) (fun identifier27 -> (match (parser_scope_resolve identifier27 scope6) with (Identifier (x335,name21,source_reference14,range20,None)) -> (parser_error (ErrorNotDefined (name21,source_reference14,range20))) | identifier28 -> (parser_return identifier28))));;
let rec sexp_to_complex_type = fun sexp_to_type scope7 symbol3 parameters range21 -> (parser_bind (resolve_symbol symbol3 scope7) (fun identifier29 -> (parser_bind (parser_sequence (list_map (sexp_to_type scope7) parameters)) (fun sub_types -> (parser_return (ComplexType (identifier29,sub_types,range21)))))));;
let rec sexp_to_function_type = fun sexp_to_type2 parameters2 range22 -> (match parameters2 with (Cons ((List (arg_types,x336)),(Cons (return_type,Empty)))) -> (parser_bind (parser_sequence (list_map sexp_to_type2 arg_types)) (fun arg_types2 -> (parser_bind (sexp_to_type2 return_type) (fun return_type2 -> (parser_return (FunctionType (arg_types2,return_type2,range22))))))) | x337 -> (parser_error (MalformedTypeError (range22))));;
let rec sexp_to_type3 = fun scope8 type2 -> (match type2 with (List ((Cons (symbol4,parameters3)),range23)) -> (parser_bind (symbol_to_identifier symbol4) (fun identifier30 -> (match (x4 (identifier_token identifier30) (identifier_fn ())) with True -> (sexp_to_function_type (sexp_to_type3 scope8) parameters3 range23) | False -> (sexp_to_complex_type sexp_to_type3 scope8 symbol4 parameters3 range23)))) | (Integer (x338,range24)) -> (parser_error (MalformedTypeError (range24))) | (List (x339,range25)) -> (parser_error (MalformedTypeError (range25))) | symbol5 -> (parser_bind (resolve_symbol symbol5 scope8) (fun identifier31 -> (parser_return (SimpleType (identifier31))))));;
let rec sexp_to_constructor_definition = fun scope9 constructor4 -> (match constructor4 with (List ((Cons (name22,types)),range26)) -> (parser_bind (symbol_to_identifier name22) (fun name23 -> (parser_bind (parser_bind_symbol name23) (fun name24 -> (parser_bind (parser_sequence (list_map (sexp_to_type3 scope9) types)) (fun types2 -> (parser_return (ComplexConstructor (name24,types2,range26))))))))) | (Integer (x340,range27)) -> (parser_error (MalformedConstructorError (range27))) | (List (x341,range28)) -> (parser_error (MalformedConstructorError (range28))) | symbol6 -> (parser_bind (symbol_to_identifier symbol6) (fun name25 -> (parser_bind (parser_bind_symbol name25) (fun name26 -> (parser_return (SimpleConstructor (name26))))))));;
let rec sexp_to_type_parameter = fun sexp2 -> (match sexp2 with (List ((Cons (x342,(Cons (name27,Empty)))),x343)) -> (parser_bind (symbol_to_identifier name27) (fun name28 -> (parser_bind (parser_bind_symbol name28) (fun name29 -> (parser_return (ExistentialParameter (name29))))))) | (Integer (x344,range29)) -> (parser_error (MalformedDefinitionError (range29))) | (List (x345,range30)) -> (parser_error (MalformedDefinitionError (range30))) | symbol7 -> (parser_bind (symbol_to_identifier symbol7) (fun name30 -> (parser_bind (parser_bind_symbol name30) (fun name31 -> (parser_return (UniversalParameter (name31))))))));;
let rec sexp_to_lambda = fun sexp_to_expression scope10 rest17 range31 -> (match rest17 with (Cons ((List (arguments6,x346)),(Cons (expression29,Empty)))) -> (parser_bind (parser_sequence (list_map symbol_to_identifier arguments6)) (fun arguments7 -> (parser_bind (parser_bind_symbols arguments7) (fun arguments8 -> (match (parser_scope_new scope10) with scope11 -> (match (parser_scope_set_all arguments8 scope11) with scope12 -> (parser_bind (sexp_to_expression scope12 expression29) (fun expression30 -> (parser_return (Lambda (arguments8,expression30,range31))))))))))) | x347 -> (parser_bind (parser_get_source_reference ()) (fun source_reference15 -> (parser_error (MalformedFunctionDefinitionError (source_reference15,range31))))));;
let rec sexp_to_function_application = fun sexp_to_expression2 range32 expressions15 -> (parser_bind (parser_sequence (list_map sexp_to_expression2 expressions15)) (fun expressions16 -> (parser_return (FunctionApplication (expressions16,range32)))));;
let rec to_constructor_or_capture = fun scope13 symbol8 -> (parser_bind (symbol_to_identifier symbol8) (fun identifier32 -> (parser_bind (parser_token_is_constructor (identifier_token identifier32)) (fun constructor5 -> (match constructor5 with True -> (parser_bind (resolve_symbol symbol8 scope13) (fun identifier33 -> (parser_return (ConstructorPattern (identifier33,Empty,(identifier_range identifier33)))))) | False -> (parser_bind (parser_bind_symbol identifier32) (fun identifier34 -> (parser_return (Capture (identifier34))))))))));;
let rec sexp_to_pattern = fun scope14 sexp3 -> (match sexp3 with (List ((Cons (name32,rest18)),range33)) -> (parser_bind (parser_sequence (list_map (sexp_to_pattern scope14) rest18)) (fun patterns2 -> (parser_bind (resolve_symbol name32 scope14) (fun identifier35 -> (parser_return (ConstructorPattern (identifier35,patterns2,range33))))))) | (List (Empty,range34)) -> (parser_error (MalformedExpressionError (range34))) | (Integer (integer6,range35)) -> (parser_return (IntegerPattern (integer6,range35))) | symbol9 -> (to_constructor_or_capture scope14 symbol9));;
let rec sexp_to_match_pair = fun sexp_to_expression3 scope15 range36 pair12 -> (match pair12 with (Cons (pattern6,(Cons (expression31,Empty)))) -> (parser_bind (sexp_to_pattern scope15 pattern6) (fun pattern7 -> (match (captured_identifiers_from_pattern pattern7) with captures -> (match (parser_scope_new scope15) with scope16 -> (match (parser_scope_set_all captures scope16) with scope17 -> (parser_bind (sexp_to_expression3 scope17 expression31) (fun expression32 -> (parser_return (Pair (pattern7,expression32)))))))))) | x348 -> (parser_error (MalformedMatchExpressionError (range36))));;
let rec sexp_to_match_pairs = fun sexp_to_expression4 scope18 range37 xs28 -> (match (list_partition (2l) xs28) with Empty -> (parser_error (MalformedMatchExpressionError (range37))) | pairs5 -> (parser_sequence (list_map (sexp_to_match_pair sexp_to_expression4 scope18 range37) pairs5)));;
let rec sexp_to_match = fun sexp_to_expression5 scope19 range38 rest19 -> (match rest19 with (Cons (expression33,rest20)) -> (parser_bind (sexp_to_expression5 scope19 expression33) (fun expression34 -> (parser_bind (sexp_to_match_pairs sexp_to_expression5 scope19 range38 rest20) (fun pairs6 -> (parser_return (Match (expression34,pairs6,range38))))))) | x349 -> (parser_error (MalformedExpressionError (range38))));;
let rec sexp_to_constructor = fun sexp_to_expression6 range39 symbol10 rest21 scope20 -> (parser_bind (symbol_to_identifier symbol10) (fun identifier36 -> (parser_bind (resolve_symbol symbol10 scope20) (fun identifier37 -> (parser_bind (parser_sequence (list_map sexp_to_expression6 rest21)) (fun expressions17 -> (parser_return (Constructor (identifier37,expressions17,range39)))))))));;
let rec sexp_to_list_expression = fun sexp_to_expression7 scope21 expressions18 range40 -> (match expressions18 with (Cons ((Symbol (token8,name33,symbol_range)),rest22)) -> (match (x4 token8 (identifier_fn ())) with True -> (sexp_to_lambda sexp_to_expression7 scope21 rest22 range40) | False -> (match (x4 token8 (identifier_match ())) with True -> (sexp_to_match sexp_to_expression7 scope21 range40 rest22) | False -> (parser_bind (parser_token_is_constructor token8) (fun constructor6 -> (match constructor6 with True -> (sexp_to_constructor (sexp_to_expression7 scope21) range40 (Symbol (token8,name33,symbol_range)) rest22 scope21) | False -> (sexp_to_function_application (sexp_to_expression7 scope21) range40 expressions18)))))) | x350 -> (sexp_to_function_application (sexp_to_expression7 scope21) range40 expressions18));;
let rec sexp_to_expression8 = fun scope22 sexp4 -> (match sexp4 with (Integer (integer7,range41)) -> (parser_return (IntegerConstant (integer7,range41))) | (List (expressions19,range42)) -> (match expressions19 with Empty -> (parser_error (MalformedExpressionError (range42))) | x351 -> (sexp_to_list_expression sexp_to_expression8 scope22 expressions19 range42)) | symbol11 -> (parser_bind (resolve_symbol symbol11 scope22) (fun identifier38 -> (parser_bind (parser_token_is_constructor (identifier_token identifier38)) (fun constructor7 -> (parser_return (match constructor7 with True -> (Constructor (identifier38,Empty,(identifier_range identifier38))) | False -> (Variable (identifier38)))))))));;
let rec sexp_to_type_definition = fun scope23 type_name public4 rest23 range43 -> (match type_name with (List ((Cons (name34,parameters4)),x352)) -> (parser_bind (symbol_to_identifier name34) (fun name35 -> (parser_bind (parser_bind_symbol name35) (fun name36 -> (parser_bind (parser_sequence (list_map sexp_to_type_parameter parameters4)) (fun parameters5 -> (match (list_map type_parameter_identifier parameters5) with parameter_identifiers -> (match (parser_scope_new scope23) with scope24 -> (match (parser_scope_set_all (Cons (name36,parameter_identifiers)) scope24) with scope25 -> (parser_bind (parser_sequence (list_map (sexp_to_constructor_definition scope25) rest23)) (fun constructors9 -> (parser_return (TypeDefinition (name36,public4,parameters5,constructors9,range43)))))))))))))) | (Integer (x353,range44)) -> (parser_error (MalformedTypeError (range44))) | (List (x354,range45)) -> (parser_error (MalformedTypeError (range45))) | symbol12 -> (parser_bind (symbol_to_identifier symbol12) (fun name37 -> (parser_bind (parser_bind_symbol name37) (fun name38 -> (match (parser_scope_new scope23) with scope26 -> (match (parser_scope_set2 name38 scope26) with scope27 -> (parser_bind (parser_sequence (list_map (sexp_to_constructor_definition scope27) rest23)) (fun constructors10 -> (parser_return (TypeDefinition (name38,public4,Empty,constructors10,range43))))))))))));;
let rec sexp_to_function_definition = fun scope28 name_symbol public5 rest24 range46 -> (match rest24 with (Cons ((List (arguments9,x355)),(Cons (expression35,Empty)))) -> (parser_bind (symbol_to_identifier name_symbol) (fun name39 -> (parser_bind (parser_bind_symbol name39) (fun name40 -> (parser_bind (parser_sequence (list_map symbol_to_identifier arguments9)) (fun arguments10 -> (parser_bind (parser_bind_symbols arguments10) (fun arguments11 -> (match (parser_scope_new scope28) with scope29 -> (match (parser_scope_set_all (Cons (name40,arguments11)) scope29) with scope30 -> (parser_bind (sexp_to_expression8 scope30 expression35) (fun expression36 -> (parser_return (FunctionDefinition (name40,public5,arguments11,expression36,range46))))))))))))))) | x356 -> (parser_bind (parser_get_source_reference ()) (fun source_reference16 -> (parser_error (MalformedFunctionDefinitionError (source_reference16,range46))))));;
let rec sexp_to_definition = fun scope31 name41 public6 rest25 range47 kind -> (match (x4 kind (identifier_typ ())) with True -> (sexp_to_type_definition scope31 name41 public6 rest25 range47) | False -> (match (x4 kind (identifier_def ())) with True -> (sexp_to_function_definition scope31 name41 public6 rest25 range47) | False -> (parser_error (MalformedDefinitionError (range47)))));;
let rec specific_malformed_definition_error = fun kind2 range48 -> (match (x4 kind2 (identifier_typ ())) with True -> (parser_error (MalformedTypeDefinitionError (range48))) | False -> (match (x4 kind2 (identifier_def ())) with True -> (parser_bind (parser_get_source_reference ()) (fun source_reference17 -> (parser_error (MalformedFunctionDefinitionError (source_reference17,range48))))) | False -> (parser_error (MalformedDefinitionError (range48)))));;
let rec sexp_to_definition2 = fun scope32 expression37 -> (match expression37 with (List ((Cons ((Symbol (kind3,x357,x358)),Empty)),range49)) -> (specific_malformed_definition_error kind3 range49) | (List ((Cons ((Symbol (kind4,x359,x360)),(Cons (x361,Empty)))),range50)) -> (specific_malformed_definition_error kind4 range50) | (List ((Cons ((Symbol (-6l,x362,x363)),(Cons ((Symbol (kind5,x364,x365)),(Cons (name42,rest26)))))),range51)) -> (sexp_to_definition scope32 name42 True rest26 range51 kind5) | (List ((Cons ((Symbol (kind6,x366,x367)),(Cons (name43,rest27)))),range52)) -> (sexp_to_definition scope32 name43 False rest27 range52 kind6) | (List ((Cons ((List (x368,range53)),Empty)),x369)) -> (parser_error (MalformedDefinitionError (range53))) | (List (x370,range54)) -> (parser_error (MalformedDefinitionError (range54))) | (Integer (x371,range55)) -> (parser_error (MalformedDefinitionError (range55))) | (Symbol (x372,x373,range56)) -> (parser_error (MalformedDefinitionError (range56))));;
let rec parse_definition = fun expression38 -> (parser_bind (parser_get_module_scope ()) (fun scope33 -> (parser_bind (sexp_to_definition2 scope33 expression38) (fun definition12 -> (parser_add_definition definition12)))));;
let rec sexp_error_to_ast_error = fun error12 -> (match error12 with ParseErrorTooFewClosingBrackets -> MalformedSexpTooFewClosingBrackets | ParseErrorTooManyClosingBrackets -> MalformedSexpTooManyClosingBrackets);;
let rec parse_definitions = fun module8 file_path2 iterator10 -> (parser_bind (parser_set_source_reference (SourceReference (file_path2,module8))) (fun x374 -> (parser_bind (parser_get_symbols ()) (fun symbols23 -> (match (parse_sexps symbols23 iterator10) with (Result ((Pair (symbols24,expressions20)))) -> (parser_bind (parser_set_symbols symbols24) (fun x375 -> (parser_sequence (list_map parse_definition expressions20)))) | (Error (error13)) -> (parser_error (sexp_error_to_ast_error error13)))))));;
let rec transform_strings = fun path4 content3 -> (match (string_gen content3) with (Result (string34)) -> (string_to_slice string34) | (Error (error14)) -> (slice_empty ()));;
let rec parse_reuse_file = fun file6 -> (match file6 with (SourceFile (module9,path5,content4)) -> (parse_definitions module9 path5 content4));;
let rec parse_strings_file = fun file7 -> (match file7 with (SourceFile (module10,path6,content5)) -> (parse_definitions module10 path6 (transform_strings path6 content5)));;
let rec parse_target_file = fun file8 -> (match file8 with (SourceFile (module11,path7,content6)) -> (parser_return (Cons ((TargetDefinition ((SourceReference (path7,module11)),content6)),Empty))));;
let rec parse_source_file = fun file9 -> (match (source_file_type2 file9) with SourceFileTypeStrings -> (parse_strings_file file9) | SourceFileTypeReuse -> (parse_reuse_file file9) | SourceFileTypeTargetLanguage -> (parse_target_file file9));;
let rec parse_module = fun files -> (parser_bind (parser_new_module ()) (fun x376 -> (parser_bind (parser_sequence (list_map parse_source_file files)) (fun definitions2 -> (parser_return (list_flatten definitions2))))));;
let rec parse_source_files = fun internal_symbols files2 -> ((fun x50 -> ((result_map list_flatten) ((parser_run internal_symbols) (parser_sequence ((list_map parse_module) ((list_partition_by (fun a67 b63 -> (module_equal (source_file_module a67) (source_file_module b63)))) x50)))))) files2);;
let rec identifier_to_symbol = fun identifier39 -> (match identifier39 with (Identifier (token9,name44,x377,range57,x378)) -> (Symbol (token9,name44,range57)));;
let rec type_to_sexp = fun types_to_sexp type3 -> (match type3 with (SimpleType (identifier40)) -> (identifier_to_symbol identifier40) | (FunctionType (arg_types3,return_type3,range58)) -> (List ((Cons ((Symbol ((identifier_fn ()),(data_fn ()),range58)),(Cons ((List ((types_to_sexp arg_types3),range58)),(Cons ((type_to_sexp types_to_sexp return_type3),Empty)))))),range58)) | (ComplexType (identifier41,types3,range59)) -> (List ((Cons ((identifier_to_symbol identifier41),(types_to_sexp types3))),range59)));;
let rec types_to_sexp2 = fun types4 -> (list_map (type_to_sexp types_to_sexp2) types4);;
let rec constructor_to_sexp = fun constructor8 -> (match constructor8 with (SimpleConstructor (identifier42)) -> (identifier_to_symbol identifier42) | (ComplexConstructor (identifier43,types5,range60)) -> (List ((Cons ((identifier_to_symbol identifier43),(types_to_sexp2 types5))),range60)));;
let rec constructors_to_sexp = fun constructors11 -> (list_map constructor_to_sexp constructors11);;
let rec type_parameter_to_sexp = fun parameter2 -> (match parameter2 with (ExistentialParameter (identifier44)) -> (List ((Cons ((Symbol ((identifier_exists ()),(data_exists ()),(identifier_range identifier44))),(Cons ((identifier_to_symbol identifier44),Empty)))),(identifier_range identifier44))) | (UniversalParameter (identifier45)) -> (identifier_to_symbol identifier45));;
let rec type_name_to_sexp = fun token10 range61 name45 parameters6 -> (match parameters6 with Empty -> (Symbol (token10,name45,range61)) | x379 -> (List ((Cons ((Symbol (token10,name45,range61)),(list_map type_parameter_to_sexp parameters6))),range61)));;
let rec function_arguments_to_sexp = fun arguments12 range62 -> (List ((list_map identifier_to_symbol arguments12),range62));;
let rec pattern_to_sexp = fun pattern8 -> (match pattern8 with (ConstructorPattern (identifier46,Empty,x380)) -> (identifier_to_symbol identifier46) | (ConstructorPattern (identifier47,patterns3,range63)) -> (List ((Cons ((identifier_to_symbol identifier47),(list_map pattern_to_sexp patterns3))),range63)) | (IntegerPattern (value24,range64)) -> (Integer (value24,range64)) | (Capture (identifier48)) -> (identifier_to_symbol identifier48));;
let rec match_pair_to_sexp = fun expression_to_sexp2 pair13 -> (match pair13 with (Pair (pattern9,expression39)) -> (Cons ((pattern_to_sexp pattern9),(Cons ((expression_to_sexp2 expression39),Empty)))));;
let rec expression_to_sexp = fun expression40 -> (match expression40 with (IntegerConstant (integer8,range65)) -> (Integer (integer8,range65)) | (Variable ((Identifier (token11,string35,x381,range66,x382)))) -> (Symbol (token11,string35,range66)) | (Lambda (arguments13,expression41,range67)) -> (List ((Cons ((Symbol ((identifier_fn ()),(data_fn ()),range67)),(Cons ((function_arguments_to_sexp arguments13 range67),(Cons ((expression_to_sexp expression41),Empty)))))),range67)) | (Match (expression42,pairs7,range68)) -> (List ((Cons ((Symbol ((identifier_match ()),(data_match ()),range68)),(Cons ((expression_to_sexp expression42),(list_flatmap (match_pair_to_sexp expression_to_sexp) pairs7))))),range68)) | (Constructor (identifier49,expressions21,range69)) -> (match expressions21 with Empty -> (identifier_to_symbol identifier49) | x383 -> (List ((Cons ((identifier_to_symbol identifier49),(list_map expression_to_sexp expressions21))),range69))) | (FunctionApplication (expressions22,range70)) -> (List ((list_map expression_to_sexp expressions22),range70)));;
let rec type_definition_to_sexp = fun token12 name46 parameters7 constructors12 range71 -> (list_concat (Cons ((Symbol ((identifier_typ ()),(data_typ ()),range71)),(Cons ((type_name_to_sexp token12 range71 name46 parameters7),Empty)))) (constructors_to_sexp constructors12));;
let rec function_definition_to_sexp = fun name47 arguments14 expression43 range72 -> (Cons ((Symbol ((identifier_def ()),(data_def ()),range72)),(Cons ((identifier_to_symbol name47),(Cons ((function_arguments_to_sexp arguments14 range72),(Cons ((expression_to_sexp expression43),Empty))))))));;
let rec definition_to_sexp2 = fun public7 range73 sexp5 -> (List ((match public7 with True -> (Cons ((Symbol ((identifier_pub ()),(data_pub ()),range73)),sexp5)) | False -> sexp5),range73));;
let rec definition_to_sexp = fun definition13 -> (match definition13 with (TypeDefinition ((Identifier (token13,name48,x384,x385,x386)),public8,parameters8,constructors13,range74)) -> (definition_to_sexp2 public8 range74 (type_definition_to_sexp token13 name48 parameters8 constructors13 range74)) | (FunctionDefinition (name49,public9,arguments15,expression44,range75)) -> (definition_to_sexp2 public9 range75 (function_definition_to_sexp name49 arguments15 expression44 range75)) | (TargetDefinition (x387,data)) -> (Symbol ((0l),(string_from_slice data),(Range ((0l),(0l))))));;
let rec definitions_to_sexps = fun definitions3 -> (list_map definition_to_sexp definitions3);;
let rec data_double_dash = fun () -> (string_from_list (Cons ((45l),(Cons ((45l),Empty)))));;
let rec data_single_dash = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_true = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
type cli_arguments = CliArguments : ((string,string) pair) list * (string) list -> cli_arguments | CliErrorMissingValue : string -> cli_arguments;;
let rec is_key = fun argument -> (string_equal (data_double_dash ()) (string_take (2l) argument));;
let rec is_flag = fun argument2 -> (string_equal (data_single_dash ()) (string_take (1l) argument2));;
let rec parse_arguments2 = fun arguments16 kv_args inputs -> (match arguments16 with (Cons (first8,(Cons (second,rest28)))) -> (match (is_key first8) with True -> (parse_arguments2 (list_rest (list_rest arguments16)) (Cons ((Pair ((string_skip (2l) first8),second)),kv_args)) inputs) | False -> (match (is_flag first8) with True -> (parse_arguments2 (list_rest arguments16) (Cons ((Pair ((string_skip (1l) first8),(data_true ()))),kv_args)) inputs) | False -> (parse_arguments2 (list_rest arguments16) kv_args (Cons (first8,inputs))))) | (Cons (first9,Empty)) -> (match (is_key first9) with True -> (CliErrorMissingValue (first9)) | False -> (match (is_flag first9) with True -> (CliArguments ((list_reverse (Cons ((Pair ((string_skip (1l) first9),(data_true ()))),kv_args))),(list_reverse inputs))) | False -> (CliArguments ((list_reverse kv_args),(list_reverse (Cons (first9,inputs))))))) | Empty -> (CliArguments ((list_reverse kv_args),(list_reverse inputs))));;
let rec parse_arguments = fun arguments17 -> (parse_arguments2 arguments17 Empty Empty);;
type identifier_transformation = IdentifierTransformationNone | IdentifierTransformationLowercase | IdentifierTransformationCapitalize;;
type source_string = SourceStringEmpty | SourceStringChar : int32 -> source_string | SourceString : string -> source_string | SourceStringIdentifier : identifier * identifier_transformation -> source_string | SourceStringConcat : source_string * source_string -> source_string;;
let rec source_string_string = fun string36 -> (SourceString (string36));;
let rec source_string_empty = fun () -> SourceStringEmpty;;
let rec source_string_concat = fun a68 b64 -> (SourceStringConcat (a68,b64));;
let rec source_string_join = fun separator4 strings2 -> (match strings2 with (Cons (first10,rest29)) -> (list_foldl (fun string37 joined2 -> (source_string_concat joined2 (source_string_concat (SourceString (separator4)) string37))) first10 rest29) | Empty -> (source_string_empty ()));;
let rec add_identifiers = fun identifiers offset dictionary11 -> (match identifiers with (Cons (identifier50,rest30)) -> (add_identifiers rest30 (Int32.sub offset (1l)) (dictionary_set (identifier50 ()) (Pair (offset,(identifier50 ()))) dictionary11)) | Empty -> dictionary11);;
let rec join = fun strings3 -> (source_string_join (string_empty ()) strings3);;
let rec wrap_in_brackets2 = fun string38 -> (source_string_concat (SourceStringChar ((40l))) (source_string_concat string38 (SourceStringChar ((41l)))));;
type ('Tcompilation_result) compiler_backend = Backend : string * (string) list * (string) list * (string -> (definition) list -> 'Tcompilation_result) * (( unit  -> string)) list * boolean -> ('Tcompilation_result) compiler_backend;;
let rec compiler_backend_name = fun backend -> (match backend with (Backend (name50,x388,x389,x390,x391,x392)) -> name50);;
let rec compiler_backend_preamble_files = fun backend2 -> (match backend2 with (Backend (x393,files3,x394,x395,x396,x397)) -> files3);;
let rec compiler_backend_pervasives_files = fun backend3 -> (match backend3 with (Backend (x398,x399,files4,x400,x401,x402)) -> files4);;
let rec compiler_backend_generate_source = fun backend4 module_name definitions4 -> (match backend4 with (Backend (x403,x404,x405,generate2,x406,x407)) -> (generate2 module_name definitions4));;
let rec compiler_backend_reserved_identifiers = fun backend5 -> (match backend5 with (Backend (x408,x409,x410,x411,identifiers2,x412)) -> identifiers2);;
let rec compiler_backend_perform_transformations = fun backend6 -> (match backend6 with (Backend (x413,x414,x415,x416,x417,transform2)) -> transform2);;
let rec data_sparkle_x = fun () -> (string_from_list (Cons ((226l),(Cons ((156l),(Cons ((168l),(Cons ((120l),Empty)))))))));;
let rec data_empty = fun () -> (string_from_list (Cons ((69l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),Empty)))))))))));;
let rec data_cons = fun () -> (string_from_list (Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),Empty)))))))));;
let rec identifier_sparkle_x = fun () -> (-1000l);;
let rec identifier_cons = fun () -> (-1001l);;
let rec identifier_empty = fun () -> (-1002l);;
let rec with_local_transform_keywords = fun dictionary12 -> (dictionary_set (data_sparkle_x ()) (Pair ((identifier_sparkle_x ()),(data_sparkle_x ()))) (dictionary_set (data_cons ()) (Pair ((identifier_cons ()),(data_cons ()))) (dictionary_set (data_empty ()) (Pair ((identifier_empty ()),(data_empty ()))) dictionary12)));;
let rec expression_is_token = fun token14 expression45 -> (match expression45 with (Variable ((Identifier (expression_token,x418,x419,x420,x421)))) -> (x4 expression_token token14) | x422 -> False);;
let rec first_expression_is_token = fun token15 expressions23 -> ((fun x50 -> ((maybe_else (fun () -> False)) ((maybe_map (expression_is_token token15)) x50))) (list_first expressions23));;
let rec transform_special_form = fun token16 transformer definition14 -> (over_definition_expressions (over_subexpressions (over_function_application (fun expressions24 range76 -> (result_return (match (first_expression_is_token token16 expressions24) with True -> (transformer (definition_source_reference definition14) (list_rest expressions24) range76) | False -> (FunctionApplication (expressions24,range76))))))) definition14);;
let rec transform_special_forms = fun token17 transformer2 definitions5 -> (result_concat (list_map (transform_special_form token17 transformer2) definitions5));;
let rec transform_pipe = fun source_reference18 expressions25 range77 -> (Lambda ((Cons ((Identifier ((identifier_sparkle_x ()),(data_sparkle_x ()),source_reference18,range77,(Some ((-1l))))),Empty)),(list_foldl (fun expression46 composed -> (FunctionApplication ((Cons (expression46,(Cons (composed,Empty)))),range77))) (Variable ((Identifier ((identifier_sparkle_x ()),(data_sparkle_x ()),source_reference18,range77,(Some ((-1l))))))) expressions25),range77));;
let rec transform_list = fun cons empty source_reference19 expressions26 range78 -> (list_foldr (fun expression47 composed2 -> (Constructor (cons,(Cons (expression47,(Cons (composed2,Empty)))),range78))) (Constructor (empty,Empty,range78)) expressions26);;
let rec transform_match_expression = fun expression48 pairs8 range79 -> (result_return (Match (expression48,pairs8,range79)));;
let rec transform_match_expressions = fun definition15 -> (over_definition_expressions (over_subexpressions (over_match_expression (fun expression49 pairs9 range80 -> (transform_match_expression expression49 pairs9 range80)))) definition15);;
let rec find_constructor = fun token18 definitions6 -> (list_find_first (fun identifier51 -> (x4 token18 (identifier_token identifier51))) (list_flatmap identifiers_from_definition definitions6));;
let rec transform_list_special_form = fun definitions7 -> (match (find_constructor (identifier_cons ()) definitions7) with None -> (result_return definitions7) | (Some (cons2)) -> (match (find_constructor (identifier_empty ()) definitions7) with None -> (result_return definitions7) | (Some (empty2)) -> (transform_special_forms (identifier_list ()) (transform_list cons2 empty2) definitions7)));;
let rec local_transforms = fun definitions8 -> (result_bind definitions8 (fun definitions9 -> (result_bind (transform_special_forms (identifier_pipe ()) transform_pipe definitions9) (fun definitions10 -> (result_bind (transform_list_special_form definitions10) (fun definitions11 -> (result_bind (result_concat (list_map transform_match_expressions definitions11)) (fun definitions12 -> (result_return definitions12)))))))));;
let rec data_reserved_identifier_error = fun () -> (string_from_list (Cons ((83l),(Cons ((121l),(Cons ((109l),(Cons ((98l),(Cons ((111l),(Cons ((108l),(Cons ((115l),(Cons ((32l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((120l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),(Cons ((32l),(Cons ((226l),(Cons ((156l),(Cons ((168l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((101l),(Cons ((100l),(Cons ((58l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_not_defined_error = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((108l),(Cons ((111l),(Cons ((119l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((105l),(Cons ((100l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((114l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((115l),(Cons ((32l),(Cons ((110l),(Cons ((111l),(Cons ((116l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((100l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_already_defined_error = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((108l),(Cons ((108l),(Cons ((111l),(Cons ((119l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((105l),(Cons ((100l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((114l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((115l),(Cons ((32l),(Cons ((97l),(Cons ((108l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((121l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((100l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_malformed_function_definition = fun () -> (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((117l),(Cons ((110l),(Cons ((100l),(Cons ((58l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_no_location_information = fun () -> (string_from_list (Cons ((40l),(Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((108l),(Cons ((111l),(Cons ((99l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((97l),(Cons ((118l),(Cons ((97l),(Cons ((105l),(Cons ((108l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_line = fun () -> (string_from_list (Cons ((76l),(Cons ((105l),(Cons ((110l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))));;
let rec data_column = fun () -> (string_from_list (Cons ((67l),(Cons ((111l),(Cons ((108l),(Cons ((117l),(Cons ((109l),(Cons ((110l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))));;
let rec data_file = fun () -> (string_from_list (Cons ((70l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))));;
let rec data_range = fun () -> (string_from_list (Cons ((82l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((101l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))));;
let rec data_7 = fun () -> (string_from_list Empty);;
let rec i18n_error_range_to_string = fun range81 -> (match range81 with (Range (start2,end5)) -> (string_concat (string_from_list (Cons ((32l),(Cons ((97l),(Cons ((116l),(Cons ((32l),Empty))))))))) (string_concat (string_from_int32 start2) (string_concat (string_from_list (Cons ((45l),Empty))) (string_from_int32 end5)))));;
let rec i18n_malformed_definition_error = fun range82 -> (string_concat (string_from_list (Cons ((79l),(Cons ((110l),(Cons ((108l),(Cons ((121l),(Cons ((32l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((45l),(Cons ((32l),(Cons ((111l),(Cons ((114l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((97l),(Cons ((110l),(Cons ((32l),(Cons ((98l),(Cons ((101l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((112l),(Cons ((32l),(Cons ((108l),(Cons ((101l),(Cons ((118l),(Cons ((101l),(Cons ((108l),(Cons ((32l),(Cons ((111l),(Cons ((102l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((32l),(Cons ((89l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((110l),(Cons ((101l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((119l),(Cons ((114l),(Cons ((97l),(Cons ((112l),(Cons ((32l),(Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((46l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range82));;
let rec i18n_malformed_type_definition_error = fun range83 -> (string_concat (string_from_list (Cons ((73l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((110l),(Cons ((107l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((119l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((101l),(Cons ((100l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((119l),(Cons ((114l),(Cons ((105l),(Cons ((116l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((32l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((44l),(Cons ((32l),(Cons ((98l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((105l),(Cons ((116l),(Cons ((32l),(Cons ((100l),(Cons ((111l),(Cons ((101l),(Cons ((115l),(Cons ((110l),(Cons ((39l),(Cons ((116l),(Cons ((32l),(Cons ((104l),(Cons ((97l),(Cons ((118l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((114l),(Cons ((105l),(Cons ((103l),(Cons ((104l),(Cons ((116l),(Cons ((32l),(Cons ((115l),(Cons ((104l),(Cons ((97l),(Cons ((112l),(Cons ((101l),(Cons ((46l),(Cons ((32l),(Cons ((73l),(Cons ((116l),(Cons ((32l),(Cons ((115l),(Cons ((104l),(Cons ((111l),(Cons ((117l),(Cons ((108l),(Cons ((100l),(Cons ((32l),(Cons ((108l),(Cons ((111l),(Cons ((111l),(Cons ((107l),(Cons ((32l),(Cons ((108l),(Cons ((105l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((58l),(Cons ((10l),(Cons ((10l),(Cons ((40l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((110l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((45l),(Cons ((111l),(Cons ((102l),(Cons ((45l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((32l),(Cons ((78l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((79l),(Cons ((102l),(Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),(Cons ((32l),(Cons ((46l),(Cons ((46l),(Cons ((46l),(Cons ((41l),(Cons ((10l),(Cons ((10l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range83));;
let rec i18n_malformed_function_name_error = fun range84 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((70l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((78l),(Cons ((97l),(Cons ((109l),(Cons ((101l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range84));;
let rec i18n_malformed_expression_error = fun range85 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((69l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range85));;
let rec i18n_malformed_match_expression_error = fun range86 -> (string_concat (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((105l),(Cons ((115l),(Cons ((32l),(Cons ((110l),(Cons ((111l),(Cons ((116l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((114l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((116l),(Cons ((44l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((115l),(Cons ((117l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((32l),(Cons ((104l),(Cons ((97l),(Cons ((118l),(Cons ((101l),(Cons ((32l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((114l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((116l),(Cons ((108l),(Cons ((121l),(Cons ((32l),(Cons ((115l),(Cons ((111l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((116l),(Cons ((32l),(Cons ((97l),(Cons ((108l),(Cons ((108l),(Cons ((32l),(Cons ((121l),(Cons ((111l),(Cons ((117l),(Cons ((114l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((114l),(Cons ((117l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((101l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((105l),(Cons ((114l),(Cons ((115l),(Cons ((32l),(Cons ((108l),(Cons ((105l),(Cons ((107l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((115l),(Cons ((58l),(Cons ((10l),(Cons ((10l),(Cons ((40l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),(Cons ((32l),(Cons ((101l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((116l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((49l),(Cons ((32l),(Cons ((32l),(Cons ((101l),(Cons ((49l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((116l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((50l),(Cons ((32l),(Cons ((32l),(Cons ((101l),(Cons ((50l),(Cons ((10l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((46l),(Cons ((46l),(Cons ((46l),(Cons ((41l),(Cons ((10l),(Cons ((10l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range86));;
let rec i18n_malformed_symbol_error = fun range87 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((83l),(Cons ((121l),(Cons ((109l),(Cons ((98l),(Cons ((111l),(Cons ((108l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range87));;
let rec i18n_malformed_constructor_error = fun range88 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range88));;
let rec i18n_malformed_type_error = fun range89 -> (string_concat (string_from_list (Cons ((77l),(Cons ((97l),(Cons ((108l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((101l),(Cons ((100l),(Cons ((84l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((69l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),Empty))))))))))))))))))))))))))))))))))))) (i18n_error_range_to_string range89));;
let rec i18n_malformed_sexp_too_few_closing_brackets = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((111l),(Cons ((32l),(Cons ((102l),(Cons ((101l),(Cons ((119l),(Cons ((32l),(Cons ((99l),(Cons ((108l),(Cons ((111l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec i18n_malformed_sexp_too_many_closing_brackets = fun () -> (string_from_list (Cons ((84l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((111l),(Cons ((32l),(Cons ((109l),(Cons ((97l),(Cons ((110l),(Cons ((121l),(Cons ((32l),(Cons ((99l),(Cons ((108l),(Cons ((111l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((115l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec string_format = fun list29 -> (string_join (string_of_char (10l)) (list_map (string_join (string_empty ())) list29));;
let rec find_file_matching = fun files5 source_reference20 -> (list_find_first (x (string_equal (source_reference_file_path source_reference20)) source_file_path) files5);;
let rec range_information = fun range90 -> (match range90 with (Range (start3,end6)) -> (string_join (string_of_char (45l)) (Cons ((string_from_int32 start3),(Cons ((string_from_int32 end6),Empty))))));;
let rec count_lines = fun index16 lines source -> (match (string_index_of index16 (string_of_char (10l)) source) with (Some (index17)) -> (count_lines (Int32.add index17 (1l)) (Int32.add lines (1l)) source) | None -> (Pair (lines,(Int32.add (Int32.sub (string_size source) index16) (1l)))));;
let rec line_information = fun file10 range91 -> (match range91 with (Range (start4,x423)) -> (match (string_from_slice (source_file_content file10)) with content7 -> (count_lines (0l) (1l) (string_substring (0l) start4 content7))));;
let rec next_newline = fun content8 index18 -> (match (string_index_of index18 (string_of_char (10l)) content8) with (Some (index19)) -> (Int32.add index19 (1l)) | None -> index18);;
let rec source_paragraph = fun file11 range92 -> (match range92 with (Range (start5,end7)) -> (match (string_from_slice (source_file_content file11)) with content9 -> (match (next_newline content9 (Int32.sub start5 (100l))) with paragraph_start -> (match (Int32.sub (next_newline content9 (Int32.add end7 (50l))) paragraph_start) with paragraph_size -> (match (string_substring paragraph_start paragraph_size content9) with region -> region)))));;
let rec location_information = fun files6 source_reference21 range93 -> (match (find_file_matching files6 source_reference21) with (Some (file12)) -> (match (line_information file12 range93) with (Pair (lines2,column)) -> (string_format (Cons (Empty,(Cons ((Cons ((source_paragraph file12 range93),Empty)),(Cons (Empty,(Cons ((Cons ((data_line ()),(Cons ((string_from_int32 lines2),Empty)))),(Cons ((Cons ((data_column ()),(Cons ((string_from_int32 column),Empty)))),(Cons ((Cons ((data_range ()),(Cons ((range_information range93),Empty)))),(Cons ((Cons ((data_file ()),(Cons ((source_file_path file12),Empty)))),Empty)))))))))))))))) | None -> (data_no_location_information ()));;
let rec error_to_string = fun files7 error15 -> (match error15 with (MalformedDefinitionError (range94)) -> (i18n_malformed_definition_error range94) | (MalformedFunctionDefinitionError (source_reference22,range95)) -> (string_format (Cons ((Cons ((data_malformed_function_definition ()),Empty)),(Cons ((Cons ((location_information files7 source_reference22 range95),Empty)),Empty))))) | (MalformedTypeDefinitionError (range96)) -> (i18n_malformed_type_definition_error range96) | (MalformedFunctionNameError (range97)) -> (i18n_malformed_function_name_error range97) | (MalformedExpressionError (range98)) -> (i18n_malformed_expression_error range98) | (MalformedMatchExpressionError (range99)) -> (i18n_malformed_match_expression_error range99) | (MalformedSymbolError (range100)) -> (i18n_malformed_symbol_error range100) | (MalformedConstructorError (range101)) -> (i18n_malformed_constructor_error range101) | (MalformedTypeError (range102)) -> (i18n_malformed_type_error range102) | (ErrorNotDefined (name51,source_reference23,range103)) -> (string_format (Cons ((Cons ((string_concat (data_not_defined_error ()) name51),Empty)),(Cons ((Cons ((location_information files7 source_reference23 range103),Empty)),Empty))))) | (ErrorAlreadyDefined (name52)) -> (string_concat (data_already_defined_error ()) name52) | (ErrorReservedIdentifier (name53,source_reference24,range104)) -> (string_format (Cons ((Cons ((string_concat (data_reserved_identifier_error ()) name53),Empty)),(Cons ((Cons ((location_information files7 source_reference24 range104),Empty)),Empty))))) | MalformedSexpTooFewClosingBrackets -> (i18n_malformed_sexp_too_few_closing_brackets ()) | MalformedSexpTooManyClosingBrackets -> (i18n_malformed_sexp_too_many_closing_brackets ()));;
let rec data_sparkle = fun () -> (string_from_list (Cons ((226l),(Cons ((156l),(Cons ((168l),Empty)))))));;
let rec data_8 = fun () -> (string_from_list Empty);;
let rec identifier_is_reserved = fun identifier52 -> (string_equal (string_substring (0l) (3l) (identifier_name identifier52)) (data_sparkle ()));;
let rec validate_identifier = fun identifier53 -> (match (identifier_is_reserved identifier53) with True -> (result_error (ErrorReservedIdentifier ((identifier_name identifier53),(identifier_source_reference identifier53),(identifier_range identifier53)))) | False -> (result_lift identifier53));;
let rec validate_reserved_identifiers = fun definitions13 -> (result_flatmap (x result_concat (list_map (over_definition_expressions (over_identifiers validate_identifier)))) definitions13);;
let rec data_9 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec path_filename = fun path8 -> (match (list_last (string_split (47l) path8)) with (Some (filename)) -> filename | None -> path8);;
let rec path_filename_without_extension = fun path9 -> (match (list_first (string_split (46l) (path_filename path9))) with (Some (name54)) -> name54 | None -> (path_filename path9));;
let rec path_filename_extension = fun path10 -> (match (list_last (string_split (46l) (path_filename path10))) with (Some (name55)) -> name55 | None -> (string_empty ()));;
let rec path_join = fun paths -> (string_join (data_9 ()) paths);;
let rec data_standard_library_filename = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((100l),(Cons ((97l),(Cons ((114l),(Cons ((100l),(Cons ((45l),(Cons ((108l),(Cons ((105l),(Cons ((98l),(Cons ((114l),(Cons ((97l),(Cons ((114l),(Cons ((121l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))))))))))))))))))))))));;
let rec data_parser_filename = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))));;
let rec data_10 = fun () -> (string_from_list Empty);;
let rec parse = fun file_entries -> (parse_source_files (with_local_transform_keywords (default_identifiers ())) file_entries);;
let rec transform = fun backend7 definitions14 -> (match (compiler_backend_perform_transformations backend7) with False -> definitions14 | True -> (local_transforms (validate_reserved_identifiers definitions14)));;
let rec generate = fun backend8 module_name2 definitions15 -> (result_map (compiler_backend_generate_source backend8 module_name2) definitions15);;
let rec module_name_and_path = fun open3 path11 -> (Pair ((ModulePath ((path_filename_without_extension path11),open3)),path11));;
let rec standard_library_files = fun backend9 data_path -> (Cons ((path_join (Cons (data_path,(Cons ((data_standard_library_filename ()),Empty))))),(list_map (fun filename2 -> (path_join (Cons (data_path,(Cons (filename2,Empty)))))) (compiler_backend_pervasives_files backend9))));;
let rec standard_library_module = fun backend10 data_path2 -> (list_map (module_name_and_path True) (standard_library_files backend10 data_path2));;
let rec parser_module = fun backend11 data_path3 -> (module_name_and_path True (path_join (Cons (data_path3,(Cons ((data_parser_filename ()),Empty))))));;
let rec preamble_files = fun backend12 data_path4 -> (list_map (fun filename3 -> (Pair (ModuleSelf,(string_concat data_path4 filename3)))) (compiler_backend_preamble_files backend12));;
let rec data_space = fun () -> (string_from_list (Cons ((32l),Empty)));;
let rec data_fun = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),Empty)))))));;
let rec data_type = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_if = fun () -> (string_from_list (Cons ((105l),(Cons ((102l),Empty)))));;
let rec data_then = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_else = fun () -> (string_from_list (Cons ((101l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_with = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_of = fun () -> (string_from_list (Cons ((111l),(Cons ((102l),Empty)))));;
let rec data_class = fun () -> (string_from_list (Cons ((99l),(Cons ((108l),(Cons ((97l),(Cons ((115l),(Cons ((115l),Empty)))))))))));;
let rec data_end = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_in = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),Empty)))));;
let rec data_let = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),Empty)))))));;
let rec data_open = fun () -> (string_from_list (Cons ((111l),(Cons ((112l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_and = fun () -> (string_from_list (Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_or = fun () -> (string_from_list (Cons ((111l),(Cons ((114l),Empty)))));;
let rec data_as = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),Empty)))));;
let rec data_less_than = fun () -> (string_from_list (Cons ((60l),Empty)));;
let rec data_assert = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_asr = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_begin = fun () -> (string_from_list (Cons ((98l),(Cons ((101l),(Cons ((103l),(Cons ((105l),(Cons ((110l),Empty)))))))))));;
let rec data_constraint = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((105l),(Cons ((110l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_do = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),Empty)))));;
let rec data_done = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((110l),(Cons ((101l),Empty)))))))));;
let rec data_downto = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((119l),(Cons ((110l),(Cons ((116l),(Cons ((111l),Empty)))))))))))));;
let rec data_exception = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((99l),(Cons ((101l),(Cons ((112l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))));;
let rec data_external = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))))));;
let rec data_false = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))))));;
let rec data_true2 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_for = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_function = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_functor = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),Empty)))))))))))))));;
let rec data_include = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),Empty)))))))))))))));;
let rec data_inherit = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((116l),Empty)))))))))))))));;
let rec data_initializer = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))))))))));;
let rec data_land = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))));;
let rec data_lazy = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((122l),(Cons ((121l),Empty)))))))));;
let rec data_lor = fun () -> (string_from_list (Cons ((108l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_lsl = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((108l),Empty)))))));;
let rec data_lsr = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_lxor = fun () -> (string_from_list (Cons ((108l),(Cons ((120l),(Cons ((111l),(Cons ((114l),Empty)))))))));;
let rec data_method = fun () -> (string_from_list (Cons ((109l),(Cons ((101l),(Cons ((116l),(Cons ((104l),(Cons ((111l),(Cons ((100l),Empty)))))))))))));;
let rec data_mod = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))));;
let rec data_module = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_mutable = fun () -> (string_from_list (Cons ((109l),(Cons ((117l),(Cons ((116l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))));;
let rec data_new = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),Empty)))))));;
let rec data_nonrec = fun () -> (string_from_list (Cons ((110l),(Cons ((111l),(Cons ((110l),(Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))))))))));;
let rec data_object = fun () -> (string_from_list (Cons ((111l),(Cons ((98l),(Cons ((106l),(Cons ((101l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_private = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((97l),(Cons ((116l),(Cons ((101l),Empty)))))))))))))));;
let rec data_rec = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))));;
let rec data_sig = fun () -> (string_from_list (Cons ((115l),(Cons ((105l),(Cons ((103l),Empty)))))));;
let rec data_struct = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_try = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((121l),Empty)))))));;
let rec data_val = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),Empty)))))));;
let rec data_virtual = fun () -> (string_from_list (Cons ((118l),(Cons ((105l),(Cons ((114l),(Cons ((116l),(Cons ((117l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))));;
let rec data_when = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_while = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((105l),(Cons ((108l),(Cons ((101l),Empty)))))))))));;
let rec data_parser = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_value = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),(Cons ((117l),(Cons ((101l),Empty)))))))))));;
let rec data_to = fun () -> (string_from_list (Cons ((116l),(Cons ((111l),Empty)))));;
let rec data_def2 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ2 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn2 = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match2 = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists2 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub2 = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_11 = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__2 = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_12 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_13 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_14 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_15 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe2 = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list2 = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_compile_error = fun () -> (string_from_list (Cons ((42l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((101l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),(Cons ((42l),Empty)))))))))))))))))))))))))))))));;
let rec data_backslash = fun () -> (string_from_list (Cons ((92l),Empty)));;
let rec data_arrow = fun () -> (string_from_list (Cons ((32l),(Cons ((45l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_equals = fun () -> (string_from_list (Cons ((32l),(Cons ((61l),(Cons ((32l),Empty)))))));;
let rec data_vertical_bar = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((32l),Empty)))))));;
let rec data_pipe_operator = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_colon = fun () -> (string_from_list (Cons ((32l),(Cons ((58l),(Cons ((32l),Empty)))))));;
let rec data_semicolon = fun () -> (string_from_list (Cons ((32l),(Cons ((59l),(Cons ((32l),Empty)))))));;
let rec data_star = fun () -> (string_from_list (Cons ((32l),(Cons ((42l),(Cons ((32l),Empty)))))));;
let rec data_int322 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),Empty)))))))))));;
let rec data_int32_plus = fun () -> (string_from_list (Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((97l),(Cons ((100l),(Cons ((100l),Empty)))))))))))))))))))));;
let rec data_int32_multiply = fun () -> (string_from_list (Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((109l),(Cons ((117l),(Cons ((108l),Empty)))))))))))))))))))));;
let rec data_int32_minus = fun () -> (string_from_list (Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((115l),(Cons ((117l),(Cons ((98l),Empty)))))))))))))))))))));;
let rec data_int32_divide = fun () -> (string_from_list (Cons ((80l),(Cons ((114l),(Cons ((101l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),(Cons ((46l),(Cons ((113l),(Cons ((117l),(Cons ((111l),(Cons ((116l),Empty)))))))))))))))))))))))));;
let rec data_int32_modulus = fun () -> (string_from_list (Cons ((80l),(Cons ((114l),(Cons ((101l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((109l),Empty)))))))))))))))))))))));;
let rec data_int32_and = fun () -> (string_from_list (Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))))))))))))))));;
let rec data_slice_type = fun () -> (string_from_list (Cons ((66l),(Cons ((121l),(Cons ((116l),(Cons ((101l),(Cons ((115l),Empty)))))))))));;
let rec data_cempty = fun () -> (string_from_list (Cons ((67l),(Cons ((69l),(Cons ((109l),(Cons ((112l),(Cons ((116l),(Cons ((121l),Empty)))))))))))));;
let rec data_ccons = fun () -> (string_from_list (Cons ((67l),(Cons ((67l),(Cons ((111l),(Cons ((110l),(Cons ((115l),Empty)))))))))));;
let rec data_comma = fun () -> (string_from_list (Cons ((44l),Empty)));;
let rec data_constant = fun () -> (string_from_list (Cons ((95l),(Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((95l),Empty)))))))))))))))))))));;
let rec data_data = fun () -> (string_from_list (Cons ((100l),(Cons ((97l),(Cons ((116l),(Cons ((97l),Empty)))))))));;
let rec data_case = fun () -> (string_from_list (Cons ((99l),(Cons ((97l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_deriving = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((105l),(Cons ((110l),(Cons ((103l),Empty)))))))))))))))));;
let rec data_family = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((109l),(Cons ((105l),(Cons ((108l),(Cons ((121l),Empty)))))))))))));;
let rec data_default = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((97l),(Cons ((117l),(Cons ((108l),(Cons ((116l),Empty)))))))))))))));;
let rec data_forall = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((97l),(Cons ((108l),(Cons ((108l),Empty)))))))))))));;
let rec data_foreign = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((101l),(Cons ((105l),(Cons ((103l),(Cons ((110l),Empty)))))))))))))));;
let rec data_import = fun () -> (string_from_list (Cons ((105l),(Cons ((109l),(Cons ((112l),(Cons ((111l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_instance = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((99l),(Cons ((101l),Empty)))))))))))))))));;
let rec data_infix = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((105l),(Cons ((120l),Empty)))))))))));;
let rec data_infixl = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((105l),(Cons ((120l),(Cons ((108l),Empty)))))))))))));;
let rec data_infixr = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((105l),(Cons ((120l),(Cons ((114l),Empty)))))))))))));;
let rec data_newtype = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),(Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))))))))));;
let rec data_where = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((101l),Empty)))))))))));;
let rec data_dot = fun () -> (string_from_list (Cons ((46l),Empty)));;
let rec data_language_exts = fun () -> (string_from_list (Cons ((123l),(Cons ((45l),(Cons ((35l),(Cons ((32l),(Cons ((76l),(Cons ((65l),(Cons ((78l),(Cons ((71l),(Cons ((85l),(Cons ((65l),(Cons ((71l),(Cons ((69l),(Cons ((32l),(Cons ((69l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((101l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((81l),(Cons ((117l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((99l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((44l),(Cons ((32l),(Cons ((66l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((80l),(Cons ((97l),(Cons ((116l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((115l),(Cons ((32l),(Cons ((35l),(Cons ((45l),(Cons ((125l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_pervasives_filename = fun () -> (string_from_list (Cons ((80l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((105l),(Cons ((118l),(Cons ((101l),(Cons ((115l),(Cons ((46l),(Cons ((104l),(Cons ((115l),Empty)))))))))))))))))))))))))));;
let rec data_preamble_filename = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((109l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((104l),(Cons ((115l),Empty)))))))))))))))))))))));;
let rec data_haskell_language = fun () -> (string_from_list (Cons ((104l),(Cons ((97l),(Cons ((115l),(Cons ((107l),(Cons ((101l),(Cons ((108l),(Cons ((108l),Empty)))))))))))))));;
let rec reserved_identifiers = fun () -> (Cons (data_if,(Cons (data_then,(Cons (data_else,(Cons (data_with,(Cons (data_of,(Cons (data_end,(Cons (data_in,(Cons (data_type,(Cons (data_let,(Cons (data_class,(Cons (data_do,(Cons (data_module,(Cons (data_data,(Cons (data_case,(Cons (data_deriving,(Cons (data_family,(Cons (data_default,(Cons (data_forall,(Cons (data_foreign,(Cons (data_import,(Cons (data_instance,(Cons (data_infix,(Cons (data_infixl,(Cons (data_infixr,(Cons (data_newtype,(Cons (data_where,Empty))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec escape_identifier = fun identifier54 -> (SourceStringIdentifier (identifier54,IdentifierTransformationLowercase));;
let rec translate_constructor_identifier = fun constructor9 -> (SourceStringIdentifier (constructor9,IdentifierTransformationCapitalize));;
let rec operator_translation_map = fun () -> (dictionary_of (Cons ((Pair ((data_11 ()),(SourceString ((data_int32_plus ()))))),(Cons ((Pair ((data__2 ()),(SourceString ((data_int32_minus ()))))),(Cons ((Pair ((data_12 ()),(SourceString ((data_int32_multiply ()))))),(Cons ((Pair ((data_13 ()),(SourceString ((data_int32_divide ()))))),(Cons ((Pair ((data_14 ()),(SourceString ((data_int32_modulus ()))))),(Cons ((Pair ((data_15 ()),(SourceString ((data_int32_and ()))))),Empty)))))))))))));;
let rec translate_identifier = fun identifier55 -> (match (token_is_operator (identifier_token identifier55)) with True -> (match (dictionary_get (identifier_name identifier55) (operator_translation_map ())) with (Some (translation)) -> translation | None -> (escape_identifier identifier55)) | False -> (escape_identifier identifier55));;
let rec prefix_type_variable = fun identifier56 -> (SourceStringIdentifier (identifier56,IdentifierTransformationLowercase));;
let rec prefix_type = fun identifier57 -> (match (identifier_is identifier57 (identifier_slice ())) with True -> (SourceString ((data_slice_type ()))) | False -> (match (identifier_is identifier57 (identifier_int32 ())) with True -> (SourceString ((data_int322 ()))) | False -> (SourceStringIdentifier (identifier57,IdentifierTransformationCapitalize))));;
let rec translate_less_than = fun translate_expression expressions27 -> (match expressions27 with (Cons (a69,(Cons (b65,(Cons (then_case,(Cons (else_case,Empty)))))))) -> (join (Cons ((SourceString ((data_if ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression a69),(Cons ((SourceString ((data_less_than ()))),(Cons ((translate_expression b65),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((data_then ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression then_case),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((data_else ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_expression else_case),Empty))))))))))))))))))))))))))) | x424 -> (SourceString ((data_compile_error ()))));;
let rec translate_constructor = fun translator name56 -> (fun x50 -> (wrap_in_brackets2 (join ((fun parameters9 -> (Cons ((translate_constructor_identifier name56),(Cons ((SourceString ((data_space ()))),(Cons (parameters9,Empty))))))) ((source_string_join (data_space ())) ((list_map translator) x50))))));;
let rec translate_pattern = fun pattern10 -> (match pattern10 with (Capture (identifier58)) -> (source_string_concat (SourceStringChar ((33l))) (escape_identifier identifier58)) | (IntegerPattern (integer9,x425)) -> (match (x2 integer9 (0l)) with True -> (SourceString ((wrap_in_brackets (string_from_int32 integer9)))) | False -> (SourceString ((string_from_int32 integer9)))) | (ConstructorPattern (identifier59,Empty,x426)) -> (translate_constructor_identifier identifier59) | (ConstructorPattern (identifier60,patterns4,x427)) -> ((translate_constructor translate_pattern identifier60) patterns4));;
let rec translate_rule = fun translate_expression2 rule2 -> (match rule2 with (Pair (pattern11,expression50)) -> (join (Cons ((translate_pattern pattern11),(Cons ((SourceString ((data_arrow ()))),(Cons ((translate_expression2 expression50),Empty))))))));;
let rec translate_match_expression = fun translate_expression3 expression51 -> (fun x50 -> ((source_string_join (data_space ())) ((fun rules5 -> (Cons ((SourceString ((data_case ()))),(Cons ((translate_expression3 expression51),(Cons ((SourceString ((data_of ()))),(Cons (rules5,Empty))))))))) ((source_string_join (data_semicolon ())) ((list_map (translate_rule translate_expression3)) x50)))));;
let rec translate_function_application = fun translate_expression4 expressions28 -> (match expressions28 with (Cons (no_args_function,Empty)) -> (translate_expression4 no_args_function) | x428 -> (source_string_join (data_space ()) (list_map translate_expression4 expressions28)));;
let rec translate_function_application2 = fun translate_expression5 expressions29 -> (match expressions29 with (Cons ((Variable (identifier61)),rest31)) -> (match (x4 (identifier_token identifier61) (identifier_int32_less_than ())) with True -> (translate_less_than translate_expression5 rest31) | False -> (translate_function_application translate_expression5 expressions29)) | x429 -> (translate_function_application translate_expression5 expressions29));;
let rec translate_argument_list = fun arguments18 -> (source_string_join (data_space ()) (list_map (fun x50 -> ((source_string_concat (SourceStringChar ((33l)))) (escape_identifier x50))) arguments18));;
let rec translate_lambda = fun translate_expression6 arguments19 expression52 -> (match (list_is_empty arguments19) with True -> (translate_expression6 expression52) | False -> (join (Cons ((SourceString ((data_backslash ()))),(Cons ((SourceString ((data_space ()))),(Cons ((translate_argument_list arguments19),(Cons ((SourceString ((data_arrow ()))),(Cons ((translate_expression6 expression52),Empty))))))))))));;
let rec translate_expression7 = fun expression53 -> (match expression53 with (Lambda (arguments20,expression54,x430)) -> (wrap_in_brackets2 (translate_lambda translate_expression7 arguments20 expression54)) | (Constructor (identifier62,Empty,x431)) -> (translate_constructor_identifier identifier62) | (Constructor (identifier63,expressions30,x432)) -> ((translate_constructor translate_expression7 identifier63) expressions30) | (FunctionApplication (expressions31,x433)) -> (wrap_in_brackets2 (translate_function_application2 translate_expression7 expressions31)) | (IntegerConstant (integer10,x434)) -> (match (x2 integer10 (0l)) with True -> (SourceString ((wrap_in_brackets (string_from_int32 integer10)))) | False -> (SourceString ((string_from_int32 integer10)))) | (Variable (identifier64)) -> (translate_identifier identifier64) | (Match (expression55,rules6,x435)) -> (wrap_in_brackets2 ((translate_match_expression translate_expression7 expression55) rules6)));;
let rec translate_function_definition = fun name57 arguments21 expression56 -> (match (list_is_empty arguments21) with True -> (join (Cons (name57,(Cons ((SourceString ((data_equals ()))),(Cons ((translate_expression7 expression56),Empty))))))) | False -> (join (Cons (name57,(Cons ((SourceString ((data_equals ()))),(Cons ((translate_lambda translate_expression7 arguments21 expression56),Empty))))))));;
let rec translate_simple_type = fun identifier65 parameters10 -> (match (list_any (x (identifier_equal identifier65) type_parameter_identifier) parameters10) with False -> (prefix_type identifier65) | True -> (prefix_type_variable identifier65));;
let rec translate_complex_types = fun translate_types name58 types6 -> ((fun x50 -> (wrap_in_brackets2 ((source_string_concat (source_string_concat (prefix_type name58) (SourceString ((data_space ()))))) ((translate_types (data_space ())) x50)))) types6);;
let rec translate_function_type = fun translate_types2 return_type4 argument_types -> ((fun x50 -> (wrap_in_brackets2 ((translate_types2 (data_arrow ())) ((fun argument_types2 -> (list_concat argument_types2 (Cons (return_type4,Empty)))) x50)))) argument_types);;
let rec translate_type = fun translate_types3 parameters11 type4 -> (match type4 with (SimpleType (identifier66)) -> (translate_simple_type identifier66 parameters11) | (ComplexType (identifier67,types7,x436)) -> (translate_complex_types translate_types3 identifier67 types7) | (FunctionType (argument_types3,return_type5,x437)) -> (translate_function_type translate_types3 return_type5 argument_types3));;
let rec translate_types4 = fun parameters12 f53 separator5 types8 -> ((fun x50 -> ((source_string_join separator5) ((list_map (fun x50 -> (f53 ((translate_type (translate_types4 parameters12 id) parameters12) x50)))) x50))) types8);;
let rec translate_type_parameter = fun parameter3 -> (match parameter3 with (UniversalParameter (identifier68)) -> (SourceString ((identifier_name identifier68))) | (ExistentialParameter (identifier69)) -> (SourceString ((identifier_name identifier69))));;
let rec translate_complex_constructor_definition = fun name59 types9 parameters13 -> (join (Cons ((translate_constructor_identifier name59),(Cons ((SourceString ((data_space ()))),(Cons ((translate_types4 parameters13 (source_string_concat (SourceStringChar ((33l)))) (data_space ()) types9),Empty)))))));;
let rec translate_constructor_definition = fun parameters14 constructor10 -> (match constructor10 with (SimpleConstructor (identifier70)) -> (translate_constructor_identifier identifier70) | (ComplexConstructor (identifier71,types10,x438)) -> (translate_complex_constructor_definition identifier71 types10 parameters14));;
let rec translate_constructor_definitions = fun parameters15 -> (fun x50 -> ((source_string_join (data_vertical_bar ())) ((list_map (translate_constructor_definition parameters15)) x50)));;
let rec translate_universal_parameters = fun parameters16 -> (list_foldl (fun parameter4 s2 -> (match parameter4 with (UniversalParameter (identifier72)) -> (join (Cons (s2,(Cons ((SourceString ((data_space ()))),(Cons ((prefix_type_variable identifier72),Empty))))))) | (ExistentialParameter (x439)) -> s2)) (source_string_empty ()) parameters16);;
let rec translate_existential_parameters = fun parameters17 -> (list_foldl (fun parameter5 s3 -> (match parameter5 with (UniversalParameter (x440)) -> s3 | (ExistentialParameter (identifier73)) -> (join (Cons (s3,(Cons ((SourceString ((data_forall ()))),(Cons ((SourceString ((data_space ()))),(Cons ((prefix_type_variable identifier73),(Cons ((SourceString ((data_dot ()))),(Cons ((SourceString ((data_space ()))),Empty))))))))))))))) (source_string_empty ()) parameters17);;
let rec translate_type_definition = fun name60 parameters18 constructors14 -> (join (Cons ((SourceString ((data_data ()))),(Cons ((SourceString ((data_space ()))),(Cons ((prefix_type name60),(Cons ((translate_universal_parameters parameters18),(Cons ((SourceString ((data_equals ()))),(Cons ((translate_existential_parameters parameters18),(Cons (((translate_constructor_definitions parameters18) constructors14),Empty)))))))))))))));;
let rec translate_definition = fun definition16 -> (match definition16 with (FunctionDefinition (name61,x441,arguments22,expression57,x442)) -> (translate_function_definition (escape_identifier name61) arguments22 expression57) | (TypeDefinition (name62,x443,parameters19,constructors15,x444)) -> (translate_type_definition name62 parameters19 constructors15) | (TargetDefinition (x445,data2)) -> (SourceString ((string_from_slice data2))));;
let rec translate_module_declaration = fun module_name3 -> (join (Cons ((SourceString ((data_module ()))),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString (module_name3)),(Cons ((SourceString ((data_space ()))),(Cons ((SourceString ((data_where ()))),Empty)))))))))));;
let rec definition_to_public_identifier = fun definition17 -> (match definition17 with (FunctionDefinition (name63,True,x446,x447,x448)) -> (Some ((Pair (IdentifierTransformationLowercase,name63)))) | (TypeDefinition (name64,True,x449,x450,x451)) -> (Some ((Pair (IdentifierTransformationCapitalize,name64)))) | x452 -> None);;
let rec public_identifiers_with_transformations = fun definitions16 -> (list_flatmap (x list_from_maybe definition_to_public_identifier) definitions16);;
let rec generate_source = fun module_name4 definitions17 -> ((fun x50 -> ((pair_cons (public_identifiers_with_transformations definitions17)) ((source_string_join (string_of_char (10l))) ((list_cons (SourceString ((data_language_exts ())))) ((list_cons (translate_module_declaration module_name4)) ((list_map translate_definition) x50)))))) definitions17);;
let rec compiler_backend_haskell = fun () -> (Backend ((data_haskell_language ()),(Cons ((data_preamble_filename ()),Empty)),(Cons ((data_pervasives_filename ()),Empty)),generate_source,(reserved_identifiers ()),True));;
let rec data_space2 = fun () -> (string_from_list (Cons ((32l),Empty)));;
let rec data_fun2 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),Empty)))))));;
let rec data_type2 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_if2 = fun () -> (string_from_list (Cons ((105l),(Cons ((102l),Empty)))));;
let rec data_then2 = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_else2 = fun () -> (string_from_list (Cons ((101l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_with2 = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_of2 = fun () -> (string_from_list (Cons ((111l),(Cons ((102l),Empty)))));;
let rec data_class2 = fun () -> (string_from_list (Cons ((99l),(Cons ((108l),(Cons ((97l),(Cons ((115l),(Cons ((115l),Empty)))))))))));;
let rec data_end2 = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_in2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),Empty)))));;
let rec data_let2 = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),Empty)))))));;
let rec data_open2 = fun () -> (string_from_list (Cons ((111l),(Cons ((112l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_and2 = fun () -> (string_from_list (Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_or2 = fun () -> (string_from_list (Cons ((111l),(Cons ((114l),Empty)))));;
let rec data_as2 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),Empty)))));;
let rec data_less_than2 = fun () -> (string_from_list (Cons ((60l),Empty)));;
let rec data_assert2 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_asr2 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_begin2 = fun () -> (string_from_list (Cons ((98l),(Cons ((101l),(Cons ((103l),(Cons ((105l),(Cons ((110l),Empty)))))))))));;
let rec data_constraint2 = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((105l),(Cons ((110l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_do2 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),Empty)))));;
let rec data_done2 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((110l),(Cons ((101l),Empty)))))))));;
let rec data_downto2 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((119l),(Cons ((110l),(Cons ((116l),(Cons ((111l),Empty)))))))))))));;
let rec data_exception2 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((99l),(Cons ((101l),(Cons ((112l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))));;
let rec data_external2 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))))));;
let rec data_false2 = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))))));;
let rec data_true3 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_for2 = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_function2 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_functor2 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),Empty)))))))))))))));;
let rec data_include2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),Empty)))))))))))))));;
let rec data_inherit2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((116l),Empty)))))))))))))));;
let rec data_initializer2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))))))))));;
let rec data_land2 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))));;
let rec data_lazy2 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((122l),(Cons ((121l),Empty)))))))));;
let rec data_lor2 = fun () -> (string_from_list (Cons ((108l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_lsl2 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((108l),Empty)))))));;
let rec data_lsr2 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_lxor2 = fun () -> (string_from_list (Cons ((108l),(Cons ((120l),(Cons ((111l),(Cons ((114l),Empty)))))))));;
let rec data_method2 = fun () -> (string_from_list (Cons ((109l),(Cons ((101l),(Cons ((116l),(Cons ((104l),(Cons ((111l),(Cons ((100l),Empty)))))))))))));;
let rec data_mod2 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))));;
let rec data_module2 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_mutable2 = fun () -> (string_from_list (Cons ((109l),(Cons ((117l),(Cons ((116l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))));;
let rec data_new2 = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),Empty)))))));;
let rec data_nonrec2 = fun () -> (string_from_list (Cons ((110l),(Cons ((111l),(Cons ((110l),(Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))))))))));;
let rec data_object2 = fun () -> (string_from_list (Cons ((111l),(Cons ((98l),(Cons ((106l),(Cons ((101l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_private2 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((97l),(Cons ((116l),(Cons ((101l),Empty)))))))))))))));;
let rec data_rec2 = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))));;
let rec data_sig2 = fun () -> (string_from_list (Cons ((115l),(Cons ((105l),(Cons ((103l),Empty)))))));;
let rec data_struct2 = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_try2 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((121l),Empty)))))));;
let rec data_val2 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),Empty)))))));;
let rec data_virtual2 = fun () -> (string_from_list (Cons ((118l),(Cons ((105l),(Cons ((114l),(Cons ((116l),(Cons ((117l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))));;
let rec data_when2 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_while2 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((105l),(Cons ((108l),(Cons ((101l),Empty)))))))))));;
let rec data_parser2 = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_value2 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),(Cons ((117l),(Cons ((101l),Empty)))))))))));;
let rec data_to2 = fun () -> (string_from_list (Cons ((116l),(Cons ((111l),Empty)))));;
let rec data_def3 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ3 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn3 = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match3 = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists3 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub3 = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_16 = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__3 = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_17 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_18 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_19 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_20 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than3 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe3 = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list3 = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_compile_error2 = fun () -> (string_from_list (Cons ((42l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((101l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),(Cons ((42l),Empty)))))))))))))))))))))))))))))));;
let rec data_javascript_language = fun () -> (string_from_list (Cons ((106l),(Cons ((97l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((99l),(Cons ((114l),(Cons ((105l),(Cons ((112l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_preamble_filename2 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((109l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((106l),(Cons ((115l),Empty)))))))))))))))))))))));;
let rec data_pervasives_filename2 = fun () -> (string_from_list (Cons ((112l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((105l),(Cons ((118l),(Cons ((101l),(Cons ((115l),(Cons ((46l),(Cons ((106l),(Cons ((115l),Empty)))))))))))))))))))))))))));;
let rec data_int32_plus2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((97l),(Cons ((100l),(Cons ((100l),Empty)))))))))))))))))));;
let rec data_int32_multiply2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((109l),(Cons ((117l),(Cons ((108l),Empty)))))))))))))))))));;
let rec data_int32_minus2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((115l),(Cons ((117l),(Cons ((98l),Empty)))))))))))))))))));;
let rec data_int32_divide2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((100l),(Cons ((105l),(Cons ((118l),Empty)))))))))))))))))));;
let rec data_int32_modulus2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))))))))))))))));;
let rec data_int32_and2 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((95l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))))))))))))));;
let rec data_slice2 = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))));;
let rec data_trampoline = fun () -> (string_from_list (Cons ((95l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((109l),(Cons ((112l),(Cons ((111l),(Cons ((108l),(Cons ((105l),(Cons ((110l),(Cons ((101l),Empty)))))))))))))))))))))));;
let rec data_return_value_marker = fun () -> (string_from_list (Cons ((95l),(Cons ((107l),(Cons ((58l),Empty)))))));;
let rec data_tailcall = fun () -> (string_from_list (Cons ((95l),(Cons ((116l),(Cons ((97l),(Cons ((105l),(Cons ((108l),(Cons ((99l),(Cons ((97l),(Cons ((108l),(Cons ((108l),Empty)))))))))))))))))));;
let rec data_var = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((114l),Empty)))))));;
let rec data_return = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((116l),(Cons ((117l),(Cons ((114l),(Cons ((110l),Empty)))))))))))));;
let rec data_function3 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_import2 = fun () -> (string_from_list (Cons ((105l),(Cons ((109l),(Cons ((112l),(Cons ((111l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_default2 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((97l),(Cons ((117l),(Cons ((108l),(Cons ((116l),Empty)))))))))))))));;
let rec data_case2 = fun () -> (string_from_list (Cons ((99l),(Cons ((97l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_break = fun () -> (string_from_list (Cons ((98l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((107l),Empty)))))))))));;
let rec data_const = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),Empty)))))))))));;
let rec data_continue = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((116l),(Cons ((105l),(Cons ((110l),(Cons ((117l),(Cons ((101l),Empty)))))))))))))))));;
let rec data_catch = fun () -> (string_from_list (Cons ((99l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_debugger = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((98l),(Cons ((117l),(Cons ((103l),(Cons ((103l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))));;
let rec data_delete = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((108l),(Cons ((101l),(Cons ((116l),(Cons ((101l),Empty)))))))))))));;
let rec data_export = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((111l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_extends = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((110l),(Cons ((100l),(Cons ((115l),Empty)))))))))))))));;
let rec data_enum = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((117l),(Cons ((109l),Empty)))))))));;
let rec data_finally = fun () -> (string_from_list (Cons ((102l),(Cons ((105l),(Cons ((110l),(Cons ((97l),(Cons ((108l),(Cons ((108l),(Cons ((121l),Empty)))))))))))))));;
let rec data_instanceof = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((99l),(Cons ((101l),(Cons ((111l),(Cons ((102l),Empty)))))))))))))))))))));;
let rec data_null = fun () -> (string_from_list (Cons ((110l),(Cons ((117l),(Cons ((108l),(Cons ((108l),Empty)))))))));;
let rec data_super = fun () -> (string_from_list (Cons ((115l),(Cons ((117l),(Cons ((112l),(Cons ((101l),(Cons ((114l),Empty)))))))))));;
let rec data_switch = fun () -> (string_from_list (Cons ((115l),(Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))))));;
let rec data_this = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((105l),(Cons ((115l),Empty)))))))));;
let rec data_throw = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((114l),(Cons ((111l),(Cons ((119l),Empty)))))))))));;
let rec data_typeof = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),(Cons ((111l),(Cons ((102l),Empty)))))))))))));;
let rec data_void = fun () -> (string_from_list (Cons ((118l),(Cons ((111l),(Cons ((105l),(Cons ((100l),Empty)))))))));;
let rec data_await = fun () -> (string_from_list (Cons ((97l),(Cons ((119l),(Cons ((97l),(Cons ((105l),(Cons ((116l),Empty)))))))))));;
let rec data_end_statement = fun () -> (string_from_list (Cons ((59l),Empty)));;
let rec data_equals2 = fun () -> (string_from_list (Cons ((61l),Empty)));;
let rec data_empty_object = fun () -> (string_from_list (Cons ((123l),(Cons ((125l),Empty)))));;
let rec data_open_bracket = fun () -> (string_from_list (Cons ((40l),Empty)));;
let rec data_close_bracket = fun () -> (string_from_list (Cons ((41l),Empty)));;
let rec data_open_block = fun () -> (string_from_list (Cons ((123l),Empty)));;
let rec data_close_block = fun () -> (string_from_list (Cons ((125l),Empty)));;
let rec data_open_array = fun () -> (string_from_list (Cons ((91l),Empty)));;
let rec data_close_array = fun () -> (string_from_list (Cons ((93l),Empty)));;
let rec data_comma2 = fun () -> (string_from_list (Cons ((44l),Empty)));;
let rec data_match_func = fun () -> (string_from_list (Cons ((95l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))))));;
let rec data_capture = fun () -> (string_from_list (Cons ((36l),Empty)));;
let rec data_question_mark = fun () -> (string_from_list (Cons ((63l),Empty)));;
let rec data_colon2 = fun () -> (string_from_list (Cons ((58l),Empty)));;
let rec data_lambda_arrow = fun () -> (string_from_list (Cons ((32l),(Cons ((61l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_single_quote = fun () -> (string_from_list (Cons ((39l),Empty)));;
let rec data_dot2 = fun () -> (string_from_list (Cons ((46l),Empty)));;
let rec data_exports = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((112l),(Cons ((111l),(Cons ((114l),(Cons ((116l),(Cons ((115l),Empty)))))))))))))));;
let rec data_indent = fun () -> (string_from_list (Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),Empty)))))))));;
let rec reserved_identifiers2 = fun () -> (Cons (data_var,(Cons (data_import2,(Cons (data_default2,(Cons (data_case2,(Cons (data_class2,(Cons (data_do2,(Cons (data_else2,(Cons (data_false2,(Cons (data_for2,(Cons (data_function3,(Cons (data_if2,(Cons (data_in2,(Cons (data_new2,(Cons (data_true3,(Cons (data_try2,(Cons (data_with2,(Cons (data_while2,(Cons (data_break,(Cons (data_const,(Cons (data_continue,(Cons (data_catch,(Cons (data_debugger,(Cons (data_delete,(Cons (data_export,(Cons (data_extends,(Cons (data_enum,(Cons (data_finally,(Cons (data_instanceof,(Cons (data_null,(Cons (data_return,(Cons (data_super,(Cons (data_switch,(Cons (data_this,(Cons (data_throw,(Cons (data_typeof,(Cons (data_void,(Cons (data_await,Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec escape_identifier2 = fun identifier74 -> (SourceStringIdentifier (identifier74,IdentifierTransformationNone));;
let rec translate_constructor_identifier2 = fun identifier75 -> (escape_identifier2 identifier75);;
let rec operator_translation_map2 = fun () -> (dictionary_of (Cons ((Pair ((data_16 ()),(SourceString ((data_int32_plus2 ()))))),(Cons ((Pair ((data__3 ()),(SourceString ((data_int32_minus2 ()))))),(Cons ((Pair ((data_17 ()),(SourceString ((data_int32_multiply2 ()))))),(Cons ((Pair ((data_18 ()),(SourceString ((data_int32_divide2 ()))))),(Cons ((Pair ((data_19 ()),(SourceString ((data_int32_modulus2 ()))))),(Cons ((Pair ((data_20 ()),(SourceString ((data_int32_and2 ()))))),Empty)))))))))))));;
let rec translate_identifier2 = fun identifier76 -> (match (token_is_operator (identifier_token identifier76)) with True -> (match (dictionary_get (identifier_name identifier76) (operator_translation_map2 ())) with (Some (translation2)) -> translation2 | None -> (escape_identifier2 identifier76)) | False -> (escape_identifier2 identifier76));;
let rec translate_less_than2 = fun translate_expression8 expressions32 -> (match expressions32 with (Cons (a70,(Cons (b66,(Cons (then_case2,(Cons (else_case2,Empty)))))))) -> (wrap_in_brackets2 (join (Cons ((translate_expression8 a70),(Cons ((SourceString ((data_less_than2 ()))),(Cons ((translate_expression8 b66),(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_question_mark ()))),(Cons ((SourceString ((data_space2 ()))),(Cons ((translate_expression8 then_case2),(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_colon2 ()))),(Cons ((SourceString ((data_space2 ()))),(Cons ((translate_expression8 else_case2),Empty)))))))))))))))))))))))) | x453 -> (SourceString ((data_compile_error2 ()))));;
let rec wrap_in_angle_brackets = fun s4 -> (join (Cons ((SourceString ((data_open_array ()))),(Cons (s4,(Cons ((SourceString ((data_close_array ()))),Empty)))))));;
let rec translate_constructor2 = fun translator2 identifier77 -> (fun x50 -> (wrap_in_angle_brackets ((source_string_join (data_comma2 ())) ((list_cons (translate_constructor_identifier2 identifier77)) ((list_map translator2) x50)))));;
let rec translate_pattern2 = fun pattern12 -> (match pattern12 with (Capture (x454)) -> (SourceString ((data_capture ()))) | (IntegerPattern (integer11,x455)) -> (SourceString ((string_from_int32 integer11))) | (ConstructorPattern (identifier78,Empty,x456)) -> (translate_constructor_identifier2 identifier78) | (ConstructorPattern (identifier79,patterns5,x457)) -> (translate_constructor2 translate_pattern2 identifier79 patterns5));;
let rec translate_captures = fun pattern13 -> (match pattern13 with (Capture (identifier80)) -> (Cons ((escape_identifier2 identifier80),Empty)) | (IntegerPattern (x458,x459)) -> (list_empty ()) | (ConstructorPattern (x460,patterns6,x461)) -> (list_flatmap translate_captures patterns6));;
let rec translate_rule2 = fun translate_expression9 rule3 -> (match rule3 with (Pair (pattern14,expression58)) -> (join (Cons ((translate_pattern2 pattern14),(Cons ((SourceString ((data_comma2 ()))),(Cons ((wrap_in_brackets2 (source_string_join (data_comma2 ()) (translate_captures pattern14))),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((translate_expression9 expression58),Empty))))))))))));;
let rec translate_match_expression2 = fun translate_expression10 translate_rule3 expression59 -> (fun x50 -> ((source_string_join (data_space2 ())) ((fun rules7 -> (Cons ((SourceString ((data_match_func ()))),(Cons ((wrap_in_brackets2 (join (Cons ((translate_expression10 expression59),(Cons ((SourceString ((data_comma2 ()))),(Cons (rules7,Empty)))))))),Empty))))) (wrap_in_angle_brackets ((source_string_join (data_comma2 ())) ((list_map (translate_rule3 translate_expression10)) x50))))));;
let rec translate_function_application3 = fun translate_expression11 expressions33 -> (match expressions33 with (Cons (function2,Empty)) -> (join (Cons ((translate_expression11 function2),(Cons ((wrap_in_brackets2 (source_string_empty ())),Empty))))) | (Cons (function3,args)) -> (join (Cons ((translate_expression11 function3),(Cons ((join (list_map (x wrap_in_brackets2 translate_expression11) args)),Empty))))) | Empty -> (SourceString ((data_compile_error2 ()))));;
let rec translate_function_application4 = fun translate_expression12 expressions34 -> (match expressions34 with (Cons ((Variable (identifier81)),rest32)) -> (match (x4 (identifier_token identifier81) (identifier_int32_less_than ())) with True -> (translate_less_than2 translate_expression12 rest32) | False -> (translate_function_application3 translate_expression12 expressions34)) | x462 -> (translate_function_application3 translate_expression12 expressions34));;
let rec translate_argument_list2 = fun arguments23 -> (match (list_is_empty arguments23) with True -> (wrap_in_brackets2 (source_string_empty ())) | False -> (source_string_join (data_lambda_arrow ()) (list_map escape_identifier2 arguments23)));;
let rec translate_lambda2 = fun translate_expression13 arguments24 expression60 -> (join (Cons ((translate_argument_list2 arguments24),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((translate_expression13 expression60),Empty)))))));;
let rec translate_expression14 = fun expression61 -> (match expression61 with (Lambda (arguments25,expression62,x463)) -> (wrap_in_brackets2 (translate_lambda2 translate_expression14 arguments25 expression62)) | (Constructor (identifier82,Empty,x464)) -> (translate_constructor_identifier2 identifier82) | (Constructor (identifier83,expressions35,x465)) -> ((translate_constructor2 translate_expression14 identifier83) expressions35) | (FunctionApplication (expressions36,x466)) -> (translate_function_application4 translate_expression14 expressions36) | (IntegerConstant (integer12,x467)) -> (SourceString ((string_from_int32 integer12))) | (Variable (identifier84)) -> (translate_identifier2 identifier84) | (Match (expression63,rules8,x468)) -> (translate_match_expression2 translate_expression14 translate_rule2 expression63 rules8));;
let rec mark_as_return_value = fun source2 -> (join (Cons ((SourceString ((data_open_bracket ()))),(Cons ((SourceString ((data_open_block ()))),(Cons ((SourceString ((data_return_value_marker ()))),(Cons (source2,(Cons ((SourceString ((data_close_block ()))),(Cons ((SourceString ((data_close_bracket ()))),Empty)))))))))))));;
let rec translate_tail_recursive_match_rule = fun name65 translate_tail_recursive_function translate_expression15 rule4 -> (match rule4 with (Pair (pattern15,expression64)) -> (match (list_any (identifier_equal name65) (captured_identifiers_from_pattern pattern15)) with True -> (translate_rule2 translate_expression15 rule4) | False -> (translate_rule2 (translate_tail_recursive_function name65) rule4)));;
let rec translate_tail_recursive_function2 = fun name66 expression65 -> (match expression65 with (FunctionApplication ((Cons ((Variable (applied_name2)),arguments26)),range105)) -> (match (identifier_equal name66 applied_name2) with True -> (mark_as_return_value (source_string_join (data_space2 ()) (Cons ((SourceString ((data_open_bracket ()))),(Cons ((SourceString ((data_close_bracket ()))),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((SourceString ((data_tailcall ()))),(Cons ((join (list_map (x wrap_in_brackets2 translate_expression14) arguments26)),Empty)))))))))))) | False -> (translate_expression14 expression65)) | (Match (expression66,rules9,range106)) -> (translate_match_expression2 translate_expression14 (translate_tail_recursive_match_rule name66 translate_tail_recursive_function2) expression66 rules9) | x469 -> (translate_expression14 expression65));;
let rec translate_main_function_definition = fun identifier85 arguments27 expression67 -> (match (and2 (list_every (x not (identifier_equal identifier85)) arguments27) (expression_calls_function_in_tail_position identifier85 expression67)) with True -> (source_string_join (data_space2 ()) (Cons ((SourceString ((data_var ()))),(Cons ((escape_identifier2 identifier85),(Cons ((SourceString ((data_equals2 ()))),(Cons ((translate_argument_list2 arguments27),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((SourceString ((data_open_block ()))),(Cons ((SourceString ((data_var ()))),(Cons ((SourceString ((data_tailcall ()))),(Cons ((SourceString ((data_equals2 ()))),(Cons ((translate_argument_list2 arguments27),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((translate_tail_recursive_function2 identifier85 expression67),(Cons ((SourceString ((data_end_statement ()))),(Cons ((SourceString ((data_return ()))),(Cons ((SourceString ((data_trampoline ()))),(Cons ((SourceString ((data_open_bracket ()))),(Cons ((SourceString ((data_tailcall ()))),(Cons ((join (list_map (x wrap_in_brackets2 escape_identifier2) arguments27)),(Cons ((SourceString ((data_close_bracket ()))),(Cons ((SourceString ((data_end_statement ()))),(Cons ((SourceString ((data_close_block ()))),(Cons ((SourceString ((data_end_statement ()))),Empty))))))))))))))))))))))))))))))))))))))))))))) | False -> (source_string_join (data_space2 ()) (Cons ((SourceString ((data_var ()))),(Cons ((escape_identifier2 identifier85),(Cons ((SourceString ((data_equals2 ()))),(Cons ((translate_lambda2 translate_expression14 arguments27 expression67),(Cons ((SourceString ((data_end_statement ()))),Empty))))))))))));;
let rec translate_export_statement = fun identifier86 arguments28 -> (join (Cons ((SourceString ((string_of_char (10l)))),(Cons ((SourceString ((data_module2 ()))),(Cons ((SourceString ((data_dot2 ()))),(Cons ((SourceString ((data_exports ()))),(Cons ((SourceString ((data_dot2 ()))),(Cons ((escape_identifier2 identifier86),(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_equals2 ()))),(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_open_bracket ()))),(Cons ((source_string_join (data_comma2 ()) (list_map escape_identifier2 arguments28)),(Cons ((SourceString ((data_close_bracket ()))),(Cons ((SourceString ((data_lambda_arrow ()))),(Cons ((escape_identifier2 identifier86),(Cons ((match (list_is_empty arguments28) with True -> (wrap_in_brackets2 SourceStringEmpty) | False -> (join (list_map (x wrap_in_brackets2 escape_identifier2) arguments28))),(Cons ((SourceString ((data_end_statement ()))),Empty)))))))))))))))))))))))))))))))));;
let rec translate_function_definition2 = fun identifier87 public10 arguments29 expression68 -> (source_string_concat (translate_main_function_definition identifier87 arguments29 expression68) (match public10 with True -> (translate_export_statement identifier87 arguments29) | False -> SourceStringEmpty));;
let rec constructor_identifier2 = fun constructor11 -> (match constructor11 with (SimpleConstructor (identifier88)) -> identifier88 | (ComplexConstructor (identifier89,x470,x471)) -> identifier89);;
let rec translate_constructor_definition2 = fun public11 constructor12 -> (match (translate_constructor_identifier2 (constructor_identifier2 constructor12)) with identifier90 -> (join (Cons ((SourceString ((data_var ()))),(Cons ((SourceString ((data_space2 ()))),(Cons (identifier90,(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_equals2 ()))),(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_open_block ()))),(Cons (identifier90,(Cons ((SourceString ((data_colon2 ()))),(Cons ((SourceString ((data_true3 ()))),(Cons ((SourceString ((data_close_block ()))),(Cons ((SourceString ((data_end_statement ()))),(Cons ((match public11 with True -> (join (Cons ((SourceString ((string_of_char (10l)))),(Cons ((SourceString ((data_module2 ()))),(Cons ((SourceString ((data_dot2 ()))),(Cons ((SourceString ((data_exports ()))),(Cons ((SourceString ((data_dot2 ()))),(Cons (identifier90,(Cons ((SourceString ((data_space2 ()))),(Cons ((SourceString ((data_equals2 ()))),(Cons ((SourceString ((data_space2 ()))),(Cons (identifier90,(Cons ((SourceString ((data_end_statement ()))),Empty))))))))))))))))))))))) | False -> SourceStringEmpty),Empty))))))))))))))))))))))))))));;
let rec translate_type_definition2 = fun name67 public12 parameters20 constructors16 -> (source_string_join (string_of_char (10l)) (list_map (translate_constructor_definition2 public12) constructors16));;
let rec translate_definition2 = fun definition18 -> (match definition18 with (FunctionDefinition (identifier91,public13,arguments30,expression69,x472)) -> (translate_function_definition2 identifier91 public13 arguments30 expression69) | (TypeDefinition (name68,public14,parameters21,constructors17,x473)) -> (translate_type_definition2 name68 public14 parameters21 constructors17) | (TargetDefinition (x474,data3)) -> (SourceString ((string_from_slice data3))));;
let rec generate_source2 = fun module_name5 definitions18 -> ((fun x50 -> ((pair_cons (list_map (pair_cons IdentifierTransformationNone) (public_identifiers definitions18))) ((source_string_join (string_of_char (10l))) ((list_map translate_definition2) x50)))) definitions18);;
let rec compiler_backend_javascript = fun () -> (Backend ((data_javascript_language ()),(Cons ((data_preamble_filename2 ()),Empty)),(Cons ((data_pervasives_filename2 ()),Empty)),generate_source2,(reserved_identifiers2 ()),True));;
let rec data_space3 = fun () -> (string_from_list (Cons ((32l),Empty)));;
let rec data_fun3 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),Empty)))))));;
let rec data_type3 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_if3 = fun () -> (string_from_list (Cons ((105l),(Cons ((102l),Empty)))));;
let rec data_then3 = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_else3 = fun () -> (string_from_list (Cons ((101l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_with3 = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_of3 = fun () -> (string_from_list (Cons ((111l),(Cons ((102l),Empty)))));;
let rec data_class3 = fun () -> (string_from_list (Cons ((99l),(Cons ((108l),(Cons ((97l),(Cons ((115l),(Cons ((115l),Empty)))))))))));;
let rec data_end3 = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_in3 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),Empty)))));;
let rec data_let3 = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),Empty)))))));;
let rec data_open3 = fun () -> (string_from_list (Cons ((111l),(Cons ((112l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_and3 = fun () -> (string_from_list (Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_or3 = fun () -> (string_from_list (Cons ((111l),(Cons ((114l),Empty)))));;
let rec data_as3 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),Empty)))));;
let rec data_less_than3 = fun () -> (string_from_list (Cons ((60l),Empty)));;
let rec data_assert3 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_asr3 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_begin3 = fun () -> (string_from_list (Cons ((98l),(Cons ((101l),(Cons ((103l),(Cons ((105l),(Cons ((110l),Empty)))))))))));;
let rec data_constraint3 = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((105l),(Cons ((110l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_do3 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),Empty)))));;
let rec data_done3 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((110l),(Cons ((101l),Empty)))))))));;
let rec data_downto3 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((119l),(Cons ((110l),(Cons ((116l),(Cons ((111l),Empty)))))))))))));;
let rec data_exception3 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((99l),(Cons ((101l),(Cons ((112l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))));;
let rec data_external3 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))))));;
let rec data_false3 = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))))));;
let rec data_true4 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_for3 = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_function4 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_functor3 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),Empty)))))))))))))));;
let rec data_include3 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),Empty)))))))))))))));;
let rec data_inherit3 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((116l),Empty)))))))))))))));;
let rec data_initializer3 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))))))))));;
let rec data_land3 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))));;
let rec data_lazy3 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((122l),(Cons ((121l),Empty)))))))));;
let rec data_lor3 = fun () -> (string_from_list (Cons ((108l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_lsl3 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((108l),Empty)))))));;
let rec data_lsr3 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_lxor3 = fun () -> (string_from_list (Cons ((108l),(Cons ((120l),(Cons ((111l),(Cons ((114l),Empty)))))))));;
let rec data_method3 = fun () -> (string_from_list (Cons ((109l),(Cons ((101l),(Cons ((116l),(Cons ((104l),(Cons ((111l),(Cons ((100l),Empty)))))))))))));;
let rec data_mod3 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))));;
let rec data_module3 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_mutable3 = fun () -> (string_from_list (Cons ((109l),(Cons ((117l),(Cons ((116l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))));;
let rec data_new3 = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),Empty)))))));;
let rec data_nonrec3 = fun () -> (string_from_list (Cons ((110l),(Cons ((111l),(Cons ((110l),(Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))))))))));;
let rec data_object3 = fun () -> (string_from_list (Cons ((111l),(Cons ((98l),(Cons ((106l),(Cons ((101l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_private3 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((97l),(Cons ((116l),(Cons ((101l),Empty)))))))))))))));;
let rec data_rec3 = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))));;
let rec data_sig3 = fun () -> (string_from_list (Cons ((115l),(Cons ((105l),(Cons ((103l),Empty)))))));;
let rec data_struct3 = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_try3 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((121l),Empty)))))));;
let rec data_val3 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),Empty)))))));;
let rec data_virtual3 = fun () -> (string_from_list (Cons ((118l),(Cons ((105l),(Cons ((114l),(Cons ((116l),(Cons ((117l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))));;
let rec data_when3 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_while3 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((105l),(Cons ((108l),(Cons ((101l),Empty)))))))))));;
let rec data_parser3 = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_value3 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),(Cons ((117l),(Cons ((101l),Empty)))))))))));;
let rec data_to3 = fun () -> (string_from_list (Cons ((116l),(Cons ((111l),Empty)))));;
let rec data_def4 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ4 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn4 = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match4 = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists4 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub4 = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_21 = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__4 = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_22 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_23 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_24 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_25 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than4 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe4 = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list4 = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_preamble_filename3 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((109l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))))))));;
let rec data_pervasives_filename3 = fun () -> (string_from_list (Cons ((112l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((105l),(Cons ((118l),(Cons ((101l),(Cons ((115l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),Empty)))))))))))))))))))))))))))))))));;
let rec data_module_language = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec generate_source3 = fun module_name6 definitions19 -> ((fun x50 -> ((pair_cons (list_empty ())) (source_string_string ((string_join (string_of_char (10l))) ((list_map (x (stringify_sexp stringify_sexps) definition_to_sexp)) ((list_filter (x (module_equal ModuleSelf) definition_module)) x50)))))) definitions19);;
let rec internal_symbols2 = fun () -> (default_identifiers ());;
let rec compiler_backend_module = fun () -> (Backend ((data_module_language ()),Empty,Empty,generate_source3,Empty,False));;
let rec data_space4 = fun () -> (string_from_list (Cons ((32l),Empty)));;
let rec data_fun4 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),Empty)))))));;
let rec data_type4 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_if4 = fun () -> (string_from_list (Cons ((105l),(Cons ((102l),Empty)))));;
let rec data_then4 = fun () -> (string_from_list (Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_else4 = fun () -> (string_from_list (Cons ((101l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))));;
let rec data_with4 = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_of4 = fun () -> (string_from_list (Cons ((111l),(Cons ((102l),Empty)))));;
let rec data_class4 = fun () -> (string_from_list (Cons ((99l),(Cons ((108l),(Cons ((97l),(Cons ((115l),(Cons ((115l),Empty)))))))))));;
let rec data_end4 = fun () -> (string_from_list (Cons ((101l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_in4 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),Empty)))));;
let rec data_let4 = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),Empty)))))));;
let rec data_open4 = fun () -> (string_from_list (Cons ((111l),(Cons ((112l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_and4 = fun () -> (string_from_list (Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))));;
let rec data_or4 = fun () -> (string_from_list (Cons ((111l),(Cons ((114l),Empty)))));;
let rec data_as4 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),Empty)))));;
let rec data_less_than4 = fun () -> (string_from_list (Cons ((60l),Empty)));;
let rec data_assert4 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((115l),(Cons ((101l),(Cons ((114l),(Cons ((116l),Empty)))))))))))));;
let rec data_asr4 = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_begin4 = fun () -> (string_from_list (Cons ((98l),(Cons ((101l),(Cons ((103l),(Cons ((105l),(Cons ((110l),Empty)))))))))));;
let rec data_constraint4 = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((105l),(Cons ((110l),(Cons ((116l),Empty)))))))))))))))))))));;
let rec data_do4 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),Empty)))));;
let rec data_done4 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((110l),(Cons ((101l),Empty)))))))));;
let rec data_downto4 = fun () -> (string_from_list (Cons ((100l),(Cons ((111l),(Cons ((119l),(Cons ((110l),(Cons ((116l),(Cons ((111l),Empty)))))))))))));;
let rec data_exception4 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((99l),(Cons ((101l),(Cons ((112l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))));;
let rec data_external4 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((116l),(Cons ((101l),(Cons ((114l),(Cons ((110l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))))));;
let rec data_false4 = fun () -> (string_from_list (Cons ((102l),(Cons ((97l),(Cons ((108l),(Cons ((115l),(Cons ((101l),Empty)))))))))));;
let rec data_true5 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_for4 = fun () -> (string_from_list (Cons ((102l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_function5 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))));;
let rec data_functor4 = fun () -> (string_from_list (Cons ((102l),(Cons ((117l),(Cons ((110l),(Cons ((99l),(Cons ((116l),(Cons ((111l),(Cons ((114l),Empty)))))))))))))));;
let rec data_include4 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),Empty)))))))))))))));;
let rec data_inherit4 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((104l),(Cons ((101l),(Cons ((114l),(Cons ((105l),(Cons ((116l),Empty)))))))))))))));;
let rec data_initializer4 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((105l),(Cons ((97l),(Cons ((108l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((114l),Empty)))))))))))))))))))))));;
let rec data_land4 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))));;
let rec data_lazy4 = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((122l),(Cons ((121l),Empty)))))))));;
let rec data_lor4 = fun () -> (string_from_list (Cons ((108l),(Cons ((111l),(Cons ((114l),Empty)))))));;
let rec data_lsl4 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((108l),Empty)))))));;
let rec data_lsr4 = fun () -> (string_from_list (Cons ((108l),(Cons ((115l),(Cons ((114l),Empty)))))));;
let rec data_lxor4 = fun () -> (string_from_list (Cons ((108l),(Cons ((120l),(Cons ((111l),(Cons ((114l),Empty)))))))));;
let rec data_method4 = fun () -> (string_from_list (Cons ((109l),(Cons ((101l),(Cons ((116l),(Cons ((104l),(Cons ((111l),(Cons ((100l),Empty)))))))))))));;
let rec data_mod4 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),Empty)))))));;
let rec data_module4 = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_mutable4 = fun () -> (string_from_list (Cons ((109l),(Cons ((117l),(Cons ((116l),(Cons ((97l),(Cons ((98l),(Cons ((108l),(Cons ((101l),Empty)))))))))))))));;
let rec data_new4 = fun () -> (string_from_list (Cons ((110l),(Cons ((101l),(Cons ((119l),Empty)))))));;
let rec data_nonrec4 = fun () -> (string_from_list (Cons ((110l),(Cons ((111l),(Cons ((110l),(Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))))))))));;
let rec data_object4 = fun () -> (string_from_list (Cons ((111l),(Cons ((98l),(Cons ((106l),(Cons ((101l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_private4 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((105l),(Cons ((118l),(Cons ((97l),(Cons ((116l),(Cons ((101l),Empty)))))))))))))));;
let rec data_rec4 = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((99l),Empty)))))));;
let rec data_sig4 = fun () -> (string_from_list (Cons ((115l),(Cons ((105l),(Cons ((103l),Empty)))))));;
let rec data_struct4 = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((99l),(Cons ((116l),Empty)))))))))))));;
let rec data_try4 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((121l),Empty)))))));;
let rec data_val4 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),Empty)))))));;
let rec data_virtual4 = fun () -> (string_from_list (Cons ((118l),(Cons ((105l),(Cons ((114l),(Cons ((116l),(Cons ((117l),(Cons ((97l),(Cons ((108l),Empty)))))))))))))));;
let rec data_when4 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((101l),(Cons ((110l),Empty)))))))));;
let rec data_while4 = fun () -> (string_from_list (Cons ((119l),(Cons ((104l),(Cons ((105l),(Cons ((108l),(Cons ((101l),Empty)))))))))));;
let rec data_parser4 = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_value4 = fun () -> (string_from_list (Cons ((118l),(Cons ((97l),(Cons ((108l),(Cons ((117l),(Cons ((101l),Empty)))))))))));;
let rec data_to4 = fun () -> (string_from_list (Cons ((116l),(Cons ((111l),Empty)))));;
let rec data_def5 = fun () -> (string_from_list (Cons ((100l),(Cons ((101l),(Cons ((102l),Empty)))))));;
let rec data_typ5 = fun () -> (string_from_list (Cons ((116l),(Cons ((121l),(Cons ((112l),Empty)))))));;
let rec data_fn5 = fun () -> (string_from_list (Cons ((102l),(Cons ((110l),Empty)))));;
let rec data_match5 = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((99l),(Cons ((104l),Empty)))))))))));;
let rec data_exists5 = fun () -> (string_from_list (Cons ((101l),(Cons ((120l),(Cons ((105l),(Cons ((115l),(Cons ((116l),(Cons ((115l),Empty)))))))))))));;
let rec data_pub5 = fun () -> (string_from_list (Cons ((112l),(Cons ((117l),(Cons ((98l),Empty)))))));;
let rec data_26 = fun () -> (string_from_list (Cons ((43l),Empty)));;
let rec data__5 = fun () -> (string_from_list (Cons ((45l),Empty)));;
let rec data_27 = fun () -> (string_from_list (Cons ((42l),Empty)));;
let rec data_28 = fun () -> (string_from_list (Cons ((47l),Empty)));;
let rec data_29 = fun () -> (string_from_list (Cons ((37l),Empty)));;
let rec data_30 = fun () -> (string_from_list (Cons ((38l),Empty)));;
let rec data_int32_less_than5 = fun () -> (string_from_list (Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((45l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((115l),(Cons ((45l),(Cons ((116l),(Cons ((104l),(Cons ((97l),(Cons ((110l),Empty)))))))))))))))))))))))))))))));;
let rec data_pipe5 = fun () -> (string_from_list (Cons ((112l),(Cons ((105l),(Cons ((112l),(Cons ((101l),Empty)))))))));;
let rec data_list5 = fun () -> (string_from_list (Cons ((108l),(Cons ((105l),(Cons ((115l),(Cons ((116l),Empty)))))))));;
let rec data_compile_error3 = fun () -> (string_from_list (Cons ((42l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((101l),(Cons ((114l),(Cons ((114l),(Cons ((111l),(Cons ((114l),(Cons ((42l),Empty)))))))))))))))))))))))))))))));;
let rec data_arrow2 = fun () -> (string_from_list (Cons ((32l),(Cons ((45l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_equals3 = fun () -> (string_from_list (Cons ((32l),(Cons ((61l),(Cons ((32l),Empty)))))));;
let rec data_vertical_bar2 = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((32l),Empty)))))));;
let rec data_pipe_operator2 = fun () -> (string_from_list (Cons ((32l),(Cons ((124l),(Cons ((62l),(Cons ((32l),Empty)))))))));;
let rec data_colon3 = fun () -> (string_from_list (Cons ((32l),(Cons ((58l),(Cons ((32l),Empty)))))));;
let rec data_star2 = fun () -> (string_from_list (Cons ((32l),(Cons ((42l),(Cons ((32l),Empty)))))));;
let rec data_unit = fun () -> (string_from_list (Cons ((32l),(Cons ((117l),(Cons ((110l),(Cons ((105l),(Cons ((116l),(Cons ((32l),Empty)))))))))))));;
let rec data_int32_plus3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((97l),(Cons ((100l),(Cons ((100l),Empty)))))))))))))))))));;
let rec data_int32_multiply3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((109l),(Cons ((117l),(Cons ((108l),Empty)))))))))))))))))));;
let rec data_int32_minus3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((115l),(Cons ((117l),(Cons ((98l),Empty)))))))))))))))))));;
let rec data_int32_divide3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((100l),(Cons ((105l),(Cons ((118l),Empty)))))))))))))))))));;
let rec data_int32_modulus3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((114l),(Cons ((101l),(Cons ((109l),Empty)))))))))))))))))));;
let rec data_int32_and3 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((108l),(Cons ((111l),(Cons ((103l),(Cons ((97l),(Cons ((110l),(Cons ((100l),Empty)))))))))))))))))))))))));;
let rec data_int323 = fun () -> (string_from_list (Cons ((73l),(Cons ((110l),(Cons ((116l),(Cons ((51l),(Cons ((50l),(Cons ((46l),(Cons ((111l),(Cons ((102l),(Cons ((95l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((32l),Empty)))))))))))))))))))))))))));;
let rec data_comma3 = fun () -> (string_from_list (Cons ((44l),Empty)));;
let rec data_with5 = fun () -> (string_from_list (Cons ((119l),(Cons ((105l),(Cons ((116l),(Cons ((104l),Empty)))))))));;
let rec data_slice3 = fun () -> (string_from_list (Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))));;
let rec data_slice_type2 = fun () -> (string_from_list (Cons ((95l),(Cons ((115l),(Cons ((108l),(Cons ((105l),(Cons ((99l),(Cons ((101l),Empty)))))))))))));;
let rec data_definition_end = fun () -> (string_from_list (Cons ((59l),(Cons ((59l),Empty)))));;
let rec data_let_rec = fun () -> (string_from_list (Cons ((108l),(Cons ((101l),(Cons ((116l),(Cons ((32l),(Cons ((114l),(Cons ((101l),(Cons ((99l),(Cons ((32l),Empty)))))))))))))))));;
let rec data_constant2 = fun () -> (string_from_list (Cons ((95l),(Cons ((99l),(Cons ((111l),(Cons ((110l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((116l),(Cons ((95l),Empty)))))))))))))))))))));;
let rec data_preamble_filename4 = fun () -> (string_from_list (Cons ((112l),(Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((109l),(Cons ((98l),(Cons ((108l),(Cons ((101l),(Cons ((46l),(Cons ((109l),(Cons ((108l),Empty)))))))))))))))))))))));;
let rec data_pervasives_filename4 = fun () -> (string_from_list (Cons ((112l),(Cons ((101l),(Cons ((114l),(Cons ((118l),(Cons ((97l),(Cons ((115l),(Cons ((105l),(Cons ((118l),(Cons ((101l),(Cons ((115l),(Cons ((46l),(Cons ((109l),(Cons ((108l),Empty)))))))))))))))))))))))))));;
let rec data_ocaml_language = fun () -> (string_from_list (Cons ((111l),(Cons ((99l),(Cons ((97l),(Cons ((109l),(Cons ((108l),Empty)))))))))));;
let rec reserved_identifiers3 = fun () -> (Cons (data_assert4,(Cons (data_asr4,(Cons (data_begin4,(Cons (data_constraint4,(Cons (data_do4,(Cons (data_done4,(Cons (data_downto4,(Cons (data_type4,(Cons (data_if4,(Cons (data_then4,(Cons (data_else4,(Cons (data_with5,(Cons (data_of4,(Cons (data_end4,(Cons (data_in4,(Cons (data_fun4,(Cons (data_let4,(Cons (data_open4,(Cons (data_and4,(Cons (data_or4,(Cons (data_as4,(Cons (data_class4,(Cons (data_exception4,(Cons (data_external4,(Cons (data_false4,(Cons (data_true5,(Cons (data_for4,(Cons (data_function5,(Cons (data_functor4,(Cons (data_if4,(Cons (data_include4,(Cons (data_inherit4,(Cons (data_initializer4,(Cons (data_land4,(Cons (data_lazy4,(Cons (data_lor4,(Cons (data_lsl4,(Cons (data_lsr4,(Cons (data_lxor4,(Cons (data_method4,(Cons (data_mod4,(Cons (data_module4,(Cons (data_mutable4,(Cons (data_new4,(Cons (data_nonrec4,(Cons (data_object4,(Cons (data_private4,(Cons (data_rec4,(Cons (data_sig4,(Cons (data_struct4,(Cons (data_try4,(Cons (data_val4,(Cons (data_virtual4,(Cons (data_when4,(Cons (data_while4,(Cons (data_parser4,(Cons (data_value4,(Cons (data_to4,(Cons (data_slice3,Empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec operator_translation_map3 = fun () -> (dictionary_of (Cons ((Pair ((data_26 ()),(SourceString ((data_int32_plus3 ()))))),(Cons ((Pair ((data__5 ()),(SourceString ((data_int32_minus3 ()))))),(Cons ((Pair ((data_27 ()),(SourceString ((data_int32_multiply3 ()))))),(Cons ((Pair ((data_28 ()),(SourceString ((data_int32_divide3 ()))))),(Cons ((Pair ((data_29 ()),(SourceString ((data_int32_modulus3 ()))))),(Cons ((Pair ((data_30 ()),(SourceString ((data_int32_and3 ()))))),Empty)))))))))))));;
let rec translate_type_variable = fun identifier92 -> (source_string_concat (SourceStringChar ((39l))) (source_string_concat (SourceStringChar ((84l))) (SourceStringIdentifier (identifier92,IdentifierTransformationNone))));;
let rec escape_identifier3 = fun identifier93 -> (SourceStringIdentifier (identifier93,IdentifierTransformationNone));;
let rec lowercase_identifier = fun identifier94 -> (SourceStringIdentifier (identifier94,IdentifierTransformationLowercase));;
let rec translate_type_identifier = fun identifier95 -> (match (identifier_is identifier95 (identifier_slice ())) with True -> (SourceString ((data_slice_type2 ()))) | False -> (escape_identifier3 identifier95));;
let rec translate_constructor_identifier3 = fun identifier96 -> (SourceStringIdentifier (identifier96,IdentifierTransformationCapitalize));;
let rec translate_identifier3 = fun identifier97 -> (match (token_is_operator (identifier_token identifier97)) with True -> (match (dictionary_get (identifier_name identifier97) (operator_translation_map3 ())) with (Some (translation3)) -> translation3 | None -> (SourceStringIdentifier (identifier97,IdentifierTransformationNone))) | False -> (SourceStringIdentifier (identifier97,IdentifierTransformationNone)));;
let rec translate_less_than3 = fun translate_expression16 expressions37 -> (match expressions37 with (Cons (a71,(Cons (b67,(Cons (then_case3,(Cons (else_case3,Empty)))))))) -> (join (Cons ((SourceString ((data_if4 ()))),(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_expression16 a71),(Cons ((SourceString ((data_less_than4 ()))),(Cons ((translate_expression16 b67),(Cons ((SourceString ((data_space4 ()))),(Cons ((SourceString ((data_then4 ()))),(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_expression16 then_case3),(Cons ((SourceString ((data_space4 ()))),(Cons ((SourceString ((data_else4 ()))),(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_expression16 else_case3),Empty))))))))))))))))))))))))))) | x475 -> (SourceString ((data_compile_error3 ()))));;
let rec translate_constructor3 = fun translator3 identifier98 -> (fun x50 -> (wrap_in_brackets2 (join ((fun parameters22 -> (Cons ((translate_constructor_identifier3 identifier98),(Cons ((SourceString ((data_space4 ()))),(Cons (parameters22,Empty))))))) (wrap_in_brackets2 ((source_string_join (data_comma3 ())) ((list_map translator3) x50)))))));;
let rec translate_pattern3 = fun pattern16 -> (match pattern16 with (Capture (identifier99)) -> (escape_identifier3 identifier99) | (IntegerPattern (integer13,x476)) -> (join (Cons ((SourceString ((string_from_int32 integer13))),(Cons ((SourceStringChar ((108l))),Empty))))) | (ConstructorPattern (identifier100,Empty,x477)) -> (translate_constructor_identifier3 identifier100) | (ConstructorPattern (identifier101,patterns7,x478)) -> ((translate_constructor3 translate_pattern3 identifier101) patterns7));;
let rec translate_rule4 = fun translate_expression17 rule5 -> (match rule5 with (Pair (pattern17,expression70)) -> (join (Cons ((translate_pattern3 pattern17),(Cons ((SourceString ((data_arrow2 ()))),(Cons ((translate_expression17 expression70),Empty))))))));;
let rec translate_match_expression3 = fun translate_expression18 expression71 -> (fun x50 -> ((source_string_join (data_space4 ())) ((fun rules10 -> (Cons ((SourceString ((data_match5 ()))),(Cons ((translate_expression18 expression71),(Cons ((SourceString ((data_with5 ()))),(Cons (rules10,Empty))))))))) ((source_string_join (data_vertical_bar2 ())) ((list_map (translate_rule4 translate_expression18)) x50)))));;
let rec translate_function_application5 = fun translate_expression19 expressions38 -> (match expressions38 with (Cons (no_args_function2,Empty)) -> (join (Cons ((translate_expression19 no_args_function2),(Cons ((SourceString ((data_space4 ()))),(Cons ((SourceString ((wrap_in_brackets (string_empty ())))),Empty))))))) | x479 -> (source_string_join (data_space4 ()) (list_map translate_expression19 expressions38)));;
let rec translate_function_application6 = fun translate_expression20 expressions39 -> (match expressions39 with (Cons ((Variable (identifier102)),rest33)) -> (match (x4 (identifier_token identifier102) (identifier_int32_less_than ())) with True -> (translate_less_than3 translate_expression20 rest33) | False -> (translate_function_application5 translate_expression20 expressions39)) | x480 -> (translate_function_application5 translate_expression20 expressions39));;
let rec translate_argument_list3 = fun arguments31 -> (match (list_is_empty arguments31) with True -> (SourceString ((wrap_in_brackets (string_empty ())))) | False -> (source_string_join (data_space4 ()) (list_map lowercase_identifier arguments31)));;
let rec translate_lambda3 = fun translate_expression21 arguments32 expression72 -> (join (Cons ((SourceString ((data_fun4 ()))),(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_argument_list3 arguments32),(Cons ((SourceString ((data_arrow2 ()))),(Cons ((translate_expression21 expression72),Empty)))))))))));;
let rec translate_expression22 = fun expression73 -> (match expression73 with (Lambda (arguments33,expression74,x481)) -> (wrap_in_brackets2 (translate_lambda3 translate_expression22 arguments33 expression74)) | (Constructor (identifier103,Empty,x482)) -> (translate_constructor_identifier3 identifier103) | (Constructor (identifier104,expressions40,x483)) -> ((translate_constructor3 translate_expression22 identifier104) expressions40) | (FunctionApplication (expressions41,x484)) -> (wrap_in_brackets2 (translate_function_application6 translate_expression22 expressions41)) | (IntegerConstant (integer14,x485)) -> (wrap_in_brackets2 (SourceString ((string_concat (string_from_int32 integer14) (string_of_char (108l)))))) | (Variable (identifier105)) -> (translate_identifier3 identifier105) | (Match (expression75,rules11,x486)) -> (wrap_in_brackets2 ((translate_match_expression3 translate_expression22 expression75) rules11)));;
let rec translate_function_definition3 = fun identifier106 arguments34 expression76 -> (join (Cons ((SourceString ((data_let_rec ()))),(Cons ((lowercase_identifier identifier106),(Cons ((SourceString ((data_equals3 ()))),(Cons ((translate_lambda3 translate_expression22 arguments34 expression76),(Cons ((SourceString ((data_definition_end ()))),Empty)))))))))));;
let rec translate_simple_type2 = fun identifier107 parameters23 -> (match (list_any (x (identifier_equal identifier107) type_parameter_identifier) parameters23) with False -> (translate_type_identifier identifier107) | True -> (translate_type_variable identifier107));;
let rec translate_complex_types2 = fun translate_types5 name69 types11 -> ((fun x50 -> (join ((fun types12 -> (Cons (types12,(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_type_identifier name69),Empty))))))) (wrap_in_brackets2 ((translate_types5 (data_comma3 ())) x50))))) types11);;
let rec translate_function_type2 = fun translate_types6 return_type6 argument_types4 -> (match (list_is_empty argument_types4) with True -> (wrap_in_brackets2 (join (Cons ((SourceString ((data_unit ()))),(Cons ((SourceString ((data_arrow2 ()))),(Cons ((translate_types6 (data_arrow2 ()) (Cons (return_type6,Empty))),Empty)))))))) | False -> (wrap_in_brackets2 (translate_types6 (data_arrow2 ()) (list_concat argument_types4 (Cons (return_type6,Empty))))));;
let rec translate_type2 = fun translate_types7 parameters24 type5 -> (match type5 with (SimpleType (identifier108)) -> (translate_simple_type2 identifier108 parameters24) | (ComplexType (identifier109,types13,x487)) -> (translate_complex_types2 translate_types7 identifier109 types13) | (FunctionType (argument_types5,return_type7,x488)) -> (translate_function_type2 translate_types7 return_type7 argument_types5));;
let rec translate_types8 = fun parameters25 separator6 types14 -> ((fun x50 -> ((source_string_join separator6) ((list_map (translate_type2 (translate_types8 parameters25) parameters25)) x50))) types14);;
let rec translate_complex_constructor_definition2 = fun name70 type6 types15 parameters26 -> (join (Cons ((translate_constructor_identifier3 name70),(Cons ((SourceString ((data_colon3 ()))),(Cons ((translate_types8 parameters26 (data_star2 ()) types15),(Cons ((SourceString ((data_arrow2 ()))),(Cons (type6,Empty)))))))))));;
let rec translate_constructor_definition3 = fun type7 parameters27 constructor13 -> (match constructor13 with (SimpleConstructor (identifier110)) -> (translate_constructor_identifier3 identifier110) | (ComplexConstructor (identifier111,types16,x489)) -> (translate_complex_constructor_definition2 identifier111 type7 types16 parameters27));;
let rec translate_constructor_definitions2 = fun type8 parameters28 constructors18 -> ((fun x50 -> ((source_string_join (data_vertical_bar2 ())) ((list_map (translate_constructor_definition3 type8 parameters28)) x50))) constructors18);;
let rec translate_type_parameter_for_definition = fun parameter6 -> (match parameter6 with (UniversalParameter (identifier112)) -> (translate_type_variable identifier112) | (ExistentialParameter (x490)) -> SourceStringEmpty);;
let rec translate_type_parameters = fun parameters29 -> ((fun x50 -> ((source_string_join (data_comma3 ())) ((list_filter (fun parameter7 -> (match parameter7 with SourceStringEmpty -> False | x491 -> True))) ((list_map translate_type_parameter_for_definition) x50)))) parameters29);;
let rec translate_type_name = fun name71 parameters30 parameter_string -> (match (list_is_empty parameters30) with True -> (lowercase_identifier name71) | False -> (join (Cons ((wrap_in_brackets2 parameter_string),(Cons ((SourceString ((data_space4 ()))),(Cons ((lowercase_identifier name71),Empty))))))));;
let rec translate_type_name2 = fun name72 parameters31 -> (translate_type_name name72 parameters31 (translate_type_parameters parameters31));;
let rec translate_type_definition3 = fun name73 parameters32 constructors19 -> (join (Cons ((SourceString ((data_type4 ()))),(Cons ((SourceString ((data_space4 ()))),(Cons ((translate_type_name2 name73 parameters32),(Cons ((SourceString ((data_equals3 ()))),(Cons ((translate_constructor_definitions2 (translate_type_name2 name73 parameters32) parameters32 constructors19),(Cons ((SourceString ((data_definition_end ()))),Empty)))))))))))));;
let rec translate_definition3 = fun definition19 -> (match definition19 with (FunctionDefinition (identifier113,x492,arguments35,expression77,x493)) -> (translate_function_definition3 identifier113 arguments35 expression77) | (TypeDefinition (name74,x494,parameters33,constructors20,x495)) -> (translate_type_definition3 name74 parameters33 constructors20) | (TargetDefinition (x496,data4)) -> (SourceString ((string_from_slice data4))));;
let rec generate_source4 = fun module_name7 definitions20 -> ((fun x50 -> ((pair_cons (list_map (pair_cons IdentifierTransformationLowercase) (public_identifiers definitions20))) ((source_string_join (string_of_char (10l))) ((list_map translate_definition3) x50)))) definitions20);;
let rec compiler_backend_ocaml = fun () -> (Backend ((data_ocaml_language ()),(Cons ((data_preamble_filename4 ()),Empty)),(Cons ((data_pervasives_filename4 ()),Empty)),generate_source4,(reserved_identifiers3 ()),True));;
let rec compiler_backends = fun () -> (Cons ((compiler_backend_haskell ()),(Cons ((compiler_backend_javascript ()),(Cons ((compiler_backend_module ()),(Cons ((compiler_backend_ocaml ()),Empty))))))));;
let rec data_no_input_files = fun () -> (string_from_list (Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),Empty)))))))))))))))))))))))))))));;
let rec data_no_output_path = fun () -> (string_from_list (Cons ((78l),(Cons ((111l),(Cons ((32l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((115l),(Cons ((112l),(Cons ((101l),(Cons ((99l),(Cons ((105l),(Cons ((102l),(Cons ((105l),(Cons ((101l),(Cons ((100l),(Cons ((44l),(Cons ((32l),(Cons ((112l),(Cons ((108l),(Cons ((101l),(Cons ((97l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((117l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((91l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((93l),(Cons ((32l),(Cons ((102l),(Cons ((108l),(Cons ((97l),(Cons ((103l),(Cons ((46l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_output_key = fun () -> (string_from_list (Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),Empty)))))))))))));;
let rec data_stdlib = fun () -> (string_from_list (Cons ((115l),(Cons ((116l),(Cons ((100l),(Cons ((108l),(Cons ((105l),(Cons ((98l),Empty)))))))))))));;
let rec data_parser_flag = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((101l),(Cons ((114l),Empty)))))))))))));;
let rec data_module_flag = fun () -> (string_from_list (Cons ((109l),(Cons ((111l),(Cons ((100l),(Cons ((117l),(Cons ((108l),(Cons ((101l),Empty)))))))))))));;
let rec data_language_flag = fun () -> (string_from_list (Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),Empty)))))))))))))))));;
let rec data_diagnostics_flag = fun () -> (string_from_list (Cons ((100l),(Cons ((105l),(Cons ((97l),(Cons ((103l),(Cons ((110l),(Cons ((111l),(Cons ((115l),(Cons ((116l),(Cons ((105l),(Cons ((99l),(Cons ((115l),Empty)))))))))))))))))))))));;
let rec data_read_files = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))));;
let rec data_write_files = fun () -> (string_from_list (Cons ((119l),(Cons ((114l),(Cons ((105l),(Cons ((116l),(Cons ((101l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))));;
let rec data_bytes_read = fun () -> (string_from_list (Cons ((114l),(Cons ((101l),(Cons ((97l),(Cons ((100l),(Cons ((32l),(Cons ((102l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((115l),(Cons ((32l),(Cons ((40l),(Cons ((98l),(Cons ((121l),(Cons ((116l),(Cons ((101l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))));;
let rec data_max_heap_size = fun () -> (string_from_list (Cons ((109l),(Cons ((97l),(Cons ((120l),(Cons ((32l),(Cons ((104l),(Cons ((101l),(Cons ((97l),(Cons ((112l),(Cons ((32l),(Cons ((115l),(Cons ((105l),(Cons ((122l),(Cons ((101l),(Cons ((32l),(Cons ((40l),(Cons ((98l),(Cons ((121l),(Cons ((116l),(Cons ((101l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))));;
let rec data_parse_time = fun () -> (string_from_list (Cons ((112l),(Cons ((97l),(Cons ((114l),(Cons ((115l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))));;
let rec data_transform_time = fun () -> (string_from_list (Cons ((97l),(Cons ((115l),(Cons ((116l),(Cons ((32l),(Cons ((116l),(Cons ((114l),(Cons ((97l),(Cons ((110l),(Cons ((115l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_generate_time = fun () -> (string_from_list (Cons ((99l),(Cons ((111l),(Cons ((100l),(Cons ((101l),(Cons ((32l),(Cons ((103l),(Cons ((101l),(Cons ((110l),(Cons ((101l),(Cons ((114l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),(Cons ((32l),(Cons ((40l),(Cons ((206l),(Cons ((188l),(Cons ((115l),(Cons ((41l),Empty)))))))))))))))))))))))))))))))))))))))))));;
let rec data_true6 = fun () -> (string_from_list (Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))));;
let rec data_usage = fun () -> (string_from_list (Cons ((117l),(Cons ((115l),(Cons ((97l),(Cons ((103l),(Cons ((101l),Empty)))))))))));;
let rec data_usage1 = fun () -> (string_from_list (Cons ((85l),(Cons ((115l),(Cons ((97l),(Cons ((103l),(Cons ((101l),(Cons ((58l),(Cons ((32l),(Cons ((114l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),(Cons ((99l),(Cons ((32l),(Cons ((91l),(Cons ((102l),(Cons ((108l),(Cons ((97l),(Cons ((103l),(Cons ((115l),(Cons ((93l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((91l),(Cons ((79l),(Cons ((85l),(Cons ((84l),(Cons ((80l),(Cons ((85l),(Cons ((84l),(Cons ((32l),(Cons ((70l),(Cons ((73l),(Cons ((76l),(Cons ((69l),(Cons ((93l),(Cons ((32l),(Cons ((91l),(Cons ((70l),(Cons ((73l),(Cons ((76l),(Cons ((69l),(Cons ((93l),(Cons ((46l),(Cons ((46l),(Cons ((46l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage2 = fun () -> (string_from_list (Cons ((67l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((114l),(Cons ((32l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((82l),(Cons ((101l),(Cons ((117l),(Cons ((115l),(Cons ((101l),(Cons ((32l),(Cons ((112l),(Cons ((114l),(Cons ((111l),(Cons ((103l),(Cons ((114l),(Cons ((97l),(Cons ((109l),(Cons ((109l),(Cons ((105l),(Cons ((110l),(Cons ((103l),(Cons ((32l),(Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage3 = fun () -> (string_from_list (Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((115l),(Cons ((116l),(Cons ((100l),(Cons ((108l),(Cons ((105l),(Cons ((98l),(Cons ((32l),(Cons ((91l),(Cons ((66l),(Cons ((79l),(Cons ((79l),(Cons ((76l),(Cons ((93l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((73l),(Cons ((110l),(Cons ((99l),(Cons ((108l),(Cons ((117l),(Cons ((100l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((104l),(Cons ((101l),(Cons ((32l),(Cons ((115l),(Cons ((116l),(Cons ((97l),(Cons ((110l),(Cons ((100l),(Cons ((97l),(Cons ((114l),(Cons ((100l),(Cons ((32l),(Cons ((108l),(Cons ((105l),(Cons ((98l),(Cons ((114l),(Cons ((97l),(Cons ((114l),(Cons ((121l),(Cons ((44l),(Cons ((32l),(Cons ((100l),(Cons ((101l),(Cons ((102l),(Cons ((97l),(Cons ((117l),(Cons ((108l),(Cons ((116l),(Cons ((58l),(Cons ((32l),(Cons ((116l),(Cons ((114l),(Cons ((117l),(Cons ((101l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage4 = fun () -> (string_from_list (Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),(Cons ((32l),(Cons ((91l),(Cons ((76l),(Cons ((65l),(Cons ((78l),(Cons ((71l),(Cons ((93l),(Cons ((32l),(Cons ((32l),(Cons ((84l),(Cons ((97l),(Cons ((114l),(Cons ((103l),(Cons ((101l),(Cons ((116l),(Cons ((32l),(Cons ((108l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((99l),(Cons ((111l),(Cons ((109l),(Cons ((112l),(Cons ((105l),(Cons ((108l),(Cons ((101l),(Cons ((32l),(Cons ((116l),(Cons ((111l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage5 = fun () -> (string_from_list (Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((45l),(Cons ((45l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((91l),(Cons ((70l),(Cons ((73l),(Cons ((76l),(Cons ((69l),(Cons ((93l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((87l),(Cons ((114l),(Cons ((105l),(Cons ((116l),(Cons ((101l),(Cons ((32l),(Cons ((111l),(Cons ((117l),(Cons ((116l),(Cons ((112l),(Cons ((117l),(Cons ((116l),(Cons ((32l),(Cons ((116l),(Cons ((111l),(Cons ((32l),(Cons ((70l),(Cons ((73l),(Cons ((76l),(Cons ((69l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage6 = fun () -> (string_from_list (Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((45l),(Cons ((104l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((32l),(Cons ((80l),(Cons ((114l),(Cons ((105l),(Cons ((110l),(Cons ((116l),(Cons ((32l),(Cons ((117l),(Cons ((115l),(Cons ((97l),(Cons ((103l),(Cons ((101l),(Cons ((32l),(Cons ((105l),(Cons ((110l),(Cons ((102l),(Cons ((111l),(Cons ((114l),(Cons ((109l),(Cons ((97l),(Cons ((116l),(Cons ((105l),(Cons ((111l),(Cons ((110l),Empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_usage7 = fun () -> (string_from_list (Cons ((76l),(Cons ((97l),(Cons ((110l),(Cons ((103l),(Cons ((117l),(Cons ((97l),(Cons ((103l),(Cons ((101l),(Cons ((115l),(Cons ((58l),(Cons ((32l),Empty)))))))))))))))))))))));;
let rec data_h = fun () -> (string_from_list (Cons ((104l),Empty)));;
let rec usage = fun modules -> (string_join (string_of_char (10l)) (Cons ((data_usage1 ()),(Cons ((string_empty ()),(Cons ((data_usage2 ()),(Cons ((string_empty ()),(Cons ((data_usage3 ()),(Cons ((data_usage4 ()),(Cons ((data_usage5 ()),(Cons ((data_usage6 ()),(Cons ((string_empty ()),(Cons ((string_concat (data_usage7 ()) (string_join (string_of_char (32l)) (list_map compiler_backend_name modules))),Empty)))))))))))))))))))));;
type cli_program = CliTime : (int32 -> cli_program) -> cli_program | CliMaxHeapSize : (int32 -> cli_program) -> cli_program | CliRenderSource : (((identifier_transformation,identifier) pair) list,source_string) pair * (( unit  -> string)) list * (_slice -> cli_program) -> cli_program | CliReadFiles : ((module_reference,string) pair) list * ((source_file) list -> cli_program) -> cli_program | CliWriteFiles : ((string,_slice) pair) list * ( unit  -> cli_program) -> cli_program | CliOutput : string * ( unit  -> cli_program) -> cli_program | CliError : string * ( unit  -> cli_program) -> cli_program | CliExit : int32 -> cli_program;;
let rec flag_is_true = fun flag default4 arguments36 -> (match (dictionary_get flag arguments36) with (Some (value25)) -> (string_equal value25 (data_true6 ())) | None -> default4);;
let rec find_backend = fun arguments37 -> (maybe_or_else (compiler_backend_ocaml ()) (maybe_bind (dictionary_get (data_language_flag ()) arguments37) (fun language -> (list_find_first (x (string_equal language) compiler_backend_name) (compiler_backends ())))));;
let rec modules_from_arguments = fun backend13 data_path5 arguments38 -> ((fun x50 -> ((match (flag_is_true (data_stdlib ()) True (dictionary_of arguments38)) with True -> (list_concat (standard_library_module backend13 data_path5)) | False -> id) ((match (flag_is_true (data_parser_flag ()) False (dictionary_of arguments38)) with True -> (list_cons (parser_module backend13 data_path5)) | False -> id) ((list_map (x (module_name_and_path False) pair_right)) ((list_filter (x (string_equal (data_module_flag ())) pair_left)) x50))))) arguments38);;
let rec table_to_string = fun table4 -> (string_join (string_of_char (10l)) (list_map (string_join (string_of_char (32l))) table4));;
let rec print_diagnostics = fun arguments39 file_entries2 max_heap_size start_parse end_parse start_transform end_transform start_generate end_generate start_read_files end_read_files start_write_files end_write_files k -> (match (flag_is_true (data_diagnostics_flag ()) False arguments39) with True -> (CliError ((table_to_string (Cons ((Cons ((string_from_int32 (list_foldl (fun file13 bytes -> (Int32.add bytes (source_file_size file13))) (0l) file_entries2)),(Cons ((data_bytes_read ()),Empty)))),(Cons ((Cons ((string_from_int32 max_heap_size),(Cons ((data_max_heap_size ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_parse start_parse)),(Cons ((data_parse_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_transform start_transform)),(Cons ((data_transform_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_generate start_generate)),(Cons ((data_generate_time ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_read_files start_read_files)),(Cons ((data_read_files ()),Empty)))),(Cons ((Cons ((string_from_int32 (Int32.sub end_write_files start_write_files)),(Cons ((data_write_files ()),Empty)))),Empty))))))))))))))),k)) | False -> (k ()));;
let rec cli_main = fun data_path6 argv -> (match (parse_arguments argv) with (CliArguments (Empty,Empty)) -> (CliError ((usage (compiler_backends ())),(fun () -> (CliExit ((1l)))))) | (CliErrorMissingValue (key9)) -> (CliError (key9,(fun () -> (CliExit ((1l)))))) | (CliArguments (argument_list,input_files)) -> (match (dictionary_of argument_list) with arguments40 -> (match (dictionary_has (data_h ()) arguments40) with True -> (CliError ((usage (compiler_backends ())),(fun () -> (CliExit ((1l)))))) | False -> (match (list_is_empty input_files) with True -> (CliError ((data_no_input_files ()),(fun () -> (CliExit ((1l)))))) | False -> (match (find_backend arguments40) with backend14 -> (CliTime ((fun start_read_files2 -> (CliReadFiles ((list_concat (preamble_files backend14 data_path6) (list_concat (modules_from_arguments backend14 data_path6 argument_list) (list_map (pair_cons ModuleSelf) input_files))),(fun file_entries3 -> (CliTime ((fun end_read_files2 -> (match (dictionary_get (data_output_key ()) arguments40) with (Some (output_path)) -> (match (path_filename_without_extension output_path) with module_name8 -> (CliTime ((fun start_parse2 -> (match (parse file_entries3) with definitions21 -> (CliTime ((fun end_parse2 -> (CliTime ((fun start_transform2 -> (match (transform backend14 definitions21) with definitions22 -> (CliTime ((fun end_transform2 -> (CliTime ((fun start_generate2 -> (match (generate backend14 module_name8 definitions22) with (Result (source3)) -> (CliTime ((fun end_generate2 -> (CliTime ((fun start_write_files2 -> (CliRenderSource (source3,(compiler_backend_reserved_identifiers backend14),(fun source4 -> (CliWriteFiles ((Cons ((Pair (output_path,source4)),Empty)),(fun () -> (CliTime ((fun end_write_files2 -> (CliMaxHeapSize ((fun max_heap_size2 -> (print_diagnostics arguments40 file_entries3 max_heap_size2 start_parse2 end_parse2 start_transform2 end_transform2 start_generate2 end_generate2 start_read_files2 end_read_files2 start_write_files2 end_write_files2 (fun () -> (CliExit ((0l))))))))))))))))))))))) | (Error (error16)) -> (CliError ((error_to_string file_entries3 error16),(fun () -> (CliExit ((1l))))))))))))))))))))))))) | None -> (CliError ((data_no_output_path ()),(fun () -> (CliExit ((1l)))))))))))))))))))));;