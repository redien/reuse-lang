
let rec id = fun x -> x;;
let rec const = fun a b -> a;;
let rec flip = fun f -> (fun b a -> (f a b));;
let rec _46 = fun f g x -> (f (g x));;
let rec fix = fun f -> (f (fix f));;
type boolean = CTrue | CFalse;;
let rec not = fun a -> (match a with CTrue -> CFalse | CFalse -> CTrue);;
let rec _and = fun a b -> (match a with CTrue -> b | CFalse -> CFalse);;
let rec _or = fun a b -> (match a with CTrue -> CTrue | CFalse -> b);;
let rec _60 = fun a b -> (if a<b then CTrue else CFalse);;
let rec _62 = fun a b -> (_60 b a);;
let rec _61 = fun a b -> (not (_or (_60 a b) (_62 a b)));;
let rec _60_61 = fun a b -> (_or (_60 a b) (_61 a b));;
let rec _62_61 = fun a b -> (_or (_62 a b) (_61 a b));;
type ('Ta,'Tb) pair = CPair : 'Ta * 'Tb -> ('Ta,'Tb) pair;;
let rec pair_45cons = fun a b -> (CPair (a,b));;
let rec pair_45left = fun pair -> (match pair with (CPair (x,_95)) -> x);;
let rec pair_45right = fun pair -> (match pair with (CPair (_95,x)) -> x);;
let rec pair_45map = fun f pair -> (match pair with (CPair (x,y)) -> (f x y));;
let rec pair_45map_45left = fun f pair -> (match pair with (CPair (x,y)) -> (CPair ((f x),y)));;
let rec pair_45map_45right = fun f pair -> (match pair with (CPair (x,y)) -> (CPair (x,(f y))));;
let rec pair_45swap = fun pair -> (match pair with (CPair (x,y)) -> (CPair (y,x)));;
type ('Ta) maybe = CSome : 'Ta -> ('Ta) maybe | CNone;;
let rec maybe_45map = fun f maybe -> (match maybe with (CSome (x)) -> (CSome ((f x))) | CNone -> CNone);;
let rec maybe_45flatmap = fun f maybe -> (match maybe with (CSome (x)) -> (f x) | CNone -> CNone);;
let rec maybe_45filter = fun f maybe -> (match maybe with (CSome (x)) -> (match (f x) with CTrue -> maybe | CFalse -> CNone) | CNone -> CNone);;
let rec maybe_45else = fun f maybe -> (match maybe with CNone -> (f ()) | (CSome (x)) -> x);;
let rec maybe_45or_45else = fun _value maybe -> (match maybe with CNone -> _value | (CSome (x)) -> x);;
type ('Tcollection,'Telement) iterable_45class = CIterableClass : ('Tcollection -> (('Telement) maybe,'Tcollection) pair) -> ('Tcollection,'Telement) iterable_45class;;
let rec iterable_45next = fun _class collection -> (match _class with (CIterableClass (next)) -> (next collection));;
type ('Telement) indexed_45iterator = CIndexedIterator : ('Titerable,'Telement) iterable_45class * 'Titerable * int32 -> ('Telement) indexed_45iterator;;
let rec indexed_45iterator_45from_45iterable = fun i iterable -> (CIndexedIterator (i,iterable,(0l)));;
let rec indexed_45iterator_45next = fun iterator -> (match iterator with (CIndexedIterator (i,iterable,index)) -> (match (iterable_45next i iterable) with (CPair (_value,next_45iterable)) -> (CPair (_value,(CIndexedIterator (i,next_45iterable,(Int32.add index (1l))))))));;
let rec indexed_45iterator_45index = fun iterator -> (match iterator with (CIndexedIterator (_95,_95_95,index)) -> index);;
type ('Ta) list = CCons : 'Ta * ('Ta) list -> ('Ta) list | CEmpty;;
let rec list_45cons = fun x xs -> (CCons (x,xs));;
let rec list_45from = fun x -> (CCons (x,CEmpty));;
let rec list_45from_45range = fun from _95to -> (match (_60 from _95to) with CTrue -> (CCons (from,(list_45from_45range (Int32.add from (1l)) _95to))) | CFalse -> CEmpty);;
let rec list_45first = fun list -> (match list with (CCons (x,_95)) -> (CSome (x)) | CEmpty -> CNone);;
let rec list_45rest = fun list -> (match list with (CCons (_95,rest)) -> rest | CEmpty -> CEmpty);;
let rec list_45last = fun list -> (match list with CEmpty -> CNone | (CCons (x,CEmpty)) -> (CSome (x)) | (CCons (_95,rest)) -> (list_45last rest));;
let rec list_45empty_63 = fun list -> (match list with (CCons (_95,_95_95)) -> CFalse | CEmpty -> CTrue);;
let rec list_45size_39 = fun list size -> (match list with (CCons (_95,rest)) -> (list_45size_39 rest (Int32.add size (1l))) | CEmpty -> size);;
let rec list_45size = fun list -> (list_45size_39 list (0l));;
let rec list_45foldrk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (list_45foldrk f initial xs (fun _value -> (f x _value continue))));;
let rec list_45foldlk = fun f initial list continue -> (match list with CEmpty -> (continue initial) | (CCons (x,xs)) -> (f x initial (fun new_45value -> (list_45foldlk f new_45value xs continue))));;
let rec list_45foldr = fun f initial list -> (list_45foldrk (fun x _value continue -> (continue (f x _value))) initial list (fun x -> x));;
let rec list_45foldl = fun f initial list -> (match list with CEmpty -> initial | (CCons (x,xs)) -> (list_45foldl f (f x initial) xs));;
let rec list_45concat = fun a b -> (list_45foldr list_45cons b a);;
let rec list_45reverse = fun list -> (list_45foldl list_45cons CEmpty list);;
let rec list_45map = fun f list -> (list_45foldr (fun head tail -> (list_45cons (f head) tail)) CEmpty list);;
let rec list_45flatmap = fun f list -> (list_45foldr (fun head tail -> (list_45concat (f head) tail)) CEmpty list);;
let rec list_45flatten = fun list -> (list_45foldr list_45concat CEmpty list);;
let rec list_45split_45at_39 = fun n a b -> (match (_62 n (0l)) with CTrue -> (match b with (CCons (x,xs)) -> (list_45split_45at_39 (Int32.sub n (1l)) (CCons (x,a)) xs) | CEmpty -> (CPair ((list_45reverse a),b))) | CFalse -> (CPair ((list_45reverse a),b)));;
let rec list_45split_45at = fun n xs -> (list_45split_45at_39 n CEmpty xs);;
let rec list_45partition_39 = fun n xs partitions -> (match (list_45split_45at n xs) with (CPair (CEmpty,_95)) -> partitions | (CPair (partition,xs)) -> (list_45partition_39 n xs (CCons (partition,partitions))));;
let rec list_45partition = fun n xs -> (list_45reverse (list_45partition_39 n xs CEmpty));;
let rec list_45partition_45by_39 = fun x xs -> (match xs with (CCons (partition,rest)) -> (CCons ((CCons (x,partition)),rest)) | CEmpty -> xs);;
let rec list_45partition_45by = fun f xs -> (match xs with CEmpty -> CEmpty | (CCons (x,CEmpty)) -> (CCons ((CCons (x,CEmpty)),CEmpty)) | (CCons (x,(CCons (x_39,rest)))) -> (match (f x x_39) with CTrue -> (list_45partition_45by_39 x (list_45partition_45by f (CCons (x_39,rest)))) | CFalse -> (CCons ((CCons (x,CEmpty)),(list_45partition_45by f (CCons (x_39,rest)))))));;
let rec list_45skip = fun count list -> (pair_45right (list_45split_45at count list));;
let rec list_45take = fun count list -> (pair_45left (list_45split_45at count list));;
let rec list_45zip_39 = fun xs ys collected -> (match xs with CEmpty -> collected | (CCons (x,xs)) -> (match ys with CEmpty -> collected | (CCons (y,ys)) -> (list_45zip_39 xs ys (CCons ((CPair (x,y)),collected)))));;
let rec list_45zip = fun xs ys -> (list_45reverse (list_45zip_39 xs ys CEmpty));;
let rec list_45pairs = fun xs -> (match xs with (CCons (a,(CCons (b,rest)))) -> (CCons ((CPair (a,b)),(list_45pairs rest))) | _95 -> CEmpty);;
let rec list_45find_45first = fun predicate list -> (match list with CEmpty -> CNone | (CCons (x,xs)) -> (match (predicate x) with CTrue -> (CSome (x)) | CFalse -> (list_45find_45first predicate xs)));;
let rec list_45filter = fun f list -> (list_45foldr (fun head tail -> (match (f head) with CTrue -> (CCons (head,tail)) | CFalse -> tail)) CEmpty list);;
let rec list_45exclude = fun f list -> (list_45filter (fun _226_156_168x -> (not (f _226_156_168x))) list);;
let rec list_45any_63 = fun f list -> (match (list_45find_45first f list) with (CSome (_95)) -> CTrue | _95 -> CFalse);;
let rec list_45every_63 = fun f list -> (match (list_45find_45first (fun x -> (not (f x))) list) with (CSome (_95)) -> CFalse | _95 -> CTrue);;
let rec list_45collect_45from_45indexed_45iterator_39 = fun predicate iterator initial -> (match (indexed_45iterator_45next iterator) with (CPair (CNone,_95)) -> (CPair (iterator,initial)) | (CPair ((CSome (x)),next)) -> (match (predicate x) with CTrue -> (list_45collect_45from_45indexed_45iterator_39 predicate next (CCons (x,initial))) | CFalse -> (CPair (iterator,initial))));;
let rec list_45collect_45from_45indexed_45iterator = fun predicate iterator -> (match (list_45collect_45from_45indexed_45iterator_39 predicate iterator CEmpty) with (CPair (iterator,result)) -> (CPair (iterator,(list_45reverse result))));;
type string_45node = CFTValue : int32 -> string_45node | CFTNode2 : int32 * string_45node * string_45node -> string_45node | CFTNode3 : int32 * string_45node * string_45node * string_45node -> string_45node;;
type string = CFTEmpty | CFTSingle : string_45node -> string | CFTDeep : (string_45node) list * string * (string_45node) list -> string;;
let rec string_45empty = fun () -> CFTEmpty;;
let rec string_45of_45char = fun character -> (CFTSingle ((CFTValue (character))));;
let rec string_45node_45size_39 = fun node -> (match node with (CFTValue (_95)) -> (1l) | (CFTNode2 (size,_95,_95_95)) -> size | (CFTNode3 (size,_95,_95_95,_95_95_95)) -> size);;
let rec string_45node2_39 = fun a b -> (CFTNode2 ((Int32.add (string_45node_45size_39 a) (string_45node_45size_39 b)),a,b));;
let rec string_45node3_39 = fun a b c -> (CFTNode3 ((Int32.add (string_45node_45size_39 a) (Int32.add (string_45node_45size_39 b) (string_45node_45size_39 c))),a,b,c));;
let rec string_45prepend_45node_39 = fun a tree -> (match tree with CFTEmpty -> (CFTSingle (a)) | (CFTSingle (x)) -> (CFTDeep ((CCons (a,CEmpty)),CFTEmpty,(CCons (x,CEmpty)))) | (CFTDeep (first,middle,last)) -> (match first with (CCons (b,(CCons (c,(CCons (d,(CCons (e,CEmpty)))))))) -> (CFTDeep ((CCons (a,(CCons (b,CEmpty)))),(string_45prepend_45node_39 (string_45node3_39 c d e) middle),last)) | _95 -> (CFTDeep ((CCons (a,first)),middle,last))));;
let rec string_45prepend = fun char string -> (string_45prepend_45node_39 (CFTValue (char)) string);;
let rec string_45append_45node_39 = fun a tree -> (match tree with CFTEmpty -> (CFTSingle (a)) | (CFTSingle (x)) -> (CFTDeep ((CCons (x,CEmpty)),CFTEmpty,(CCons (a,CEmpty)))) | (CFTDeep (first,middle,last)) -> (match last with (CCons (b,(CCons (c,(CCons (d,(CCons (e,CEmpty)))))))) -> (CFTDeep (first,(string_45append_45node_39 (string_45node3_39 e d c) middle),(CCons (a,(CCons (b,CEmpty)))))) | _95 -> (CFTDeep (first,middle,(CCons (a,last))))));;
let rec string_45append = fun char string -> (string_45append_45node_39 (CFTValue (char)) string);;
let rec string_45first_45node_39 = fun node -> (match node with (CFTValue (x)) -> x | (CFTNode2 (_95,x,_95_95)) -> (string_45first_45node_39 x) | (CFTNode3 (_95,x,_95_95,_95_95_95)) -> (string_45first_45node_39 x));;
let rec string_45first = fun string -> (match string with CFTEmpty -> CNone | (CFTSingle (node)) -> (CSome ((string_45first_45node_39 node))) | (CFTDeep (first,middle,last)) -> (maybe_45map string_45first_45node_39 (list_45first first)));;
let rec string_45rest_45node_39 = fun node -> (match node with (CFTValue (_95)) -> CNone | (CFTNode2 (_95,a,b)) -> (match (string_45rest_45node_39 a) with (CSome (node)) -> (CSome ((string_45node2_39 node b))) | CNone -> (CSome (b))) | (CFTNode3 (_95,a,b,c)) -> (match (string_45rest_45node_39 a) with (CSome (node)) -> (CSome ((string_45node3_39 node b c))) | CNone -> (CSome ((string_45node2_39 b c)))));;
let rec string_45rest = fun string -> (match string with CFTEmpty -> string | (CFTSingle (node)) -> (match (string_45rest_45node_39 node) with (CSome (node)) -> (CFTSingle (node)) | CNone -> CFTEmpty) | (CFTDeep ((CCons (node,rest)),middle,last)) -> (match (string_45rest_45node_39 node) with (CSome (node)) -> (CFTDeep ((CCons (node,rest)),middle,last)) | CNone -> (match rest with CEmpty -> (list_45foldr string_45append_45node_39 middle last) | _95 -> (CFTDeep (rest,middle,last)))) | _95 -> string);;
let rec string_45foldr_45node_39 = fun f node identity -> (match node with (CFTValue (a)) -> (f a identity) | (CFTNode2 (_95,a,b)) -> (string_45foldr_45node_39 f a (string_45foldr_45node_39 f b identity)) | (CFTNode3 (_95,a,b,c)) -> (string_45foldr_45node_39 f a (string_45foldr_45node_39 f b (string_45foldr_45node_39 f c identity))));;
let rec string_45foldr = fun f identity tree -> (match tree with CFTEmpty -> identity | (CFTSingle (x)) -> (string_45foldr_45node_39 f x identity) | (CFTDeep (first,middle,last)) -> (list_45foldr (string_45foldr_45node_39 f) (string_45foldr f (list_45foldl (string_45foldr_45node_39 f) identity last) middle) first));;
let rec string_45foldl_45node_39 = fun f node identity -> (match node with (CFTValue (a)) -> (f a identity) | (CFTNode2 (_95,b,a)) -> (string_45foldl_45node_39 f a (string_45foldl_45node_39 f b identity)) | (CFTNode3 (_95,c,b,a)) -> (string_45foldl_45node_39 f a (string_45foldl_45node_39 f b (string_45foldl_45node_39 f c identity))));;
let rec string_45foldl = fun f identity tree -> (match tree with CFTEmpty -> identity | (CFTSingle (x)) -> (string_45foldl_45node_39 f x identity) | (CFTDeep (first,middle,last)) -> (list_45foldr (string_45foldl_45node_39 f) (string_45foldl f (list_45foldl (string_45foldl_45node_39 f) identity first) middle) last));;
let rec string_45size = fun string -> (match string with CFTEmpty -> (0l) | (CFTSingle (x)) -> (string_45node_45size_39 x) | (CFTDeep (first,middle,last)) -> (Int32.add (list_45foldr Int32.add (0l) (list_45map string_45node_45size_39 first)) (Int32.add (list_45foldr Int32.add (0l) (list_45map string_45node_45size_39 last)) (string_45size middle))));;
let rec string_45concat_45nodes_39 = fun nodes -> (match nodes with (CCons (a,(CCons (b,CEmpty)))) -> (CCons ((string_45node2_39 a b),CEmpty)) | (CCons (a,(CCons (b,(CCons (c,CEmpty)))))) -> (CCons ((string_45node3_39 a b c),CEmpty)) | (CCons (a,(CCons (b,(CCons (c,(CCons (d,CEmpty)))))))) -> (CCons ((string_45node2_39 a b),(CCons ((string_45node2_39 c d),CEmpty)))) | (CCons (a,(CCons (b,(CCons (c,rest)))))) -> (CCons ((string_45node3_39 a b c),(string_45concat_45nodes_39 rest))) | _95 -> CEmpty);;
type ('Ta,'Tb,'Tc) triple = CTriple : 'Ta * 'Tb * 'Tc -> ('Ta,'Tb,'Tc) triple;;
let rec string_45concat_39 = fun a nodes b -> (match (CTriple (a,nodes,b)) with (CTriple (CFTEmpty,nodes,b)) -> (list_45foldr string_45prepend_45node_39 b nodes) | (CTriple (a,nodes,CFTEmpty)) -> (list_45foldl string_45append_45node_39 a nodes) | (CTriple ((CFTSingle (x)),nodes,b)) -> (string_45prepend_45node_39 x (list_45foldr string_45prepend_45node_39 b nodes)) | (CTriple (a,nodes,(CFTSingle (x)))) -> (string_45append_45node_39 x (list_45foldl string_45append_45node_39 a nodes)) | (CTriple ((CFTDeep (first1,middle1,last1)),nodes,(CFTDeep (first2,middle2,last2)))) -> (CFTDeep (first1,(string_45concat_39 middle1 (string_45concat_45nodes_39 (list_45concat (list_45reverse last1) (list_45concat nodes first2))) middle2),last2)));;
let rec string_45concat = fun a b -> (string_45concat_39 a CEmpty b);;
let rec string_45empty_63 = fun string -> (match (string_45first string) with (CSome (_95)) -> CFalse | CNone -> CTrue);;
let rec string_45any_63 = fun predicate string -> (string_45foldl (fun x b -> (_or (predicate x) b)) CFalse string);;
let rec string_45every_63 = fun predicate string -> (string_45foldl (fun x b -> (_and (predicate x) b)) CTrue string);;
let rec string_45to_45list = fun string -> (string_45foldr list_45cons CEmpty string);;
let rec string_45from_45list = fun list -> (list_45foldl string_45append (string_45empty ()) list);;
let rec string_45skip = fun count string -> (match (_62 count (0l)) with CTrue -> (string_45skip (Int32.sub count (1l)) (string_45rest string)) | CFalse -> string);;
let rec string_45take_39 = fun count string taken -> (match (_62 count (0l)) with CTrue -> (match (string_45first string) with (CSome (char)) -> (string_45take_39 (Int32.sub count (1l)) (string_45rest string) (string_45append char taken)) | CNone -> taken) | CFalse -> taken);;
let rec string_45take = fun count string -> (string_45take_39 count string (string_45empty ()));;
let rec string_45reverse = fun string -> (string_45foldl string_45prepend (string_45empty ()) string);;
let rec string_45substring = fun start size string -> (string_45take size (string_45skip start string));;
let rec string_45join = fun separator strings -> (match strings with (CCons (first,rest)) -> (list_45foldl (fun string joined -> (string_45concat joined (string_45concat separator string))) first rest) | CEmpty -> (string_45empty ()));;
let rec string_45flatmap = fun f string -> (string_45foldl (fun x xs -> (string_45concat xs (f x))) (string_45empty ()) string);;
let rec string_45split_39 = fun separator list current parts -> (match list with CEmpty -> (list_45reverse (CCons ((list_45reverse current),parts))) | (CCons (c,rest)) -> (match (_61 separator c) with CTrue -> (string_45split_39 separator rest CEmpty (CCons ((list_45reverse current),parts))) | CFalse -> (string_45split_39 separator rest (CCons (c,current)) parts)));;
let rec string_45split = fun separator string -> (list_45map string_45from_45list (string_45split_39 separator (string_45to_45list string) CEmpty CEmpty));;
let rec string_45trim_45start_39 = fun list -> (match list with (CCons (x,xs)) -> (match (_61 x (32l)) with CTrue -> (string_45trim_45start_39 xs) | CFalse -> list) | CEmpty -> list);;
let rec string_45trim_45start = fun string -> (string_45from_45list (string_45trim_45start_39 (string_45to_45list string)));;
let rec string_45trim_45end = fun string -> (string_45reverse (string_45trim_45start (string_45reverse string)));;
let rec string_45trim = fun string -> (string_45trim_45start (string_45trim_45end string));;
let rec string_45equal_63 = fun a b -> (match (string_45first a) with (CSome (xa)) -> (match (string_45first b) with (CSome (xb)) -> (_and (_61 xa xb) (string_45equal_63 (string_45rest a) (string_45rest b))) | CNone -> (string_45empty_63 a)) | CNone -> (string_45empty_63 b));;
let rec string_45point_45is_45digit = fun point -> (match (_62 point (47l)) with CFalse -> CFalse | CTrue -> (match (_60 point (58l)) with CTrue -> CTrue | CFalse -> CFalse));;
let rec string_45to_45int32_39_39_39 = fun string_45to_45int32_39_39 string accumulator x -> (string_45to_45int32_39_39 string (CSome ((Int32.add (Int32.mul (10l) accumulator) (Int32.sub x (48l))))));;
let rec string_45to_45int32_39_39 = fun string accumulator -> (match string with CEmpty -> accumulator | (CCons (x,rest)) -> (maybe_45flatmap (fun accumulator -> ((fun _226_156_168x -> ((maybe_45flatmap (string_45to_45int32_39_39_39 string_45to_45int32_39_39 rest accumulator)) ((maybe_45filter string_45point_45is_45digit) _226_156_168x))) (CSome (x)))) accumulator));;
let rec string_45to_45int32_39 = fun string -> (match string with (CCons (45l,string)) -> (match (list_45empty_63 string) with CTrue -> CNone | CFalse -> (maybe_45map (fun x -> (Int32.mul (-1l) x)) (string_45to_45int32_39 string))) | (CCons (x,rest)) -> (match (string_45point_45is_45digit x) with CTrue -> (string_45to_45int32_39_39 string (CSome ((0l)))) | CFalse -> CNone) | CEmpty -> CNone);;
let rec string_45to_45int32 = fun string -> (string_45to_45int32_39 (string_45to_45list string));;
let rec string_45from_45int32_39_39 = fun integer string -> (match (_62 integer (9l)) with CTrue -> (string_45from_45int32_39_39 (Int32.div integer (10l)) (CCons ((Int32.add (Int32.rem integer (10l)) (48l)),string))) | CFalse -> (CCons ((Int32.add integer (48l)),string)));;
let rec string_45from_45int32_39 = fun integer -> (match (_60 integer (0l)) with CTrue -> (match (_61 integer (-2147483648l)) with CTrue -> (CCons ((45l),(CCons ((50l),(CCons ((49l),(CCons ((52l),(CCons ((55l),(CCons ((52l),(CCons ((56l),(CCons ((51l),(CCons ((54l),(CCons ((52l),(CCons ((56l),CEmpty)))))))))))))))))))))) | CFalse -> (CCons ((45l),(string_45from_45int32_39 (Int32.mul integer (-1l)))))) | CFalse -> (string_45from_45int32_39_39 integer CEmpty));;
let rec string_45from_45int32 = fun integer -> (string_45from_45list (string_45from_45int32_39 integer));;
let rec string_45collect_45from_45indexed_45iterator_39 = fun predicate iterator initial -> (match (indexed_45iterator_45next iterator) with (CPair (CNone,_95)) -> (CPair (iterator,initial)) | (CPair ((CSome (x)),next)) -> (match (predicate x) with CTrue -> (string_45collect_45from_45indexed_45iterator_39 predicate next (string_45append x initial)) | CFalse -> (CPair (iterator,initial))));;
let rec string_45collect_45from_45indexed_45iterator = fun predicate iterator -> (string_45collect_45from_45indexed_45iterator_39 predicate iterator (string_45empty ()));;
let rec string_45from_45indexed_45iterator = fun iterator -> (pair_45right (string_45collect_45from_45indexed_45iterator (fun _95 -> CTrue) iterator));;
let rec string_45iterable = fun () -> (CIterableClass ((fun string -> (CPair ((string_45first string),(string_45rest string))))));;
let rec string_45from_45boolean = fun boolean -> (match boolean with CTrue -> (string_45from_45list (CCons ((84l),(CCons ((114l),(CCons ((117l),(CCons ((101l),CEmpty))))))))) | CFalse -> (string_45from_45list (CCons ((70l),(CCons ((97l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty))))))))))));;
type ('Tv,'Te) result = CResult : 'Tv -> ('Tv,'Te) result | CError : 'Te -> ('Tv,'Te) result;;
let rec result_45lift = fun result -> (CResult (result));;
let rec result_45error = fun error -> (CError (error));;
let rec result_45prod = fun return result -> (match result with (CResult (m)) -> m | (CError (error)) -> (return (CError (error))));;
let rec result_45bimap = fun f g result -> (match result with (CResult (x)) -> (CResult ((f x))) | (CError (y)) -> (CError ((g y))));;
let rec result_45either = fun f g result -> (match result with (CResult (x)) -> (f x) | (CError (x)) -> (g x));;
let rec result_45map = fun f result -> (result_45bimap f id result);;
let rec result_45flatmap = fun f result -> (match result with (CResult (x)) -> (f x) | (CError (error)) -> (CError (error)));;
let rec result_45or_45else = fun _value result -> (match result with (CResult (x)) -> x | (CError (x)) -> _value);;
let rec result_45error_63 = fun result -> (match result with (CError (_95)) -> CTrue | _95 -> CFalse);;
let rec result_45filter_45list = fun list -> (list_45foldr (fun result new_45list -> (match result with (CResult (x)) -> (CCons (x,new_45list)) | _95 -> new_45list)) CEmpty list);;
let rec result_45concat = fun list -> (match (list_45filter result_45error_63 list) with (CCons ((CError (error)),_95)) -> (CError (error)) | (CCons ((CResult (_95)),_95_95)) -> (CResult (CEmpty)) | CEmpty -> (CResult ((result_45filter_45list list))));;
let rec result_45of_45maybe = fun error maybe -> (match maybe with (CSome (x)) -> (CResult (x)) | CNone -> (CError (error)));;
let rec result_45bind = fun result f -> (result_45flatmap f result);;
let rec result_45return = fun _value -> (result_45lift _value);;
type ('Ts,'Tv) state = COperation : ('Ts -> ('Ts,'Tv) pair) -> ('Ts,'Tv) state;;
let rec state_45run = fun state operation -> (match operation with (COperation (f)) -> (f state));;
let rec state_45final_45value = fun initial_45state operation -> (match (state_45run initial_45state operation) with (CPair (_95,_value)) -> _value);;
let rec state_45return = fun _value -> (COperation ((fun state -> (CPair (state,_value)))));;
let rec state_45bind = fun operation f -> (COperation ((fun state -> (match (state_45run state operation) with (CPair (new_45state,new_45value)) -> (state_45run new_45state (f new_45value))))));;
let rec state_45get = fun () -> (COperation ((fun state -> (CPair (state,state)))));;
let rec state_45set = fun state -> (COperation ((fun _95 -> (CPair (state,state)))));;
let rec state_45modify = fun f -> (state_45bind (state_45get ()) (fun state -> (state_45set (f state))));;
let rec state_45let = fun _value f -> (state_45bind (state_45return _value) f);;
let rec state_45foldr = fun f initial_45value operations -> (list_45foldr (fun operation chain -> (state_45bind operation (fun x -> (state_45bind chain (fun xs -> (state_45return (f x xs))))))) (state_45return initial_45value) operations);;
let rec state_45foreach = fun f xs -> (state_45foldr list_45cons CEmpty (list_45map f xs));;
let rec state_45flatmap = fun f operation -> (state_45bind operation f);;
let rec state_45map = fun f operation -> (state_45flatmap (fun _226_156_168x -> (state_45return (f _226_156_168x))) operation);;
let rec state_45lift = fun _value -> (state_45return _value);;
type array_45color = CArrayRed | CArrayBlack;;
type ('Tvalue) array = CArrayEmpty | CArrayTree : array_45color * ('Tvalue) array * (int32,'Tvalue) pair * ('Tvalue) array -> ('Tvalue) array;;
let rec array_45empty = fun () -> CArrayEmpty;;
let rec array_45make_45black_39 = fun array -> (match array with CArrayEmpty -> CArrayEmpty | (CArrayTree (_95,a,y,b)) -> (CArrayTree (CArrayBlack,a,y,b)));;
let rec array_45balance_39 = fun array -> (match array with (CArrayTree (CArrayBlack,(CArrayTree (CArrayRed,(CArrayTree (CArrayRed,a,x,b)),y,c)),z,d)) -> (CArrayTree (CArrayRed,(CArrayTree (CArrayBlack,a,x,b)),y,(CArrayTree (CArrayBlack,c,z,d)))) | (CArrayTree (CArrayBlack,(CArrayTree (CArrayRed,a,x,(CArrayTree (CArrayRed,b,y,c)))),z,d)) -> (CArrayTree (CArrayRed,(CArrayTree (CArrayBlack,a,x,b)),y,(CArrayTree (CArrayBlack,c,z,d)))) | (CArrayTree (CArrayBlack,a,x,(CArrayTree (CArrayRed,(CArrayTree (CArrayRed,b,y,c)),z,d)))) -> (CArrayTree (CArrayRed,(CArrayTree (CArrayBlack,a,x,b)),y,(CArrayTree (CArrayBlack,c,z,d)))) | (CArrayTree (CArrayBlack,a,x,(CArrayTree (CArrayRed,b,y,(CArrayTree (CArrayRed,c,z,d)))))) -> (CArrayTree (CArrayRed,(CArrayTree (CArrayBlack,a,x,b)),y,(CArrayTree (CArrayBlack,c,z,d)))) | rest -> rest);;
let rec array_45set_39 = fun x _value array -> (match array with CArrayEmpty -> (CArrayTree (CArrayRed,CArrayEmpty,(CPair (x,_value)),CArrayEmpty)) | (CArrayTree (color,a,y,b)) -> (match (_60 x (pair_45left y)) with CTrue -> (array_45balance_39 (CArrayTree (color,(array_45set_39 x _value a),y,b))) | CFalse -> (match (_62 x (pair_45left y)) with CTrue -> (array_45balance_39 (CArrayTree (color,a,y,(array_45set_39 x _value b)))) | CFalse -> (CArrayTree (color,a,(CPair (x,_value)),b)))));;
let rec array_45set = fun x _value array -> (array_45make_45black_39 (array_45set_39 x _value array));;
let rec array_45get = fun x array -> (match array with CArrayEmpty -> CNone | (CArrayTree (_95,a,(CPair (y,_value)),b)) -> (match (_60 x y) with CTrue -> (array_45get x a) | CFalse -> (match (_62 x y) with CTrue -> (array_45get x b) | CFalse -> (CSome (_value)))));;
let rec array_45entries = fun array -> (match array with CArrayEmpty -> CEmpty | (CArrayTree (_95,a,entry,b)) -> (list_45flatten (CCons ((array_45entries a),(CCons ((CCons (entry,CEmpty)),(CCons ((array_45entries b),CEmpty))))))));;
let rec array_45of = fun entries -> (list_45foldl (fun entry array -> (match entry with (CPair (key,_value)) -> (array_45set key _value array))) CArrayEmpty entries);;
let rec array_45singleton = fun index _value -> (CArrayTree (CArrayBlack,CArrayEmpty,(CPair (index,_value)),CArrayEmpty));;
let rec array_45get_45or = fun index default array -> (match (array_45get index array) with (CSome (_value)) -> _value | CNone -> default);;
type ('Tvalue) dictionary = CTrieNode : ('Tvalue) maybe * (('Tvalue) dictionary) array -> ('Tvalue) dictionary;;
let rec dictionary_45empty = fun () -> (CTrieNode (CNone,(array_45empty ())));;
let rec dictionary_45value_39 = fun dictionary -> (match dictionary with (CTrieNode (_value,_95)) -> _value);;
let rec dictionary_45children_39 = fun dictionary -> (match dictionary with (CTrieNode (_95,children)) -> children);;
let rec dictionary_45find_45child_39 = fun char dictionary -> (array_45get char (dictionary_45children_39 dictionary));;
let rec dictionary_45set = fun key new_45value dictionary -> (match (string_45first key) with CNone -> (CTrieNode ((CSome (new_45value)),(dictionary_45children_39 dictionary))) | (CSome (char)) -> ((fun _226_156_168x -> ((fun child -> (CTrieNode ((dictionary_45value_39 dictionary),(array_45set char child (dictionary_45children_39 dictionary))))) ((dictionary_45set (string_45rest key) new_45value) ((maybe_45else dictionary_45empty) ((dictionary_45find_45child_39 char) _226_156_168x))))) dictionary));;
let rec dictionary_45get = fun key dictionary -> (match (string_45first key) with (CSome (char)) -> (maybe_45flatmap (dictionary_45get (string_45rest key)) (dictionary_45find_45child_39 char dictionary)) | CNone -> (dictionary_45value_39 dictionary));;
let rec dictionary_45entries_39 = fun key dictionary -> ((fun _226_156_168x -> ((fun entries -> (match (dictionary_45value_39 dictionary) with (CSome (_value)) -> (CCons ((CPair (key,_value)),entries)) | CNone -> entries)) ((list_45flatmap (fun child -> (dictionary_45entries_39 (string_45append (pair_45left child) key) (pair_45right child)))) (array_45entries (dictionary_45children_39 _226_156_168x))))) dictionary);;
let rec dictionary_45entries = fun dictionary -> (dictionary_45entries_39 (string_45empty ()) dictionary);;
let rec dictionary_45of = fun entries -> (list_45foldl (pair_45map dictionary_45set) (dictionary_45empty ()) entries);;
let rec dictionary_45singleton = fun key _value -> (dictionary_45set key _value (dictionary_45empty ()));;
let rec dictionary_45get_45or = fun key default dictionary -> (match (dictionary_45get key dictionary) with (CSome (_value)) -> _value | CNone -> default);;

let ml_string_to_reuse s =
    Seq.fold_left (fun a b -> string_45append (Int32.of_int (Char.code b)) a)
                  (string_45empty ())
                  (String.to_seq s);;

let ml_list_to_reuse l =
    List.fold_right list_45cons l CEmpty;;

let reuse_string_to_ml s =
    Buffer.contents (string_45foldl (fun a b -> Buffer.add_char b (Char.chr (Int32.to_int a)); b) (Buffer.create 32) s);;

let reuse_boolean_to_ml b =
    match b with
      | CTrue -> true
      | CFalse -> false;;

let ml_string_get succ fail s index =
    let i = (Int32.to_int index) in
    if i < (String.length s) && i >= 0 then
            succ (Int32.of_int (Char.code (String.get s i)))
    else
            fail ();;

let ml_string_next iterable =
    match iterable with
        CPair (s, index) -> CPair (
            (ml_string_get (fun x -> CSome (x)) (fun _ -> CNone) s index),
            CPair (s, Int32.add index 1l));;
let ml_string_to_indexed_iterator s = indexed_45iterator_45from_45iterable (CIterableClass (ml_string_next)) (CPair (s, 0l));;

let rec parts_45are_45empty_63 = fun parts -> (match parts with CEmpty -> CTrue | (CCons (part,CEmpty)) -> (string_45empty_63 part) | _95 -> CFalse);;
let rec transform_45line = fun line -> (match (string_45split (124l) line) with (CCons (name,parts)) -> (string_45concat (string_45from_45list (CCons ((40l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((32l),(CCons ((100l),(CCons ((97l),(CCons ((116l),(CCons ((97l),(CCons ((45l),CEmpty))))))))))))))))))))) (string_45concat (string_45trim name) (string_45concat (string_45from_45list (CCons ((32l),(CCons ((40l),(CCons ((41l),(CCons ((32l),(CCons ((40l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((45l),(CCons ((102l),(CCons ((114l),(CCons ((111l),(CCons ((109l),(CCons ((45l),(CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((32l),CEmpty))))))))))))))))))))))))))))))))))))))))))))) (match (parts_45are_45empty_63 parts) with CTrue -> (string_45from_45list (CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),(CCons ((41l),(CCons ((41l),CEmpty))))))))))))))) | CFalse -> (string_45concat (string_45from_45list (CCons ((40l),(CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((32l),CEmpty))))))))))))) (string_45concat (string_45join (string_45of_45char (32l)) (list_45map string_45from_45int32 (string_45to_45list (string_45join (string_45of_45char (124l)) parts)))) (string_45from_45list (CCons ((41l),(CCons ((41l),(CCons ((41l),CEmpty))))))))))))) | CEmpty -> (string_45empty ()));;
let rec string_45gen = fun stdin_45iterator -> (match (string_45collect_45from_45indexed_45iterator (fun _95 -> CTrue) stdin_45iterator) with (CPair (_95,stdin)) -> (CResult ((string_45join (string_45of_45char (10l)) (list_45map transform_45line (string_45split (10l) stdin))))));;
let rec whitespace_63 = fun character -> (match character with 32l -> CTrue | 13l -> CTrue | 9l -> CTrue | 10l -> CTrue | _95 -> CFalse);;
let rec atom_45character_63 = fun character -> (match character with 40l -> CFalse | 41l -> CFalse | _95 -> (not (whitespace_63 character)));;
type range = CRange : int32 * int32 -> range;;
type sexp = CSymbol : int32 * string * range -> sexp | CInteger : int32 * range -> sexp | CList : (sexp) list * range -> sexp;;
type parse_45error = CParseErrorTooFewClosingBrackets | CParseErrorTooManyClosingBrackets;;
let rec symbol_45range = fun start _end -> (CRange ((indexed_45iterator_45index start),(indexed_45iterator_45index _end)));;
let rec intern_45string = fun iterator next_45iterator name symbol_45state next -> (match symbol_45state with (CPair (id,symbols)) -> (match (dictionary_45get name symbols) with (CSome ((CPair (id,name)))) -> (next next_45iterator symbol_45state (CSymbol (id,name,(symbol_45range iterator next_45iterator)))) | CNone -> (next next_45iterator (CPair ((Int32.add id (1l)),(dictionary_45set name (CPair (id,name)) symbols))) (CSymbol (id,name,(symbol_45range iterator next_45iterator))))));;
let rec parse_45symbol = fun iterator symbols next _end -> (match (string_45collect_45from_45indexed_45iterator atom_45character_63 iterator) with (CPair (next_45iterator,name)) -> (match (string_45to_45int32 name) with (CSome (integer)) -> (next next_45iterator symbols (CInteger (integer,(symbol_45range iterator next_45iterator)))) | CNone -> (match (string_45empty_63 name) with CFalse -> (intern_45string iterator next_45iterator name symbols next) | CTrue -> (_end iterator))));;
let rec list_45range = fun start _end -> (CRange ((Int32.sub (indexed_45iterator_45index start) (1l)),(indexed_45iterator_45index _end)));;
let rec parse_45list = fun iterator parse_45sexps symbols error next -> (parse_45sexps iterator symbols CEmpty error (fun next_45iterator symbols expressions -> (next next_45iterator symbols (CList (expressions,(list_45range iterator next_45iterator))))));;
let rec parse_45expression = fun depth iterator parse_45sexps_39 symbols error next _end -> (match (indexed_45iterator_45next iterator) with (CPair (CNone,_95)) -> (match depth with 0l -> (_end iterator) | _95 -> (error CParseErrorTooFewClosingBrackets)) | (CPair ((CSome (40l)),next_45iterator)) -> (parse_45list next_45iterator (parse_45sexps_39 (Int32.add depth (1l))) symbols error next) | (CPair ((CSome (41l)),next_45iterator)) -> (match depth with 0l -> (error CParseErrorTooManyClosingBrackets) | _95 -> (_end next_45iterator)) | (CPair ((CSome (x)),next_45iterator)) -> (match (whitespace_63 x) with CTrue -> (parse_45expression depth next_45iterator parse_45sexps_39 symbols error next _end) | CFalse -> (parse_45symbol iterator symbols next _end)));;
let rec parse_45sexps_39 = fun depth iterator symbols expressions error _end -> (parse_45expression depth iterator parse_45sexps_39 symbols error (fun iterator symbols expression -> (parse_45sexps_39 depth iterator symbols (CCons (expression,expressions)) error _end)) (fun iterator -> (_end iterator symbols (list_45reverse expressions))));;
let rec parse_45sexps = fun symbols iterator -> (parse_45sexps_39 (0l) iterator symbols CEmpty (fun error -> (CError (error))) (fun _95 symbols expressions -> (CResult ((CPair (symbols,expressions))))));;
let rec wrap_45in_45brackets = fun string -> (string_45concat (string_45of_45char (40l)) (string_45concat string (string_45of_45char (41l))));;
let rec stringify_45sexp = fun stringify_45sexps expression -> (match expression with (CSymbol (_95,name,_95_95)) -> name | (CInteger (integer,_95)) -> (string_45from_45int32 integer) | (CList (expressions,_95)) -> (wrap_45in_45brackets (stringify_45sexps expressions)));;
let rec stringify_45sexps = fun expressions -> (string_45join (string_45of_45char (32l)) (list_45map (stringify_45sexp stringify_45sexps) expressions));;
type module_45reference = CModulePath : string -> module_45reference | CModuleSelf;;
type ast_45sym = CSym : int32 * string * module_45reference * range -> ast_45sym;;
type ast_45type = CSimpleType : ast_45sym -> ast_45type | CComplexType : ast_45sym * (ast_45type) list * range -> ast_45type | CFunctionType : (ast_45type) list * ast_45type * range -> ast_45type;;
type type_45parameter = CUniversalParameter : ast_45sym -> type_45parameter | CExistentialParameter : ast_45sym -> type_45parameter;;
type constructor = CSimpleConstructor : ast_45sym -> constructor | CComplexConstructor : ast_45sym * (ast_45type) list * range -> constructor;;
type pattern = CCapture : ast_45sym -> pattern | CIntegerPattern : int32 * range -> pattern | CConstructorPattern : ast_45sym * (pattern) list * range -> pattern;;
type expression = CIntegerConstant : int32 * range -> expression | CVariable : ast_45sym -> expression | CLambda : (ast_45sym) list * expression * range -> expression | CMatch : expression * ((pattern,expression) pair) list * range -> expression | CConstructor : ast_45sym * (expression) list * range -> expression | CFunctionApplication : (expression) list * range -> expression;;
type definition = CTypeDefinition : ast_45sym * (type_45parameter) list * (constructor) list * range -> definition | CFunctionDefinition : ast_45sym * (ast_45sym) list * expression * range -> definition | CTargetDefinition : module_45reference * (int32) indexed_45iterator -> definition;;
let rec symbol_45id = fun sym -> (match sym with (CSym (id,_95,_95_95,_95_95_95)) -> id);;
let rec symbol_45name = fun sym -> (match sym with (CSym (_95,name,_95_95,_95_95_95)) -> name);;
let rec symbol_45module = fun sym -> (match sym with (CSym (_95,_95_95,_module,_95_95_95)) -> _module);;
let rec symbol_45range = fun sym -> (match sym with (CSym (_95,_95_95,_95_95_95,range)) -> range);;
let rec symbol_45equal_63 = fun a b -> (_61 (symbol_45id a) (symbol_45id b));;
let rec symbol_45equal_45to_63 = fun sym id -> (_61 (symbol_45id sym) id);;
let rec module_45equal_63 = fun a b -> (match a with (CModulePath (a_39)) -> (match b with (CModulePath (b_39)) -> (string_45equal_63 a_39 b_39) | CModuleSelf -> CFalse) | CModuleSelf -> (match b with (CModulePath (_95)) -> CFalse | CModuleSelf -> CTrue));;
let rec definition_45module = fun definition -> (match definition with (CTypeDefinition (sym,_95_95_95_95,_95_95_95_95_95,_95_95_95_95_95_95)) -> (symbol_45module sym) | (CFunctionDefinition (sym,_95_95_95_95,_95_95_95_95_95,_95_95_95_95_95_95)) -> (symbol_45module sym) | (CTargetDefinition (_module,_95)) -> _module);;
let rec constructor_45id = fun constructor -> (match constructor with (CComplexConstructor (sym,_95,_95_95)) -> (symbol_45id sym) | (CSimpleConstructor (sym)) -> (symbol_45id sym));;
let rec type_45parameter_45symbol = fun parameter -> (match parameter with (CUniversalParameter (sym)) -> sym | (CExistentialParameter (sym)) -> sym);;
let rec over_45match_45pair_45expression = fun f pair -> (match pair with (CPair (pattern,expression)) -> (result_45bind (f expression) (fun expression -> (result_45return (CPair (pattern,expression))))));;
let rec over_45match_45pair_45expressions = fun over_45subexpressions f pairs -> (result_45concat (list_45map (over_45match_45pair_45expression (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x)))) pairs));;
let rec over_45subexpressions = fun f expression -> (result_45bind (f expression) (fun expression -> (match expression with (CLambda (arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45return (CLambda (arguments,expression,range))))))) | (CMatch (expression,pairs,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45bind (over_45match_45pair_45expressions over_45subexpressions f pairs) (fun pairs -> (result_45return (CMatch (expression,pairs,range))))))))) | (CConstructor (sym,expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CConstructor (sym,expressions,range))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | _95 -> (result_45return expression))));;
let rec over_45definition_45expressions = fun f definition -> (match definition with (CFunctionDefinition (sym,arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45return (CFunctionDefinition (sym,arguments,expression,range))))) | _95 -> (result_45return definition));;
let rec over_45function_45application = fun f expression -> (match expression with (CFunctionApplication (expressions,range)) -> (f expressions range) | _95 -> (result_45return expression));;
let rec over_45match_45expression = fun f expression -> (match expression with (CMatch (expression,pairs,range)) -> (f expression pairs range) | _95 -> (result_45return expression));;
let rec over_45identifiers = fun f expression -> (match expression with (CVariable (name)) -> (result_45bind (f name) (fun name -> (result_45return (CVariable (name))))) | (CLambda (arguments,expression,range)) -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45bind (result_45concat (list_45map f arguments)) (fun arguments -> (result_45return (CLambda (arguments,expression,range))))))) | (CConstructor (name,CEmpty,range)) -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,CEmpty,range))))) | (CConstructor (name,expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,expressions,range))))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | (CMatch (expression,rules,range)) -> (result_45bind (result_45concat (list_45map (over_45match_45pair_45expression (over_45identifiers f)) rules)) (fun rules -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45return (CMatch (expression,rules,range))))))) | _95 -> (result_45return expression));;
let rec data_45def = fun () -> (string_45from_45list (CCons ((100l),(CCons ((101l),(CCons ((102l),CEmpty)))))));;
let rec data_45typ = fun () -> (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),CEmpty)))))));;
let rec data_45fn = fun () -> (string_45from_45list (CCons ((102l),(CCons ((110l),CEmpty)))));;
let rec data_45match = fun () -> (string_45from_45list (CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),CEmpty)))))))))));;
let rec data_45exists = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((115l),CEmpty)))))))))))));;
type ('Tdefinition) parser_45context = CParserContext : module_45reference * (int32,((int32,string) pair) dictionary) pair * ('Tdefinition) array -> ('Tdefinition) parser_45context;;
let rec parser_45context_45add_45constructors = fun definition array -> (match definition with (CTypeDefinition (_95,_95_95,constructors,_95_95_95)) -> (list_45foldl (fun constructor array -> (array_45set (constructor_45id constructor) definition array)) array constructors) | _95 -> array);;
let rec parser_45context_45add = fun definition context -> (match context with (CParserContext (_module,symbols,constructors)) -> (CParserContext (_module,symbols,(parser_45context_45add_45constructors definition constructors))));;
let rec parser_45context_45constructor_63 = fun id context -> (match context with (CParserContext (_95,_95_95,constructors)) -> (match (array_45get id constructors) with (CSome (_95)) -> CTrue | CNone -> CFalse));;
let rec parser_45context_45symbols = fun context -> (match context with (CParserContext (_95,symbols,_95_95)) -> symbols);;
let rec parser_45context_45with_45symbols = fun symbols context -> (match context with (CParserContext (_module,_95,constructors)) -> (CParserContext (_module,symbols,constructors)));;
let rec parser_45context_45module = fun context -> (match context with (CParserContext (_module,_95,_95_95)) -> _module);;
let rec parser_45context_45with_45module = fun _module context -> (match context with (CParserContext (_95,symbols,constructors)) -> (CParserContext (_module,symbols,constructors)));;
let rec parser_45run = fun symbols _parser -> (match (state_45run (CParserContext (CModuleSelf,(CPair ((0l),symbols)),(array_45empty ()))) _parser) with (CPair (_95,result)) -> result);;
let rec parser_45return = fun _value -> (state_45return (result_45return _value));;
let rec parser_45error = fun error -> (state_45return (result_45error error));;
let rec parser_45bind = fun _parser f -> (state_45bind _parser (fun result -> (result_45prod state_45return (result_45bind result (fun _value -> (result_45return (f _value)))))));;
let rec parser_45constructor_63 = fun name -> (state_45bind (state_45get ()) (fun context -> (parser_45return (parser_45context_45constructor_63 name context))));;
let rec parser_45add_45definition_33 = fun definition -> (state_45bind (state_45modify (parser_45context_45add definition)) (fun _95 -> (parser_45return definition)));;
let rec parser_45get_45symbols = fun () -> (state_45bind (state_45get ()) (fun state -> (parser_45return (parser_45context_45symbols state))));;
let rec parser_45set_45symbols_33 = fun symbols -> (state_45bind (state_45modify (parser_45context_45with_45symbols symbols)) (fun _95 -> (parser_45return symbols)));;
let rec parser_45get_45module = fun () -> (state_45bind (state_45get ()) (fun state -> (parser_45return (parser_45context_45module state))));;
let rec parser_45set_45module_33 = fun _module -> (state_45bind (state_45modify (parser_45context_45with_45module _module)) (fun _95 -> (parser_45return _module)));;
let rec parser_45sequence = fun list -> (list_45foldr (fun a b -> (parser_45bind a (fun a_39 -> (parser_45bind b (fun b_39 -> (parser_45return (CCons (a_39,b_39)))))))) (parser_45return CEmpty) list);;
let rec sym_45def = fun () -> (-1l);;
let rec sym_45typ = fun () -> (-2l);;
let rec sym_45fn = fun () -> (-3l);;
let rec sym_45match = fun () -> (-4l);;
let rec keywords = fun () -> (dictionary_45of (CCons ((CPair ((data_45def ()),(CPair ((sym_45def ()),(data_45def ()))))),(CCons ((CPair ((data_45typ ()),(CPair ((sym_45typ ()),(data_45typ ()))))),(CCons ((CPair ((data_45fn ()),(CPair ((sym_45fn ()),(data_45fn ()))))),(CCons ((CPair ((data_45match ()),(CPair ((sym_45match ()),(data_45match ()))))),CEmpty)))))))));;
type error = CMalformedDefinitionError : range -> error | CMalformedTypeDefinitionError : range -> error | CMalformedFunctionDefinitionError : range -> error | CMalformedFunctionNameError : range -> error | CMalformedExpressionError : range -> error | CMalformedMatchExpressionError : range -> error | CMalformedSymbolError : range -> error | CMalformedConstructorError : range -> error | CMalformedTypeError : range -> error | CMalformedSexpTooFewClosingBrackets | CMalformedSexpTooManyClosingBrackets;;
let rec symbol_45to_45sym = fun symbol -> (match symbol with (CSymbol (id,name,range)) -> (parser_45bind (parser_45get_45module ()) (fun _module -> (parser_45return (CSym (id,name,_module,range))))) | (CInteger (_95,range)) -> (parser_45error (CMalformedSymbolError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedSymbolError (range))));;
let rec sexp_45to_45complex_45type = fun sexp_45to_45type sym parameters range -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45type parameters)) (fun sub_45types -> (parser_45return (CComplexType (sym,sub_45types,range)))));;
let rec sexp_45to_45function_45type = fun sexp_45to_45type parameters range -> (match parameters with (CCons ((CList (arg_45types,_95)),(CCons (return_45type,CEmpty)))) -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45type arg_45types)) (fun arg_45types -> (parser_45bind (sexp_45to_45type return_45type) (fun return_45type -> (parser_45return (CFunctionType (arg_45types,return_45type,range))))))) | _95 -> (parser_45error (CMalformedTypeError (range))));;
let rec sexp_45to_45type = fun _type -> (match _type with (CList ((CCons (symbol,parameters)),range)) -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (match (_61 (symbol_45id sym) (sym_45fn ())) with CTrue -> (sexp_45to_45function_45type sexp_45to_45type parameters range) | CFalse -> (sexp_45to_45complex_45type sexp_45to_45type sym parameters range)))) | (CInteger (_95,range)) -> (parser_45error (CMalformedTypeError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedTypeError (range))) | symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45return (CSimpleType (sym))))));;
let rec sexp_45to_45constructor_45definition = fun constructor -> (match constructor with (CList ((CCons (name,types)),range)) -> (parser_45bind (symbol_45to_45sym name) (fun sym -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45type types)) (fun types -> (parser_45return (CComplexConstructor (sym,types,range))))))) | (CInteger (_95,range)) -> (parser_45error (CMalformedConstructorError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedConstructorError (range))) | symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45return (CSimpleConstructor (sym))))));;
let rec sexp_45to_45type_45parameter = fun sexp -> (match sexp with (CList ((CCons (_95,(CCons (name,CEmpty)))),_95_95_95)) -> (parser_45bind (symbol_45to_45sym name) (fun sym -> (parser_45return (CExistentialParameter (sym))))) | (CInteger (_95,range)) -> (parser_45error (CMalformedDefinitionError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedDefinitionError (range))) | symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45return (CUniversalParameter (sym))))));;
let rec sexp_45to_45type_45definition = fun type_45name constructors range -> (match type_45name with (CList ((CCons (name,parameters)),_95)) -> (parser_45bind (symbol_45to_45sym name) (fun sym -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45type_45parameter parameters)) (fun parameters -> (parser_45return (CTypeDefinition (sym,parameters,constructors,range))))))) | (CInteger (_95,range)) -> (parser_45error (CMalformedTypeError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedTypeError (range))) | symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45return (CTypeDefinition (sym,CEmpty,constructors,range))))));;
let rec sexp_45to_45lambda = fun sexp_45to_45expression rest range -> (match rest with (CCons ((CList (arguments,_95)),(CCons (expression,CEmpty)))) -> (parser_45bind (parser_45sequence (list_45map symbol_45to_45sym arguments)) (fun arguments -> (parser_45bind (sexp_45to_45expression expression) (fun expression -> (parser_45return (CLambda (arguments,expression,range))))))) | _95 -> (parser_45error (CMalformedFunctionDefinitionError (range))));;
let rec sexp_45to_45function_45application = fun sexp_45to_45expression range expressions -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45expression expressions)) (fun expressions -> (parser_45return (CFunctionApplication (expressions,range)))));;
let rec to_45constructor_45or_45capture = fun symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45bind (parser_45constructor_63 (symbol_45id sym)) (fun constructor_63 -> (parser_45return (match constructor_63 with CTrue -> (CConstructorPattern (sym,CEmpty,(symbol_45range sym))) | CFalse -> (CCapture (sym))))))));;
let rec sexp_45to_45pattern = fun sexp -> (match sexp with (CList ((CCons (name,rest)),range)) -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45pattern rest)) (fun patterns -> (parser_45bind (symbol_45to_45sym name) (fun sym -> (parser_45return (CConstructorPattern (sym,patterns,range))))))) | (CList (CEmpty,range)) -> (parser_45error (CMalformedExpressionError (range))) | (CInteger (integer,range)) -> (parser_45return (CIntegerPattern (integer,range))) | symbol -> (to_45constructor_45or_45capture symbol));;
let rec sexp_45to_45match_45pair = fun sexp_45to_45expression range pair -> (match pair with (CCons (pattern,(CCons (expression,CEmpty)))) -> (parser_45bind (sexp_45to_45pattern pattern) (fun pattern -> (parser_45bind (sexp_45to_45expression expression) (fun expression -> (parser_45return (CPair (pattern,expression))))))) | _95 -> (parser_45error (CMalformedMatchExpressionError (range))));;
let rec sexp_45to_45match_45pairs = fun sexp_45to_45expression range xs -> (match (list_45partition (2l) xs) with CEmpty -> (parser_45error (CMalformedMatchExpressionError (range))) | pairs -> (parser_45sequence (list_45map (sexp_45to_45match_45pair sexp_45to_45expression range) pairs)));;
let rec sexp_45to_45match = fun sexp_45to_45expression range rest -> (match rest with (CCons (expression,rest)) -> (parser_45bind (sexp_45to_45expression expression) (fun expression -> (parser_45bind (sexp_45to_45match_45pairs sexp_45to_45expression range rest) (fun pairs -> (parser_45return (CMatch (expression,pairs,range))))))) | _95 -> (parser_45error (CMalformedExpressionError (range))));;
let rec sexp_45to_45constructor = fun sexp_45to_45expression range id name rest -> (parser_45bind (parser_45get_45module ()) (fun _module -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45expression rest)) (fun expressions -> (parser_45return (CConstructor ((CSym (id,name,_module,range)),expressions,range)))))));;
let rec sexp_45to_45list_45expression = fun sexp_45to_45expression expressions range -> (match expressions with (CCons ((CSymbol (id,symbol_45name,_95_95)),rest)) -> (match (_61 id (sym_45fn ())) with CTrue -> (sexp_45to_45lambda sexp_45to_45expression rest range) | CFalse -> (match (_61 id (sym_45match ())) with CTrue -> (sexp_45to_45match sexp_45to_45expression range rest) | CFalse -> (parser_45bind (parser_45constructor_63 id) (fun constructor_63 -> (match constructor_63 with CTrue -> (sexp_45to_45constructor sexp_45to_45expression range id symbol_45name rest) | CFalse -> (sexp_45to_45function_45application sexp_45to_45expression range expressions)))))) | _95 -> (sexp_45to_45function_45application sexp_45to_45expression range expressions));;
let rec sexp_45to_45expression = fun sexp -> (match sexp with (CInteger (integer,range)) -> (parser_45return (CIntegerConstant (integer,range))) | (CList (expressions,range)) -> (match expressions with CEmpty -> (parser_45error (CMalformedExpressionError (range))) | _95 -> (sexp_45to_45list_45expression sexp_45to_45expression expressions range)) | symbol -> (parser_45bind (symbol_45to_45sym symbol) (fun sym -> (parser_45bind (parser_45constructor_63 (symbol_45id sym)) (fun constructor_63 -> (parser_45return (match constructor_63 with CTrue -> (CConstructor (sym,CEmpty,(symbol_45range sym))) | CFalse -> (CVariable (sym)))))))));;
let rec sexp_45to_45function_45definition = fun name_45symbol rest range -> (match rest with (CCons ((CList (arguments,_95)),(CCons (expression,CEmpty)))) -> (parser_45bind (parser_45sequence (list_45map symbol_45to_45sym arguments)) (fun arguments -> (parser_45bind (sexp_45to_45expression expression) (fun expression -> (parser_45bind (symbol_45to_45sym name_45symbol) (fun sym -> (parser_45return (CFunctionDefinition (sym,arguments,expression,range))))))))) | _95 -> (parser_45error (CMalformedFunctionDefinitionError (range))));;
let rec sexp_45to_45definition_39 = fun name rest range kind -> (match (_61 kind (sym_45typ ())) with CTrue -> (parser_45bind (parser_45sequence (list_45map sexp_45to_45constructor_45definition rest)) (fun constructors -> (sexp_45to_45type_45definition name constructors range))) | CFalse -> (match (_61 kind (sym_45def ())) with CTrue -> (sexp_45to_45function_45definition name rest range) | CFalse -> (parser_45error (CMalformedDefinitionError (range)))));;
let rec specific_45malformed_45definition_45error = fun kind range -> (match (_61 kind (sym_45typ ())) with CTrue -> (parser_45error (CMalformedTypeDefinitionError (range))) | CFalse -> (match (_61 kind (sym_45def ())) with CTrue -> (parser_45error (CMalformedFunctionDefinitionError (range))) | CFalse -> (parser_45error (CMalformedDefinitionError (range)))));;
let rec sexp_45to_45definition = fun expression -> (match expression with (CList ((CCons ((CSymbol (kind,_95,_95_95)),CEmpty)),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons ((CSymbol (kind,_95,_95_95)),(CCons (_95_95_95,CEmpty)))),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons ((CSymbol (kind,_95,_95_95)),(CCons (name,rest)))),range)) -> (sexp_45to_45definition_39 name rest range kind) | (CList ((CCons ((CList (_95,range)),CEmpty)),_95_95)) -> (parser_45error (CMalformedDefinitionError (range))) | (CList (_95,range)) -> (parser_45error (CMalformedDefinitionError (range))) | (CInteger (_95,range)) -> (parser_45error (CMalformedDefinitionError (range))) | (CSymbol (_95,_95_95,range)) -> (parser_45error (CMalformedDefinitionError (range))));;
let rec parse_45definition_33 = fun expression -> (parser_45bind (sexp_45to_45definition expression) (fun definition -> (parser_45add_45definition_33 definition)));;
let rec sexp_45error_45to_45ast_45error = fun error -> (match error with CParseErrorTooFewClosingBrackets -> CMalformedSexpTooFewClosingBrackets | CParseErrorTooManyClosingBrackets -> CMalformedSexpTooManyClosingBrackets);;
let rec parse_45definitions_33 = fun _module iterator -> (parser_45bind (parser_45set_45module_33 _module) (fun _95 -> (parser_45bind (parser_45get_45symbols ()) (fun symbols -> (match (parse_45sexps symbols iterator) with (CResult ((CPair (symbols,expressions)))) -> (parser_45bind (parser_45set_45symbols_33 symbols) (fun _95 -> (parser_45sequence (list_45map parse_45definition_33 expressions)))) | (CError (error)) -> (parser_45error (sexp_45error_45to_45ast_45error error)))))));;
let rec sym_45to_45symbol = fun sym -> (match sym with (CSym (id,name,_95,range)) -> (CSymbol (id,name,range)));;
let rec type_45to_45sexp = fun types_45to_45sexp _type -> (match _type with (CSimpleType (sym)) -> (sym_45to_45symbol sym) | (CFunctionType (arg_45types,return_45type,range)) -> (CList ((CCons ((CSymbol ((0l),(data_45fn ()),range)),(CCons ((CList ((types_45to_45sexp arg_45types),range)),(CCons ((type_45to_45sexp types_45to_45sexp return_45type),CEmpty)))))),range)) | (CComplexType (sym,types,range)) -> (CList ((CCons ((sym_45to_45symbol sym),(types_45to_45sexp types))),range)));;
let rec types_45to_45sexp = fun types -> (list_45map (type_45to_45sexp types_45to_45sexp) types);;
let rec constructor_45to_45sexp = fun constructor -> (match constructor with (CSimpleConstructor (sym)) -> (sym_45to_45symbol sym) | (CComplexConstructor (sym,types,range)) -> (CList ((CCons ((sym_45to_45symbol sym),(types_45to_45sexp types))),range)));;
let rec constructors_45to_45sexp = fun constructors -> (list_45map constructor_45to_45sexp constructors);;
let rec type_45parameter_45to_45sexp = fun parameter -> (match parameter with (CExistentialParameter (sym)) -> (CList ((CCons ((CSymbol ((0l),(data_45exists ()),(symbol_45range sym))),(CCons ((sym_45to_45symbol sym),CEmpty)))),(symbol_45range sym))) | (CUniversalParameter (sym)) -> (sym_45to_45symbol sym));;
let rec type_45name_45to_45sexp = fun id range name parameters -> (match parameters with CEmpty -> (CSymbol (id,name,range)) | _95 -> (CList ((CCons ((CSymbol (id,name,range)),(list_45map type_45parameter_45to_45sexp parameters))),range)));;
let rec type_45definition_45to_45sexp = fun id name parameters constructors range -> (CList ((list_45concat (CCons ((CSymbol ((0l),(data_45typ ()),range)),(CCons ((type_45name_45to_45sexp id range name parameters),CEmpty)))) (constructors_45to_45sexp constructors)),range));;
let rec function_45arguments_45to_45sexp = fun arguments range -> (CList ((list_45map sym_45to_45symbol arguments),range));;
let rec pattern_45to_45sexp = fun pattern -> (match pattern with (CConstructorPattern (sym,CEmpty,_95)) -> (sym_45to_45symbol sym) | (CConstructorPattern (sym,patterns,range)) -> (CList ((CCons ((sym_45to_45symbol sym),(list_45map pattern_45to_45sexp patterns))),range)) | (CIntegerPattern (_value,range)) -> (CInteger (_value,range)) | (CCapture (sym)) -> (sym_45to_45symbol sym));;
let rec match_45pair_45to_45sexp = fun expression_45to_45sexp pair -> (match pair with (CPair (pattern,expression)) -> (CCons ((pattern_45to_45sexp pattern),(CCons ((expression_45to_45sexp expression),CEmpty)))));;
let rec expression_45to_45sexp = fun expression -> (match expression with (CIntegerConstant (integer,range)) -> (CInteger (integer,range)) | (CVariable ((CSym (id,string,_95,range)))) -> (CSymbol (id,string,range)) | (CLambda (arguments,expression,range)) -> (CList ((CCons ((CSymbol ((0l),(data_45fn ()),range)),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))),range)) | (CMatch (expression,pairs,range)) -> (CList ((CCons ((CSymbol ((0l),(data_45match ()),range)),(CCons ((expression_45to_45sexp expression),(list_45flatmap (match_45pair_45to_45sexp expression_45to_45sexp) pairs))))),range)) | (CConstructor (sym,expressions,range)) -> (match expressions with CEmpty -> (sym_45to_45symbol sym) | _95 -> (CList ((CCons ((sym_45to_45symbol sym),(list_45map expression_45to_45sexp expressions))),range))) | (CFunctionApplication (expressions,range)) -> (CList ((list_45map expression_45to_45sexp expressions),range)));;
let rec function_45definition_45to_45sexp = fun name arguments expression range -> (CList ((CCons ((CSymbol ((sym_45def ()),(data_45def ()),range)),(CCons ((sym_45to_45symbol name),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))))),range));;
let rec definition_45to_45sexp = fun definition -> (match definition with (CTypeDefinition ((CSym (id,name,_95,_95_95)),parameters,constructors,range)) -> (type_45definition_45to_45sexp id name parameters constructors range) | (CFunctionDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range) | (CTargetDefinition (_95,data)) -> (CSymbol ((0l),(string_45from_45indexed_45iterator data),(CRange ((0l),(0l))))));;
let rec definitions_45to_45sexps = fun definitions -> (list_45map definition_45to_45sexp definitions);;
let rec data_45double_45dash = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),CEmpty)))));;
type cli_45arguments = CCliArguments : ((string,string) pair) list * (string) list -> cli_45arguments | CCliErrorMissingValue : string -> cli_45arguments;;
let rec is_45key_63 = fun argument -> (string_45equal_63 (data_45double_45dash ()) (string_45take (2l) argument));;
let rec parse_45arguments_39 = fun arguments kv_45args inputs -> (match arguments with (CCons (first,(CCons (second,rest)))) -> (match (is_45key_63 first) with CTrue -> (parse_45arguments_39 (list_45rest (list_45rest arguments)) (CCons ((CPair (first,second)),kv_45args)) inputs) | CFalse -> (parse_45arguments_39 (list_45rest arguments) kv_45args (CCons (first,inputs)))) | (CCons (first,CEmpty)) -> (match (is_45key_63 first) with CTrue -> (CCliErrorMissingValue (first)) | CFalse -> (CCliArguments ((list_45reverse kv_45args),(list_45reverse (CCons (first,inputs)))))) | CEmpty -> (CCliArguments ((list_45reverse kv_45args),(list_45reverse inputs))));;
let rec parse_45arguments = fun arguments -> (parse_45arguments_39 arguments CEmpty CEmpty);;
let rec data_45pipe = fun () -> (string_45from_45list (CCons ((112l),(CCons ((105l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;
let rec data_45list = fun () -> (string_45from_45list (CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),CEmpty)))))))));;
let rec data_45sparkle_45x = fun () -> (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((120l),CEmpty)))))))));;
let rec data_45Empty = fun () -> (string_45from_45list (CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))));;
let rec data_45Cons = fun () -> (string_45from_45list (CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))));;
let rec sym_45sparkle_45x = fun () -> (-1000l);;
let rec sym_45cons = fun () -> (-1001l);;
let rec sym_45empty = fun () -> (-1002l);;
let rec sym_45list = fun () -> (-1003l);;
let rec sym_45pipe = fun () -> (-1004l);;
let rec with_45local_45transform_45keywords = fun dictionary -> (dictionary_45set (data_45sparkle_45x ()) (CPair ((sym_45sparkle_45x ()),(data_45sparkle_45x ()))) (dictionary_45set (data_45Cons ()) (CPair ((sym_45cons ()),(data_45Cons ()))) (dictionary_45set (data_45Empty ()) (CPair ((sym_45empty ()),(data_45Empty ()))) (dictionary_45set (data_45list ()) (CPair ((sym_45list ()),(data_45list ()))) (dictionary_45set (data_45pipe ()) (CPair ((sym_45pipe ()),(data_45pipe ()))) dictionary)))));;
let rec expression_45is_45symbol_63 = fun symbol_45id expression -> (match expression with (CVariable ((CSym (id,_95,_95_95,_95_95_95)))) -> (_61 symbol_45id id) | _95 -> CFalse);;
let rec first_45expression_45is_45symbol_63 = fun symbol_45id expressions -> ((fun _226_156_168x -> ((maybe_45else (fun () -> CFalse)) ((maybe_45map (expression_45is_45symbol_63 symbol_45id)) _226_156_168x))) (list_45first expressions));;
let rec transform_45special_45form = fun symbol_45id transformer definition -> (over_45definition_45expressions (over_45subexpressions (over_45function_45application (fun expressions range -> (result_45return (match (first_45expression_45is_45symbol_63 symbol_45id expressions) with CTrue -> (transformer (definition_45module definition) (list_45rest expressions) range) | CFalse -> (CFunctionApplication (expressions,range))))))) definition);;
let rec transform_45special_45forms = fun symbol_45id transformer definitions -> (result_45concat (list_45map (transform_45special_45form symbol_45id transformer) definitions));;
let rec transform_45pipe = fun _module expressions range -> (CLambda ((CCons ((CSym ((sym_45sparkle_45x ()),(data_45sparkle_45x ()),_module,range)),CEmpty)),(list_45foldl (fun expression composed -> (CFunctionApplication ((CCons (expression,(CCons (composed,CEmpty)))),range))) (CVariable ((CSym ((sym_45sparkle_45x ()),(data_45sparkle_45x ()),_module,range)))) expressions),range));;
let rec transform_45list = fun _module expressions range -> (list_45foldr (fun expression composed -> (CConstructor ((CSym ((sym_45cons ()),(data_45Cons ()),_module,range)),(CCons (expression,(CCons (composed,CEmpty)))),range))) (CConstructor ((CSym ((sym_45empty ()),(data_45Empty ()),_module,range)),CEmpty,range)) expressions);;
let rec transform_45match_45expression = fun expression pairs range -> (result_45return (CMatch (expression,pairs,range)));;
let rec transform_45match_45expressions = fun definition -> (over_45definition_45expressions (over_45subexpressions (over_45match_45expression (fun expression pairs range -> (transform_45match_45expression expression pairs range)))) definition);;
let rec local_45transforms = fun definitions -> (result_45bind definitions (fun definitions -> (result_45bind (transform_45special_45forms (sym_45pipe ()) transform_45pipe definitions) (fun definitions -> (result_45bind (transform_45special_45forms (sym_45list ()) transform_45list definitions) (fun definitions -> (result_45bind (result_45concat (list_45map transform_45match_45expressions definitions)) (fun definitions -> (result_45return definitions)))))))));;
let rec data_45strings_45file_45ending = fun () -> (string_45from_45list (CCons ((46l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((115l),CEmpty)))))))))))))))));;
let rec data_45reuse_45file_45ending = fun () -> (string_45from_45list (CCons ((46l),(CCons ((114l),(CCons ((101l),(CCons ((117l),(CCons ((115l),(CCons ((101l),CEmpty)))))))))))));;
type ('Titerator) source_45file = CSourceFile : module_45reference * string * 'Titerator -> ('Titerator) source_45file;;
type source_45file_45type = CSourceFileTypeReuse | CSourceFileTypeStrings | CSourceFileTypeTargetLanguage;;
let rec source_45file_45of = fun _module path iterator -> (CSourceFile (_module,path,iterator));;
let rec source_45file_45module = fun file -> (match file with (CSourceFile (_module,_95,_95_95)) -> _module);;
let rec source_45file_45path = fun file -> (match file with (CSourceFile (_95,path,_95_95)) -> path);;
let rec source_45file_45content = fun file -> (match file with (CSourceFile (_95,_95_95,content)) -> content);;
let rec last_45n_45chars = fun n path -> (string_45substring (Int32.sub (string_45size path) n) n path);;
let rec source_45file_45type = fun file -> (match (string_45equal_63 (last_45n_45chars (6l) (source_45file_45path file)) (data_45reuse_45file_45ending ())) with CTrue -> CSourceFileTypeReuse | CFalse -> (match (string_45equal_63 (last_45n_45chars (8l) (source_45file_45path file)) (data_45strings_45file_45ending ())) with CTrue -> CSourceFileTypeStrings | CFalse -> CSourceFileTypeTargetLanguage));;
let rec data_45space = fun () -> (string_45from_45list (CCons ((32l),CEmpty)));;
let rec data_45plus = fun () -> (string_45from_45list (CCons ((43l),CEmpty)));;
let rec data_45multiply = fun () -> (string_45from_45list (CCons ((42l),CEmpty)));;
let rec data_45minus = fun () -> (string_45from_45list (CCons ((45l),CEmpty)));;
let rec data_45slash = fun () -> (string_45from_45list (CCons ((47l),CEmpty)));;
let rec data_45percent = fun () -> (string_45from_45list (CCons ((37l),CEmpty)));;
let rec data_45ampersand = fun () -> (string_45from_45list (CCons ((38l),CEmpty)));;
let rec data_45int32_45less_45than = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((45l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((45l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((110l),CEmpty)))))))))))))))))))))))))))))));;
let rec data_45parse_45error = fun () -> (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((32l),CEmpty)))))))))))))))))))))))));;
let rec data_45fun = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),CEmpty)))))));;
let rec data_45type = fun () -> (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;
let rec data_45if = fun () -> (string_45from_45list (CCons ((105l),(CCons ((102l),CEmpty)))));;
let rec data_45then = fun () -> (string_45from_45list (CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45else = fun () -> (string_45from_45list (CCons ((101l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))));;
let rec data_45with = fun () -> (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;
let rec data_45of = fun () -> (string_45from_45list (CCons ((111l),(CCons ((102l),CEmpty)))));;
let rec data_45class = fun () -> (string_45from_45list (CCons ((99l),(CCons ((108l),(CCons ((97l),(CCons ((115l),(CCons ((115l),CEmpty)))))))))));;
let rec data_45end = fun () -> (string_45from_45list (CCons ((101l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;
let rec data_45in = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),CEmpty)))));;
let rec data_45let = fun () -> (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),CEmpty)))))));;
let rec data_45open = fun () -> (string_45from_45list (CCons ((111l),(CCons ((112l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45and = fun () -> (string_45from_45list (CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;
let rec data_45or = fun () -> (string_45from_45list (CCons ((111l),(CCons ((114l),CEmpty)))));;
let rec data_45as = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),CEmpty)))));;
let rec data_45less_45than = fun () -> (string_45from_45list (CCons ((60l),CEmpty)));;
let rec data_45assert = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45asr = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;
let rec data_45begin = fun () -> (string_45from_45list (CCons ((98l),(CCons ((101l),(CCons ((103l),(CCons ((105l),(CCons ((110l),CEmpty)))))))))));;
let rec data_45constraint = fun () -> (string_45from_45list (CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((97l),(CCons ((105l),(CCons ((110l),(CCons ((116l),CEmpty)))))))))))))))))))));;
let rec data_45do = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),CEmpty)))));;
let rec data_45done = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((110l),(CCons ((101l),CEmpty)))))))));;
let rec data_45downto = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((119l),(CCons ((110l),(CCons ((116l),(CCons ((111l),CEmpty)))))))))))));;
let rec data_45exception = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((99l),(CCons ((101l),(CCons ((112l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))))));;
let rec data_45external = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))))));;
let rec data_45false = fun () -> (string_45from_45list (CCons ((102l),(CCons ((97l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45true = fun () -> (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((101l),CEmpty)))))))));;
let rec data_45for = fun () -> (string_45from_45list (CCons ((102l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;
let rec data_45function = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))));;
let rec data_45functor = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),CEmpty)))))))))))))));;
let rec data_45include = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((99l),(CCons ((108l),(CCons ((117l),(CCons ((100l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45inherit = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((105l),(CCons ((116l),CEmpty)))))))))))))));;
let rec data_45initializer = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((97l),(CCons ((108l),(CCons ((105l),(CCons ((122l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))))))))))))));;
let rec data_45land = fun () -> (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))))));;
let rec data_45lazy = fun () -> (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((122l),(CCons ((121l),CEmpty)))))))));;
let rec data_45lor = fun () -> (string_45from_45list (CCons ((108l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;
let rec data_45lsl = fun () -> (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((108l),CEmpty)))))));;
let rec data_45lsr = fun () -> (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;
let rec data_45lxor = fun () -> (string_45from_45list (CCons ((108l),(CCons ((120l),(CCons ((111l),(CCons ((114l),CEmpty)))))))));;
let rec data_45method = fun () -> (string_45from_45list (CCons ((109l),(CCons ((101l),(CCons ((116l),(CCons ((104l),(CCons ((111l),(CCons ((100l),CEmpty)))))))))))));;
let rec data_45mod = fun () -> (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),CEmpty)))))));;
let rec data_45module = fun () -> (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),(CCons ((117l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))));;
let rec data_45mutable = fun () -> (string_45from_45list (CCons ((109l),(CCons ((117l),(CCons ((116l),(CCons ((97l),(CCons ((98l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45new = fun () -> (string_45from_45list (CCons ((110l),(CCons ((101l),(CCons ((119l),CEmpty)))))));;
let rec data_45nonrec = fun () -> (string_45from_45list (CCons ((110l),(CCons ((111l),(CCons ((110l),(CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))))))))));;
let rec data_45object = fun () -> (string_45from_45list (CCons ((111l),(CCons ((98l),(CCons ((106l),(CCons ((101l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45private = fun () -> (string_45from_45list (CCons ((112l),(CCons ((114l),(CCons ((105l),(CCons ((118l),(CCons ((97l),(CCons ((116l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45rec = fun () -> (string_45from_45list (CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))));;
let rec data_45sig = fun () -> (string_45from_45list (CCons ((115l),(CCons ((105l),(CCons ((103l),CEmpty)))))));;
let rec data_45struct = fun () -> (string_45from_45list (CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45try = fun () -> (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((121l),CEmpty)))))));;
let rec data_45val = fun () -> (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),CEmpty)))))));;
let rec data_45virtual = fun () -> (string_45from_45list (CCons ((118l),(CCons ((105l),(CCons ((114l),(CCons ((116l),(CCons ((117l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))));;
let rec data_45when = fun () -> (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45while = fun () -> (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((105l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45parser = fun () -> (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))));;
let rec data_45value = fun () -> (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),(CCons ((117l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45to = fun () -> (string_45from_45list (CCons ((116l),(CCons ((111l),CEmpty)))));;
let rec data_45error_45reserved_45identifier = fun () -> (string_45from_45list (CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((115l),(CCons ((32l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((120l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),(CCons ((32l),(CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((118l),(CCons ((101l),(CCons ((100l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_45sparkle = fun () -> (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),CEmpty)))))));;
let rec data_45no_45input_45files = fun () -> (string_45from_45list (CCons ((78l),(CCons ((111l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))));;
let rec data_45output_45key = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),CEmpty)))))))))))))))));;
let rec data_45no_45output_45path = fun () -> (string_45from_45list (CCons ((78l),(CCons ((111l),(CCons ((32l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((32l),(CCons ((115l),(CCons ((112l),(CCons ((101l),(CCons ((99l),(CCons ((105l),(CCons ((102l),(CCons ((105l),(CCons ((101l),(CCons ((100l),(CCons ((44l),(CCons ((32l),(CCons ((112l),(CCons ((108l),(CCons ((101l),(CCons ((97l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((117l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((45l),(CCons ((45l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((91l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((93l),(CCons ((32l),(CCons ((102l),(CCons ((108l),(CCons ((97l),(CCons ((103l),(CCons ((46l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_45stdlib = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((115l),(CCons ((116l),(CCons ((100l),(CCons ((108l),(CCons ((105l),(CCons ((98l),CEmpty)))))))))))))))));;
let rec data_45minimal = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((109l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((109l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))))))));;
let rec data_45module_45flag = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((109l),(CCons ((111l),(CCons ((100l),(CCons ((117l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))))))));;
let rec data_45standard_45library_45filename = fun () -> (string_45from_45list (CCons ((115l),(CCons ((116l),(CCons ((97l),(CCons ((110l),(CCons ((100l),(CCons ((97l),(CCons ((114l),(CCons ((100l),(CCons ((45l),(CCons ((108l),(CCons ((105l),(CCons ((98l),(CCons ((114l),(CCons ((97l),(CCons ((114l),(CCons ((121l),(CCons ((46l),(CCons ((114l),(CCons ((101l),(CCons ((117l),(CCons ((115l),(CCons ((101l),CEmpty)))))))))))))))))))))))))))))))))))))))))))));;
type language = CEnglish;;
let rec i18n_45error_45range_45to_45string = fun language range -> (match range with (CRange (start,_end)) -> (string_45concat (string_45from_45list (CCons ((32l),(CCons ((97l),(CCons ((116l),(CCons ((32l),CEmpty))))))))) (string_45concat (string_45from_45int32 start) (string_45concat (string_45from_45list (CCons ((45l),CEmpty))) (string_45from_45int32 _end)))));;
let rec i18n_45malformed_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((79l),(CCons ((110l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((45l),(CCons ((32l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((97l),(CCons ((110l),(CCons ((32l),(CCons ((98l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((112l),(CCons ((32l),(CCons ((108l),(CCons ((101l),(CCons ((118l),(CCons ((101l),(CCons ((108l),(CCons ((32l),(CCons ((111l),(CCons ((102l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((89l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((110l),(CCons ((101l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((97l),(CCons ((112l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((46l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((40l),(CCons ((97l),(CCons ((114l),(CCons ((103l),(CCons ((117l),(CCons ((109l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((115l),(CCons ((41l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((79l),(CCons ((102l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45name_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((70l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((69l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45match_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((110l),(CCons ((111l),(CCons ((116l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((44l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((115l),(CCons ((117l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((115l),(CCons ((111l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((116l),(CCons ((32l),(CCons ((97l),(CCons ((108l),(CCons ((108l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((114l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((114l),(CCons ((117l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((105l),(CCons ((114l),(CCons ((115l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((49l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((49l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((50l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((50l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45symbol_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45constructor_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((84l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45sexp_45too_45few_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((102l),(CCons ((101l),(CCons ((119l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec i18n_45malformed_45sexp_45too_45many_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((110l),(CCons ((121l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec join = fun list -> (string_45join (string_45empty ()) list);;
let rec is_45alphanumeric = fun char -> (_or (_and (_62_61 char (65l)) (_60_61 char (90l))) (_or (_and (_62_61 char (48l)) (_60_61 char (57l))) (_and (_62_61 char (97l)) (_60_61 char (122l)))));;
let rec escape_45char = fun char -> (match (is_45alphanumeric char) with CTrue -> (string_45of_45char char) | CFalse -> (string_45prepend (95l) (string_45from_45int32 char)));;
let rec add_45identifiers = fun identifiers offset dictionary -> (match identifiers with (CCons (identifier,rest)) -> (add_45identifiers rest (Int32.sub offset (1l)) (dictionary_45set (identifier ()) (CPair (offset,(identifier ()))) dictionary)) | CEmpty -> dictionary);;
let rec error_45to_45string = fun error -> (match error with (CMalformedDefinitionError (range)) -> (i18n_45malformed_45definition_45error CEnglish range) | (CMalformedFunctionDefinitionError (range)) -> (i18n_45malformed_45function_45definition_45error CEnglish range) | (CMalformedTypeDefinitionError (range)) -> (i18n_45malformed_45type_45definition_45error CEnglish range) | (CMalformedFunctionNameError (range)) -> (i18n_45malformed_45function_45name_45error CEnglish range) | (CMalformedExpressionError (range)) -> (i18n_45malformed_45expression_45error CEnglish range) | (CMalformedMatchExpressionError (range)) -> (i18n_45malformed_45match_45expression_45error CEnglish range) | (CMalformedSymbolError (range)) -> (i18n_45malformed_45symbol_45error CEnglish range) | (CMalformedConstructorError (range)) -> (i18n_45malformed_45constructor_45error CEnglish range) | (CMalformedTypeError (range)) -> (i18n_45malformed_45type_45error CEnglish range) | CMalformedSexpTooFewClosingBrackets -> (i18n_45malformed_45sexp_45too_45few_45closing_45brackets CEnglish) | CMalformedSexpTooManyClosingBrackets -> (i18n_45malformed_45sexp_45too_45many_45closing_45brackets CEnglish));;
let rec stringify_45parse_45errors = fun definitions -> (result_45bimap id error_45to_45string definitions);;
let rec identifier_45is_45reserved_63 = fun identifier -> (string_45equal_63 (string_45substring (0l) (3l) (symbol_45name identifier)) (data_45sparkle ()));;
let rec validate_45identifier = fun identifier -> (match (identifier_45is_45reserved_63 identifier) with CTrue -> (result_45error (data_45error_45reserved_45identifier ())) | CFalse -> (result_45lift identifier));;
let rec validate_45reserved_45identifiers = fun definitions -> (result_45flatmap (_46 result_45concat (list_45map (over_45definition_45expressions (over_45identifiers validate_45identifier)))) definitions);;
let rec transform_45strings = fun path content -> (match (string_45gen content) with (CResult (string)) -> (indexed_45iterator_45from_45iterable (string_45iterable ()) string) | (CError (error)) -> (indexed_45iterator_45from_45iterable (string_45iterable ()) (string_45empty ())));;
let rec parse_45reuse_45file = fun file -> (match file with (CSourceFile (_module,path,content)) -> (parse_45definitions_33 _module content));;
let rec parse_45strings_45file = fun file -> (match file with (CSourceFile (_module,path,content)) -> (parse_45definitions_33 _module (transform_45strings path content)));;
let rec parse_45target_45file = fun file -> (match file with (CSourceFile (_module,path,content)) -> (parser_45return (CCons ((CTargetDefinition (_module,content)),CEmpty))));;
let rec parse_45source_45file = fun file -> (match (source_45file_45type file) with CSourceFileTypeStrings -> (parse_45strings_45file file) | CSourceFileTypeReuse -> (parse_45reuse_45file file) | CSourceFileTypeTargetLanguage -> (parse_45target_45file file));;
let rec parse_45source_45files = fun internal_45symbols minimal_63 files -> ((fun _226_156_168x -> ((match minimal_63 with CTrue -> id | CFalse -> (fun _226_156_168x -> (local_45transforms (validate_45reserved_45identifiers _226_156_168x)))) (stringify_45parse_45errors ((result_45map list_45flatten) ((parser_45run internal_45symbols) (parser_45sequence ((list_45map parse_45source_45file) _226_156_168x))))))) files);;
let rec data_45compile_45error = fun () -> (string_45from_45list (CCons ((42l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((112l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((42l),CEmpty)))))))))))))))))))))))))))))));;
let rec data_45arrow = fun () -> (string_45from_45list (CCons ((32l),(CCons ((45l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;
let rec data_45equals = fun () -> (string_45from_45list (CCons ((32l),(CCons ((61l),(CCons ((32l),CEmpty)))))));;
let rec data_45vertical_45bar = fun () -> (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((32l),CEmpty)))))));;
let rec data_45pipe_45operator = fun () -> (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;
let rec data_45colon = fun () -> (string_45from_45list (CCons ((32l),(CCons ((58l),(CCons ((32l),CEmpty)))))));;
let rec data_45star = fun () -> (string_45from_45list (CCons ((32l),(CCons ((42l),(CCons ((32l),CEmpty)))))));;
let rec data_45int32 = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),CEmpty)))))))))));;
let rec data_45int32_45plus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((97l),(CCons ((100l),(CCons ((100l),CEmpty)))))))))))))))))));;
let rec data_45int32_45multiply = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((109l),(CCons ((117l),(CCons ((108l),CEmpty)))))))))))))))))));;
let rec data_45int32_45minus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((115l),(CCons ((117l),(CCons ((98l),CEmpty)))))))))))))))))));;
let rec data_45int32_45divide = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((100l),(CCons ((105l),(CCons ((118l),CEmpty)))))))))))))))))));;
let rec data_45int32_45modulus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((114l),(CCons ((101l),(CCons ((109l),CEmpty)))))))))))))))))));;
let rec data_45int32_45and = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((108l),(CCons ((111l),(CCons ((103l),(CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))))))))))))))))))))));;
let rec data_45cempty = fun () -> (string_45from_45list (CCons ((67l),(CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))))));;
let rec data_45ccons = fun () -> (string_45from_45list (CCons ((67l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))))));;
let rec data_45int32 = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((111l),(CCons ((102l),(CCons ((95l),(CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((32l),CEmpty)))))))))))))))))))))))))));;
let rec data_45comma = fun () -> (string_45from_45list (CCons ((44l),CEmpty)));;
let rec data_45with = fun () -> (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;
let rec data_45definition_45end = fun () -> (string_45from_45list (CCons ((59l),(CCons ((59l),CEmpty)))));;
let rec data_45let_45rec = fun () -> (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((32l),CEmpty)))))))))))))))));;
let rec data_45constant = fun () -> (string_45from_45list (CCons ((95l),(CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((95l),CEmpty)))))))))))))))))))));;
let rec data_45preamble_45filename = fun () -> (string_45from_45list (CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((97l),(CCons ((109l),(CCons ((98l),(CCons ((108l),(CCons ((101l),(CCons ((46l),(CCons ((109l),(CCons ((108l),CEmpty)))))))))))))))))))))));;
let rec data_45pervasives_45filename = fun () -> (string_45from_45list (CCons ((112l),(CCons ((101l),(CCons ((114l),(CCons ((118l),(CCons ((97l),(CCons ((115l),(CCons ((105l),(CCons ((118l),(CCons ((101l),(CCons ((115l),(CCons ((46l),(CCons ((109l),(CCons ((108l),CEmpty)))))))))))))))))))))))))));;
let rec sym_45int32_45less_45than = fun () -> (-10000l);;
let rec prefix_45type_45variable = fun identifier -> (string_45prepend (39l) (string_45prepend (84l) (symbol_45name identifier)));;
let rec prefix_45constructor = fun constructor -> (string_45prepend (67l) constructor);;
let rec reserved_45identifiers = fun () -> (CCons (data_45assert,(CCons (data_45asr,(CCons (data_45begin,(CCons (data_45constraint,(CCons (data_45do,(CCons (data_45done,(CCons (data_45downto,(CCons (data_45type,(CCons (data_45if,(CCons (data_45then,(CCons (data_45else,(CCons (data_45with,(CCons (data_45of,(CCons (data_45end,(CCons (data_45in,(CCons (data_45fun,(CCons (data_45let,(CCons (data_45open,(CCons (data_45and,(CCons (data_45or,(CCons (data_45as,(CCons (data_45class,(CCons (data_45exception,(CCons (data_45external,(CCons (data_45false,(CCons (data_45true,(CCons (data_45for,(CCons (data_45function,(CCons (data_45functor,(CCons (data_45if,(CCons (data_45include,(CCons (data_45inherit,(CCons (data_45initializer,(CCons (data_45land,(CCons (data_45lazy,(CCons (data_45lor,(CCons (data_45lsl,(CCons (data_45lsr,(CCons (data_45lxor,(CCons (data_45method,(CCons (data_45mod,(CCons (data_45module,(CCons (data_45mutable,(CCons (data_45new,(CCons (data_45nonrec,(CCons (data_45object,(CCons (data_45private,(CCons (data_45rec,(CCons (data_45sig,(CCons (data_45struct,(CCons (data_45try,(CCons (data_45val,(CCons (data_45virtual,(CCons (data_45when,(CCons (data_45while,(CCons (data_45parser,(CCons (data_45value,(CCons (data_45to,CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec identifier_45is_45reserved_63 = fun id -> (_and (_60_61 id (-2000l)) (_62 id (-3000l)));;
let rec special_45identifiers = fun () -> (CCons (data_45plus,(CCons (data_45slash,(CCons (data_45percent,(CCons (data_45minus,(CCons (data_45multiply,(CCons (data_45ampersand,CEmpty))))))))))));;
let rec identifier_45is_45special_63 = fun id -> (_and (_60_61 id (-3000l)) (_62 id (-4000l)));;
let rec escape_45identifier = fun identifier -> (match (identifier_45is_45reserved_63 (symbol_45id identifier)) with CTrue -> (string_45prepend (95l) (symbol_45name identifier)) | CFalse -> (string_45flatmap escape_45char (symbol_45name identifier)));;
let rec special_45identifier_45map = fun () -> (dictionary_45of (CCons ((CPair ((data_45plus ()),(data_45int32_45plus ()))),(CCons ((CPair ((data_45slash ()),(data_45int32_45divide ()))),(CCons ((CPair ((data_45percent ()),(data_45int32_45modulus ()))),(CCons ((CPair ((data_45minus ()),(data_45int32_45minus ()))),(CCons ((CPair ((data_45multiply ()),(data_45int32_45multiply ()))),(CCons ((CPair ((data_45ampersand ()),(data_45int32_45and ()))),CEmpty)))))))))))));;
let rec translate_45identifier = fun identifier -> (match (identifier_45is_45special_63 (symbol_45id identifier)) with CTrue -> (match (dictionary_45get (symbol_45name identifier) (special_45identifier_45map ())) with (CSome (translation)) -> translation | CNone -> (escape_45identifier identifier)) | CFalse -> (escape_45identifier identifier));;
let rec translate_45less_45than = fun translate_45expression expressions -> (match expressions with (CCons (a,(CCons (b,(CCons (then_45case,(CCons (else_45case,CEmpty)))))))) -> (join (CCons ((data_45if ()),(CCons ((data_45space ()),(CCons ((translate_45expression a),(CCons ((data_45less_45than ()),(CCons ((translate_45expression b),(CCons ((data_45space ()),(CCons ((data_45then ()),(CCons ((data_45space ()),(CCons ((translate_45expression then_45case),(CCons ((data_45space ()),(CCons ((data_45else ()),(CCons ((data_45space ()),(CCons ((translate_45expression else_45case),CEmpty))))))))))))))))))))))))))) | _95 -> (data_45compile_45error ()));;
let rec translate_45constructor = fun translator identifier -> (fun _226_156_168x -> (wrap_45in_45brackets (join ((fun parameters -> (CCons ((prefix_45constructor (escape_45identifier identifier)),(CCons ((data_45space ()),(CCons (parameters,CEmpty))))))) (wrap_45in_45brackets ((string_45join (data_45comma ())) ((list_45map translator) _226_156_168x)))))));;
let rec translate_45pattern = fun pattern -> (match pattern with (CCapture (sym)) -> (escape_45identifier sym) | (CIntegerPattern (integer,_95)) -> (join (CCons ((string_45from_45int32 integer),(CCons ((string_45of_45char (108l)),CEmpty))))) | (CConstructorPattern (sym,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier sym)) | (CConstructorPattern (sym,patterns,_95)) -> ((translate_45constructor translate_45pattern sym) patterns));;
let rec translate_45rule = fun translate_45expression rule -> (match rule with (CPair (pattern,expression)) -> (join (CCons ((translate_45pattern pattern),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty))))))));;
let rec translate_45match_45expression = fun translate_45expression expression -> (fun _226_156_168x -> ((string_45join (data_45space ())) ((fun rules -> (CCons ((data_45match ()),(CCons ((translate_45expression expression),(CCons ((data_45with ()),(CCons (rules,CEmpty))))))))) ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45rule translate_45expression)) _226_156_168x)))));;
let rec translate_45function_45application_39 = fun translate_45expression expressions -> (match expressions with (CCons (no_45args_45function,CEmpty)) -> (join (CCons ((translate_45expression no_45args_45function),(CCons ((data_45space ()),(CCons ((wrap_45in_45brackets (string_45empty ())),CEmpty))))))) | _95 -> (string_45join (data_45space ()) (list_45map translate_45expression expressions)));;
let rec translate_45function_45application = fun translate_45expression expressions -> (match expressions with (CCons ((CVariable (sym)),rest)) -> (match (_61 (symbol_45id sym) (sym_45int32_45less_45than ())) with CTrue -> (translate_45less_45than translate_45expression rest) | CFalse -> (translate_45function_45application_39 translate_45expression expressions)) | _95 -> (translate_45function_45application_39 translate_45expression expressions));;
let rec translate_45argument_45list = fun arguments -> (match (list_45empty_63 arguments) with CTrue -> (wrap_45in_45brackets (string_45empty ())) | CFalse -> (string_45join (data_45space ()) (list_45map escape_45identifier arguments)));;
let rec translate_45lambda = fun translate_45expression arguments expression -> (join (CCons ((data_45fun ()),(CCons ((data_45space ()),(CCons ((translate_45argument_45list arguments),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty)))))))))));;
let rec translate_45expression = fun expression -> (match expression with (CLambda (arguments,expression,_95)) -> (wrap_45in_45brackets (translate_45lambda translate_45expression arguments expression)) | (CConstructor (sym,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier sym)) | (CConstructor (sym,expressions,_95)) -> ((translate_45constructor translate_45expression sym) expressions) | (CFunctionApplication (expressions,_95)) -> (wrap_45in_45brackets (translate_45function_45application translate_45expression expressions)) | (CIntegerConstant (integer,_95)) -> (wrap_45in_45brackets (string_45concat (string_45from_45int32 integer) (string_45of_45char (108l)))) | (CVariable (sym)) -> (translate_45identifier sym) | (CMatch (expression,rules,_95)) -> (wrap_45in_45brackets ((translate_45match_45expression translate_45expression expression) rules)));;
let rec translate_45function_45definition = fun identifier arguments expression -> (join (CCons ((data_45let_45rec ()),(CCons ((escape_45identifier identifier),(CCons ((data_45equals ()),(CCons ((translate_45lambda translate_45expression arguments expression),(CCons ((data_45definition_45end ()),CEmpty)))))))))));;
let rec translate_45simple_45type = fun identifier parameters -> (match (list_45any_63 (_46 (symbol_45equal_63 identifier) type_45parameter_45symbol) parameters) with CFalse -> (escape_45identifier identifier) | CTrue -> (prefix_45type_45variable identifier));;
let rec translate_45complex_45types = fun translate_45types name types -> ((fun _226_156_168x -> (join ((fun types -> (CCons (types,(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))) (wrap_45in_45brackets ((translate_45types (data_45comma ())) _226_156_168x))))) types);;
let rec translate_45function_45type = fun translate_45types return_45type argument_45types -> ((fun _226_156_168x -> (wrap_45in_45brackets ((translate_45types (data_45arrow ())) ((fun argument_45types -> (list_45concat argument_45types (CCons (return_45type,CEmpty)))) _226_156_168x)))) argument_45types);;
let rec translate_45type = fun translate_45types parameters _type -> (match _type with (CSimpleType (sym)) -> (translate_45simple_45type sym parameters) | (CComplexType (sym,types,_95)) -> (translate_45complex_45types translate_45types sym types) | (CFunctionType (argument_45types,return_45type,_95)) -> (translate_45function_45type translate_45types return_45type argument_45types));;
let rec translate_45types = fun parameters separator types -> ((fun _226_156_168x -> ((string_45join separator) ((list_45map (translate_45type (translate_45types parameters) parameters)) _226_156_168x))) types);;
let rec translate_45complex_45constructor_45definition = fun name _type types parameters -> (join (CCons ((prefix_45constructor (escape_45identifier name)),(CCons ((data_45colon ()),(CCons ((translate_45types parameters (data_45star ()) types),(CCons ((data_45arrow ()),(CCons (_type,CEmpty)))))))))));;
let rec translate_45constructor_45definition = fun _type parameters constructor -> (match constructor with (CSimpleConstructor (sym)) -> (prefix_45constructor (escape_45identifier sym)) | (CComplexConstructor (sym,types,_95)) -> (translate_45complex_45constructor_45definition sym _type types parameters));;
let rec translate_45constructor_45definitions = fun _type parameters constructors -> ((fun _226_156_168x -> ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45constructor_45definition _type parameters)) _226_156_168x))) constructors);;
let rec translate_45type_45parameter_45for_45definition = fun parameter -> (match parameter with (CUniversalParameter (sym)) -> (prefix_45type_45variable sym) | (CExistentialParameter (_95)) -> (string_45empty ()));;
let rec translate_45type_45parameters = fun parameters -> ((fun _226_156_168x -> ((string_45join (data_45comma ())) ((list_45filter (_46 not string_45empty_63)) ((list_45map translate_45type_45parameter_45for_45definition) _226_156_168x)))) parameters);;
let rec translate_45type_45name_39 = fun name parameter_45string -> (match (string_45empty_63 parameter_45string) with CTrue -> (escape_45identifier name) | CFalse -> (join (CCons ((wrap_45in_45brackets parameter_45string),(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))));;
let rec translate_45type_45name = fun name parameters -> (translate_45type_45name_39 name (translate_45type_45parameters parameters));;
let rec translate_45type_45definition = fun name parameters constructors -> (join (CCons ((data_45type ()),(CCons ((data_45space ()),(CCons ((translate_45type_45name name parameters),(CCons ((data_45equals ()),(CCons ((translate_45constructor_45definitions (translate_45type_45name name parameters) parameters constructors),(CCons ((data_45definition_45end ()),CEmpty)))))))))))));;
let rec translate_45definition = fun definition -> (match definition with (CFunctionDefinition (identifier,arguments,expression,_95)) -> (translate_45function_45definition identifier arguments expression) | (CTypeDefinition (name,parameters,constructors,_95)) -> (translate_45type_45definition name parameters constructors) | (CTargetDefinition (_95,data)) -> (string_45from_45indexed_45iterator data));;
let rec generate_45source = fun module_45name definitions -> ((fun _226_156_168x -> ((string_45join (string_45of_45char (10l))) ((list_45map translate_45definition) _226_156_168x))) definitions);;
let rec internal_45symbols = fun () -> (dictionary_45set (data_45int32_45less_45than ()) (CPair ((sym_45int32_45less_45than ()),(data_45int32_45less_45than ()))) (add_45identifiers (reserved_45identifiers ()) (-2000l) (add_45identifiers (special_45identifiers ()) (-3000l) (with_45local_45transform_45keywords (keywords ())))));;
let rec perform_45transformations_63 = fun () -> CTrue;;
type compiler_45parameters = CCompilerParameters : boolean * boolean -> compiler_45parameters;;
let rec compile = fun file_45entries module_45name parameters -> (match parameters with (CCompilerParameters (as_45minimal,use_45stdlib)) -> (match (parse_45source_45files (internal_45symbols ()) (_or (not (perform_45transformations_63 ())) as_45minimal) file_45entries) with (CResult (definitions)) -> (result_45return (generate_45source module_45name definitions)) | (CError (error)) -> (result_45error error)));;
type ('Titerator,'Tstate) event = CEventArguments : (string) list -> ('Titerator,'Tstate) event | CEventReadFiles : (('Titerator) source_45file) list * 'Tstate -> ('Titerator,'Tstate) event;;
type ('Tstate) command = CCommandError : string -> ('Tstate) command | CCommandOutput : string -> ('Tstate) command | CCommandWriteFiles : ((string,string) pair) list -> ('Tstate) command | CCommandReadFiles : (string) list * ((string,string) pair) list * 'Tstate -> ('Tstate) command;;
let rec standard_45library_63 = fun arguments -> (match (dictionary_45get (data_45stdlib ()) arguments) with (CSome (_value)) -> (string_45equal_63 _value (data_45true ())) | CNone -> CTrue);;
let rec minimal_63 = fun arguments -> (match (dictionary_45get (data_45minimal ()) arguments) with (CSome (_value)) -> (string_45equal_63 _value (data_45true ())) | CNone -> CFalse);;
let rec filename_45without_45extension = fun filename -> (match (list_45first (string_45split (46l) filename)) with (CSome (name)) -> name | CNone -> filename);;
let rec filename_45from_45path = fun path -> (match (list_45last (string_45split (47l) path)) with (CSome (filename)) -> filename | CNone -> path);;
let rec module_45name_45and_45path = fun path -> (CPair ((filename_45without_45extension (filename_45from_45path path)),path));;
let rec standard_45library_45files = fun data_45path -> (CCons ((string_45join (data_45slash ()) (CCons (data_45path,(CCons ((data_45standard_45library_45filename ()),CEmpty))))),(CCons ((string_45join (data_45slash ()) (CCons (data_45path,(CCons ((data_45pervasives_45filename ()),CEmpty))))),CEmpty))));;
let rec modules_45from_45arguments = fun data_45path arguments -> ((fun _226_156_168x -> ((list_45map module_45name_45and_45path) ((match (standard_45library_63 (dictionary_45of arguments)) with CTrue -> (list_45concat (standard_45library_45files data_45path)) | CFalse -> id) ((list_45map pair_45right) ((list_45filter (_46 (string_45equal_63 (data_45module_45flag ())) pair_45left)) _226_156_168x))))) arguments);;
let rec on_45event = fun data_45path event -> (match event with (CEventArguments (arguments)) -> (match (parse_45arguments arguments) with (CCliArguments (_95,CEmpty)) -> (CCommandError ((data_45no_45input_45files ()))) | (CCliArguments (arguments,input_45files)) -> (CCommandReadFiles (input_45files,(modules_45from_45arguments data_45path arguments),(dictionary_45of arguments))) | (CCliErrorMissingValue (key)) -> (CCommandError (key))) | (CEventReadFiles (file_45entries,arguments)) -> (match (dictionary_45get (data_45output_45key ()) arguments) with (CSome (output_45path)) -> (match (compile file_45entries (filename_45without_45extension (filename_45from_45path output_45path)) (CCompilerParameters ((minimal_63 arguments),(standard_45library_63 arguments)))) with (CResult (source)) -> (CCommandWriteFiles ((CCons ((CPair (output_45path,source)),CEmpty)))) | (CError (error)) -> (CCommandError (error))) | CNone -> (CCommandError ((data_45no_45output_45path ())))));;