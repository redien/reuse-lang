open Reuse;;
let rec whitespace_63 = fun character -> (match character with 32l -> CTrue | 13l -> CTrue | 9l -> CTrue | 10l -> CTrue | _95 -> CFalse);;
let rec atom_45character_63 = fun character -> (match character with 40l -> CFalse | 41l -> CFalse | _95 -> (not (whitespace_63 character)));;
type range = CRange : int32 * int32 -> range;;
type sexp = CSymbol : string * range -> sexp | CInteger : int32 * range -> sexp | CList : (sexp) list * range -> sexp;;
type parse_45error = CParseErrorTooFewClosingBrackets | CParseErrorTooManyClosingBrackets;;
let rec symbol_45range = fun start _end -> (CRange ((indexed_45iterator_45index start),(indexed_45iterator_45index _end)));;
let rec parse_45symbol = fun iterator _end next -> (match (string_45collect_45from_45indexed_45iterator atom_45character_63 iterator) with (CPair (next_45iterator,name)) -> (match (string_45to_45int32 name) with (CSome (integer)) -> (next next_45iterator (CInteger (integer,(symbol_45range iterator next_45iterator)))) | CNone -> (match (string_45empty_63 name) with CFalse -> (next next_45iterator (CSymbol (name,(symbol_45range iterator next_45iterator)))) | CTrue -> (_end iterator))));;
let rec list_45range = fun start _end -> (CRange ((Int32.sub (indexed_45iterator_45index start) (1l)),(indexed_45iterator_45index _end)));;
let rec parse_45list = fun iterator parse_45sexps error next -> (parse_45sexps iterator CEmpty error (fun next_45iterator expressions -> (next next_45iterator (CList (expressions,(list_45range iterator next_45iterator))))));;
let rec parse_45expression = fun depth iterator parse_45sexps error _end next -> (match (indexed_45iterator_45next iterator) with (CPair (CNone,_95)) -> (match depth with 0l -> (_end iterator) | _95 -> (error CParseErrorTooFewClosingBrackets)) | (CPair ((CSome (40l)),next_45iterator)) -> (parse_45list next_45iterator (parse_45sexps (Int32.add depth (1l))) error next) | (CPair ((CSome (41l)),next_45iterator)) -> (match depth with 0l -> (error CParseErrorTooManyClosingBrackets) | _95 -> (_end next_45iterator)) | (CPair ((CSome (x)),next_45iterator)) -> (match (whitespace_63 x) with CTrue -> (parse_45expression depth next_45iterator parse_45sexps error _end next) | CFalse -> (parse_45symbol iterator _end next)));;
let rec parse_45sexps = fun depth iterator expressions error _end -> (parse_45expression depth iterator parse_45sexps error (fun iterator -> (_end iterator (list_45reverse expressions))) (fun iterator result -> (parse_45sexps depth iterator (CCons (result,expressions)) error _end)));;
let rec parse = fun iterator -> (parse_45sexps (0l) iterator CEmpty (fun error -> (CError (error))) (fun _95 expressions -> (CResult (expressions))));;
let rec wrap_45in_45brackets = fun string -> (string_45concat (string_45of_45char (40l)) (string_45concat string (string_45of_45char (41l))));;
let rec stringify_45sexp = fun stringify expression -> (match expression with (CSymbol (name,_95)) -> name | (CInteger (integer,_95)) -> (string_45from_45int32 integer) | (CList (expressions,_95)) -> (wrap_45in_45brackets (stringify expressions)));;
let rec stringify = fun expressions -> (string_45join (string_45of_45char (32l)) (list_45map (stringify_45sexp stringify) expressions));;
type ('Tmeta) ast_45type = CSimpleType : string * 'Tmeta -> ('Tmeta) ast_45type | CComplexType : string * (('Tmeta) ast_45type) list * 'Tmeta -> ('Tmeta) ast_45type | CFunctionType : (('Tmeta) ast_45type) list * ('Tmeta) ast_45type * 'Tmeta -> ('Tmeta) ast_45type;;
type ('Tmeta) type_45parameter = CUniversalParameter : string * 'Tmeta -> ('Tmeta) type_45parameter | CExistentialParameter : string * 'Tmeta -> ('Tmeta) type_45parameter;;
type ('Tmeta) constructor = CSimpleConstructor : string * 'Tmeta -> ('Tmeta) constructor | CComplexConstructor : string * (('Tmeta) ast_45type) list * 'Tmeta -> ('Tmeta) constructor;;
type ('Tmeta) pattern = CCapture : string * 'Tmeta -> ('Tmeta) pattern | CIntegerPattern : int32 * 'Tmeta -> ('Tmeta) pattern | CConstructorPattern : string * (('Tmeta) pattern) list * 'Tmeta -> ('Tmeta) pattern;;
type ('Tmeta) expression = CIntegerConstant : int32 * 'Tmeta -> ('Tmeta) expression | CIdentifier : string * 'Tmeta -> ('Tmeta) expression | CLambda : (string) list * ('Tmeta) expression * 'Tmeta -> ('Tmeta) expression | CMatch : ('Tmeta) expression * ((('Tmeta) pattern,('Tmeta) expression) pair) list * 'Tmeta -> ('Tmeta) expression | CConstructor : string * (('Tmeta) expression) list * 'Tmeta -> ('Tmeta) expression | CFunctionApplication : (('Tmeta) expression) list * 'Tmeta -> ('Tmeta) expression;;
type ('Ta,'Tb) definition = CTypeDefinition : string * (('Ta) type_45parameter) list * (('Ta) constructor) list * 'Tb -> ('Ta,'Tb) definition | CFunctionDefinition : string * (string) list * ('Ta) expression * 'Tb -> ('Ta,'Tb) definition;;
let rec definition_45meta = fun definition -> (match definition with (CTypeDefinition (_95,_95_95,_95_95_95,meta)) -> meta | (CFunctionDefinition (_95,_95_95,_95_95_95,meta)) -> meta);;
let rec definition_45name = fun definition -> (match definition with (CTypeDefinition (name,_95,_95_95,_95_95_95)) -> name | (CFunctionDefinition (name,_95,_95_95,_95_95_95)) -> name);;
let rec over_45match_45pair_45expression = fun f pair -> (match pair with (CPair (pattern,expression)) -> (result_45bind (f expression) (fun expression -> (result_45return (CPair (pattern,expression))))));;
let rec over_45match_45pair_45expressions = fun over_45subexpressions f pairs -> (result_45concat (list_45map (over_45match_45pair_45expression (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x)))) pairs));;
let rec over_45subexpressions = fun f expression -> (result_45bind (f expression) (fun expression -> (match expression with (CLambda (arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45return (CLambda (arguments,expression,range))))))) | (CMatch (expression,pairs,range)) -> (result_45bind (f expression) (fun expression -> (result_45bind (over_45subexpressions f expression) (fun expression -> (result_45bind (over_45match_45pair_45expressions over_45subexpressions f pairs) (fun pairs -> (result_45return (CMatch (expression,pairs,range))))))))) | (CConstructor (name,expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CConstructor (name,expressions,range))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (fun _226_156_168x -> ((result_45flatmap (over_45subexpressions f)) (f _226_156_168x))) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | _95 -> (result_45return expression))));;
let rec over_45definition_45expressions = fun f definition -> (match definition with (CFunctionDefinition (name,arguments,expression,range)) -> (result_45bind (f expression) (fun expression -> (result_45return (CFunctionDefinition (name,arguments,expression,range))))) | _95 -> (result_45return definition));;
let rec over_45function_45application = fun f expression -> (match expression with (CFunctionApplication (expressions,range)) -> (f expressions range) | _95 -> (result_45return expression));;
let rec over_45identifiers = fun f expression -> (match expression with (CIdentifier (name,range)) -> (result_45bind (f name) (fun name -> (result_45return (CIdentifier (name,range))))) | (CLambda (arguments,expression,range)) -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45bind (result_45concat (list_45map f arguments)) (fun arguments -> (result_45return (CLambda (arguments,expression,range))))))) | (CConstructor (name,CEmpty,range)) -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,CEmpty,range))))) | (CConstructor (name,expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45bind (f name) (fun name -> (result_45return (CConstructor (name,expressions,range))))))) | (CFunctionApplication (expressions,range)) -> (result_45bind (result_45concat (list_45map (over_45identifiers f) expressions)) (fun expressions -> (result_45return (CFunctionApplication (expressions,range))))) | (CMatch (expression,rules,range)) -> (result_45bind (result_45concat (list_45map (over_45match_45pair_45expression (over_45identifiers f)) rules)) (fun rules -> (result_45bind (over_45identifiers f expression) (fun expression -> (result_45return (CMatch (expression,rules,range))))))) | _95 -> (result_45return expression));;
let rec ast_45pattern_45map_45meta = fun f pattern -> (match pattern with (CConstructorPattern (name,patterns,meta)) -> (CConstructorPattern (name,(list_45map (ast_45pattern_45map_45meta f) patterns),(f meta))) | (CIntegerPattern (_value,meta)) -> (CIntegerPattern (_value,(f meta))) | (CCapture (name,meta)) -> (CCapture (name,(f meta))));;
let rec ast_45match_45pair_45map_45meta = fun ast_45expression_45map_45meta f pair -> (match pair with (CPair (pattern,expression)) -> (CPair ((ast_45pattern_45map_45meta f pattern),(ast_45expression_45map_45meta f expression))));;
let rec ast_45expression_45map_45meta = fun f expression -> (match expression with (CIntegerConstant (integer,meta)) -> (CIntegerConstant (integer,(f meta))) | (CIdentifier (identifier,meta)) -> (CIdentifier (identifier,(f meta))) | (CLambda (arguments,expression,meta)) -> (CLambda (arguments,(ast_45expression_45map_45meta f expression),(f meta))) | (CMatch (expression,pairs,meta)) -> (CMatch ((ast_45expression_45map_45meta f expression),(list_45map (ast_45match_45pair_45map_45meta ast_45expression_45map_45meta f) pairs),(f meta))) | (CConstructor (name,parameters,meta)) -> (CConstructor (name,(list_45map (ast_45expression_45map_45meta f) parameters),(f meta))) | (CFunctionApplication (parameters,meta)) -> (CFunctionApplication ((list_45map (ast_45expression_45map_45meta f) parameters),(f meta))));;
let rec data_45def = fun () -> (string_45from_45list (CCons ((100l),(CCons ((101l),(CCons ((102l),CEmpty)))))));;
let rec data_45typ = fun () -> (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),CEmpty)))))));;
let rec data_45fn = fun () -> (string_45from_45list (CCons ((102l),(CCons ((110l),CEmpty)))));;
let rec data_45match = fun () -> (string_45from_45list (CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),CEmpty)))))))))));;
let rec data_45exists = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((115l),CEmpty)))))))))))));;
type language = CEnglish;;
let rec i18n_45error_45range_45to_45string = fun language range -> (match range with (CRange (start,_end)) -> (string_45concat (string_45from_45list (CCons ((32l),(CCons ((97l),(CCons ((116l),(CCons ((32l),CEmpty))))))))) (string_45concat (string_45from_45int32 start) (string_45concat (string_45from_45list (CCons ((45l),CEmpty))) (string_45from_45int32 _end)))));;
let rec i18n_45malformed_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((79l),(CCons ((110l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((45l),(CCons ((32l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((97l),(CCons ((110l),(CCons ((32l),(CCons ((98l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((112l),(CCons ((32l),(CCons ((108l),(CCons ((101l),(CCons ((118l),(CCons ((101l),(CCons ((108l),(CCons ((32l),(CCons ((111l),(CCons ((102l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((89l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((110l),(CCons ((101l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((97l),(CCons ((112l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((46l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((40l),(CCons ((97l),(CCons ((114l),(CCons ((103l),(CCons ((117l),(CCons ((109l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((115l),(CCons ((41l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45definition_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((73l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((110l),(CCons ((107l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((119l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((32l),(CCons ((119l),(CCons ((114l),(CCons ((105l),(CCons ((116l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((32l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((44l),(CCons ((32l),(CCons ((98l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((105l),(CCons ((116l),(CCons ((32l),(CCons ((100l),(CCons ((111l),(CCons ((101l),(CCons ((115l),(CCons ((110l),(CCons ((39l),(CCons ((116l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((105l),(CCons ((103l),(CCons ((104l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((97l),(CCons ((112l),(CCons ((101l),(CCons ((46l),(CCons ((32l),(CCons ((73l),(CCons ((116l),(CCons ((32l),(CCons ((115l),(CCons ((104l),(CCons ((111l),(CCons ((117l),(CCons ((108l),(CCons ((100l),(CCons ((32l),(CCons ((108l),(CCons ((111l),(CCons ((111l),(CCons ((107l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((110l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((45l),(CCons ((111l),(CCons ((102l),(CCons ((45l),(CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((32l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((79l),(CCons ((102l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45function_45name_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((70l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((78l),(CCons ((97l),(CCons ((109l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((69l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45match_45expression_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((120l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((105l),(CCons ((111l),(CCons ((110l),(CCons ((32l),(CCons ((105l),(CCons ((115l),(CCons ((32l),(CCons ((110l),(CCons ((111l),(CCons ((116l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((44l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((115l),(CCons ((117l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((32l),(CCons ((104l),(CCons ((97l),(CCons ((118l),(CCons ((101l),(CCons ((32l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((114l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((116l),(CCons ((108l),(CCons ((121l),(CCons ((32l),(CCons ((115l),(CCons ((111l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((116l),(CCons ((32l),(CCons ((97l),(CCons ((108l),(CCons ((108l),(CCons ((32l),(CCons ((121l),(CCons ((111l),(CCons ((117l),(CCons ((114l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((114l),(CCons ((117l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((32l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((101l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((105l),(CCons ((114l),(CCons ((115l),(CCons ((32l),(CCons ((108l),(CCons ((105l),(CCons ((107l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((105l),(CCons ((115l),(CCons ((58l),(CCons ((10l),(CCons ((10l),(CCons ((40l),(CCons ((109l),(CCons ((97l),(CCons ((116l),(CCons ((99l),(CCons ((104l),(CCons ((32l),(CCons ((101l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((49l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((49l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((116l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((50l),(CCons ((32l),(CCons ((32l),(CCons ((101l),(CCons ((50l),(CCons ((10l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((32l),(CCons ((46l),(CCons ((46l),(CCons ((46l),(CCons ((41l),(CCons ((10l),(CCons ((10l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45symbol_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45constructor_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45type_45error = fun language range -> (string_45concat (string_45from_45list (CCons ((77l),(CCons ((97l),(CCons ((108l),(CCons ((102l),(CCons ((111l),(CCons ((114l),(CCons ((109l),(CCons ((101l),(CCons ((100l),(CCons ((84l),(CCons ((121l),(CCons ((112l),(CCons ((101l),(CCons ((69l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),CEmpty))))))))))))))))))))))))))))))))))))) (i18n_45error_45range_45to_45string language range));;
let rec i18n_45malformed_45sexp_45too_45few_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((102l),(CCons ((101l),(CCons ((119l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec i18n_45malformed_45sexp_45too_45many_45closing_45brackets = fun language -> (string_45from_45list (CCons ((84l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((111l),(CCons ((111l),(CCons ((32l),(CCons ((109l),(CCons ((97l),(CCons ((110l),(CCons ((121l),(CCons ((32l),(CCons ((99l),(CCons ((108l),(CCons ((111l),(CCons ((115l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((32l),(CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((110l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec char_45is_45upper_45case_63 = fun char -> (_and (_62_61 char (65l)) (_60_61 char (90l)));;
let rec name_45of_45constructor_63 = fun name -> (match (string_45first name) with (CSome (first_45letter)) -> (char_45is_45upper_45case_63 first_45letter) | CNone -> CFalse);;
type error = CMalformedDefinitionError : range -> error | CMalformedTypeDefinitionError : range -> error | CMalformedFunctionDefinitionError : range -> error | CMalformedFunctionNameError : range -> error | CMalformedExpressionError : range -> error | CMalformedMatchExpressionError : range -> error | CMalformedSymbolError : range -> error | CMalformedConstructorError : range -> error | CMalformedTypeError : range -> error | CMalformedSexpTooFewClosingBrackets | CMalformedSexpTooManyClosingBrackets;;
let rec error_45to_45string = fun error -> (match error with (CMalformedDefinitionError (range)) -> (i18n_45malformed_45definition_45error CEnglish range) | (CMalformedFunctionDefinitionError (range)) -> (i18n_45malformed_45function_45definition_45error CEnglish range) | (CMalformedTypeDefinitionError (range)) -> (i18n_45malformed_45type_45definition_45error CEnglish range) | (CMalformedFunctionNameError (range)) -> (i18n_45malformed_45function_45name_45error CEnglish range) | (CMalformedExpressionError (range)) -> (i18n_45malformed_45expression_45error CEnglish range) | (CMalformedMatchExpressionError (range)) -> (i18n_45malformed_45match_45expression_45error CEnglish range) | (CMalformedSymbolError (range)) -> (i18n_45malformed_45symbol_45error CEnglish range) | (CMalformedConstructorError (range)) -> (i18n_45malformed_45constructor_45error CEnglish range) | (CMalformedTypeError (range)) -> (i18n_45malformed_45type_45error CEnglish range) | CMalformedSexpTooFewClosingBrackets -> (i18n_45malformed_45sexp_45too_45few_45closing_45brackets CEnglish) | CMalformedSexpTooManyClosingBrackets -> (i18n_45malformed_45sexp_45too_45many_45closing_45brackets CEnglish));;
let rec symbol_45to_45string = fun symbol -> (match symbol with (CSymbol (name,_95)) -> (CResult (name)) | (CInteger (_95,range)) -> (CError ((CMalformedSymbolError (range)))) | (CList (_95,range)) -> (CError ((CMalformedSymbolError (range)))));;
let rec sexp_45to_45complex_45type = fun sexp_45to_45types _95 name parameters range -> (result_45bind (sexp_45to_45types parameters) (fun sub_45types -> (result_45return (CComplexType (name,sub_45types,range)))));;
let rec sexp_45to_45function_45type = fun sexp_45to_45types sexp_45to_45type name parameters range -> (match parameters with (CCons ((CList (arg_45types,_95)),(CCons (return_45type,CEmpty)))) -> (result_45bind (sexp_45to_45types arg_45types) (fun arg_45types -> (result_45bind (sexp_45to_45type return_45type) (fun return_45type -> (result_45return (CFunctionType (arg_45types,return_45type,range))))))) | _95 -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45complex_45or_45function_45type = fun name -> (match (string_45equal_63 name (data_45fn ())) with CTrue -> sexp_45to_45function_45type | CFalse -> sexp_45to_45complex_45type);;
let rec sexp_45to_45type = fun sexp_45to_45types _type -> (match _type with (CList ((CCons ((CSymbol (name,_95)),parameters)),range)) -> ((sexp_45to_45complex_45or_45function_45type name) sexp_45to_45types (sexp_45to_45type sexp_45to_45types) name parameters range) | (CSymbol (name,range)) -> (CResult ((CSimpleType (name,range)))) | (CInteger (_95,range)) -> (CError ((CMalformedTypeError (range)))) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45types = fun types -> (result_45concat (list_45map (sexp_45to_45type sexp_45to_45types) types));;
let rec sexp_45to_45complex_45constructor = fun name types range -> (result_45bind (sexp_45to_45types types) (fun types -> (result_45return (CComplexConstructor (name,types,range)))));;
let rec sexp_45to_45constructor_45definition = fun constructor -> (match constructor with (CSymbol (name,range)) -> (CResult ((CSimpleConstructor (name,range)))) | (CList ((CCons ((CSymbol (name,_95)),types)),range)) -> (sexp_45to_45complex_45constructor name types range) | (CInteger (_95,range)) -> (CError ((CMalformedConstructorError (range)))) | (CList (_95,range)) -> (CError ((CMalformedConstructorError (range)))));;
let rec sexp_45to_45constructor_45definitions = fun constructors -> (result_45concat (list_45map sexp_45to_45constructor_45definition constructors));;
let rec sexp_45to_45type_45parameter = fun sexp -> (match sexp with (CList ((CCons (_95,(CCons ((CSymbol (name,range)),CEmpty)))),_95_95)) -> (CResult ((CExistentialParameter (name,range)))) | (CSymbol (name,range)) -> (CResult ((CUniversalParameter (name,range)))) | (CInteger (_95,range)) -> (CError ((CMalformedDefinitionError (range)))) | (CList (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexp_45to_45type_45parameters = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (_95,_95_95)),parameters)),_95_95_95)) -> (result_45concat (list_45map sexp_45to_45type_45parameter parameters)) | (CSymbol (_95,_95_95)) -> (CResult (CEmpty)) | (CInteger (_95,range)) -> (CError ((CMalformedTypeError (range)))) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45name = fun type_45name -> (match type_45name with (CList ((CCons ((CSymbol (name,_95)),_95_95)),_95_95_95)) -> (CResult (name)) | (CSymbol (name,_95)) -> (CResult (name)) | (CInteger (_95,range)) -> (CError ((CMalformedTypeError (range)))) | (CList (_95,range)) -> (CError ((CMalformedTypeError (range)))));;
let rec sexp_45to_45type_45definition = fun type_45name constructors range -> (result_45bind (sexp_45to_45type_45name type_45name) (fun name -> (result_45bind (sexp_45to_45type_45parameters type_45name) (fun parameters -> (result_45bind (sexp_45to_45constructor_45definitions constructors) (fun constructors -> (result_45return (CTypeDefinition (name,parameters,constructors,range)))))))));;
let rec sexp_45to_45arguments = fun arguments -> (result_45concat (list_45map symbol_45to_45string arguments));;
let rec sexp_45to_45function_45body = fun range rest -> (match rest with (CCons ((CList (arguments,_95)),(CCons (expression,CEmpty)))) -> (CResult ((CPair (arguments,expression)))) | _95 -> (CError ((CMalformedFunctionDefinitionError (range)))));;
let rec sexp_45to_45lambda = fun sexp_45to_45expression rest range -> (result_45bind (sexp_45to_45function_45body range rest) (fun body -> (result_45bind (sexp_45to_45arguments (pair_45left body)) (fun arguments -> (result_45bind (sexp_45to_45expression (pair_45right body)) (fun expression -> (result_45return (CLambda (arguments,expression,range)))))))));;
let rec sexp_45to_45function_45application = fun sexp_45to_45expression range expressions -> ((fun _226_156_168x -> ((result_45map (fun expressions -> (CFunctionApplication (expressions,range)))) (result_45concat ((list_45map sexp_45to_45expression) _226_156_168x)))) expressions);;
let rec to_45constructor_45or_45capture = fun range name -> (match (name_45of_45constructor_63 name) with CTrue -> (CResult ((CConstructorPattern (name,CEmpty,range)))) | CFalse -> (CResult ((CCapture (name,range)))));;
let rec sexp_45to_45pattern = fun sexp -> (match sexp with (CList ((CCons (name,rest)),range)) -> (result_45bind (result_45concat (list_45map sexp_45to_45pattern rest)) (fun patterns -> (result_45bind (symbol_45to_45string name) (fun name -> (result_45return (CConstructorPattern (name,patterns,range))))))) | (CList (CEmpty,range)) -> (CError ((CMalformedExpressionError (range)))) | (CInteger (integer,range)) -> (CResult ((CIntegerPattern (integer,range)))) | (CSymbol (name,range)) -> (to_45constructor_45or_45capture range name));;
let rec sexp_45to_45match_45pair = fun sexp_45to_45expression pair -> (match pair with (CPair (pattern,expression)) -> (result_45bind (sexp_45to_45pattern pattern) (fun pattern -> (result_45bind (sexp_45to_45expression expression) (fun expression -> (result_45return (CPair (pattern,expression))))))));;
let rec collect_45pairs = fun list -> (match list with (CCons (a,(CCons (b,rest)))) -> (maybe_45map (fun more_45pairs -> (CCons ((CPair (a,b)),more_45pairs))) (collect_45pairs rest)) | CEmpty -> (CSome (CEmpty)) | _95 -> CNone);;
let rec sexp_45to_45match_45pairs = fun sexp_45to_45expression range pairs -> ((fun _226_156_168x -> ((result_45flatmap (fun _226_156_168x -> (result_45concat ((list_45map (sexp_45to_45match_45pair sexp_45to_45expression)) _226_156_168x)))) ((result_45of_45maybe (CMalformedMatchExpressionError (range))) ((fun pairs -> (match pairs with (CSome (CEmpty)) -> CNone | other -> other)) (collect_45pairs _226_156_168x))))) pairs);;
let rec sexp_45to_45match = fun sexp_45to_45expression range rest -> (match rest with (CCons (expression,rest)) -> (result_45bind (sexp_45to_45expression expression) (fun expression -> (result_45bind (sexp_45to_45match_45pairs sexp_45to_45expression range rest) (fun pairs -> (result_45return (CMatch (expression,pairs,range))))))) | _95 -> (CError ((CMalformedExpressionError (range)))));;
let rec sexp_45to_45constructor = fun sexp_45to_45expression range name rest -> (result_45bind (result_45concat (list_45map sexp_45to_45expression rest)) (fun expressions -> (result_45return (CConstructor (name,expressions,range)))));;
let rec sexp_45to_45list_45expression = fun sexp_45to_45expression expressions range -> (match expressions with (CCons ((CSymbol (symbol,_95)),rest)) -> (match (string_45equal_63 symbol (data_45fn ())) with CTrue -> (sexp_45to_45lambda sexp_45to_45expression rest range) | CFalse -> (match (string_45equal_63 symbol (data_45match ())) with CTrue -> (sexp_45to_45match sexp_45to_45expression range rest) | CFalse -> (match (name_45of_45constructor_63 symbol) with CTrue -> (sexp_45to_45constructor sexp_45to_45expression range symbol rest) | CFalse -> (sexp_45to_45function_45application sexp_45to_45expression range expressions)))) | _95 -> (sexp_45to_45function_45application sexp_45to_45expression range expressions));;
let rec sexp_45to_45expression = fun sexp -> (match sexp with (CInteger (integer,range)) -> (CResult ((CIntegerConstant (integer,range)))) | (CSymbol (symbol_45name,range)) -> (match (name_45of_45constructor_63 symbol_45name) with CTrue -> (CResult ((CConstructor (symbol_45name,CEmpty,range)))) | CFalse -> (CResult ((CIdentifier (symbol_45name,range))))) | (CList (expressions,range)) -> (match expressions with CEmpty -> (CError ((CMalformedExpressionError (range)))) | _95 -> (sexp_45to_45list_45expression sexp_45to_45expression expressions range)));;
let rec sexp_45to_45function_45definition = fun name_45symbol rest range constructor -> (result_45bind (sexp_45to_45function_45body range rest) (fun body -> (result_45bind (sexp_45to_45arguments (pair_45left body)) (fun arguments -> (result_45bind (sexp_45to_45expression (pair_45right body)) (fun expression -> (result_45bind (symbol_45to_45string name_45symbol) (fun name -> (result_45return (constructor name arguments expression range))))))))));;
let rec sexp_45to_45definition_39 = fun name rest range kind -> (match (string_45equal_63 kind (data_45typ ())) with CTrue -> (sexp_45to_45type_45definition name rest range) | CFalse -> (match (string_45equal_63 kind (data_45def ())) with CTrue -> (sexp_45to_45function_45definition name rest range (fun name arguments expression range -> (CFunctionDefinition (name,arguments,expression,range)))) | CFalse -> (CError ((CMalformedDefinitionError (range))))));;
let rec specific_45malformed_45definition_45error = fun kind range -> (match (string_45equal_63 kind (data_45typ ())) with CTrue -> (CError ((CMalformedTypeDefinitionError (range)))) | CFalse -> (match (string_45equal_63 kind (data_45def ())) with CTrue -> (CError ((CMalformedFunctionDefinitionError (range)))) | CFalse -> (CError ((CMalformedDefinitionError (range))))));;
let rec sexp_45to_45definition = fun expression -> (match expression with (CList ((CCons ((CSymbol (kind,_95)),CEmpty)),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons ((CSymbol (kind,_95)),(CCons (_95_95,CEmpty)))),range)) -> (specific_45malformed_45definition_45error kind range) | (CList ((CCons (kind,(CCons (name,rest)))),range)) -> (result_45flatmap (sexp_45to_45definition_39 name rest range) (symbol_45to_45string kind)) | (CList ((CCons ((CList (_95,range)),CEmpty)),_95_95)) -> (CError ((CMalformedDefinitionError (range)))) | (CList (_95,range)) -> (CError ((CMalformedDefinitionError (range)))) | (CInteger (_95,range)) -> (CError ((CMalformedDefinitionError (range)))) | (CSymbol (_95,range)) -> (CError ((CMalformedDefinitionError (range)))));;
let rec sexp_45error_45to_45ast_45error = fun error -> (match error with CParseErrorTooFewClosingBrackets -> CMalformedSexpTooFewClosingBrackets | CParseErrorTooManyClosingBrackets -> CMalformedSexpTooManyClosingBrackets);;
let rec sexps_45to_45definitions = fun expressions -> (match expressions with (CResult (expressions)) -> (list_45map sexp_45to_45definition expressions) | (CError (error)) -> (CCons ((CError ((sexp_45error_45to_45ast_45error error))),CEmpty)));;
let rec type_45to_45sexp = fun types_45to_45sexp _type -> (match _type with (CSimpleType (name,range)) -> (CSymbol (name,range)) | (CFunctionType (arg_45types,return_45type,range)) -> (CList ((CCons ((CSymbol ((data_45fn ()),range)),(CCons ((CList ((types_45to_45sexp arg_45types),range)),(CCons ((type_45to_45sexp types_45to_45sexp return_45type),CEmpty)))))),range)) | (CComplexType (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec types_45to_45sexp = fun types -> (list_45map (type_45to_45sexp types_45to_45sexp) types);;
let rec constructor_45to_45sexp = fun constructor -> (match constructor with (CSimpleConstructor (name,range)) -> (CSymbol (name,range)) | (CComplexConstructor (name,types,range)) -> (CList ((CCons ((CSymbol (name,range)),(types_45to_45sexp types))),range)));;
let rec constructors_45to_45sexp = fun constructors -> (list_45map constructor_45to_45sexp constructors);;
let rec type_45parameter_45to_45sexp = fun parameter -> (match parameter with (CExistentialParameter (name,range)) -> (CList ((CCons ((CSymbol ((data_45exists ()),range)),(CCons ((CSymbol (name,range)),CEmpty)))),range)) | (CUniversalParameter (name,range)) -> (CSymbol (name,range)));;
let rec type_45name_45to_45sexp = fun range name parameters -> (match parameters with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map type_45parameter_45to_45sexp parameters))),range)));;
let rec type_45definition_45to_45sexp = fun name parameters constructors range -> (CList ((list_45concat (CCons ((CSymbol ((data_45typ ()),range)),(CCons ((type_45name_45to_45sexp range name parameters),CEmpty)))) (constructors_45to_45sexp constructors)),range));;
let rec function_45arguments_45to_45sexp = fun arguments range -> (CList ((list_45map (fun name -> (CSymbol (name,range))) arguments),range));;
let rec pattern_45to_45sexp = fun pattern -> (match pattern with (CConstructorPattern (name,CEmpty,range)) -> (CSymbol (name,range)) | (CConstructorPattern (name,patterns,range)) -> (CList ((CCons ((CSymbol (name,range)),(list_45map pattern_45to_45sexp patterns))),range)) | (CIntegerPattern (_value,range)) -> (CInteger (_value,range)) | (CCapture (name,range)) -> (CSymbol (name,range)));;
let rec match_45pair_45to_45sexp = fun expression_45to_45sexp pair -> (match pair with (CPair (pattern,expression)) -> (CCons ((pattern_45to_45sexp pattern),(CCons ((expression_45to_45sexp expression),CEmpty)))));;
let rec expression_45to_45sexp = fun expression -> (match expression with (CIntegerConstant (integer,range)) -> (CInteger (integer,range)) | (CIdentifier (string,range)) -> (CSymbol (string,range)) | (CLambda (arguments,expression,range)) -> (CList ((CCons ((CSymbol ((data_45fn ()),range)),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))),range)) | (CMatch (expression,pairs,range)) -> (CList ((CCons ((CSymbol ((data_45match ()),range)),(CCons ((expression_45to_45sexp expression),(list_45flatmap (match_45pair_45to_45sexp expression_45to_45sexp) pairs))))),range)) | (CConstructor (name,expressions,range)) -> (match expressions with CEmpty -> (CSymbol (name,range)) | _95 -> (CList ((CCons ((CSymbol (name,range)),(list_45map expression_45to_45sexp expressions))),range))) | (CFunctionApplication (expressions,range)) -> (CList ((list_45map expression_45to_45sexp expressions),range)));;
let rec function_45definition_45to_45sexp = fun name arguments expression range kind -> (CList ((CCons ((CSymbol (kind,range)),(CCons ((CSymbol (name,range)),(CCons ((function_45arguments_45to_45sexp arguments range),(CCons ((expression_45to_45sexp expression),CEmpty)))))))),range));;
let rec definition_45to_45sexp = fun definition -> (match definition with (CTypeDefinition (name,parameters,constructors,range)) -> (type_45definition_45to_45sexp name parameters constructors range) | (CFunctionDefinition (name,arguments,expression,range)) -> (function_45definition_45to_45sexp name arguments expression range (data_45def ())));;
let rec error_45to_45sexp = fun error -> (CSymbol ((error_45to_45string error),(CRange ((0l),(0l)))));;
let rec render_45result = fun result -> (match result with (CResult (sexp)) -> sexp | (CError (sexp)) -> sexp);;
let rec definitions_45to_45sexps = fun definitions -> (list_45map (fun _226_156_168x -> (render_45result ((result_45map_45error error_45to_45sexp) ((result_45map definition_45to_45sexp) _226_156_168x)))) definitions);;
let rec data_45double_45dash = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),CEmpty)))));;
type cli_45arguments = CCliArguments : ((string,string) pair) list * (string) list -> cli_45arguments | CCliErrorMissingValue : string -> cli_45arguments;;
let rec is_45key_63 = fun argument -> (string_45equal_63 (data_45double_45dash ()) (string_45take (2l) argument));;
let rec parse_45arguments_39 = fun arguments kv_45args inputs -> (match arguments with (CCons (first,(CCons (second,rest)))) -> (match (is_45key_63 first) with CTrue -> (parse_45arguments_39 (list_45rest (list_45rest arguments)) (CCons ((CPair (first,second)),kv_45args)) inputs) | CFalse -> (parse_45arguments_39 (list_45rest arguments) kv_45args (CCons (first,inputs)))) | (CCons (first,CEmpty)) -> (match (is_45key_63 first) with CTrue -> (CCliErrorMissingValue (first)) | CFalse -> (CCliArguments (kv_45args,(CCons (first,inputs))))) | CEmpty -> (CCliArguments (kv_45args,inputs)));;
let rec parse_45arguments = fun arguments -> (parse_45arguments_39 arguments CEmpty CEmpty);;
let rec parts_45are_45empty_63 = fun parts -> (match parts with CEmpty -> CTrue | (CCons (part,CEmpty)) -> (string_45empty_63 part) | _95 -> CFalse);;
let rec transform_45line = fun line -> (match (string_45split (124l) line) with (CCons (name,parts)) -> (string_45concat (string_45from_45list (CCons ((40l),(CCons ((100l),(CCons ((101l),(CCons ((102l),(CCons ((32l),(CCons ((100l),(CCons ((97l),(CCons ((116l),(CCons ((97l),(CCons ((45l),CEmpty))))))))))))))))))))) (string_45concat (string_45trim name) (string_45concat (string_45from_45list (CCons ((32l),(CCons ((40l),(CCons ((41l),(CCons ((32l),(CCons ((40l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((45l),(CCons ((102l),(CCons ((114l),(CCons ((111l),(CCons ((109l),(CCons ((45l),(CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((32l),CEmpty))))))))))))))))))))))))))))))))))))))))))))) (match (parts_45are_45empty_63 parts) with CTrue -> (string_45from_45list (CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),(CCons ((41l),(CCons ((41l),CEmpty))))))))))))))) | CFalse -> (string_45concat (string_45from_45list (CCons ((40l),(CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),(CCons ((32l),CEmpty))))))))))))) (string_45concat (string_45join (string_45of_45char (32l)) (list_45map string_45from_45int32 (string_45to_45list (string_45join (string_45of_45char (124l)) parts)))) (string_45from_45list (CCons ((41l),(CCons ((41l),(CCons ((41l),CEmpty))))))))))))) | CEmpty -> (string_45empty ()));;
let rec string_45gen = fun stdin_45iterator -> (match (string_45collect_45from_45indexed_45iterator (fun _95 -> CTrue) stdin_45iterator) with (CPair (_95,stdin)) -> (CResult ((string_45join (string_45of_45char (10l)) (list_45map transform_45line (string_45split (10l) stdin))))));;
let rec data_45space = fun () -> (string_45from_45list (CCons ((32l),CEmpty)));;
let rec data_45plus = fun () -> (string_45from_45list (CCons ((43l),CEmpty)));;
let rec data_45multiply = fun () -> (string_45from_45list (CCons ((42l),CEmpty)));;
let rec data_45minus = fun () -> (string_45from_45list (CCons ((45l),CEmpty)));;
let rec data_45slash = fun () -> (string_45from_45list (CCons ((47l),CEmpty)));;
let rec data_45percent = fun () -> (string_45from_45list (CCons ((37l),CEmpty)));;
let rec data_45pipe = fun () -> (string_45from_45list (CCons ((112l),(CCons ((105l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;
let rec data_45list = fun () -> (string_45from_45list (CCons ((108l),(CCons ((105l),(CCons ((115l),(CCons ((116l),CEmpty)))))))));;
let rec data_45int32_45less_45than = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((45l),(CCons ((108l),(CCons ((101l),(CCons ((115l),(CCons ((115l),(CCons ((45l),(CCons ((116l),(CCons ((104l),(CCons ((97l),(CCons ((110l),CEmpty)))))))))))))))))))))))))))))));;
let rec data_45parse_45error = fun () -> (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((32l),CEmpty)))))))))))))))))))))))));;
let rec data_45fun = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),CEmpty)))))));;
let rec data_45type = fun () -> (string_45from_45list (CCons ((116l),(CCons ((121l),(CCons ((112l),(CCons ((101l),CEmpty)))))))));;
let rec data_45if = fun () -> (string_45from_45list (CCons ((105l),(CCons ((102l),CEmpty)))));;
let rec data_45then = fun () -> (string_45from_45list (CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45else = fun () -> (string_45from_45list (CCons ((101l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))));;
let rec data_45with = fun () -> (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;
let rec data_45of = fun () -> (string_45from_45list (CCons ((111l),(CCons ((102l),CEmpty)))));;
let rec data_45class = fun () -> (string_45from_45list (CCons ((99l),(CCons ((108l),(CCons ((97l),(CCons ((115l),(CCons ((115l),CEmpty)))))))))));;
let rec data_45end = fun () -> (string_45from_45list (CCons ((101l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;
let rec data_45in = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),CEmpty)))));;
let rec data_45let = fun () -> (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),CEmpty)))))));;
let rec data_45open = fun () -> (string_45from_45list (CCons ((111l),(CCons ((112l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45and = fun () -> (string_45from_45list (CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))));;
let rec data_45or = fun () -> (string_45from_45list (CCons ((111l),(CCons ((114l),CEmpty)))));;
let rec data_45as = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),CEmpty)))));;
let rec data_45less_45than = fun () -> (string_45from_45list (CCons ((60l),CEmpty)));;
let rec data_45assert = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45asr = fun () -> (string_45from_45list (CCons ((97l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;
let rec data_45begin = fun () -> (string_45from_45list (CCons ((98l),(CCons ((101l),(CCons ((103l),(CCons ((105l),(CCons ((110l),CEmpty)))))))))));;
let rec data_45constraint = fun () -> (string_45from_45list (CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((97l),(CCons ((105l),(CCons ((110l),(CCons ((116l),CEmpty)))))))))))))))))))));;
let rec data_45do = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),CEmpty)))));;
let rec data_45done = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((110l),(CCons ((101l),CEmpty)))))))));;
let rec data_45downto = fun () -> (string_45from_45list (CCons ((100l),(CCons ((111l),(CCons ((119l),(CCons ((110l),(CCons ((116l),(CCons ((111l),CEmpty)))))))))))));;
let rec data_45exception = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((99l),(CCons ((101l),(CCons ((112l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))))));;
let rec data_45external = fun () -> (string_45from_45list (CCons ((101l),(CCons ((120l),(CCons ((116l),(CCons ((101l),(CCons ((114l),(CCons ((110l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))))));;
let rec data_45false = fun () -> (string_45from_45list (CCons ((102l),(CCons ((97l),(CCons ((108l),(CCons ((115l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45true = fun () -> (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((101l),CEmpty)))))))));;
let rec data_45for = fun () -> (string_45from_45list (CCons ((102l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;
let rec data_45function = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((105l),(CCons ((111l),(CCons ((110l),CEmpty)))))))))))))))));;
let rec data_45functor = fun () -> (string_45from_45list (CCons ((102l),(CCons ((117l),(CCons ((110l),(CCons ((99l),(CCons ((116l),(CCons ((111l),(CCons ((114l),CEmpty)))))))))))))));;
let rec data_45include = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((99l),(CCons ((108l),(CCons ((117l),(CCons ((100l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45inherit = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((104l),(CCons ((101l),(CCons ((114l),(CCons ((105l),(CCons ((116l),CEmpty)))))))))))))));;
let rec data_45initializer = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((116l),(CCons ((105l),(CCons ((97l),(CCons ((108l),(CCons ((105l),(CCons ((122l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))))))))))))));;
let rec data_45land = fun () -> (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((110l),(CCons ((100l),CEmpty)))))))));;
let rec data_45lazy = fun () -> (string_45from_45list (CCons ((108l),(CCons ((97l),(CCons ((122l),(CCons ((121l),CEmpty)))))))));;
let rec data_45lor = fun () -> (string_45from_45list (CCons ((108l),(CCons ((111l),(CCons ((114l),CEmpty)))))));;
let rec data_45lsl = fun () -> (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((108l),CEmpty)))))));;
let rec data_45lsr = fun () -> (string_45from_45list (CCons ((108l),(CCons ((115l),(CCons ((114l),CEmpty)))))));;
let rec data_45lxor = fun () -> (string_45from_45list (CCons ((108l),(CCons ((120l),(CCons ((111l),(CCons ((114l),CEmpty)))))))));;
let rec data_45method = fun () -> (string_45from_45list (CCons ((109l),(CCons ((101l),(CCons ((116l),(CCons ((104l),(CCons ((111l),(CCons ((100l),CEmpty)))))))))))));;
let rec data_45mod = fun () -> (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),CEmpty)))))));;
let rec data_45module = fun () -> (string_45from_45list (CCons ((109l),(CCons ((111l),(CCons ((100l),(CCons ((117l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))));;
let rec data_45mutable = fun () -> (string_45from_45list (CCons ((109l),(CCons ((117l),(CCons ((116l),(CCons ((97l),(CCons ((98l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45new = fun () -> (string_45from_45list (CCons ((110l),(CCons ((101l),(CCons ((119l),CEmpty)))))));;
let rec data_45nonrec = fun () -> (string_45from_45list (CCons ((110l),(CCons ((111l),(CCons ((110l),(CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))))))))));;
let rec data_45object = fun () -> (string_45from_45list (CCons ((111l),(CCons ((98l),(CCons ((106l),(CCons ((101l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45private = fun () -> (string_45from_45list (CCons ((112l),(CCons ((114l),(CCons ((105l),(CCons ((118l),(CCons ((97l),(CCons ((116l),(CCons ((101l),CEmpty)))))))))))))));;
let rec data_45rec = fun () -> (string_45from_45list (CCons ((114l),(CCons ((101l),(CCons ((99l),CEmpty)))))));;
let rec data_45sig = fun () -> (string_45from_45list (CCons ((115l),(CCons ((105l),(CCons ((103l),CEmpty)))))));;
let rec data_45struct = fun () -> (string_45from_45list (CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((117l),(CCons ((99l),(CCons ((116l),CEmpty)))))))))))));;
let rec data_45try = fun () -> (string_45from_45list (CCons ((116l),(CCons ((114l),(CCons ((121l),CEmpty)))))));;
let rec data_45val = fun () -> (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),CEmpty)))))));;
let rec data_45virtual = fun () -> (string_45from_45list (CCons ((118l),(CCons ((105l),(CCons ((114l),(CCons ((116l),(CCons ((117l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))));;
let rec data_45when = fun () -> (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((101l),(CCons ((110l),CEmpty)))))))));;
let rec data_45while = fun () -> (string_45from_45list (CCons ((119l),(CCons ((104l),(CCons ((105l),(CCons ((108l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45parser = fun () -> (string_45from_45list (CCons ((112l),(CCons ((97l),(CCons ((114l),(CCons ((115l),(CCons ((101l),(CCons ((114l),CEmpty)))))))))))));;
let rec data_45value = fun () -> (string_45from_45list (CCons ((118l),(CCons ((97l),(CCons ((108l),(CCons ((117l),(CCons ((101l),CEmpty)))))))))));;
let rec data_45to = fun () -> (string_45from_45list (CCons ((116l),(CCons ((111l),CEmpty)))));;
let rec data_45error_45reserved_45identifier = fun () -> (string_45from_45list (CCons ((83l),(CCons ((121l),(CCons ((109l),(CCons ((98l),(CCons ((111l),(CCons ((108l),(CCons ((115l),(CCons ((32l),(CCons ((112l),(CCons ((114l),(CCons ((101l),(CCons ((102l),(CCons ((105l),(CCons ((120l),(CCons ((101l),(CCons ((100l),(CCons ((32l),(CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),(CCons ((32l),(CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((32l),(CCons ((97l),(CCons ((114l),(CCons ((101l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((115l),(CCons ((101l),(CCons ((114l),(CCons ((118l),(CCons ((101l),(CCons ((100l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_45sparkle_45x = fun () -> (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),(CCons ((120l),CEmpty)))))))));;
let rec data_45sparkle = fun () -> (string_45from_45list (CCons ((226l),(CCons ((156l),(CCons ((168l),CEmpty)))))));;
let rec data_45Empty = fun () -> (string_45from_45list (CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))));;
let rec data_45Cons = fun () -> (string_45from_45list (CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))));;
let rec data_45no_45input_45files = fun () -> (string_45from_45list (CCons ((78l),(CCons ((111l),(CCons ((32l),(CCons ((105l),(CCons ((110l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((115l),CEmpty)))))))))))))))))))))))))))));;
let rec data_45output_45key = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),CEmpty)))))))))))))))));;
let rec data_45no_45output_45path = fun () -> (string_45from_45list (CCons ((78l),(CCons ((111l),(CCons ((32l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((32l),(CCons ((115l),(CCons ((112l),(CCons ((101l),(CCons ((99l),(CCons ((105l),(CCons ((102l),(CCons ((105l),(CCons ((101l),(CCons ((100l),(CCons ((44l),(CCons ((32l),(CCons ((112l),(CCons ((108l),(CCons ((101l),(CCons ((97l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((117l),(CCons ((115l),(CCons ((101l),(CCons ((32l),(CCons ((116l),(CCons ((104l),(CCons ((101l),(CCons ((32l),(CCons ((45l),(CCons ((45l),(CCons ((111l),(CCons ((117l),(CCons ((116l),(CCons ((112l),(CCons ((117l),(CCons ((116l),(CCons ((32l),(CCons ((91l),(CCons ((102l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((93l),(CCons ((32l),(CCons ((102l),(CCons ((108l),(CCons ((97l),(CCons ((103l),(CCons ((46l),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec data_45stdlib = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((115l),(CCons ((116l),(CCons ((100l),(CCons ((108l),(CCons ((105l),(CCons ((98l),CEmpty)))))))))))))))));;
let rec data_45minimal = fun () -> (string_45from_45list (CCons ((45l),(CCons ((45l),(CCons ((109l),(CCons ((105l),(CCons ((110l),(CCons ((105l),(CCons ((109l),(CCons ((97l),(CCons ((108l),CEmpty)))))))))))))))))));;
let rec data_45strings_45file_45ending = fun () -> (string_45from_45list (CCons ((46l),(CCons ((115l),(CCons ((116l),(CCons ((114l),(CCons ((105l),(CCons ((110l),(CCons ((103l),(CCons ((115l),CEmpty)))))))))))))))));;
let rec data_45 = fun () -> (string_45from_45list CEmpty);;
let rec join = fun list -> (string_45join (string_45empty ()) list);;
let rec not_45empty_63 = fun string -> (not (string_45empty_63 string));;
let rec is_45alphanumeric = fun char -> (_or (_and (_62_61 char (65l)) (_60_61 char (90l))) (_or (_and (_62_61 char (48l)) (_60_61 char (57l))) (_and (_62_61 char (97l)) (_60_61 char (122l)))));;
let rec escape_45char = fun char -> (match (is_45alphanumeric char) with CTrue -> (string_45of_45char char) | CFalse -> (string_45prepend (95l) (string_45from_45int32 char)));;
let rec stringify_45parse_45errors = fun definitions -> (list_45map (result_45map_45error error_45to_45string) definitions);;
let rec expression_45is_45symbol_63 = fun symbol_45name expression -> (match expression with (CIdentifier (name,_95_95)) -> (string_45equal_63 symbol_45name name) | _95 -> CFalse);;
let rec first_45expression_45is_45symbol_63 = fun symbol_45name expressions -> ((fun _226_156_168x -> ((maybe_45else (fun () -> CFalse)) ((maybe_45map (expression_45is_45symbol_63 symbol_45name)) _226_156_168x))) (list_45first expressions));;
let rec symbol_45is_45reserved_63 = fun name -> (string_45equal_63 (string_45substring (0l) (3l) name) (data_45sparkle ()));;
let rec validate_45identifier = fun identifier -> (match (symbol_45is_45reserved_63 identifier) with CTrue -> (result_45error (data_45error_45reserved_45identifier ())) | CFalse -> (result_45lift identifier));;
let rec validate_45reserved_45identifiers = fun definitions -> (list_45map (result_45flatmap (over_45definition_45expressions (over_45identifiers validate_45identifier))) definitions);;
let rec transform_45special_45form = fun symbol_45name transformer definition -> (result_45flatmap (over_45definition_45expressions (over_45subexpressions (over_45function_45application (fun expressions range -> (match (first_45expression_45is_45symbol_63 (symbol_45name ()) expressions) with CTrue -> (result_45lift (transformer (list_45rest expressions) range)) | CFalse -> (result_45lift (CFunctionApplication (expressions,range)))))))) definition);;
let rec transform_45pipe = fun expressions range -> (CLambda ((CCons ((data_45sparkle_45x ()),CEmpty)),(list_45foldl (fun expression composed -> (CFunctionApplication ((CCons (expression,(CCons (composed,CEmpty)))),range))) (CIdentifier ((data_45sparkle_45x ()),range)) expressions),range));;
let rec transform_45list = fun expressions range -> (list_45foldr (fun expression composed -> (CConstructor ((data_45Cons ()),(CCons (expression,(CCons (composed,CEmpty)))),range))) (CConstructor ((data_45Empty ()),CEmpty,range)) expressions);;
let rec local_45transforms = fun definitions -> (list_45map (fun _226_156_168x -> ((transform_45special_45form data_45list transform_45list) ((transform_45special_45form data_45pipe transform_45pipe) _226_156_168x))) definitions);;
let rec data_45compile_45error = fun () -> (string_45from_45list (CCons ((42l),(CCons ((99l),(CCons ((111l),(CCons ((109l),(CCons ((112l),(CCons ((105l),(CCons ((108l),(CCons ((101l),(CCons ((32l),(CCons ((101l),(CCons ((114l),(CCons ((114l),(CCons ((111l),(CCons ((114l),(CCons ((42l),CEmpty)))))))))))))))))))))))))))))));;
let rec data_45arrow = fun () -> (string_45from_45list (CCons ((32l),(CCons ((45l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;
let rec data_45equals = fun () -> (string_45from_45list (CCons ((32l),(CCons ((61l),(CCons ((32l),CEmpty)))))));;
let rec data_45vertical_45bar = fun () -> (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((32l),CEmpty)))))));;
let rec data_45pipe_45operator = fun () -> (string_45from_45list (CCons ((32l),(CCons ((124l),(CCons ((62l),(CCons ((32l),CEmpty)))))))));;
let rec data_45colon = fun () -> (string_45from_45list (CCons ((32l),(CCons ((58l),(CCons ((32l),CEmpty)))))));;
let rec data_45star = fun () -> (string_45from_45list (CCons ((32l),(CCons ((42l),(CCons ((32l),CEmpty)))))));;
let rec data_45int32 = fun () -> (string_45from_45list (CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),CEmpty)))))))))));;
let rec data_45int32_45plus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((97l),(CCons ((100l),(CCons ((100l),CEmpty)))))))))))))))))));;
let rec data_45int32_45multiply = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((109l),(CCons ((117l),(CCons ((108l),CEmpty)))))))))))))))))));;
let rec data_45int32_45minus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((115l),(CCons ((117l),(CCons ((98l),CEmpty)))))))))))))))))));;
let rec data_45int32_45divide = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((100l),(CCons ((105l),(CCons ((118l),CEmpty)))))))))))))))))));;
let rec data_45int32_45modulus = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((114l),(CCons ((101l),(CCons ((109l),CEmpty)))))))))))))))))));;
let rec data_45cempty = fun () -> (string_45from_45list (CCons ((67l),(CCons ((69l),(CCons ((109l),(CCons ((112l),(CCons ((116l),(CCons ((121l),CEmpty)))))))))))));;
let rec data_45ccons = fun () -> (string_45from_45list (CCons ((67l),(CCons ((67l),(CCons ((111l),(CCons ((110l),(CCons ((115l),CEmpty)))))))))));;
let rec data_45int32 = fun () -> (string_45from_45list (CCons ((73l),(CCons ((110l),(CCons ((116l),(CCons ((51l),(CCons ((50l),(CCons ((46l),(CCons ((111l),(CCons ((102l),(CCons ((95l),(CCons ((105l),(CCons ((110l),(CCons ((116l),(CCons ((32l),CEmpty)))))))))))))))))))))))))));;
let rec data_45comma = fun () -> (string_45from_45list (CCons ((44l),CEmpty)));;
let rec data_45with = fun () -> (string_45from_45list (CCons ((119l),(CCons ((105l),(CCons ((116l),(CCons ((104l),CEmpty)))))))));;
let rec data_45definition_45end = fun () -> (string_45from_45list (CCons ((59l),(CCons ((59l),CEmpty)))));;
let rec data_45let_45rec = fun () -> (string_45from_45list (CCons ((108l),(CCons ((101l),(CCons ((116l),(CCons ((32l),(CCons ((114l),(CCons ((101l),(CCons ((99l),(CCons ((32l),CEmpty)))))))))))))))));;
let rec data_45constant = fun () -> (string_45from_45list (CCons ((95l),(CCons ((99l),(CCons ((111l),(CCons ((110l),(CCons ((115l),(CCons ((116l),(CCons ((97l),(CCons ((110l),(CCons ((116l),(CCons ((95l),CEmpty)))))))))))))))))))));;
let rec data_45import_45stdlib = fun () -> (string_45from_45list (CCons ((111l),(CCons ((112l),(CCons ((101l),(CCons ((110l),(CCons ((32l),(CCons ((82l),(CCons ((101l),(CCons ((117l),(CCons ((115l),(CCons ((101l),(CCons ((59l),(CCons ((59l),CEmpty)))))))))))))))))))))))));;
let rec prefix_45type_45variable = fun string -> (string_45prepend (39l) (string_45prepend (84l) string));;
let rec prefix_45constructor = fun constructor -> (string_45prepend (67l) constructor);;
let rec reserved_45strings = fun () -> (dictionary_45of (CCons ((CPair ((data_45assert ()),CTrue)),(CCons ((CPair ((data_45asr ()),CTrue)),(CCons ((CPair ((data_45begin ()),CTrue)),(CCons ((CPair ((data_45constraint ()),CTrue)),(CCons ((CPair ((data_45do ()),CTrue)),(CCons ((CPair ((data_45done ()),CTrue)),(CCons ((CPair ((data_45downto ()),CTrue)),(CCons ((CPair ((data_45type ()),CTrue)),(CCons ((CPair ((data_45if ()),CTrue)),(CCons ((CPair ((data_45then ()),CTrue)),(CCons ((CPair ((data_45else ()),CTrue)),(CCons ((CPair ((data_45with ()),CTrue)),(CCons ((CPair ((data_45of ()),CTrue)),(CCons ((CPair ((data_45end ()),CTrue)),(CCons ((CPair ((data_45in ()),CTrue)),(CCons ((CPair ((data_45fun ()),CTrue)),(CCons ((CPair ((data_45let ()),CTrue)),(CCons ((CPair ((data_45open ()),CTrue)),(CCons ((CPair ((data_45and ()),CTrue)),(CCons ((CPair ((data_45or ()),CTrue)),(CCons ((CPair ((data_45as ()),CTrue)),(CCons ((CPair ((data_45class ()),CTrue)),(CCons ((CPair ((data_45exception ()),CTrue)),(CCons ((CPair ((data_45external ()),CTrue)),(CCons ((CPair ((data_45false ()),CTrue)),(CCons ((CPair ((data_45true ()),CTrue)),(CCons ((CPair ((data_45for ()),CTrue)),(CCons ((CPair ((data_45function ()),CTrue)),(CCons ((CPair ((data_45functor ()),CTrue)),(CCons ((CPair ((data_45if ()),CTrue)),(CCons ((CPair ((data_45include ()),CTrue)),(CCons ((CPair ((data_45inherit ()),CTrue)),(CCons ((CPair ((data_45initializer ()),CTrue)),(CCons ((CPair ((data_45land ()),CTrue)),(CCons ((CPair ((data_45lazy ()),CTrue)),(CCons ((CPair ((data_45lor ()),CTrue)),(CCons ((CPair ((data_45lsl ()),CTrue)),(CCons ((CPair ((data_45lsr ()),CTrue)),(CCons ((CPair ((data_45lxor ()),CTrue)),(CCons ((CPair ((data_45method ()),CTrue)),(CCons ((CPair ((data_45mod ()),CTrue)),(CCons ((CPair ((data_45module ()),CTrue)),(CCons ((CPair ((data_45mutable ()),CTrue)),(CCons ((CPair ((data_45new ()),CTrue)),(CCons ((CPair ((data_45nonrec ()),CTrue)),(CCons ((CPair ((data_45object ()),CTrue)),(CCons ((CPair ((data_45private ()),CTrue)),(CCons ((CPair ((data_45rec ()),CTrue)),(CCons ((CPair ((data_45sig ()),CTrue)),(CCons ((CPair ((data_45struct ()),CTrue)),(CCons ((CPair ((data_45try ()),CTrue)),(CCons ((CPair ((data_45val ()),CTrue)),(CCons ((CPair ((data_45virtual ()),CTrue)),(CCons ((CPair ((data_45when ()),CTrue)),(CCons ((CPair ((data_45while ()),CTrue)),(CCons ((CPair ((data_45parser ()),CTrue)),(CCons ((CPair ((data_45value ()),CTrue)),(CCons ((CPair ((data_45to ()),CTrue)),CEmpty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
let rec string_45is_45reserved_63 = fun name -> (dictionary_45get_45or name CFalse (reserved_45strings ()));;
let rec escape_45identifier = fun name -> (match (string_45is_45reserved_63 name) with CTrue -> (string_45prepend (95l) name) | CFalse -> (string_45flatmap escape_45char name));;
let rec special_45identifiers = fun () -> (dictionary_45of (CCons ((CPair ((data_45plus ()),(data_45int32_45plus ()))),(CCons ((CPair ((data_45slash ()),(data_45int32_45divide ()))),(CCons ((CPair ((data_45percent ()),(data_45int32_45modulus ()))),(CCons ((CPair ((data_45minus ()),(data_45int32_45minus ()))),(CCons ((CPair ((data_45multiply ()),(data_45int32_45multiply ()))),CEmpty)))))))))));;
let rec translate_45identifier = fun name -> (match (dictionary_45get name (special_45identifiers ())) with (CSome (translation)) -> translation | CNone -> (escape_45identifier name));;
let rec translate_45less_45than = fun translate_45expression expressions -> (match expressions with (CCons (a,(CCons (b,(CCons (then_45case,(CCons (else_45case,CEmpty)))))))) -> (join (CCons ((data_45if ()),(CCons ((data_45space ()),(CCons ((translate_45expression a),(CCons ((data_45less_45than ()),(CCons ((translate_45expression b),(CCons ((data_45space ()),(CCons ((data_45then ()),(CCons ((data_45space ()),(CCons ((translate_45expression then_45case),(CCons ((data_45space ()),(CCons ((data_45else ()),(CCons ((data_45space ()),(CCons ((translate_45expression else_45case),CEmpty))))))))))))))))))))))))))) | _95 -> (data_45compile_45error ()));;
let rec translate_45constructor = fun translator name -> (fun _226_156_168x -> (wrap_45in_45brackets (join ((fun parameters -> (CCons ((prefix_45constructor (escape_45identifier name)),(CCons ((data_45space ()),(CCons (parameters,CEmpty))))))) (wrap_45in_45brackets ((string_45join (data_45comma ())) ((list_45map translator) _226_156_168x)))))));;
let rec translate_45pattern = fun pattern -> (match pattern with (CCapture (name,_95)) -> (escape_45identifier name) | (CIntegerPattern (integer,_95)) -> (join (CCons ((string_45from_45int32 integer),(CCons ((string_45of_45char (108l)),CEmpty))))) | (CConstructorPattern (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructorPattern (name,patterns,_95)) -> ((translate_45constructor translate_45pattern name) patterns));;
let rec translate_45rule = fun translate_45expression rule -> (match rule with (CPair (pattern,expression)) -> (join (CCons ((translate_45pattern pattern),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty))))))));;
let rec translate_45match_45expression = fun translate_45expression expression -> (fun _226_156_168x -> ((string_45join (data_45space ())) ((fun rules -> (CCons ((data_45match ()),(CCons ((translate_45expression expression),(CCons ((data_45with ()),(CCons (rules,CEmpty))))))))) ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45rule translate_45expression)) _226_156_168x)))));;
let rec translate_45function_45application_39 = fun translate_45expression expressions -> (match expressions with (CCons (no_45args_45function,CEmpty)) -> (join (CCons ((translate_45expression no_45args_45function),(CCons ((data_45space ()),(CCons ((wrap_45in_45brackets (string_45empty ())),CEmpty))))))) | _95 -> (string_45join (data_45space ()) (list_45map translate_45expression expressions)));;
let rec translate_45function_45application = fun translate_45expression expressions -> (match expressions with (CCons ((CIdentifier (name,_95)),rest)) -> (match (string_45equal_63 name (data_45int32_45less_45than ())) with CTrue -> (translate_45less_45than translate_45expression rest) | CFalse -> (translate_45function_45application_39 translate_45expression expressions)) | _95 -> (translate_45function_45application_39 translate_45expression expressions));;
let rec translate_45argument_45list = fun arguments -> (match (list_45empty_63 arguments) with CTrue -> (wrap_45in_45brackets (string_45empty ())) | CFalse -> (string_45join (data_45space ()) (list_45map escape_45identifier arguments)));;
let rec translate_45lambda = fun translate_45expression arguments expression -> (join (CCons ((data_45fun ()),(CCons ((data_45space ()),(CCons ((translate_45argument_45list arguments),(CCons ((data_45arrow ()),(CCons ((translate_45expression expression),CEmpty)))))))))));;
let rec translate_45expression = fun expression -> (match expression with (CLambda (arguments,expression,_95)) -> (wrap_45in_45brackets (translate_45lambda translate_45expression arguments expression)) | (CConstructor (name,CEmpty,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CConstructor (name,expressions,_95)) -> ((translate_45constructor translate_45expression name) expressions) | (CFunctionApplication (expressions,_95)) -> (wrap_45in_45brackets (translate_45function_45application translate_45expression expressions)) | (CIntegerConstant (integer,_95)) -> (wrap_45in_45brackets (string_45concat (string_45from_45int32 integer) (string_45of_45char (108l)))) | (CIdentifier (name,_95)) -> (translate_45identifier name) | (CMatch (expression,rules,_95)) -> (wrap_45in_45brackets ((translate_45match_45expression translate_45expression expression) rules)));;
let rec translate_45function_45definition = fun name arguments expression -> (join (CCons ((data_45let_45rec ()),(CCons (name,(CCons ((data_45equals ()),(CCons ((translate_45lambda translate_45expression arguments expression),(CCons ((data_45definition_45end ()),CEmpty)))))))))));;
let rec translate_45simple_45type = fun name parameters -> (match (list_45any_63 (string_45equal_63 name) parameters) with CFalse -> (escape_45identifier name) | CTrue -> (prefix_45type_45variable name));;
let rec translate_45complex_45types = fun translate_45types name -> (fun _226_156_168x -> (join ((fun types -> (CCons (types,(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))) (wrap_45in_45brackets ((translate_45types (data_45comma ())) _226_156_168x)))));;
let rec translate_45function_45type = fun translate_45types return_45type -> (fun _226_156_168x -> (wrap_45in_45brackets ((translate_45types (data_45arrow ())) ((fun argument_45types -> (list_45concat argument_45types (CCons (return_45type,CEmpty)))) _226_156_168x))));;
let rec translate_45type = fun translate_45types parameters _type -> (match _type with (CSimpleType (name,_95)) -> (translate_45simple_45type name parameters) | (CComplexType (name,types,_95)) -> ((translate_45complex_45types translate_45types name) types) | (CFunctionType (argument_45types,return_45type,_95)) -> ((translate_45function_45type translate_45types return_45type) argument_45types));;
let rec translate_45types = fun parameters separator -> (fun _226_156_168x -> ((string_45join separator) ((list_45map (translate_45type (translate_45types parameters) parameters)) _226_156_168x)));;
let rec translate_45type_45parameter = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> name | (CExistentialParameter (name,_95)) -> name);;
let rec translate_45complex_45constructor_45definition = fun name _type types parameters -> (join (CCons ((prefix_45constructor (escape_45identifier name)),(CCons ((data_45colon ()),(CCons (((translate_45types (list_45map translate_45type_45parameter parameters) (data_45star ())) types),(CCons ((data_45arrow ()),(CCons (_type,CEmpty)))))))))));;
let rec translate_45constructor_45definition = fun _type parameters constructor -> (match constructor with (CSimpleConstructor (name,_95)) -> (prefix_45constructor (escape_45identifier name)) | (CComplexConstructor (name,types,_95)) -> (translate_45complex_45constructor_45definition name _type types parameters));;
let rec translate_45constructor_45definitions = fun _type parameters -> (fun _226_156_168x -> ((string_45join (data_45vertical_45bar ())) ((list_45map (translate_45constructor_45definition _type parameters)) _226_156_168x)));;
let rec translate_45type_45parameter_45for_45definition = fun parameter -> (match parameter with (CUniversalParameter (name,_95)) -> (prefix_45type_45variable name) | (CExistentialParameter (_95,_95_95)) -> (string_45empty ()));;
let rec translate_45type_45parameters = fun () -> (fun _226_156_168x -> ((string_45join (data_45comma ())) ((list_45filter not_45empty_63) ((list_45map translate_45type_45parameter_45for_45definition) _226_156_168x))));;
let rec translate_45type_45name_39 = fun name parameters -> (match (string_45empty_63 parameters) with CTrue -> (escape_45identifier name) | CFalse -> (join (CCons ((wrap_45in_45brackets parameters),(CCons ((data_45space ()),(CCons ((escape_45identifier name),CEmpty))))))));;
let rec translate_45type_45name = fun name parameters -> (translate_45type_45name_39 name ((translate_45type_45parameters ()) parameters));;
let rec translate_45type_45definition = fun name parameters constructors -> (join (CCons ((data_45type ()),(CCons ((data_45space ()),(CCons ((translate_45type_45name name parameters),(CCons ((data_45equals ()),(CCons (((translate_45constructor_45definitions (translate_45type_45name name parameters) parameters) constructors),(CCons ((data_45definition_45end ()),CEmpty)))))))))))));;
let rec translate_45definition = fun definition -> (match definition with (CFunctionDefinition (name,arguments,expression,_95)) -> (translate_45function_45definition (escape_45identifier name) arguments expression) | (CTypeDefinition (name,parameters,constructors,_95)) -> (translate_45type_45definition name parameters constructors));;
let rec compile = fun standard_45library_63 definitions module_45name -> ((fun _226_156_168x -> ((result_45map (string_45join (string_45of_45char (10l)))) ((result_45map (list_45concat (CCons ((match standard_45library_63 with CTrue -> (data_45import_45stdlib ()) | CFalse -> (string_45empty ())),CEmpty)))) (result_45concat ((list_45map (result_45map translate_45definition)) _226_156_168x))))) definitions);;
let rec validate_45reserved_45identifiers_45when_45not = fun as_45minimal -> (match as_45minimal with CTrue -> (fun definitions -> definitions) | CFalse -> validate_45reserved_45identifiers);;
let rec transform_45strings = fun path content -> (match (string_45equal_63 (string_45substring (Int32.sub (string_45size path) (8l)) (8l) path) (data_45strings_45file_45ending ())) with CTrue -> (match (string_45gen content) with (CResult (string)) -> (indexed_45iterator_45from_45iterable (string_45iterable ()) string) | (CError (error)) -> (indexed_45iterator_45from_45iterable (string_45iterable ()) (string_45empty ()))) | CFalse -> content);;
let rec parse_45files = fun files -> (list_45flatmap (fun entry -> (match entry with (CPair (path,content)) -> (sexps_45to_45definitions (parse (transform_45strings path content))))) files);;
let rec source_45to_45definitions = fun as_95minimal files -> ((fun _226_156_168x -> (local_45transforms ((validate_45reserved_45identifiers_45when_45not as_95minimal) (stringify_45parse_45errors (parse_45files _226_156_168x))))) files);;
type ('Titerator,'Tstate) event = CEventArguments : (string) list -> ('Titerator,'Tstate) event | CEventReadFiles : ((string,'Titerator) pair) list * 'Tstate -> ('Titerator,'Tstate) event;;
type ('Tstate) command = CCommandError : string -> ('Tstate) command | CCommandOutput : string -> ('Tstate) command | CCommandWriteFiles : ((string,string) pair) list -> ('Tstate) command | CCommandReadFiles : (string) list * 'Tstate -> ('Tstate) command;;
let rec standard_45library_63 = fun arguments -> (match (dictionary_45get (data_45stdlib ()) arguments) with (CSome (_value)) -> (string_45equal_63 _value (data_45true ())) | CNone -> CTrue);;
let rec minimal_63 = fun arguments -> (match (dictionary_45get (data_45minimal ()) arguments) with (CSome (_value)) -> (string_45equal_63 _value (data_45true ())) | CNone -> CFalse);;
let rec module_45name_45from_45filename = fun filename -> (string_45take (Int32.sub (string_45size filename) (3l)) filename);;
let rec filename_45from_45path = fun path -> (match (list_45last (string_45split (47l) path)) with (CSome (filename)) -> filename | CNone -> path);;
let rec on_45event = fun event -> (match event with (CEventArguments (arguments)) -> (match (parse_45arguments arguments) with (CCliArguments (_95,CEmpty)) -> (CCommandError ((data_45no_45input_45files ()))) | (CCliArguments (arguments,input_45files)) -> (CCommandReadFiles (input_45files,(dictionary_45of arguments))) | (CCliErrorMissingValue (key)) -> (CCommandError (key))) | (CEventReadFiles (file_45entries,arguments)) -> (match (dictionary_45get (data_45output_45key ()) arguments) with (CSome (output_45path)) -> (match (source_45to_45definitions (minimal_63 arguments) file_45entries) with definitions -> (match (compile (standard_45library_63 arguments) definitions (module_45name_45from_45filename (filename_45from_45path output_45path))) with (CResult (source)) -> (CCommandWriteFiles ((CCons ((CPair (output_45path,source)),CEmpty)))) | (CError (error)) -> (CCommandError (error)))) | CNone -> (CCommandError ((data_45no_45output_45path ())))));;