(def id (x) x) (def const (a b) a) (def flip (f) (fn (b a) (f a b))) (def . (f g x) (f (g x))) (def fix (f) (f (fix f))) (typ boolean True False) (def not (a) (match a True False False True)) (def and (a b) (match a True b False False)) (def or (a b) (match a True True False b)) (def < (a b) (int32-less-than a b True False)) (def > (a b) (< b a)) (def = (a b) (not (or (< a b) (> a b)))) (def <= (a b) (or (< a b) (= a b))) (def >= (a b) (or (> a b) (= a b))) (typ (pair a b) (Pair a b)) (def pair-cons (a b) (Pair a b)) (def pair-left (pair) (match pair (Pair x _) x)) (def pair-right (pair) (match pair (Pair _ x) x)) (def pair-map (f pair) (match pair (Pair x y) (f x y))) (def pair-map-left (f pair) (match pair (Pair x y) (Pair (f x) y))) (def pair-map-right (f pair) (match pair (Pair x y) (Pair x (f y)))) (def pair-swap (pair) (match pair (Pair x y) (Pair y x))) (typ (maybe a) (Some a) None) (def maybe-map (f maybe) (match maybe (Some x) (Some (f x)) None None)) (def maybe-flatmap (f maybe) (match maybe (Some x) (f x) None None)) (def maybe-filter (f maybe) (match maybe (Some x) (match (f x) True maybe False None) None None)) (def maybe-else (f maybe) (match maybe None (f) (Some x) x)) (def maybe-or-else (value maybe) (match maybe None value (Some x) x)) (typ (iterable-class collection element) (IterableClass (fn (collection) (pair (maybe element) collection)))) (def iterable-next (class collection) (match class (IterableClass next) (next collection))) (typ (indexed-iterator (exists iterable) element) (IndexedIterator (iterable-class iterable element) iterable int32)) (def indexed-iterator-from-iterable (i iterable) (IndexedIterator i iterable 0)) (def indexed-iterator-next (iterator) (match iterator (IndexedIterator i iterable index) (match (iterable-next i iterable) (Pair value next-iterable) (Pair value (IndexedIterator i next-iterable (+ index 1)))))) (def indexed-iterator-index (iterator) (match iterator (IndexedIterator _ __ index) index)) (typ (list a) (Cons a (list a)) Empty) (def list-cons (x xs) (Cons x xs)) (def list-from (x) (Cons x Empty)) (def list-from-range (from _to) (match (< from _to) True (Cons from (list-from-range (+ from 1) _to)) False Empty)) (def list-first (list) (match list (Cons x _) (Some x) Empty None)) (def list-rest (list) (match list (Cons _ rest) rest Empty Empty)) (def list-last (list) (match list Empty None (Cons x Empty) (Some x) (Cons _ rest) (list-last rest))) (def list-empty? (list) (match list (Cons _ __) False Empty True)) (def list-size' (list size) (match list (Cons _ rest) (list-size' rest (+ size 1)) Empty size)) (def list-size (list) (list-size' list 0)) (def list-foldrk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (list-foldrk f initial xs (fn (value) (f x value continue))))) (def list-foldlk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (f x initial (fn (new-value) (list-foldlk f new-value xs continue))))) (def list-foldr (f initial list) (list-foldrk (fn (x value continue) (continue (f x value))) initial list (fn (x) x))) (def list-foldl (f initial list) (match list Empty initial (Cons x xs) (list-foldl f (f x initial) xs))) (def list-concat (a b) (list-foldr list-cons b a)) (def list-reverse (list) (list-foldl list-cons Empty list)) (def list-map (f list) (list-foldr (fn (head tail) (list-cons (f head) tail)) Empty list)) (def list-flatmap (f list) (list-foldr (fn (head tail) (list-concat (f head) tail)) Empty list)) (def list-flatten (list) (list-foldr list-concat Empty list)) (def list-split-at' (n a b) (match (> n 0) True (match b (Cons x xs) (list-split-at' (- n 1) (Cons x a) xs) Empty (Pair (list-reverse a) b)) False (Pair (list-reverse a) b))) (def list-split-at (n xs) (list-split-at' n Empty xs)) (def list-partition' (n xs partitions) (match (list-split-at n xs) (Pair Empty _) partitions (Pair partition xs) (list-partition' n xs (Cons partition partitions)))) (def list-partition (n xs) (list-reverse (list-partition' n xs Empty))) (def list-partition-by' (x xs) (match xs (Cons partition rest) (Cons (Cons x partition) rest) Empty xs)) (def list-partition-by (f xs) (match xs Empty Empty (Cons x Empty) (list (list x)) (Cons x (Cons x' rest)) (match (f x x') True (list-partition-by' x (list-partition-by f (Cons x' rest))) False (Cons (list x) (list-partition-by f (Cons x' rest)))))) (def list-skip (count list) (pair-right (list-split-at count list))) (def list-take (count list) (pair-left (list-split-at count list))) (def list-zip' (xs ys collected) (match xs Empty collected (Cons x xs) (match ys Empty collected (Cons y ys) (list-zip' xs ys (Cons (Pair x y) collected))))) (def list-zip (xs ys) (list-reverse (list-zip' xs ys Empty))) (def list-pairs (xs) (match xs (Cons a (Cons b rest)) (Cons (Pair a b) (list-pairs rest)) _ Empty)) (def list-find-first (predicate list) (match list Empty None (Cons x xs) (match (predicate x) True (Some x) False (list-find-first predicate xs)))) (def list-filter (f list) (list-foldr (fn (head tail) (match (f head) True (Cons head tail) False tail)) Empty list)) (def list-exclude (f list) (list-filter (pipe f not) list)) (def list-any? (f list) (match (list-find-first f list) (Some _) True _ False)) (def list-every? (f list) (match (list-find-first (fn (x) (not (f x))) list) (Some _) False _ True)) (def list-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (list-collect-from-indexed-iterator' predicate next (Cons x initial)) False (Pair iterator initial)))) (def list-collect-from-indexed-iterator (predicate iterator) (match (list-collect-from-indexed-iterator' predicate iterator Empty) (Pair iterator result) (Pair iterator (list-reverse result)))) (typ string-node (FTValue int32) (FTNode2 int32 string-node string-node) (FTNode3 int32 string-node string-node string-node)) (typ string FTEmpty (FTSingle string-node) (FTDeep (list string-node) string (list string-node))) (def string-empty () FTEmpty) (def string-of-char (character) (FTSingle (FTValue character))) (def string-node-size' (node) (match node (FTValue _) 1 (FTNode2 size _ __) size (FTNode3 size _ __ ___) size)) (def string-node2' (a b) (FTNode2 (+ (string-node-size' a) (string-node-size' b)) a b)) (def string-node3' (a b c) (FTNode3 (+ (string-node-size' a) (+ (string-node-size' b) (string-node-size' c))) a b c)) (def string-prepend-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list a) FTEmpty (list x)) (FTDeep first middle last) (match first (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep (list a b) (string-prepend-node' (string-node3' c d e) middle) last) _ (FTDeep (Cons a first) middle last)))) (def string-prepend (char string) (string-prepend-node' (FTValue char) string)) (def string-append-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list x) FTEmpty (list a)) (FTDeep first middle last) (match last (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep first (string-append-node' (string-node3' e d c) middle) (list a b)) _ (FTDeep first middle (Cons a last))))) (def string-append (char string) (string-append-node' (FTValue char) string)) (def string-first-node' (node) (match node (FTValue x) x (FTNode2 _ x __) (string-first-node' x) (FTNode3 _ x __ ___) (string-first-node' x))) (def string-first (string) (match string FTEmpty None (FTSingle node) (Some (string-first-node' node)) (FTDeep first middle last) (maybe-map string-first-node' (list-first first)))) (def string-rest-node' (node) (match node (FTValue _) None (FTNode2 _ a b) (match (string-rest-node' a) (Some node) (Some (string-node2' node b)) None (Some b)) (FTNode3 _ a b c) (match (string-rest-node' a) (Some node) (Some (string-node3' node b c)) None (Some (string-node2' b c))))) (def string-rest (string) (match string FTEmpty string (FTSingle node) (match (string-rest-node' node) (Some node) (FTSingle node) None FTEmpty) (FTDeep (Cons node rest) middle last) (match (string-rest-node' node) (Some node) (FTDeep (Cons node rest) middle last) None (match rest Empty (list-foldr string-append-node' middle last) _ (FTDeep rest middle last))) _ string)) (def string-foldr-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ a b) (string-foldr-node' f a (string-foldr-node' f b identity)) (FTNode3 _ a b c) (string-foldr-node' f a (string-foldr-node' f b (string-foldr-node' f c identity))))) (def string-foldr (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldr-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldr-node' f) (string-foldr f (list-foldl (string-foldr-node' f) identity last) middle) first))) (def string-foldl-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ b a) (string-foldl-node' f a (string-foldl-node' f b identity)) (FTNode3 _ c b a) (string-foldl-node' f a (string-foldl-node' f b (string-foldl-node' f c identity))))) (def string-foldl (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldl-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldl-node' f) (string-foldl f (list-foldl (string-foldl-node' f) identity first) middle) last))) (def string-size (string) (match string FTEmpty 0 (FTSingle x) (string-node-size' x) (FTDeep first middle last) (+ (list-foldr + 0 (list-map string-node-size' first)) (+ (list-foldr + 0 (list-map string-node-size' last)) (string-size middle))))) (def string-concat-nodes' (nodes) (match nodes (Cons a (Cons b Empty)) (list (string-node2' a b)) (Cons a (Cons b (Cons c Empty))) (list (string-node3' a b c)) (Cons a (Cons b (Cons c (Cons d Empty)))) (list (string-node2' a b) (string-node2' c d)) (Cons a (Cons b (Cons c rest))) (Cons (string-node3' a b c) (string-concat-nodes' rest)) _ Empty)) (typ (triple a b c) (Triple a b c)) (def string-concat' (a nodes b) (match (Triple a nodes b) (Triple FTEmpty nodes b) (list-foldr string-prepend-node' b nodes) (Triple a nodes FTEmpty) (list-foldl string-append-node' a nodes) (Triple (FTSingle x) nodes b) (string-prepend-node' x (list-foldr string-prepend-node' b nodes)) (Triple a nodes (FTSingle x)) (string-append-node' x (list-foldl string-append-node' a nodes)) (Triple (FTDeep first1 middle1 last1) nodes (FTDeep first2 middle2 last2)) (FTDeep first1 (string-concat' middle1 (string-concat-nodes' (list-concat (list-reverse last1) (list-concat nodes first2))) middle2) last2))) (def string-concat (a b) (string-concat' a Empty b)) (def string-empty? (string) (match (string-first string) (Some _) False None True)) (def string-any? (predicate string) (string-foldl (fn (x b) (or (predicate x) b)) False string)) (def string-every? (predicate string) (string-foldl (fn (x b) (and (predicate x) b)) True string)) (def string-to-list (string) (string-foldr list-cons Empty string)) (def string-from-list (list) (list-foldl string-append (string-empty) list)) (def string-skip (count string) (match (> count 0) True (string-skip (- count 1) (string-rest string)) False string)) (def string-take' (count string taken) (match (> count 0) True (match (string-first string) (Some char) (string-take' (- count 1) (string-rest string) (string-append char taken)) None taken) False taken)) (def string-take (count string) (string-take' count string (string-empty))) (def string-reverse (string) (string-foldl string-prepend (string-empty) string)) (def string-substring (start size string) (string-take size (string-skip start string))) (def string-join (separator strings) (match strings (Cons first rest) (list-foldl (fn (string joined) (string-concat joined (string-concat separator string))) first rest) Empty (string-empty))) (def string-flatmap (f string) (string-foldl (fn (x xs) (string-concat xs (f x))) (string-empty) string)) (def string-split' (separator list current parts) (match list Empty (list-reverse (Cons (list-reverse current) parts)) (Cons c rest) (match (= separator c) True (string-split' separator rest Empty (Cons (list-reverse current) parts)) False (string-split' separator rest (Cons c current) parts)))) (def string-split (separator string) (list-map string-from-list (string-split' separator (string-to-list string) Empty Empty))) (def string-trim-start' (list) (match list (Cons x xs) (match (= x 32) True (string-trim-start' xs) False list) Empty list)) (def string-trim-start (string) (string-from-list (string-trim-start' (string-to-list string)))) (def string-trim-end (string) (string-reverse (string-trim-start (string-reverse string)))) (def string-trim (string) (string-trim-start (string-trim-end string))) (def string-equal? (a b) (match (string-first a) (Some xa) (match (string-first b) (Some xb) (and (= xa xb) (string-equal? (string-rest a) (string-rest b))) None (string-empty? a)) None (string-empty? b))) (def string-point-is-digit (point) (match (> point 47) False False True (match (< point 58) True True False False))) (def string-to-int32''' (string-to-int32'' string accumulator x) (string-to-int32'' string (Some (+ (* 10 accumulator) (- x 48))))) (def string-to-int32'' (string accumulator) (match string Empty accumulator (Cons x rest) (maybe-flatmap (fn (accumulator) ((pipe (maybe-filter string-point-is-digit) (maybe-flatmap (string-to-int32''' string-to-int32'' rest accumulator))) (Some x))) accumulator))) (def string-to-int32' (string) (match string (Cons 45 string) (match (list-empty? string) True None False (maybe-map (fn (x) (* -1 x)) (string-to-int32' string))) (Cons x rest) (match (string-point-is-digit x) True (string-to-int32'' string (Some 0)) False None) Empty None)) (def string-to-int32 (string) (string-to-int32' (string-to-list string))) (def string-from-int32'' (integer string) (match (> integer 9) True (string-from-int32'' (/ integer 10) (Cons (+ (% integer 10) 48) string)) False (Cons (+ integer 48) string))) (def string-from-int32' (integer) (match (< integer 0) True (match (= integer -2147483648) True (list 45 50 49 52 55 52 56 51 54 52 56) False (Cons 45 (string-from-int32' (* integer -1)))) False (string-from-int32'' integer Empty))) (def string-from-int32 (integer) (string-from-list (string-from-int32' integer))) (def string-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (string-collect-from-indexed-iterator' predicate next (string-append x initial)) False (Pair iterator initial)))) (def string-collect-from-indexed-iterator (predicate iterator) (string-collect-from-indexed-iterator' predicate iterator (string-empty))) (def string-from-indexed-iterator (iterator) (pair-right (string-collect-from-indexed-iterator (fn (_) True) iterator))) (def string-iterable () (IterableClass (fn (string) (Pair (string-first string) (string-rest string))))) (def string-from-boolean (boolean) (match boolean True (string-from-list (list 84 114 117 101)) False (string-from-list (list 70 97 108 115 101)))) (typ (result v e) (Result v) (Error e)) (def result-lift (result) (Result result)) (def result-error (error) (Error error)) (def result-prod (return result) (match result (Result m) m (Error error) (return (Error error)))) (def result-bimap (f g result) (match result (Result x) (Result (f x)) (Error y) (Error (g y)))) (def result-either (f g result) (match result (Result x) (f x) (Error x) (g x))) (def result-map (f result) (result-bimap f id result)) (def result-flatmap (f result) (match result (Result x) (f x) (Error error) (Error error))) (def result-or-else (value result) (match result (Result x) x (Error x) value)) (def result-error? (result) (match result (Error _) True _ False)) (def result-filter-list (list) (list-foldr (fn (result new-list) (match result (Result x) (Cons x new-list) _ new-list)) Empty list)) (def result-concat (list) (match (list-filter result-error? list) (Cons (Error error) _) (Error error) (Cons (Result _) __) (Result Empty) Empty (Result (result-filter-list list)))) (def result-of-maybe (error maybe) (match maybe (Some x) (Result x) None (Error error))) (def result-bind (result f) (result-flatmap f result)) (def result-return (value) (result-lift value)) (typ (state s v) (Operation (fn (s) (pair s v)))) (def state-run (state operation) (match operation (Operation f) (f state))) (def state-final-value (initial-state operation) (match (state-run initial-state operation) (Pair _ value) value)) (def state-return (value) (Operation (fn (state) (Pair state value)))) (def state-bind (operation f) (Operation (fn (state) (match (state-run state operation) (Pair new-state new-value) (state-run new-state (f new-value)))))) (def state-get () (Operation (fn (state) (Pair state state)))) (def state-set (state) (Operation (fn (_) (Pair state state)))) (def state-modify (f) (state-bind (state-get) (fn (state) (state-set (f state))))) (def state-let (value f) (state-bind (state-return value) f)) (def state-foldr (f initial-value operations) (list-foldr (fn (operation chain) (state-bind operation (fn (x) (state-bind chain (fn (xs) (state-return (f x xs))))))) (state-return initial-value) operations)) (def state-foreach (f xs) (state-foldr list-cons Empty (list-map f xs))) (def state-flatmap (f operation) (state-bind operation f)) (def state-map (f operation) (state-flatmap (pipe f state-return) operation)) (def state-lift (value) (state-return value)) (typ array-color ArrayRed ArrayBlack) (typ (array value) ArrayEmpty (ArrayTree array-color (array value) (pair int32 value) (array value))) (def array-empty () ArrayEmpty) (def array-make-black' (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ a y b) (ArrayTree ArrayBlack a y b))) (def array-balance' (array) (match array (ArrayTree ArrayBlack (ArrayTree ArrayRed (ArrayTree ArrayRed a x b) y c) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack (ArrayTree ArrayRed a x (ArrayTree ArrayRed b y c)) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed (ArrayTree ArrayRed b y c) z d)) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed b y (ArrayTree ArrayRed c z d))) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) rest rest)) (def array-set' (x value array) (match array ArrayEmpty (ArrayTree ArrayRed ArrayEmpty (Pair x value) ArrayEmpty) (ArrayTree color a y b) (match (< x (pair-left y)) True (array-balance' (ArrayTree color (array-set' x value a) y b)) False (match (> x (pair-left y)) True (array-balance' (ArrayTree color a y (array-set' x value b))) False (ArrayTree color a (Pair x value) b))))) (def array-set (x value array) (array-make-black' (array-set' x value array))) (def array-get (x array) (match array ArrayEmpty None (ArrayTree _ a (Pair y value) b) (match (< x y) True (array-get x a) False (match (> x y) True (array-get x b) False (Some value))))) (def array-entries (array) (match array ArrayEmpty Empty (ArrayTree _ a entry b) (list-flatten (list (array-entries a) (list entry) (array-entries b))))) (def array-from-list' (entries index array) (match entries (Cons x xs) (array-from-list' xs (+ index 1) (array-set index x array)) Empty array)) (def array-from-list (entries) (array-from-list' entries 0 ArrayEmpty)) (def array-of (entries) (list-foldl (fn (entry array) (match entry (Pair key value) (array-set key value array))) ArrayEmpty entries)) (def array-singleton (index value) (ArrayTree ArrayBlack ArrayEmpty (Pair index value) ArrayEmpty)) (def array-get-or (index default array) (match (array-get index array) (Some value) value None default)) (typ (dictionary value) (TrieNode (maybe value) (array (dictionary value)))) (def dictionary-empty () (TrieNode None (array-empty))) (def dictionary-value' (dictionary) (match dictionary (TrieNode value _) value)) (def dictionary-children' (dictionary) (match dictionary (TrieNode _ children) children)) (def dictionary-find-child' (char dictionary) (array-get char (dictionary-children' dictionary))) (def dictionary-set (key new-value dictionary) (match (string-first key) None (TrieNode (Some new-value) (dictionary-children' dictionary)) (Some char) ((pipe (dictionary-find-child' char) (maybe-else dictionary-empty) (dictionary-set (string-rest key) new-value) (fn (child) (TrieNode (dictionary-value' dictionary) (array-set char child (dictionary-children' dictionary))))) dictionary))) (def dictionary-get (key dictionary) (match (string-first key) (Some char) (maybe-flatmap (dictionary-get (string-rest key)) (dictionary-find-child' char dictionary)) None (dictionary-value' dictionary))) (def dictionary-entries' (key dictionary) ((pipe dictionary-children' array-entries (list-flatmap (fn (child) (dictionary-entries' (string-append (pair-left child) key) (pair-right child)))) (fn (entries) (match (dictionary-value' dictionary) (Some value) (Cons (Pair key value) entries) None entries))) dictionary)) (def dictionary-entries (dictionary) (dictionary-entries' (string-empty) dictionary)) (def dictionary-of (entries) (list-foldl (pair-map dictionary-set) (dictionary-empty) entries)) (def dictionary-singleton (key value) (dictionary-set key value (dictionary-empty))) (def dictionary-get-or (key default dictionary) (match (dictionary-get key dictionary) (Some value) value None default))