(pub def id (x) x)
(pub def const (a b) a)
(pub def flip (f) (fn (b a) (f a b)))
(pub def .2 (f g x y) (f (g x y)))
(pub def fix (f) (f (fix f)))
(pub def let-bind (x f) (f x))
(pub typ boolean True False)
(pub def not (a) (match a True False False True))
(pub def and (a b) (match a True b False False))
(pub def or (a b) (match a True True False b))
(pub def < (a b) (int32-less-than a b True False))
(pub def > (a b) (< b a))
(pub def = (a b) (not (or (< a b) (> a b))))
(pub def <= (a b) (or (< a b) (= a b)))
(pub def >= (a b) (or (> a b) (= a b)))
(pub def max (a b) (int32-less-than a b b a))
(pub def min (a b) (int32-less-than a b a b))
(pub typ (pair a b) (Pair a b))
(pub def pair-cons (a b) (Pair a b))
(pub def pair-dup (a) (Pair a a))
(pub def pair-left (pair) (match pair (Pair x _) x))
(pub def pair-right (pair) (match pair (Pair _ x) x))
(pub def pair-map (f pair) (match pair (Pair x y) (f x y)))
(pub def pair-bimap (f g pair) (match pair (Pair x y) (Pair (f x) (g y))))
(pub def pair-map-left (f pair) (match pair (Pair x y) (Pair (f x) y)))
(pub def pair-map-right (f pair) (match pair (Pair x y) (Pair x (f y))))
(pub def pair-swap (pair) (match pair (Pair x y) (Pair y x)))
(pub typ (maybe a) (Some a) None)
(pub def maybe-map (f maybe) (match maybe (Some x) (Some (f x)) None None))
(pub def maybe-flatmap (f maybe) (match maybe (Some x) (f x) None None))
(pub def maybe-bind (maybe f) (maybe-flatmap f maybe))
(pub def maybe-return (x) (Some x))
(pub def maybe-filter (f maybe) (match maybe (Some x) (match (f x) True maybe False None) None None))
(pub def maybe-else (f maybe) (match maybe None (f) (Some x) x))
(pub def maybe-or-else (value maybe) (match maybe None value (Some x) x))
(pub typ (iterable-class collection element) (IterableClass (fn (collection) (pair (maybe element) collection))))
(pub def iterable-next (class collection) (match class (IterableClass next) (next collection)))
(pub typ (indexed-iterator (exists iterable) element) (IndexedIterator (iterable-class iterable element) iterable int32))
(pub def indexed-iterator-from-iterable (i iterable) (IndexedIterator i iterable 0))
(pub def indexed-iterator-next (iterator) (match iterator (IndexedIterator i iterable index) (match (iterable-next i iterable) (Pair value next-iterable) (Pair value (IndexedIterator i next-iterable (+ index 1))))))
(pub def indexed-iterator-index (iterator) (match iterator (IndexedIterator _ __ index) index))
(pub typ (list a) (Cons a (list a)) Empty)
(pub def list-empty () Empty)
(pub def list-cons (x xs) (Cons x xs))
(pub def list-from (x) (Cons x Empty))
(def list-from-range' (from to rest) (match (> to from) True (list-from-range' from (- to 1) (Cons (- to 1) rest)) False rest))
(pub def list-from-range (from to) (list-from-range' from to Empty))
(pub def list-first (list) (match list (Cons x _) (Some x) Empty None))
(pub def list-rest (list) (match list (Cons _ rest) rest Empty Empty))
(pub def list-last (list) (match list Empty None (Cons x Empty) (Some x) (Cons _ rest) (list-last rest)))
(pub def list-is-empty? (list) (match list (Cons _ __) False Empty True))
(def list-size' (list size) (match list (Cons _ rest) (list-size' rest (+ size 1)) Empty size))
(pub def list-size (list) (list-size' list 0))
(pub def list-foldrk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (list-foldrk f initial xs (fn (value) (f x value continue)))))
(pub def list-foldlk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (f x initial (fn (new-value) (list-foldlk f new-value xs continue)))))
(pub def list-foldr (f initial list) (list-foldrk (fn (x value continue) (continue (f x value))) initial list (fn (x) x)))
(pub def list-foldl (f initial list) (match list Empty initial (Cons x xs) (list-foldl f (f x initial) xs)))
(pub def list-concat (a b) (list-foldr list-cons b a))
(pub def list-reverse (list) (list-foldl list-cons Empty list))
(pub def list-map (f list) (list-foldr (fn (head tail) (list-cons (f head) tail)) Empty list))
(pub def list-flatmap (f list) (list-foldr (fn (head tail) (list-concat (f head) tail)) Empty list))
(pub def list-flatten (list) (list-foldr list-concat Empty list))
(def list-split-at' (n a b) (match (> n 0) True (match b (Cons x xs) (list-split-at' (- n 1) (Cons x a) xs) Empty (Pair (list-reverse a) b)) False (Pair (list-reverse a) b)))
(pub def list-split-at (n xs) (list-split-at' n Empty xs))
(def list-partition' (n xs partitions) (match (list-split-at n xs) (Pair Empty _) partitions (Pair partition xs) (list-partition' n xs (Cons partition partitions))))
(pub def list-partition (n xs) (list-reverse (list-partition' n xs Empty)))
(def list-partition-by' (x xs) (match xs (Cons partition rest) (Cons (Cons x partition) rest) Empty xs))
(pub def list-partition-by (f xs) (match xs Empty Empty (Cons x Empty) (list (list x)) (Cons x (Cons x' rest)) (match (f x x') True (list-partition-by' x (list-partition-by f (Cons x' rest))) False (Cons (list x) (list-partition-by f (Cons x' rest))))))
(pub def list-skip (count list) (pair-right (list-split-at count list)))
(pub def list-take (count list) (pair-left (list-split-at count list)))
(def list-zip' (xs ys collected) (match xs Empty collected (Cons x xs) (match ys Empty collected (Cons y ys) (list-zip' xs ys (Cons (Pair x y) collected)))))
(pub def list-zip (xs ys) (list-reverse (list-zip' xs ys Empty)))
(pub def list-mapi (f list) (list-map (pair-map f) (list-zip list (list-from-range 0 (list-size list)))))
(pub def list-pairs (xs) (match xs (Cons a (Cons b rest)) (Cons (Pair a b) (list-pairs rest)) _ Empty))
(pub def list-find-first (predicate list) (match list Empty None (Cons x xs) (match (predicate x) True (Some x) False (list-find-first predicate xs))))
(pub def list-filter (f list) (list-foldr (fn (head tail) (match (f head) True (Cons head tail) False tail)) Empty list))
(pub def list-exclude (f list) (list-filter (. not f) list))
(pub def list-any? (f list) (match (list-find-first f list) (Some _) True _ False))
(pub def list-every? (f list) (match (list-find-first (fn (x) (not (f x))) list) (Some _) False _ True))
(pub def list-from-maybe (maybe) (match maybe (Some x) (list x) None Empty))
(def list-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (list-collect-from-indexed-iterator' predicate next (Cons x initial)) False (Pair iterator initial))))
(pub def list-collect-from-indexed-iterator (predicate iterator) (match (list-collect-from-indexed-iterator' predicate iterator Empty) (Pair iterator result) (Pair iterator (list-reverse result))))
(pub def maybe-concat (maybes) (list-foldr (fn (maybe values) (match maybe (Some value) (Cons value values) None values)) Empty maybes))
(typ string-node (FTValue int32) (FTNode2 int32 string-node string-node) (FTNode3 int32 string-node string-node string-node))
(pub typ string FTEmpty (FTSingle string-node) (FTDeep (list string-node) string (list string-node)))
(pub def string-empty () FTEmpty)
(pub def string-of-char (character) (FTSingle (FTValue character)))
(def string-node-size' (node) (match node (FTValue _) 1 (FTNode2 size _ __) size (FTNode3 size _ __ ___) size))
(def string-node2' (a b) (FTNode2 (+ (string-node-size' a) (string-node-size' b)) a b))
(def string-node3' (a b c) (FTNode3 (+ (string-node-size' a) (+ (string-node-size' b) (string-node-size' c))) a b c))
(def string-prepend-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list a) FTEmpty (list x)) (FTDeep first middle last) (match first (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep (list a b) (string-prepend-node' (string-node3' c d e) middle) last) _ (FTDeep (Cons a first) middle last))))
(pub def string-prepend (char string) (string-prepend-node' (FTValue char) string))
(def string-append-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list x) FTEmpty (list a)) (FTDeep first middle last) (match last (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep first (string-append-node' (string-node3' e d c) middle) (list a b)) _ (FTDeep first middle (Cons a last)))))
(pub def string-append (char string) (string-append-node' (FTValue char) string))
(def string-first-node' (node) (match node (FTValue x) x (FTNode2 _ x __) (string-first-node' x) (FTNode3 _ x __ ___) (string-first-node' x)))
(pub def string-first (string) (match string FTEmpty None (FTSingle node) (Some (string-first-node' node)) (FTDeep first middle last) (maybe-map string-first-node' (list-first first))))
(def string-rest-node' (node) (match node (FTValue _) None (FTNode2 _ a b) (match (string-rest-node' a) (Some node) (Some (string-node2' node b)) None (Some b)) (FTNode3 _ a b c) (match (string-rest-node' a) (Some node) (Some (string-node3' node b c)) None (Some (string-node2' b c)))))
(pub def string-rest (string) (match string FTEmpty string (FTSingle node) (match (string-rest-node' node) (Some node) (FTSingle node) None FTEmpty) (FTDeep (Cons node rest) middle last) (match (string-rest-node' node) (Some node) (FTDeep (Cons node rest) middle last) None (match rest Empty (list-foldr string-append-node' middle last) _ (FTDeep rest middle last))) _ string))
(def string-foldr-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ a b) (string-foldr-node' f a (string-foldr-node' f b identity)) (FTNode3 _ a b c) (string-foldr-node' f a (string-foldr-node' f b (string-foldr-node' f c identity)))))
(pub def string-foldr (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldr-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldr-node' f) (string-foldr f (list-foldl (string-foldr-node' f) identity last) middle) first)))
(def string-foldl-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ b a) (string-foldl-node' f a (string-foldl-node' f b identity)) (FTNode3 _ c b a) (string-foldl-node' f a (string-foldl-node' f b (string-foldl-node' f c identity)))))
(pub def string-foldl (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldl-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldl-node' f) (string-foldl f (list-foldl (string-foldl-node' f) identity first) middle) last)))
(pub def string-size (string) (match string FTEmpty 0 (FTSingle x) (string-node-size' x) (FTDeep first middle last) (+ (list-foldr + 0 (list-map string-node-size' first)) (+ (list-foldr + 0 (list-map string-node-size' last)) (string-size middle)))))
(def string-concat-nodes' (nodes) (match nodes (Cons a (Cons b Empty)) (list (string-node2' a b)) (Cons a (Cons b (Cons c Empty))) (list (string-node3' a b c)) (Cons a (Cons b (Cons c (Cons d Empty)))) (list (string-node2' a b) (string-node2' c d)) (Cons a (Cons b (Cons c rest))) (Cons (string-node3' a b c) (string-concat-nodes' rest)) _ Empty))
(typ (triple a b c) (Triple a b c))
(def string-concat' (a nodes b) (match (Triple a nodes b) (Triple FTEmpty nodes b) (list-foldr string-prepend-node' b nodes) (Triple a nodes FTEmpty) (list-foldl string-append-node' a nodes) (Triple (FTSingle x) nodes b) (string-prepend-node' x (list-foldr string-prepend-node' b nodes)) (Triple a nodes (FTSingle x)) (string-append-node' x (list-foldl string-append-node' a nodes)) (Triple (FTDeep first1 middle1 last1) nodes (FTDeep first2 middle2 last2)) (FTDeep first1 (string-concat' middle1 (string-concat-nodes' (list-concat (list-reverse last1) (list-concat nodes first2))) middle2) last2)))
(pub def string-concat (a b) (string-concat' a Empty b))
(pub def string-is-empty? (string) (match (string-first string) (Some _) False None True))
(pub def string-any? (predicate string) (string-foldl (fn (x b) (or (predicate x) b)) False string))
(pub def string-every? (predicate string) (string-foldl (fn (x b) (and (predicate x) b)) True string))
(pub def string-to-list (string) (string-foldr list-cons Empty string))
(pub def string-from-list (list) (list-foldl string-append (string-empty) list))
(pub def string-skip (count string) (match string FTEmpty FTEmpty _ (match (> count 0) True (string-skip (- count 1) (string-rest string)) False string)))
(def string-take' (count string taken) (match (> count 0) True (match (string-first string) (Some char) (string-take' (- count 1) (string-rest string) (string-append char taken)) None taken) False taken))
(pub def string-take (count string) (string-take' count string (string-empty)))
(pub def string-reverse (string) (string-foldl string-prepend (string-empty) string))
(pub def string-repeat (string n) (list-foldl (.2 (string-concat string) (flip const)) (string-empty) (list-from-range 0 n)))
(pub def string-substring (start size string) (string-take size (string-skip start string)))
(pub def string-join (separator strings) (match strings (Cons first rest) (list-foldl (fn (string joined) (string-concat joined (string-concat separator string))) first rest) Empty (string-empty)))
(pub def string-flatmap (f string) (string-foldl (fn (x xs) (string-concat xs (f x))) (string-empty) string))
(def string-split' (separator list current parts) (match list Empty (list-reverse (Cons (list-reverse current) parts)) (Cons c rest) (match (= separator c) True (string-split' separator rest Empty (Cons (list-reverse current) parts)) False (string-split' separator rest (Cons c current) parts))))
(pub def string-split (separator string) (list-map string-from-list (string-split' separator (string-to-list string) Empty Empty)))
(def string-trim-start' (list) (match list (Cons x xs) (match (= x 32) True (string-trim-start' xs) False list) Empty list))
(pub def string-trim-start (string) (string-from-list (string-trim-start' (string-to-list string))))
(pub def string-trim-end (string) (string-reverse (string-trim-start (string-reverse string))))
(pub def string-trim (string) (string-trim-start (string-trim-end string)))
(pub def string-equal? (a b) (match (string-first a) (Some xa) (match (string-first b) (Some xb) (match (= xa xb) True (string-equal? (string-rest a) (string-rest b)) False False) None (string-is-empty? a)) None (string-is-empty? b)))
(pub def string-index-of (index substring string) (match (>= index (string-size string)) True None False (match (string-equal? substring (string-substring index (string-size substring) string)) True (Some index) False (string-index-of (+ index 1) substring string))))
(pub def string-point-is-digit (point) (match (> point 47) False False True (match (< point 58) True True False False)))
(def string-to-int32''' (string-to-int32'' string accumulator x) (string-to-int32'' string (Some (+ (* 10 accumulator) (- x 48)))))
(def string-to-int32'' (string accumulator) (match string Empty accumulator (Cons x rest) (maybe-flatmap (fn (accumulator) (pipe (Some x) (maybe-filter string-point-is-digit) (maybe-flatmap (string-to-int32''' string-to-int32'' rest accumulator)))) accumulator)))
(def string-to-int32' (string) (match string (Cons 45 string) (match (list-is-empty? string) True None False (maybe-map (fn (x) (* -1 x)) (string-to-int32' string))) (Cons x rest) (match (string-point-is-digit x) True (string-to-int32'' string (Some 0)) False None) Empty None))
(pub def string-to-int32 (string) (string-to-int32' (string-to-list string)))
(def string-from-int32'' (integer string) (match (> integer 9) True (string-from-int32'' (/ integer 10) (Cons (+ (% integer 10) 48) string)) False (Cons (+ integer 48) string)))
(def string-from-int32' (integer) (match (< integer 0) True (match (= integer -2147483648) True (list 45 50 49 52 55 52 56 51 54 52 56) False (Cons 45 (string-from-int32' (* integer -1)))) False (string-from-int32'' integer Empty)))
(pub def string-from-int32 (integer) (string-from-list (string-from-int32' integer)))
(def string-collect-from-slice' (predicate index slice initial) (match (< index (slice-size slice)) False (Pair index initial) True (match (predicate (slice-get slice index)) True (string-collect-from-slice' predicate (+ index 1) slice (string-append (slice-get slice index) initial)) False (Pair index initial))))
(pub def string-collect-from-slice (predicate index slice) (string-collect-from-slice' predicate index slice (string-empty)))
(pub def string-to-slice (string) (string-foldl (fn (c slice) (slice-concat slice (slice-of-u8 c 1))) (slice-empty) string))
(pub def string-from-slice (slice) (slice-foldl string-append (string-empty) slice))
(def string-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (string-collect-from-indexed-iterator' predicate next (string-append x initial)) False (Pair iterator initial))))
(pub def string-collect-from-indexed-iterator (predicate iterator) (string-collect-from-indexed-iterator' predicate iterator (string-empty)))
(pub def string-from-indexed-iterator (iterator) (pair-right (string-collect-from-indexed-iterator (fn (_) True) iterator)))
(pub def string-iterable () (IterableClass (fn (string) (Pair (string-first string) (string-rest string)))))
(pub def string-from-boolean (boolean) (match boolean True (string-from-list (list 84 114 117 101)) False (string-from-list (list 70 97 108 115 101))))
(def valid-string-from-unicode-code-point (point) (match (> point 65535) True (string-from-list (list (+ 240 (/ (& point 1835008) 262144)) (+ 128 (/ (& point 258048) 4096)) (+ 128 (/ (& point 4032) 64)) (+ 128 (& point 63)))) False (match (> point 2047) True (string-from-list (list (+ 224 (/ (& point 61440) 4096)) (+ 128 (/ (& point 4032) 64)) (+ 128 (& point 63)))) False (match (> point 127) True (string-from-list (list (+ 192 (/ (& point 1984) 64)) (+ 128 (& point 63)))) False (string-of-char point)))))
(def invalid-code-point () (string-from-list (list 255 253)))
(pub def string-from-unicode-code-point (point) (match (> point 1114111) True (invalid-code-point) False (match (> point 55295) True (match (< point 57344) True (invalid-code-point) False (valid-string-from-unicode-code-point point)) False (valid-string-from-unicode-code-point point))))
(pub typ (result v e) (Result v) (Error e))
(pub def result-lift (result) (Result result))
(pub def result-error (error) (Error error))
(pub def result-prod (return result) (match result (Result m) m (Error error) (return (Error error))))
(pub def result-bimap (f g result) (match result (Result x) (Result (f x)) (Error y) (Error (g y))))
(pub def result-either (f g result) (match result (Result x) (f x) (Error x) (g x)))
(pub def result-map (f result) (result-bimap f id result))
(pub def result-flatmap (f result) (match result (Result x) (f x) (Error error) (Error error)))
(pub def result-or-else (value result) (match result (Result x) x (Error x) value))
(pub def result-error? (result) (match result (Error _) True _ False))
(pub def result-filter-list (list) (list-foldr (fn (result new-list) (match result (Result x) (Cons x new-list) _ new-list)) Empty list))
(pub def result-partition (list) (list-foldr (fn (result state) (match result (Result x) (Pair (Cons x (pair-left state)) (pair-right state)) (Error e) (Pair (pair-left state) (Cons e (pair-right state))))) (Pair Empty Empty) list))
(pub def result-concat (list) (match (list-filter result-error? list) (Cons (Error error) _) (Error error) (Cons (Result _) __) (Result Empty) Empty (Result (result-filter-list list))))
(pub def result-of-maybe (error maybe) (match maybe (Some x) (Result x) None (Error error)))
(pub def result-bind (result f) (result-flatmap f result))
(pub def result-return (value) (result-lift value))
(pub typ (state s v) (Operation (fn (s) (pair s v))))
(pub def state-run (state operation) (match operation (Operation f) (f state)))
(pub def state-final-value (initial-state operation) (match (state-run initial-state operation) (Pair _ value) value))
(pub def state-return (value) (Operation (fn (state) (Pair state value))))
(pub def state-bind (operation f) (Operation (fn (state) (match (state-run state operation) (Pair new-state new-value) (state-run new-state (f new-value))))))
(pub def state-get () (Operation (fn (state) (Pair state state))))
(pub def state-set (state) (Operation (fn (_) (Pair state state))))
(pub def state-modify (f) (state-bind (state-get) (fn (state) (state-set (f state)))))
(pub def state-let (value f) (state-bind (state-return value) f))
(pub def state-foldr (f initial-value operations) (list-foldr (fn (operation chain) (state-bind operation (fn (x) (state-bind chain (fn (xs) (state-return (f x xs))))))) (state-return initial-value) operations))
(pub def state-foreach (f xs) (state-foldr list-cons Empty (list-map f xs)))
(pub def state-flatmap (f operation) (state-bind operation f))
(pub def state-map (f operation) (state-flatmap (. state-return f) operation))
(pub def state-lift (value) (state-return value))
(typ array-color ArrayRed ArrayBlack)
(pub typ (array value) ArrayEmpty (ArrayTree array-color (array value) (pair int32 value) (array value)))
(pub def array-empty () ArrayEmpty)
(def array-make-black' (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ a y b) (ArrayTree ArrayBlack a y b)))
(def array-balance' (array) (match array (ArrayTree ArrayBlack (ArrayTree ArrayRed (ArrayTree ArrayRed a x b) y c) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack (ArrayTree ArrayRed a x (ArrayTree ArrayRed b y c)) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed (ArrayTree ArrayRed b y c) z d)) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed b y (ArrayTree ArrayRed c z d))) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) rest rest))
(def array-set' (x value array) (match array ArrayEmpty (ArrayTree ArrayRed ArrayEmpty (Pair x value) ArrayEmpty) (ArrayTree color a y b) (match (< x (pair-left y)) True (array-balance' (ArrayTree color (array-set' x value a) y b)) False (match (> x (pair-left y)) True (array-balance' (ArrayTree color a y (array-set' x value b))) False (ArrayTree color a (Pair x value) b)))))
(pub def array-set (x value array) (array-make-black' (array-set' x value array)))
(pub def array-get (x array) (match array ArrayEmpty None (ArrayTree _ a (Pair y value) b) (match (< x y) True (array-get x a) False (match (> x y) True (array-get x b) False (Some value)))))
(def array-min (array default) (match array ArrayEmpty default (ArrayTree _ ArrayEmpty y __) y (ArrayTree _ a __ ___) (array-min a default)))
(def array-remove-min (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ ArrayEmpty y b) b (ArrayTree color a y b) (array-balance' (ArrayTree color (array-remove-min a) y b))))
(def array-remove-root (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ ArrayEmpty y ArrayEmpty) ArrayEmpty (ArrayTree _ a y ArrayEmpty) a (ArrayTree _ ArrayEmpty y b) b (ArrayTree color a y b) (array-balance' (ArrayTree color a (array-min b y) (array-remove-min b)))))
(def array-remove' (x array) (match array ArrayEmpty ArrayEmpty (ArrayTree color a y b) (match (< x (pair-left y)) True (array-balance' (ArrayTree color (array-remove' x a) y b)) False (match (> x (pair-left y)) True (array-balance' (ArrayTree color a y (array-remove' x b))) False (array-remove-root array)))))
(pub def array-remove (x array) (array-make-black' (array-remove' x array)))
(pub def array-entries (array) (match array ArrayEmpty Empty (ArrayTree _ a entry b) (list-flatten (list (array-entries a) (list entry) (array-entries b)))))
(def array-from-list' (entries index array) (match entries (Cons x xs) (array-from-list' xs (+ index 1) (array-set index x array)) Empty array))
(pub def array-from-list (entries) (array-from-list' entries 0 ArrayEmpty))
(pub def array-of (entries) (list-foldl (fn (entry array) (match entry (Pair key value) (array-set key value array))) ArrayEmpty entries))
(pub def array-singleton (index value) (ArrayTree ArrayBlack ArrayEmpty (Pair index value) ArrayEmpty))
(pub def array-get-or (index default array) (match (array-get index array) (Some value) value None default))
(pub def array-size (array) (list-size (array-entries array)))
(pub typ (dictionary value) (Dictionary (array (list (pair string value)))))
(pub def dictionary-empty () (Dictionary (array-empty)))
(def dictionary-bucket-from-key (key) (string-foldl (fn (c h) (+ (* h 33) c)) 5381 key))
(pub def dictionary-set (key new-value dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (match (list-filter (fn (entry) (not (string-equal? (pair-left entry) key))) bucket) new-bucket (Dictionary (array-set bucket-id (Cons (Pair key new-value) new-bucket) array))) None (Dictionary (array-set bucket-id (list (Pair key new-value)) array))))))
(pub def dictionary-get (key dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (maybe-map pair-right (list-find-first (fn (entry) (string-equal? (pair-left entry) key)) bucket)) None None))))
(pub def dictionary-remove (key dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (match (list-filter (fn (entry) (not (string-equal? (pair-left entry) key))) bucket) new-bucket (Dictionary (array-set bucket-id new-bucket array))) None dictionary))))
(pub def dictionary-entries (dictionary) (match dictionary (Dictionary array) (list-flatten (list-map pair-right (array-entries array)))))
(pub def dictionary-of (entries) (list-foldl (pair-map dictionary-set) (dictionary-empty) entries))
(pub def dictionary-singleton (key value) (dictionary-set key value (dictionary-empty)))
(pub def dictionary-get-or (key default dictionary) (match (dictionary-get key dictionary) (Some value) value None default))
(pub def dictionary-size (dictionary) (list-size (dictionary-entries dictionary)))
(pub def dictionary-has? (key dictionary) (match (dictionary-get key dictionary) (Some _) True None False))
(pub def dictionary-values (dictionary) (list-map pair-right (dictionary-entries dictionary)))
(pub def dictionary-keys (dictionary) (list-map pair-left (dictionary-entries dictionary)))
(typ bigint (Bigint boolean (list int32)))
(def bigint-trim-parts-reversed (parts) (match parts (Cons x Empty) parts (Cons x xs) (match (= x 0) True (bigint-trim-parts-reversed xs) False parts) Empty Empty))
(def bigint-trim-parts (parts) (list-reverse (bigint-trim-parts-reversed (list-reverse parts))))
(pub def bigint-from-string (string) (match (string-first string) (Some 45) (Bigint True (bigint-trim-parts (list-reverse (list-map ((flip -) 48) (string-to-list (string-rest string)))))) _ (Bigint False (bigint-trim-parts (list-reverse (list-map ((flip -) 48) (string-to-list string)))))))
(pub def bigint-from (int) (bigint-from-string (string-from-int32 int)))
(pub def bigint-zero () (Bigint False (list 0)))
(pub def bigint-one () (Bigint False (list 1)))
(pub def bigint-negate (int) (match int (Bigint negative? (Cons 0 Empty)) int (Bigint negative? parts) (Bigint (match negative? True False False True) parts)))
(def stringify-parts (parts) (string-join (string-empty) (list-reverse (list-map string-from-int32 parts))))
(pub def bigint-to-string (int) (match int (Bigint True parts) (string-prepend 45 (stringify-parts parts)) (Bigint False parts) (stringify-parts parts)))
(def less-than-with-carry (x y previous-less-than?) (match (< x y) True True False (match (= x y) True previous-less-than? False False)))
(def bigint-less-than-parts (a b previous-less-than?) (match (Pair a b) (Pair Empty Empty) False (Pair (Cons x _) Empty) False (Pair Empty (Cons x _)) True (Pair (Cons x Empty) (Cons y Empty)) (less-than-with-carry x y previous-less-than?) (Pair (Cons x xs) (Cons y ys)) (bigint-less-than-parts xs ys (less-than-with-carry x y previous-less-than?))))
(pub def bigint-less-than (a b) (match (Pair a b) (Pair (Bigint True _) (Bigint False __)) True (Pair (Bigint False _) (Bigint True __)) False (Pair (Bigint True a-parts) (Bigint True b-parts)) (bigint-less-than-parts b-parts a-parts False) (Pair (Bigint _ a-parts) (Bigint __ b-parts)) (bigint-less-than-parts a-parts b-parts False)))
(def bigint-subtract-parts (a b carry) (match (Pair a b) (Pair (Cons x xs) Empty) (bigint-subtract-parts a (Cons 0 Empty) carry) (Pair (Cons x xs) (Cons y ys)) (match (< (- x (+ y carry)) 0) True (Cons (- (+ x 10) (+ y carry)) (bigint-subtract-parts xs ys 1)) False (Cons (- x (+ y carry)) (bigint-subtract-parts xs ys 0))) _ Empty))
(def bigint-add-parts (a b carry) (match (Pair a b) (Pair (Cons x xs) (Cons y ys)) (match (> (+ x (+ y carry)) 9) True (Cons (- (+ x (+ y carry)) 10) (bigint-add-parts xs ys 1)) False (Cons (+ x (+ y carry)) (bigint-add-parts xs ys 0))) (Pair (Cons _ __) Empty) (bigint-add-parts a (Cons 0 Empty) carry) (Pair Empty (Cons _ __)) (bigint-add-parts (Cons 0 Empty) b carry) (Pair Empty Empty) (match (> carry 0) True (Cons carry Empty) False Empty)))
(def bigint-add-zeroes (n digits) (match n 0 digits _ (bigint-add-zeroes (- n 1) (Cons 0 digits))))
(def bigint-multiply-digit (x digits carry) (match digits Empty (match (> carry 0) True (Cons carry Empty) False Empty) (Cons y ys) (Cons (% (+ (* x y) carry) 10) (bigint-multiply-digit x ys (/ (+ (* x y) carry) 10)))))
(def bigint-multiply-parts (a b base) (match a (Cons x xs) (bigint-add-parts (bigint-add-zeroes base (bigint-multiply-digit x b 0)) (bigint-multiply-parts xs b (+ base 1)) 0) Empty Empty))
(pub def bigint-subtract (a b) (match (Pair a b) (Pair (Bigint False a-parts) (Bigint True b-parts)) (Bigint False (bigint-add-parts a-parts b-parts 0)) (Pair (Bigint True a-parts) (Bigint False b-parts)) (Bigint True (bigint-add-parts a-parts b-parts 0)) (Pair (Bigint True a-parts) (Bigint True b-parts)) (match (bigint-less-than a b) True (Bigint True (bigint-trim-parts (bigint-subtract-parts a-parts b-parts 0))) False (Bigint False (bigint-trim-parts (bigint-subtract-parts b-parts a-parts 0)))) (Pair (Bigint False a-parts) (Bigint False b-parts)) (match (bigint-less-than a b) True (Bigint True (bigint-trim-parts (bigint-subtract-parts b-parts a-parts 0))) False (Bigint False (bigint-trim-parts (bigint-subtract-parts a-parts b-parts 0))))))
(pub def bigint-add (a b) (match (Pair a b) (Pair (Bigint False a-parts) (Bigint False b-parts)) (Bigint False (bigint-add-parts a-parts b-parts 0)) (Pair (Bigint True a-parts) (Bigint True b-parts)) (Bigint True (bigint-add-parts a-parts b-parts 0)) (Pair (Bigint True _) (Bigint False __)) (bigint-subtract b (bigint-negate a)) (Pair (Bigint False _) (Bigint True __)) (bigint-subtract a (bigint-negate b))))
(pub def bigint-multiply (a b) (match (Pair a b) (Pair (Bigint _ (Cons 0 Empty)) (Bigint __ ___)) (Bigint False (Cons 0 Empty)) (Pair (Bigint _ __) (Bigint ___ (Cons 0 Empty))) (Bigint False (Cons 0 Empty)) (Pair (Bigint True a-parts) (Bigint False b-parts)) (Bigint True (bigint-multiply-parts a-parts b-parts 0)) (Pair (Bigint False a-parts) (Bigint True b-parts)) (Bigint True (bigint-trim-parts (bigint-multiply-parts a-parts b-parts 0))) (Pair (Bigint _ a-parts) (Bigint __ b-parts)) (Bigint False (bigint-trim-parts (bigint-multiply-parts a-parts b-parts 0)))))