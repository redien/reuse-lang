(def whitespace? (character) (match character 32 True 13 True 9 True 10 True _ False))
(def atom-character? (character) (match character 40 False 41 False _ (not (whitespace? character))))
(pub typ range (Range int32 int32))
(pub typ sexp (Symbol int32 string range) (Integer int32 range) (List (list sexp) range))
(pub def sexp-range (sexp) (match sexp (Symbol _ __ range) range (Integer _ range) range (List _ range) range))
(pub def sexp-symbol-text (sexp) (match sexp (Symbol _ text __) (Some text) _ None))
(pub typ parse-error ParseErrorTooFewClosingBrackets ParseErrorTooManyClosingBrackets)
(typ (parser-result symbol value) (ParserResult int32 (pair int32 (dictionary symbol)) value) (ParserError parse-error) (ParserEnd int32))
(def intern-string (index next-index name symbol-state) (match symbol-state (Pair token symbols) (match (dictionary-get name symbols) (Some (Pair token name)) (ParserResult next-index symbol-state (Symbol token name (Range index next-index))) None (ParserResult next-index (Pair (+ token 1) (dictionary-set name (Pair token name) symbols)) (Symbol token name (Range index next-index))))))
(def parse-symbol (index slice symbols) (match (string-collect-from-slice atom-character? index slice) (Pair next-index name) (match (string-to-int32 name) (Some integer) (ParserResult next-index symbols (Integer integer (Range index next-index))) None (match (string-is-empty? name) False (intern-string index next-index name symbols) True (ParserEnd index)))))
(def parse-list (index slice parse-sexps symbols) (match (parse-sexps index slice symbols Empty) (ParserResult next-index symbols expressions) (ParserResult next-index symbols (List expressions (Range (- index 1) next-index))) (ParserError error) (ParserError error) (ParserEnd index) (ParserEnd index)))
(def parse-expression (depth index slice parse-sexps' symbols) (match (< index (slice-size slice)) False (match depth 0 (ParserEnd index) _ (ParserError ParseErrorTooFewClosingBrackets)) True (match (slice-get slice index) 40 (parse-list (+ index 1) slice (parse-sexps' (+ depth 1)) symbols) 41 (match depth 0 (ParserError ParseErrorTooManyClosingBrackets) _ (ParserEnd (+ index 1))) x (match (whitespace? x) True (parse-expression depth (+ index 1) slice parse-sexps' symbols) False (parse-symbol index slice symbols)))))
(def parse-sexps' (depth index slice symbols expressions) (match (parse-expression depth index slice parse-sexps' symbols) (ParserResult index symbols expression) (parse-sexps' depth index slice symbols (Cons expression expressions)) (ParserError error) (ParserError error) (ParserEnd index) (ParserResult index symbols (list-reverse expressions))))
(pub def parse-sexps (symbols slice) (match (parse-sexps' 0 0 slice symbols Empty) (ParserResult _ symbols expressions) (Result (Pair symbols expressions)) (ParserError error) (Error error) (ParserEnd _) (Error ParseErrorTooFewClosingBrackets)))
(pub def wrap-in-brackets (string) (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))
(def stringify-sexp' (stringify-sexps expression) (match expression (Symbol _ name __) name (Integer integer _) (string-from-int32 integer) (List expressions _) (wrap-in-brackets (stringify-sexps expressions))))
(pub def stringify-sexps (expressions) (string-join (string-of-char 32) (list-map (stringify-sexp' stringify-sexps) expressions)))
(pub def stringify-sexp (expression) (stringify-sexp' stringify-sexps expression))
(def parts-are-empty? (parts) (match parts Empty True (Cons part Empty) (string-is-empty? part) _ False))
(def transform-line (line) (match (string-split 124 line) (Cons name parts) (string-concat (string-from-list (list 40 100 101 102 32 100 97 116 97 45)) (string-concat (string-trim name) (string-concat (string-from-list (list 32 40 41 32 40 115 116 114 105 110 103)) (string-concat (string-from-list (list 45 102 114 111 109 45 108 105 115 116 32)) (match (parts-are-empty? parts) True (string-from-list (list 69 109 112 116 121 41 41)) False (string-concat (string-from-list (list 40 108 105 115 116 32)) (string-concat (string-join (string-of-char 32) (list-map string-from-int32 (string-to-list (string-join (string-of-char 124) parts)))) (string-from-list (list 41 41 41))))))))) Empty (string-empty)))
(pub def string-gen (stdin-iterator) (match (string-collect-from-slice (const True) 0 stdin-iterator) (Pair _ stdin) (Result (string-join (string-of-char 10) (list-map transform-line (string-split 10 stdin))))))
(def data-strings-file-ending () (string-from-list (list 46 115 116 114 105 110 103 115)))
(def data-reuse-file-ending () (string-from-list (list 46 114 101 117 115 101)))
(pub typ module-reference (ModulePath string boolean) ModuleSelf ModuleInternal)
(pub typ source-reference (SourceReference int32 string module-reference))
(pub typ source-file (SourceFile source-reference slice))
(pub typ source-file-type SourceFileTypeReuse SourceFileTypeStrings SourceFileTypeTargetLanguage)
(pub def module-equal? (a b) (match a (ModulePath a' _) (match b (ModulePath b' _) (string-equal? a' b') _ False) ModuleSelf (match b ModuleSelf True _ False) ModuleInternal (match b ModuleInternal True _ False)))
(def source-reference-file-index (source-reference) (match source-reference (SourceReference file-index _ __) file-index))
(pub def source-reference-file-path (source-reference) (match source-reference (SourceReference _ file-path __) file-path))
(pub def source-reference-module (source-reference) (match source-reference (SourceReference _ __ module) module))
(pub def source-reference-equal? (a b) (= (source-reference-file-index a) (source-reference-file-index b)))
(pub def source-file-of (module path iterator index) (SourceFile (SourceReference index path module) iterator))
(pub def source-file-module (file) (match file (SourceFile reference _) (source-reference-module reference)))
(pub def source-file-path (file) (match file (SourceFile reference _) (source-reference-file-path reference)))
(pub def source-file-content (file) (match file (SourceFile _ content) content))
(pub def source-file-size (file) (match file (SourceFile _ content) (slice-size content)))
(pub def source-file-index (file) (match file (SourceFile reference _) (source-reference-file-index reference)))
(pub def source-file-reference (file) (match file (SourceFile reference _) reference))
(pub def source-file-in-same-module? (a b) (module-equal? (source-file-module a) (source-file-module b)))
(def last-n-chars (n path) (string-substring (- (string-size path) n) n path))
(def is-reuse-source? (file) (string-equal? (last-n-chars 6 (source-file-path file)) (data-reuse-file-ending)))
(def is-strings-source? (file) (string-equal? (last-n-chars 8 (source-file-path file)) (data-strings-file-ending)))
(pub def source-file-type (file) (match (is-reuse-source? file) True SourceFileTypeReuse False (match (is-strings-source? file) True SourceFileTypeStrings False SourceFileTypeTargetLanguage)))
(pub typ definition-kind PublicFunctionDefinition PublicTypeDefinition PublicConstructorDefinition PrivateFunctionDefinition PrivateTypeDefinition PrivateConstructorDefinition VariableDefinition TypeVariableDefinition)
(pub typ identifier-universe TypeUniverse ValueUniverse)
(pub typ (identifier-reference identifier) (Resolved identifier) (Definition int32 definition-kind))
(pub typ identifier (Identifier (maybe (identifier-reference identifier)) identifier-universe string source-reference range))
(pub typ ast-type (SimpleType identifier) (ComplexType identifier (list ast-type) range) (FunctionType (list ast-type) ast-type range))
(pub typ type-parameter (UniversalParameter identifier) (ExistentialParameter identifier))
(pub typ constructor (SimpleConstructor identifier) (ComplexConstructor identifier (list ast-type) range))
(pub typ pattern (Capture identifier) (IntegerPattern int32 range) (ConstructorPattern identifier (list pattern) range))
(pub typ expression (IntegerConstant int32 range) (Variable identifier) (Lambda (list identifier) expression range) (Match expression (list (pair pattern expression)) range) (Constructor identifier (list expression) range) (FunctionApplication (list expression) range) (ListExpression (list expression) range) (Pipe (list expression) range) (Compose (list expression) range))
(pub typ definition (TypeDefinition identifier boolean (list type-parameter) (list constructor) range) (FunctionDefinition identifier boolean (list identifier) expression range) (TargetDefinition source-reference slice))
(def identifier-universe-from-kind (kind) (match kind PublicFunctionDefinition ValueUniverse PublicConstructorDefinition ValueUniverse PublicTypeDefinition TypeUniverse PrivateFunctionDefinition ValueUniverse PrivateConstructorDefinition ValueUniverse PrivateTypeDefinition TypeUniverse VariableDefinition ValueUniverse TypeVariableDefinition TypeUniverse))
(def identifier-definition (identifier) (match identifier (Identifier (Some (Resolved (Identifier (Some (Definition id kind)) __ ___ ____ _____))) _____ ______ _______ ________) (Some (Definition id kind)) (Identifier (Some (Definition id kind)) __ ___ ____ _____) (Some (Definition id kind)) _ None))
(pub def identifier-id (identifier) (match (identifier-definition identifier) (Some (Definition id _)) (Some id) _ None))
(pub def identifier-name (identifier) (match identifier (Identifier _ __ name ___ ____) name))
(pub def identifier-with-name (name identifier) (match identifier (Identifier _1 _2 _ _3 _4) (Identifier _1 _2 name _3 _4)))
(pub def identifier-source-reference (identifier) (match identifier (Identifier _ __ ___ source-reference ____) source-reference))
(pub def identifier-module (identifier) (source-reference-module (identifier-source-reference identifier)))
(pub def identifier-range (identifier) (match identifier (Identifier _ __ ___ ____ range) range))
(pub def identifier-public? (identifier) (match (identifier-definition identifier) (Some (Definition _ PublicFunctionDefinition)) True (Some (Definition _ PublicTypeDefinition)) True (Some (Definition _ PublicConstructorDefinition)) True _ False))
(def identifier-universe (identifier) (match identifier (Identifier _ universe __ ___ ____) universe))
(pub def identifier-is? (id identifier) (maybe-or-else False (maybe-map (= id) (identifier-id identifier))))
(pub def identifier-equal? (a b) (maybe-or-else (source-reference-equal? (identifier-source-reference a) (identifier-source-reference b)) (maybe-map ((flip identifier-is?) b) (identifier-id a))))
(def identifier-from-definition (id kind text source-reference range) (Identifier (Some (Definition id kind)) (identifier-universe-from-kind kind) text source-reference range))
(def identifier-resolved (defined-identifier source-reference range) (Identifier (Some (Resolved defined-identifier)) (identifier-universe defined-identifier) (identifier-name defined-identifier) source-reference range))
(def identifier-unresolved (universe text source-reference range) (Identifier None universe text source-reference range))
(pub def definition-source-reference (definition) (match definition (TypeDefinition identifier _ __ ___ ____) (identifier-source-reference identifier) (FunctionDefinition identifier ___ ____ _____ ______) (identifier-source-reference identifier) (TargetDefinition source-reference _) source-reference))
(pub def definition-module (definition) (source-reference-module (definition-source-reference definition)))
(def definition-public? (definition) (match definition (TypeDefinition _ public? __ ___ ____) public? (FunctionDefinition _ public? __ ___ ____) public? (TargetDefinition _ __) False))
(def definition-identifier (definition) (match definition (TypeDefinition identifier _ __ ___ ____) (Some identifier) (FunctionDefinition identifier _ __ ___ ____) (Some identifier) (TargetDefinition _ __) None))
(pub def constructor-identifier (constructor) (match constructor (ComplexConstructor identifier _ __) identifier (SimpleConstructor identifier) identifier))
(pub def type-parameter-identifier (parameter) (match parameter (UniversalParameter identifier) identifier (ExistentialParameter identifier) identifier))
(pub def captured-identifiers-from-pattern (pattern) (match pattern (Capture identifier) (list identifier) (ConstructorPattern _ patterns __) (list-flatmap captured-identifiers-from-pattern patterns) _ Empty))
(pub def identifiers-from-definition (definition) (match definition (TypeDefinition name _ __ constructors ___) (Cons name (list-map constructor-identifier constructors)) (FunctionDefinition name _ arguments __ ___) (Cons name Empty) (TargetDefinition _ __) Empty))
(pub def public-identifiers (definitions) (pipe definitions (list-filter definition-public?) (list-map definition-identifier) (list-flatmap list-from-maybe)))
(pub def over-match-pair-expression (f pair) (match pair (Pair pattern expression) (result-bind (f expression) (fn (expression) (result-return (Pair pattern expression))))))
(pub def over-match-pair-expressions (over-subexpressions f pairs) (result-concat (list-map (over-match-pair-expression (. (result-flatmap (over-subexpressions f)) f)) pairs)))
(pub def over-subexpressions (f expression) (result-bind (f expression) (fn (expression) (match expression (Lambda arguments expression range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-return (Lambda arguments expression range)))))) (Match expression pairs range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-bind (over-match-pair-expressions over-subexpressions f pairs) (fn (pairs) (result-return (Match expression pairs range)))))))) (Constructor identifier expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (Constructor identifier expressions range)))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) (ListExpression expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (ListExpression expressions range)))) (Pipe expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (Pipe expressions range)))) (Compose expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (Compose expressions range)))) _ (result-return expression)))))
(pub def over-definition-expressions (f definition) (match definition (FunctionDefinition identifier public? arguments expression range) (result-bind (f expression) (fn (expression) (result-return (FunctionDefinition identifier public? arguments expression range)))) _ (result-return definition)))
(pub def over-function-application (f expression) (match expression (FunctionApplication expressions range) (f expressions range) _ (result-return expression)))
(pub def over-match-expression (f expression) (match expression (Match expression pairs range) (f expression pairs range) _ (result-return expression)))
(pub def over-match-pattern-identifiers (f pattern) (match pattern (ConstructorPattern identifier patterns range) (result-bind (result-concat (list-map (over-match-pattern-identifiers f) patterns)) (fn (patterns) (result-bind (f identifier) (fn (identifier) (result-return (ConstructorPattern identifier patterns range)))))) _ (result-return pattern)))
(pub def over-match-rule-identifiers (over-identifiers f rule) (match rule (Pair pattern expression) (result-bind (over-match-pattern-identifiers f pattern) (fn (pattern) (result-bind (over-identifiers f expression) (fn (expression) (result-return (Pair pattern expression))))))))
(pub def over-identifiers (f expression) (match expression (Variable name) (result-bind (f name) (fn (name) (result-return (Variable name)))) (Lambda arguments expression range) (result-bind (over-identifiers f expression) (fn (expression) (result-bind (result-concat (list-map f arguments)) (fn (arguments) (result-return (Lambda arguments expression range)))))) (Constructor name Empty range) (result-bind (f name) (fn (name) (result-return (Constructor name Empty range)))) (Constructor name expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-bind (f name) (fn (name) (result-return (Constructor name expressions range)))))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) (Match expression rules range) (result-bind (result-concat (list-map (over-match-rule-identifiers over-identifiers f) rules)) (fn (rules) (result-bind (over-identifiers f expression) (fn (expression) (result-return (Match expression rules range)))))) (ListExpression expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (ListExpression expressions range)))) (Pipe expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (Pipe expressions range)))) (Compose expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (Compose expressions range)))) _ (result-return expression)))
(def over-identifiers-in-type (f type) (match type (SimpleType identifier) (result-bind (f identifier) (fn (identifier) (result-return (SimpleType identifier)))) (ComplexType identifier types range) (result-bind (f identifier) (fn (identifier) (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types) (result-return (ComplexType identifier types range)))))) (FunctionType types result-type range) (result-bind (over-identifiers-in-type f result-type) (fn (result-type) (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types) (result-return (FunctionType types result-type range))))))))
(pub def over-identifiers-in-constructor (f constructor) (match constructor (SimpleConstructor identifier) (result-bind (f identifier) (fn (identifier) (result-return (SimpleConstructor identifier)))) (ComplexConstructor identifier types range) (result-bind (f identifier) (fn (identifier) (result-bind (result-concat (list-map (over-identifiers-in-type f) types)) (fn (types) (result-return (ComplexConstructor identifier types range))))))))
(pub def expression-calls-function-in-tail-position? (name expression) (match expression (FunctionApplication (Cons (Variable f) rest) _) (identifier-equal? name f) (Match _ rules __) (list-any? (fn (pair) (match pair (Pair pattern expression) (and (not (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern))) (expression-calls-function-in-tail-position? name expression)))) rules) _ False))
(def any-captures-match? (name pattern) (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern)))
(def over-tail-recursive-match-rule (name f over-tail-recursive-call rule) (match rule (Pair pattern expression) (match (any-captures-match? name pattern) True (Pair pattern expression) False (Pair pattern (over-tail-recursive-call name f expression)))))
(pub def over-tail-recursive-call (name f expression) (match expression (FunctionApplication (Cons (Variable applied-name) rest) range) (match (identifier-equal? name applied-name) True (f rest range) False expression) (Match expression rules range) (Match expression (list-map (over-tail-recursive-match-rule name f over-tail-recursive-call) rules) range) _ expression))
(def data-def () (string-from-list (list 100 101 102)))
(def data-typ () (string-from-list (list 116 121 112)))
(def data-fn () (string-from-list (list 102 110)))
(def data-match () (string-from-list (list 109 97 116 99 104)))
(def data-exists () (string-from-list (list 101 120 105 115 116 115)))
(def data-pub () (string-from-list (list 112 117 98)))
(def data-+ () (string-from-list (list 43)))
(def data-- () (string-from-list (list 45)))
(def data-* () (string-from-list (list 42)))
(def data-/ () (string-from-list (list 47)))
(def data-% () (string-from-list (list 37)))
(def data-& () (string-from-list (list 38)))
(def data-int32-less-than () (string-from-list (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110)))
(def data-pipe () (string-from-list (list 112 105 112 101)))
(def data-dot () (string-from-list (list 46)))
(def data-list () (string-from-list (list 108 105 115 116)))
(def data-slice-empty () (string-from-list (list 115 108 105 99 101 45 101 109 112 116 121)))
(def data-slice-of-u8 () (string-from-list (list 115 108 105 99 101 45 111 102 45 117 56)))
(def data-slice-size () (string-from-list (list 115 108 105 99 101 45 115 105 122 101)))
(def data-slice-get () (string-from-list (list 115 108 105 99 101 45 103 101 116)))
(def data-slice-concat () (string-from-list (list 115 108 105 99 101 45 99 111 110 99 97 116)))
(def data-slice-foldl () (string-from-list (list 115 108 105 99 101 45 102 111 108 100 108)))
(def data-slice-subslice () (string-from-list (list 115 108 105 99 101 45 115 117 98 115 108 105 99 101)))
(def data-slice () (string-from-list (list 115 108 105 99 101)))
(def data-int32 () (string-from-list (list 105 110 116 51 50)))
(def symbol-def () -1)
(def symbol-typ () -2)
(def symbol-fn () -3)
(def symbol-match () -4)
(def symbol-exists () -5)
(def symbol-pub () -6)
(pub def identifier-+ () -7)
(pub def identifier-- () -8)
(pub def identifier-* () -9)
(pub def identifier-/ () -10)
(pub def identifier-% () -11)
(pub def identifier-& () -12)
(pub def identifier-int32-less-than () -13)
(pub def identifier-list () -14)
(pub def identifier-pipe () -15)
(pub def identifier-dot () -16)
(pub def identifier-slice-empty () -17)
(pub def identifier-slice-of-u8 () -18)
(pub def identifier-slice-size () -19)
(pub def identifier-slice-get () -20)
(pub def identifier-slice-concat () -21)
(pub def identifier-slice-foldl () -22)
(pub def identifier-slice-subslice () -23)
(pub def identifier-int32 () -24)
(pub def identifier-slice () -25)
(pub def identifier-is-operator? (identifier) (maybe-or-else False (maybe-bind (identifier-id identifier) (fn (id) (maybe-return (and (<= id -7) (>= id -12)))))))
(def predefined-identifier (text id kind) (Identifier (Some (Definition (id) kind)) (identifier-universe-from-kind kind) (text) (SourceReference -1 (string-empty) ModuleInternal) (Range 0 0)))
(def predefined-identifiers () (list (predefined-identifier data-+ identifier-+ PrivateFunctionDefinition) (predefined-identifier data-- identifier-- PrivateFunctionDefinition) (predefined-identifier data-* identifier-* PrivateFunctionDefinition) (predefined-identifier data-/ identifier-/ PrivateFunctionDefinition) (predefined-identifier data-% identifier-% PrivateFunctionDefinition) (predefined-identifier data-& identifier-& PrivateFunctionDefinition) (predefined-identifier data-int32-less-than identifier-int32-less-than PrivateFunctionDefinition) (predefined-identifier data-list identifier-list PrivateFunctionDefinition) (predefined-identifier data-pipe identifier-pipe PrivateFunctionDefinition) (predefined-identifier data-dot identifier-dot PrivateFunctionDefinition) (predefined-identifier data-slice-empty identifier-slice-empty PrivateFunctionDefinition) (predefined-identifier data-slice-of-u8 identifier-slice-of-u8 PrivateFunctionDefinition) (predefined-identifier data-slice-size identifier-slice-size PrivateFunctionDefinition) (predefined-identifier data-slice-get identifier-slice-get PrivateFunctionDefinition) (predefined-identifier data-slice-concat identifier-slice-concat PrivateFunctionDefinition) (predefined-identifier data-slice-foldl identifier-slice-foldl PrivateFunctionDefinition) (predefined-identifier data-slice-subslice identifier-slice-subslice PrivateFunctionDefinition) (predefined-identifier data-int32 identifier-int32 PrivateTypeDefinition) (predefined-identifier data-slice identifier-slice PrivateTypeDefinition)))
(def predefined-identifier-to-symbol (identifier) (pair-cons (maybe-or-else -1 (identifier-id identifier)) (identifier-name identifier)))
(def max-symbol-id (symbols) (list-foldl (fn (x xs) (max xs (pair-left x))) 0 symbols))
(def symbol-state (symbols) (Pair (+ (max-symbol-id symbols) 1) (dictionary-of (list-map (fn (x) (Pair (pair-right x) x)) symbols))))
(def predefined-symbols () (symbol-state (list-concat (list (Pair (symbol-def) (data-def)) (Pair (symbol-typ) (data-typ)) (Pair (symbol-fn) (data-fn)) (Pair (symbol-match) (data-match)) (Pair (symbol-exists) (data-exists)) (Pair (symbol-pub) (data-pub))) (list-map predefined-identifier-to-symbol (predefined-identifiers)))))
(pub typ error (InternalParserError source-reference range) (MalformedExpressionError source-reference range) (MalformedDefinitionError source-reference range) (MalformedTypeDefinitionError source-reference range) (TypeDefinitionMissingName source-reference range) (TypeDefinitionMissingConstructors source-reference range) (MalformedFunctionDefinitionError source-reference range) (FunctionDefinitionMissingName source-reference range) (MalformedPatternError source-reference range) (MalformedMatchExpressionError source-reference range) (MalformedSymbolError source-reference range) (MalformedConstructorError source-reference range) (MalformedTypeError source-reference range) (ErrorNotDefined string source-reference range) (ErrorNotAccessible string source-reference range) (ErrorAlreadyDefined string source-reference range) (ErrorReservedIdentifier string source-reference range) MalformedSexpTooFewClosingBrackets MalformedSexpTooManyClosingBrackets)
(def malformed-function-definition (source-reference range) (MalformedFunctionDefinitionError source-reference range))
(def malformed-type-definition (source-reference range) (MalformedTypeDefinitionError source-reference range))
(def malformed-type (source-reference range) (MalformedTypeError source-reference range))
(def malformed-pattern (source-reference range) (MalformedPatternError source-reference range))
(def not-defined (text source-reference range) (match text (Some text) (ErrorNotDefined text source-reference range) None (InternalParserError source-reference range)))
(def identifier-to-symbol (identifier) (match identifier (Identifier _ __ name ___ range) (Symbol 0 name range)))
(def type-to-sexp (types-to-sexp type) (match type (SimpleType identifier) (identifier-to-symbol identifier) (FunctionType arg-types return-type range) (List (list (Symbol (symbol-fn) (data-fn) range) (List (types-to-sexp arg-types) range) (type-to-sexp types-to-sexp return-type)) range) (ComplexType identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))
(def types-to-sexp (types) (list-map (type-to-sexp types-to-sexp) types))
(def constructor-to-sexp (constructor) (match constructor (SimpleConstructor identifier) (identifier-to-symbol identifier) (ComplexConstructor identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))
(def constructors-to-sexp (constructors) (list-map constructor-to-sexp constructors))
(def type-parameter-to-sexp (parameter) (match parameter (ExistentialParameter identifier) (List (list (Symbol (symbol-exists) (data-exists) (identifier-range identifier)) (identifier-to-symbol identifier)) (identifier-range identifier)) (UniversalParameter identifier) (identifier-to-symbol identifier)))
(def type-name-to-sexp (id range name parameters) (match parameters Empty (Symbol id name range) _ (List (Cons (Symbol id name range) (list-map type-parameter-to-sexp parameters)) range)))
(def function-arguments-to-sexp (arguments range) (List (list-map identifier-to-symbol arguments) range))
(pub def pattern-to-sexp (pattern) (match pattern (ConstructorPattern identifier Empty _) (identifier-to-symbol identifier) (ConstructorPattern identifier patterns range) (List (Cons (identifier-to-symbol identifier) (list-map pattern-to-sexp patterns)) range) (IntegerPattern value range) (Integer value range) (Capture identifier) (identifier-to-symbol identifier)))
(def match-pair-to-sexp (expression-to-sexp pair) (match pair (Pair pattern expression) (list (pattern-to-sexp pattern) (expression-to-sexp expression))))
(pub def expression-to-sexp (expression) (match expression (IntegerConstant integer range) (Integer integer range) (Variable (Identifier _ __ string ___ range)) (Symbol 0 string range) (Lambda arguments expression range) (List (list (Symbol (symbol-fn) (data-fn) range) (function-arguments-to-sexp arguments range) (expression-to-sexp expression)) range) (Match expression pairs range) (List (Cons (Symbol (symbol-match) (data-match) range) (Cons (expression-to-sexp expression) (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range) (Constructor identifier expressions range) (match expressions Empty (identifier-to-symbol identifier) _ (List (Cons (identifier-to-symbol identifier) (list-map expression-to-sexp expressions)) range)) (FunctionApplication expressions range) (List (list-map expression-to-sexp expressions) range) (ListExpression expressions range) (List (Cons (Symbol (identifier-list) (data-list) range) (list-map expression-to-sexp expressions)) range) (Pipe expressions range) (List (Cons (Symbol (identifier-pipe) (data-pipe) range) (list-map expression-to-sexp expressions)) range) (Compose expressions range) (List (Cons (Symbol (identifier-dot) (data-dot) range) (list-map expression-to-sexp expressions)) range)))
(def type-definition-to-sexp (id name parameters constructors range) (list-concat (list (Symbol (symbol-typ) (data-typ) range) (type-name-to-sexp id range name parameters)) (constructors-to-sexp constructors)))
(def function-definition-to-sexp (name arguments expression range) (list (Symbol (symbol-def) (data-def) range) (identifier-to-symbol name) (function-arguments-to-sexp arguments range) (expression-to-sexp expression)))
(def definition-to-sexp' (public? range sexp) (List (match public? True (Cons (Symbol (symbol-pub) (data-pub) range) sexp) False sexp) range))
(pub def definition-to-sexp (definition) (match definition (TypeDefinition (Identifier _ __ name ___ ____) public? parameters constructors range) (definition-to-sexp' public? range (type-definition-to-sexp 0 name parameters constructors range)) (FunctionDefinition name public? arguments expression range) (definition-to-sexp' public? range (function-definition-to-sexp name arguments expression range)) (TargetDefinition _ data) (Symbol 0 (string-from-slice data) (Range 0 0))))
(pub def definitions-to-sexps (definitions) (list-map definition-to-sexp definitions))
(def data-+ () (string-from-list (list 43)))
(def data-- () (string-from-list (list 45)))
(def data-* () (string-from-list (list 42)))
(def data-/ () (string-from-list (list 47)))
(def data-% () (string-from-list (list 37)))
(def data-& () (string-from-list (list 38)))
(def data-int32-less-than () (string-from-list (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110)))
(def data-pipe () (string-from-list (list 112 105 112 101)))
(def data-dot () (string-from-list (list 46)))
(def data-list () (string-from-list (list 108 105 115 116)))
(def data-slice-empty () (string-from-list (list 115 108 105 99 101 45 101 109 112 116 121)))
(def data-slice-of-u8 () (string-from-list (list 115 108 105 99 101 45 111 102 45 117 56)))
(def data-slice-size () (string-from-list (list 115 108 105 99 101 45 115 105 122 101)))
(def data-slice-get () (string-from-list (list 115 108 105 99 101 45 103 101 116)))
(def data-slice-concat () (string-from-list (list 115 108 105 99 101 45 99 111 110 99 97 116)))
(def data-slice-foldl () (string-from-list (list 115 108 105 99 101 45 102 111 108 100 108)))
(def data-slice-subslice () (string-from-list (list 115 108 105 99 101 45 115 117 98 115 108 105 99 101)))
(def data-slice () (string-from-list (list 115 108 105 99 101)))
(def data-int32 () (string-from-list (list 105 110 116 51 50)))
(pub def source-reference-from (file) (SourceReference (source-file-index file) (source-file-path file) (source-file-module file)))
(typ (parser a e) (Parser (state int32 (result a e))))
(def parser-run (parsers) (pair-right (list-foldr (fn (parser state) (match parser (Parser parser) (pair-bimap id ((flip list-cons) (pair-right state)) (state-run (pair-left state) parser)))) (Pair 0 Empty) parsers)))
(def parser-return (value) (Parser (state-return (result-return value))))
(def parser-error (error) (Parser (state-return (result-error error))))
(def parser-bind (parser f) (match parser (Parser parser) (Parser (state-bind parser (fn (result) (result-prod state-return (result-bind result (fn (value) (match (f value) (Parser value) (result-return value))))))))))
(def increment-id! () (Parser (state-bind (state-get) (fn (state) (state-bind (state-set (+ state 1)) (fn (id) (state-return (result-return id))))))))
(def parser-sequence (parsers) (list-foldr (fn (a b) (parser-bind a (fn (a') (parser-bind b (fn (b') (parser-return (Cons a' b'))))))) (parser-return Empty) parsers))
(def sequence (f items) (parser-sequence (list-map f items)))
(def sexp-error-to-ast-error (error) (match error ParseErrorTooFewClosingBrackets MalformedSexpTooFewClosingBrackets ParseErrorTooManyClosingBrackets MalformedSexpTooManyClosingBrackets))
(def new-identifier! (source-reference error kind symbol) (match symbol (Symbol token text range) (parser-bind (increment-id!) (fn (id) (parser-return (identifier-from-definition id kind text source-reference range)))) (Integer _ range) (parser-error (error source-reference range)) (List _ range) (parser-error (error source-reference range))))
(def scope-empty () (Pair (dictionary-empty) (dictionary-empty)))
(def add-identifier (id scope) (match scope (Pair value-scope type-scope) (match (identifier-universe id) ValueUniverse (Pair (dictionary-set (identifier-name id) id value-scope) type-scope) TypeUniverse (Pair value-scope (dictionary-set (identifier-name id) id type-scope)))))
(def scope-with (identifiers scope) (list-foldl add-identifier scope identifiers))
(def scope-merge (first second) (list-foldl add-identifier (list-foldl add-identifier first (dictionary-values (pair-right second))) (dictionary-values (pair-left second))))
(def scope-resolve (text universe scope) (match universe ValueUniverse (dictionary-get text (pair-left scope)) TypeUniverse (dictionary-get text (pair-right scope))))
(def lookup-identifier (source-reference error scope universe name) (match name (Symbol _ text range) (match (scope-resolve text universe scope) (Some identifier) (parser-return (identifier-resolved identifier source-reference range)) None (parser-return (identifier-unresolved universe text source-reference range))) _ (parser-error (error source-reference (sexp-range name)))))
(def lookup-identifiers (source-reference scope universe names) (parser-sequence (list-map (fn (name) (lookup-identifier source-reference (not-defined (sexp-symbol-text name)) scope universe name)) names)))
(def collect-captures (pattern) (match pattern (Capture identifier) (list identifier) (IntegerPattern value range) Empty (ConstructorPattern _ patterns __) (list-flatten (list-map collect-captures patterns))))
(def capital-letter? (c) (and (>= c 65) (<= c 90)))
(def capitalized? (s) (maybe-or-else False (maybe-map capital-letter? (string-first s))))
(def parse-pattern (source-reference scope pattern) (match pattern (Symbol _ text range) (match (capitalized? text) True (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope ValueUniverse pattern) (fn (constructor) (parser-return (ConstructorPattern constructor Empty range)))) False (parser-bind (new-identifier! source-reference malformed-pattern VariableDefinition pattern) (fn (identifier) (parser-return (Capture identifier))))) (Integer value range) (parser-return (IntegerPattern value range)) (List (Cons constructor patterns) range) (parser-bind (lookup-identifier source-reference (not-defined (sexp-symbol-text constructor)) scope ValueUniverse constructor) (fn (constructor) (parser-bind (sequence (parse-pattern source-reference scope) patterns) (fn (patterns) (parser-return (ConstructorPattern constructor patterns range)))))) (List _ range) (parser-error (MalformedPatternError source-reference range))))
(def parse-match-rule (parse-expression source-reference scope rule) (match rule (Pair pattern expression) (parser-bind (parse-pattern source-reference scope pattern) (fn (pattern) (parser-bind (parse-expression source-reference (scope-with (collect-captures pattern) scope) expression) (fn (expression) (parser-return (Pair pattern expression))))))))
(def parse-expression (source-reference scope expression) (match expression (Integer value range) (parser-return (IntegerConstant value range)) (Symbol _ text range) (match (capitalized? text) True (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope ValueUniverse expression) (fn (constructor) (parser-return (Constructor constructor Empty range)))) False (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope ValueUniverse expression) (fn (identifier) (parser-return (Variable identifier))))) (List (Cons (Symbol -3 _ __) (Cons (List arguments ___) (Cons expression Empty))) range) (parser-bind (sequence (new-identifier! source-reference malformed-function-definition VariableDefinition) arguments) (fn (arguments) (parser-bind (parse-expression source-reference (scope-with arguments scope) expression) (fn (expression) (parser-return (Lambda arguments expression range)))))) (List (Cons (Symbol -4 _ __) (Cons expression Empty)) range) (parser-error (MalformedMatchExpressionError source-reference range)) (List (Cons (Symbol -4 _ __) (Cons expression rules)) range) (match (= (% (list-size rules) 2) 0) True (parser-bind (parser-sequence (list-map (parse-match-rule parse-expression source-reference scope) (list-pairs rules))) (fn (rules) (parser-bind (parse-expression source-reference scope expression) (fn (expression) (parser-return (Match expression rules range)))))) False (parser-error (MalformedMatchExpressionError source-reference range))) (List (Cons (Symbol token text range) expressions) range) (match token -14 (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions) (parser-return (ListExpression expressions range)))) -15 (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions) (parser-return (Pipe expressions range)))) -16 (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions) (parser-return (Compose expressions range)))) _ (match (capitalized? text) True (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope ValueUniverse (Symbol token text range)) (fn (constructor) (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions) (parser-return (Constructor constructor expressions range)))))) False (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) (Cons (Symbol token text range) expressions))) (fn (expressions) (parser-return (FunctionApplication expressions range)))))) (List Empty range) (parser-error (MalformedExpressionError source-reference range)) (List expressions range) (parser-bind (parser-sequence (list-map (parse-expression source-reference scope) expressions)) (fn (expressions) (parser-return (FunctionApplication expressions range))))))
(def parse-function-definition (source-reference context rest range public?) (match rest (Cons name (Cons (List arguments _) (Cons expression Empty))) (parser-bind context (fn (context) (match context (Pair scope definitions) (parser-bind (sequence (new-identifier! source-reference malformed-function-definition VariableDefinition) arguments) (fn (arguments) (parser-bind (new-identifier! source-reference malformed-function-definition (match public? True PublicFunctionDefinition False PrivateFunctionDefinition) name) (fn (name) (parser-bind (parse-expression source-reference (scope-with (Cons name arguments) scope) expression) (fn (expression) (parser-return (Pair (scope-with (list name) scope) (list-cons (FunctionDefinition name public? arguments expression range) definitions)))))))))))) Empty (parser-error (FunctionDefinitionMissingName source-reference range)) (Cons (List _ __) Empty) (parser-error (FunctionDefinitionMissingName source-reference range)) _ (parser-error (MalformedFunctionDefinitionError source-reference range))))
(def parse-type (source-reference scope type) (match type (Symbol _ text ___) (parser-bind (lookup-identifier source-reference (not-defined (Some text)) scope TypeUniverse type) (fn (name) (parser-return (SimpleType name)))) (List (Cons (Symbol -3 _ __) (Cons (List argument-types _) (Cons return-type Empty))) range) (parser-bind (sequence (parse-type source-reference scope) argument-types) (fn (argument-types) (parser-bind (parse-type source-reference scope return-type) (fn (return-type) (parser-return (FunctionType argument-types return-type range)))))) (List (Cons name parameters) range) (parser-bind (sequence (parse-type source-reference scope) parameters) (fn (parameters) (parser-bind (lookup-identifier source-reference (not-defined (sexp-symbol-text name)) scope TypeUniverse name) (fn (name) (parser-return (ComplexType name parameters range)))))) (List _ range) (parser-error (malformed-type source-reference range)) (Integer _ range) (parser-error (malformed-type source-reference range))))
(def parse-constructor (source-reference public? scope constructor) (match constructor (Symbol _ name range) (parser-bind (new-identifier! source-reference malformed-type-definition (match public? True PublicConstructorDefinition False PrivateConstructorDefinition) constructor) (fn (id) (parser-return (SimpleConstructor id)))) (List (Cons name types) range) (parser-bind (new-identifier! source-reference malformed-type-definition (match public? True PublicConstructorDefinition False PrivateConstructorDefinition) name) (fn (id) (parser-bind (sequence (parse-type source-reference scope) types) (fn (types) (parser-return (ComplexConstructor id types range)))))) (Integer _ range) (parser-error (malformed-type-definition source-reference range)) (List _ range) (parser-error (malformed-type-definition source-reference range))))
(def parse-type-parameter (source-reference scope parameter) (match parameter (Symbol _ __ ___) (parser-bind (new-identifier! source-reference malformed-type-definition TypeVariableDefinition parameter) (fn (name) (parser-return (UniversalParameter name)))) (List (Cons (Symbol -5 _ __) (Cons parameter Empty)) range) (parser-bind (new-identifier! source-reference malformed-type-definition TypeVariableDefinition parameter) (fn (name) (parser-return (ExistentialParameter name)))) (Integer _ range) (parser-error (malformed-type-definition source-reference range)) (List _ range) (parser-error (malformed-type-definition source-reference range))))
(def parse-type-definition' (source-reference context name parameters constructors range public?) (parser-bind context (fn (context) (match context (Pair scope definitions) (parser-bind (sequence (parse-type-parameter source-reference scope) parameters) (fn (parameters) (let-bind (list-map type-parameter-identifier parameters) (fn (parameter-names) (parser-bind (new-identifier! source-reference malformed-type-definition (match public? True PublicTypeDefinition False PrivateTypeDefinition) name) (fn (name) (parser-bind (sequence (parse-constructor source-reference public? (scope-with (Cons name parameter-names) scope)) constructors) (fn (constructors) (let-bind (list-map constructor-identifier constructors) (fn (constructor-names) (parser-return (Pair (scope-with (Cons name constructor-names) scope) (list-cons (TypeDefinition name public? parameters constructors range) definitions)))))))))))))))))
(def parse-type-definition (source-reference context rest range public?) (match rest (Cons _ Empty) (parser-error (TypeDefinitionMissingConstructors source-reference range)) (Cons (List (Cons name parameters) _) constructors) (parse-type-definition' source-reference context name parameters constructors range public?) (Cons name constructors) (parse-type-definition' source-reference context name Empty constructors range public?) Empty (parser-error (TypeDefinitionMissingName source-reference range))))
(def parse-definitions (source-reference scope sexps) (list-foldl (fn (sexp context) (match sexp (List (Cons (Symbol -1 _ __) rest) range) (parse-function-definition source-reference context rest range False) (List (Cons (Symbol -6 _ __) (Cons (Symbol -1 _ __) rest)) range) (parse-function-definition source-reference context rest range True) (List (Cons (Symbol -2 _ __) rest) range) (parse-type-definition source-reference context rest range False) (List (Cons (Symbol -6 _ __) (Cons (Symbol -2 _ __) rest)) range) (parse-type-definition source-reference context rest range True) (List _ range) (parser-error (MalformedDefinitionError source-reference range)) (Symbol _ __ range) (parser-error (MalformedDefinitionError source-reference range)) (Integer _ range) (parser-error (MalformedDefinitionError source-reference range)))) (parser-return (Pair scope (list-empty))) sexps))
(def parse-reuse-file (file) (match (parse-sexps (predefined-symbols) (source-file-content file)) (Result (Pair _ sexps)) (parser-bind (parse-definitions (source-reference-from file) (scope-with (predefined-identifiers) (scope-empty)) sexps) (fn (definitions) (parser-return (pair-bimap id list-reverse definitions)))) (Error error) (parser-error (sexp-error-to-ast-error error))))
(def transform-strings (path content) (match (string-gen content) (Result string) (string-to-slice string) (Error error) (slice-empty)))
(def parse-strings-file (file) (match file (SourceFile reference content) (parse-reuse-file (SourceFile reference (transform-strings (source-reference-file-path reference) content)))))
(def parse-source-file (file) (match (source-file-type file) SourceFileTypeStrings (parse-strings-file file) SourceFileTypeReuse (parse-reuse-file file) SourceFileTypeTargetLanguage (parser-return (Pair (scope-empty) (list (TargetDefinition (source-file-reference file) (source-file-content file)))))))
(def identifier-is-accessible? (identifier source-reference) (or (module-equal? (identifier-module identifier) (source-reference-module source-reference)) (identifier-public? identifier)))
(def resolve-variable (scope identifier) (match identifier (Identifier None universe text source-reference range) (match (scope-resolve text universe scope) (Some identifier) (match (identifier-is-accessible? identifier source-reference) True (result-return (identifier-resolved identifier source-reference range)) False (result-error (ErrorNotAccessible text source-reference range))) None (result-error (not-defined (Some text) source-reference range))) _ (result-return identifier)))
(def resolve-definition (scope definition) (match definition (FunctionDefinition identifier public? arguments expression range) (result-bind (over-identifiers (resolve-variable scope) expression) (fn (expression) (result-return (FunctionDefinition identifier public? arguments expression range)))) (TypeDefinition identifier public? parameters constructors range) (result-bind (result-concat (list-map (over-identifiers-in-constructor (resolve-variable scope)) constructors)) (fn (constructors) (result-return (TypeDefinition identifier public? parameters constructors range)))) _ (result-return definition)))
(def resolve-identifiers (parsed-files) (list-foldl (fn (parsed-file state) (match parsed-file (Pair file-scope file-definitions) (result-bind state (fn (state) (result-bind (result-concat (list-map (resolve-definition (pair-left state)) file-definitions)) (fn (new-definitions) (result-return (Pair (scope-merge (pair-left state) file-scope) (list-concat (pair-right state) new-definitions))))))))) (Result (Pair (scope-empty) Empty)) parsed-files))
(def resolve-files (files) (match (result-partition (parser-run files)) (Pair parsed-files Empty) (resolve-identifiers parsed-files) (Pair _ (Cons error __)) (Error error)))
(def resolve-modules (definitions) definitions)
(pub def parse-source-files (files) (resolve-modules (resolve-files (list-map parse-source-file files))))