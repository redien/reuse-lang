(def whitespace? (character) (match character 32 True 13 True 9 True 10 True _ False))
(def atom-character? (character) (match character 40 False 41 False _ (not (whitespace? character))))
(pub typ range (Range int32 int32))
(pub typ sexp (Symbol int32 string range) (Integer int32 range) (List (list sexp) range))
(pub typ parse-error ParseErrorTooFewClosingBrackets ParseErrorTooManyClosingBrackets)
(def intern-string (index next-index name symbol-state next) (match symbol-state (Pair token symbols) (match (dictionary-get name symbols) (Some (Pair token name)) (next next-index symbol-state (Symbol token name (Range index next-index))) None (next next-index (Pair (+ token 1) (dictionary-set name (Pair token name) symbols)) (Symbol token name (Range index next-index))))))
(def parse-symbol (index slice symbols next end) (match (string-collect-from-slice atom-character? index slice) (Pair next-index name) (match (string-to-int32 name) (Some integer) (next next-index symbols (Integer integer (Range index next-index))) None (match (string-is-empty? name) False (intern-string index next-index name symbols next) True (end index)))))
(def parse-list (index slice parse-sexps symbols error next) (parse-sexps index slice symbols Empty error (fn (next-index symbols expressions) (next next-index symbols (List expressions (Range (- index 1) next-index))))))
(def parse-expression (depth index slice parse-sexps' symbols error next end) (match (< index (slice-size slice)) False (match depth 0 (end index) _ (error ParseErrorTooFewClosingBrackets)) True (match (slice-get slice index) 40 (parse-list (+ index 1) slice (parse-sexps' (+ depth 1)) symbols error next) 41 (match depth 0 (error ParseErrorTooManyClosingBrackets) _ (end (+ index 1))) x (match (whitespace? x) True (parse-expression depth (+ index 1) slice parse-sexps' symbols error next end) False (parse-symbol index slice symbols next end)))))
(def parse-sexps' (depth index slice symbols expressions error end) (parse-expression depth index slice parse-sexps' symbols error (fn (index symbols expression) (parse-sexps' depth index slice symbols (Cons expression expressions) error end)) (fn (index) (end index symbols (list-reverse expressions)))))
(pub def parse-sexps (symbols slice) (parse-sexps' 0 0 slice symbols Empty (fn (error) (Error error)) (fn (_ symbols expressions) (Result (Pair symbols expressions)))))
(pub def wrap-in-brackets (string) (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))
(def stringify-sexp' (stringify-sexps expression) (match expression (Symbol _ name __) name (Integer integer _) (string-from-int32 integer) (List expressions _) (wrap-in-brackets (stringify-sexps expressions))))
(pub def stringify-sexps (expressions) (string-join (string-of-char 32) (list-map (stringify-sexp' stringify-sexps) expressions)))
(pub def stringify-sexp (expression) (stringify-sexp' stringify-sexps expression))
(def parts-are-empty? (parts) (match parts Empty True (Cons part Empty) (string-is-empty? part) _ False))
(def transform-line (line) (match (string-split 124 line) (Cons name parts) (string-concat (string-from-list (list 40 100 101 102 32 100 97 116 97 45)) (string-concat (string-trim name) (string-concat (string-from-list (list 32 40 41 32 40 115 116 114 105 110 103 45 102 114 111 109 45 108 105 115 116 32)) (match (parts-are-empty? parts) True (string-from-list (list 69 109 112 116 121 41 41)) False (string-concat (string-from-list (list 40 108 105 115 116 32)) (string-concat (string-join (string-of-char 32) (list-map string-from-int32 (string-to-list (string-join (string-of-char 124) parts)))) (string-from-list (list 41 41 41)))))))) Empty (string-empty)))
(pub def string-gen (stdin-iterator) (match (string-collect-from-slice (fn (_) True) 0 stdin-iterator) (Pair _ stdin) (Result (string-join (string-of-char 10) (list-map transform-line (string-split 10 stdin))))))
(pub typ module-reference (ModulePath string boolean) ModuleSelf)
(pub typ source-reference (SourceReference string module-reference))
(pub typ identifier (Identifier int32 string source-reference range (maybe int32)))
(pub typ ast-type (SimpleType identifier) (ComplexType identifier (list ast-type) range) (FunctionType (list ast-type) ast-type range))
(pub typ type-parameter (UniversalParameter identifier) (ExistentialParameter identifier))
(pub typ constructor (SimpleConstructor identifier) (ComplexConstructor identifier (list ast-type) range))
(pub typ pattern (Capture identifier) (IntegerPattern int32 range) (ConstructorPattern identifier (list pattern) range))
(pub typ expression (IntegerConstant int32 range) (Variable identifier) (Lambda (list identifier) expression range) (Match expression (list (pair pattern expression)) range) (Constructor identifier (list expression) range) (FunctionApplication (list expression) range))
(pub typ definition (TypeDefinition identifier boolean (list type-parameter) (list constructor) range) (FunctionDefinition identifier boolean (list identifier) expression range) (TargetDefinition source-reference slice))
(pub def source-reference-file-path (source-reference) (match source-reference (SourceReference file-path _) file-path))
(pub def source-reference-module (source-reference) (match source-reference (SourceReference _ module) module))
(pub def identifier-token (identifier) (match identifier (Identifier token _ __ ___ ____) token))
(pub def identifier-name (identifier) (match identifier (Identifier _ name __ ___ ____) name))
(pub def identifier-with-name (name identifier) (match identifier (Identifier _1 _ _2 _3 _4) (Identifier _1 name _2 _3 _4)))
(pub def identifier-source-reference (identifier) (match identifier (Identifier _ __ source-reference ___ ____) source-reference))
(pub def identifier-module (identifier) (source-reference-module (identifier-source-reference identifier)))
(pub def identifier-range (identifier) (match identifier (Identifier _ __ ___ range ____) range))
(def identifier-id' (identifier) (match identifier (Identifier _ __ ___ ____ id) id))
(pub def identifier-is? (identifier id) (match (identifier-id' identifier) (Some a) (= a id) None False))
(def identifier-with-id (id identifier) (match identifier (Identifier _1 _2 _3 _4 _) (Identifier _1 _2 _3 _4 id)))
(pub def identifier-equal? (a b) (= (identifier-token a) (identifier-token b)))
(pub def module-equal? (a b) (match a (ModulePath a' _) (match b (ModulePath b' _) (string-equal? a' b') ModuleSelf False) ModuleSelf (match b (ModulePath _ __) False ModuleSelf True)))
(pub def definition-source-reference (definition) (match definition (TypeDefinition identifier _ __ ___ ____) (identifier-source-reference identifier) (FunctionDefinition identifier ___ ____ _____ ______) (identifier-source-reference identifier) (TargetDefinition source-reference _) source-reference))
(pub def definition-module (definition) (source-reference-module (definition-source-reference definition)))
(def definition-public? (definition) (match definition (TypeDefinition _ public? __ ___ ____) public? (FunctionDefinition _ public? __ ___ ____) public? (TargetDefinition _ __) False))
(def definition-identifier (definition) (match definition (TypeDefinition identifier _ __ ___ ____) (Some identifier) (FunctionDefinition identifier _ __ ___ ____) (Some identifier) (TargetDefinition _ __) None))
(def constructor-identifier (constructor) (match constructor (ComplexConstructor identifier _ __) identifier (SimpleConstructor identifier) identifier))
(pub def type-parameter-identifier (parameter) (match parameter (UniversalParameter identifier) identifier (ExistentialParameter identifier) identifier))
(pub def captured-identifiers-from-pattern (pattern) (match pattern (Capture identifier) (list identifier) (ConstructorPattern _ patterns __) (list-flatmap captured-identifiers-from-pattern patterns) _ Empty))
(pub def identifiers-from-definition (definition) (match definition (TypeDefinition name _ __ constructors ___) (Cons name (list-map constructor-identifier constructors)) (FunctionDefinition name _ arguments __ ___) (Cons name Empty) (TargetDefinition _ __) Empty))
(pub def public-identifiers (definitions) ((pipe (list-filter definition-public?) (list-map definition-identifier) (list-flatmap list-from-maybe)) definitions))
(pub def over-match-pair-expression (f pair) (match pair (Pair pattern expression) (result-bind (f expression) (fn (expression) (result-return (Pair pattern expression))))))
(pub def over-match-pair-expressions (over-subexpressions f pairs) (result-concat (list-map (over-match-pair-expression (. (result-flatmap (over-subexpressions f)) f)) pairs)))
(pub def over-subexpressions (f expression) (result-bind (f expression) (fn (expression) (match expression (Lambda arguments expression range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-return (Lambda arguments expression range)))))) (Match expression pairs range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-bind (over-match-pair-expressions over-subexpressions f pairs) (fn (pairs) (result-return (Match expression pairs range)))))))) (Constructor identifier expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (Constructor identifier expressions range)))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (. (result-flatmap (over-subexpressions f)) f) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) _ (result-return expression)))))
(pub def over-definition-expressions (f definition) (match definition (FunctionDefinition identifier public? arguments expression range) (result-bind (f expression) (fn (expression) (result-return (FunctionDefinition identifier public? arguments expression range)))) _ (result-return definition)))
(pub def over-function-application (f expression) (match expression (FunctionApplication expressions range) (f expressions range) _ (result-return expression)))
(pub def over-match-expression (f expression) (match expression (Match expression pairs range) (f expression pairs range) _ (result-return expression)))
(pub def over-identifiers (f expression) (match expression (Variable name) (result-bind (f name) (fn (name) (result-return (Variable name)))) (Lambda arguments expression range) (result-bind (over-identifiers f expression) (fn (expression) (result-bind (result-concat (list-map f arguments)) (fn (arguments) (result-return (Lambda arguments expression range)))))) (Constructor name Empty range) (result-bind (f name) (fn (name) (result-return (Constructor name Empty range)))) (Constructor name expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-bind (f name) (fn (name) (result-return (Constructor name expressions range)))))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) (Match expression rules range) (result-bind (result-concat (list-map (over-match-pair-expression (over-identifiers f)) rules)) (fn (rules) (result-bind (over-identifiers f expression) (fn (expression) (result-return (Match expression rules range)))))) _ (result-return expression)))
(pub def expression-calls-function-in-tail-position? (name expression) (match expression (FunctionApplication (Cons (Variable f) rest) _) (identifier-equal? name f) (Match _ rules __) (list-any? (fn (pair) (match pair (Pair pattern expression) (and (not (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern))) (expression-calls-function-in-tail-position? name expression)))) rules) _ False))
(def over-tail-recursive-match-rule (name f over-tail-recursive-call rule) (match rule (Pair pattern expression) (match (list-any? (identifier-equal? name) (captured-identifiers-from-pattern pattern)) True (Pair pattern expression) False (Pair pattern (over-tail-recursive-call name f expression)))))
(pub def over-tail-recursive-call (name f expression) (match expression (FunctionApplication (Cons (Variable applied-name) rest) range) (match (identifier-equal? name applied-name) True (f rest range) False expression) (Match expression rules range) (Match expression (list-map (over-tail-recursive-match-rule name f over-tail-recursive-call) rules) range) _ expression))
(def data-strings-file-ending () (string-from-list (list 46 115 116 114 105 110 103 115)))
(def data-reuse-file-ending () (string-from-list (list 46 114 101 117 115 101)))
(pub typ source-file (SourceFile module-reference string slice))
(pub typ source-file-type SourceFileTypeReuse SourceFileTypeStrings SourceFileTypeTargetLanguage)
(pub def source-file-of (module path iterator) (SourceFile module path iterator))
(pub def source-file-module (file) (match file (SourceFile module _ __) module))
(pub def source-file-path (file) (match file (SourceFile _ path __) path))
(pub def source-file-content (file) (match file (SourceFile _ __ content) content))
(pub def source-file-size (file) (match file (SourceFile _ __ content) (slice-size content)))
(pub def source-file-in-same-module? (a b) (module-equal? (source-file-module a) (source-file-module b)))
(def last-n-chars (n path) (string-substring (- (string-size path) n) n path))
(pub def source-file-type (file) (match (string-equal? (last-n-chars 6 (source-file-path file)) (data-reuse-file-ending)) True SourceFileTypeReuse False (match (string-equal? (last-n-chars 8 (source-file-path file)) (data-strings-file-ending)) True SourceFileTypeStrings False SourceFileTypeTargetLanguage)))
(typ parser-scope (ParserScope (array int32) parser-scope) (ParserScopeRoot (array int32)))
(def parser-scope-empty () (ParserScopeRoot (array-empty)))
(def parser-scope-new (parent) (ParserScope (array-empty) parent))
(def parser-scope-set' (identifier-token symbol-table-id scope) (match scope (ParserScope symbols parent) (ParserScope (array-set identifier-token symbol-table-id symbols) parent) (ParserScopeRoot symbols) (ParserScopeRoot (array-set identifier-token symbol-table-id symbols))))
(def parser-scope-set (identifier scope) (maybe-or-else scope (maybe-map (fn (symbol-table-id) (parser-scope-set' (identifier-token identifier) symbol-table-id scope)) (identifier-id' identifier))))
(def parser-scope-set-all (syms scope) (list-foldl parser-scope-set scope syms))
(def parser-scope-resolve (identifier scope) (match scope (ParserScope symbols parent) (match (array-get (identifier-token identifier) symbols) None (parser-scope-resolve identifier parent) id (identifier-with-id id identifier)) (ParserScopeRoot symbols) (identifier-with-id (array-get (identifier-token identifier) symbols) identifier)))
(def parser-scope-set-list (symbols scope) (list-foldl (pair-map parser-scope-set') scope symbols))
(typ symbol-table-entry (SymbolTableEntry int32 string))
(typ symbol-table (SymbolTable int32 (array symbol-table-entry)))
(def symbol-table-empty () (SymbolTable 0 (array-empty)))
(def symbol-table-id (table) (match table (SymbolTable id _) id))
(def symbol-table-bind (string table) (match table (SymbolTable id array) (SymbolTable (+ id 1) (array-set id (SymbolTableEntry id string) array))))
(def symbol-table-bind-list (names table) (list-foldl symbol-table-bind table names))
(def data-: () (string-from-list (list 58)))
(typ (parser-context definition) (ParserContext source-reference (pair int32 (dictionary (pair int32 string))) parser-scope parser-scope symbol-table (array definition)))
(def parser-context-add-constructors (definition array) (match definition (TypeDefinition _ __ ___ constructors ____) (list-foldl (fn (constructor array) (array-set (identifier-token (constructor-identifier constructor)) definition array)) array constructors) _ array))
(def prefix-module-symbol (module identifier) (match module (ModulePath name open?) (match open? True identifier False (identifier-with-name (string-join (data-:) (list name (identifier-name identifier))) identifier)) ModuleSelf identifier))
(def prefix-module-symbols (module syms) (list-map (prefix-module-symbol module) syms))
(def parser-context-add-definition (definition context) (match context (ParserContext source-reference symbols module-scope global-scope symbol-table constructors) (match (identifiers-from-definition definition) definition-symbols (match (source-reference-module source-reference) module (ParserContext source-reference symbols (parser-scope-set-all definition-symbols module-scope) (match (definition-public? definition) True (parser-scope-set-all (prefix-module-symbols module definition-symbols) global-scope) False global-scope) symbol-table (parser-context-add-constructors definition constructors))))))
(def parser-context-token-is-constructor? (token context) (match context (ParserContext _ __ ___ ____ _____ constructors) (match (array-get token constructors) (Some _) True None False)))
(def parser-context-new-module (context) (match context (ParserContext source-reference symbols _ global-scope symbol-table constructors) (ParserContext source-reference symbols (parser-scope-new global-scope) global-scope symbol-table constructors)))
(def parser-context-module-scope (context) (match context (ParserContext _ __ module-scope ___ ____ _____) module-scope))
(def parser-context-bind-symbol (identifier context) (match context (ParserContext source-reference symbols module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope (symbol-table-bind (identifier-name identifier) symbol-table) constructors)))
(def parser-context-symbols (context) (match context (ParserContext _ symbols __ ___ ____ _____) symbols))
(def parser-context-with-symbols (symbols context) (match context (ParserContext source-reference _ module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope symbol-table constructors)))
(def parser-context-symbol-id (context) (match context (ParserContext _ __ ___ ____ symbol-table _____) (symbol-table-id symbol-table)))
(def parser-context-source-reference (context) (match context (ParserContext source-reference _ __ ___ ____ _____) source-reference))
(def parser-context-with-source-reference (source-reference context) (match context (ParserContext _ symbols module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope symbol-table constructors)))
(def default-scope (symbols) (parser-scope-set-list (list-map (. (fn (x) (Pair x x)) pair-left) symbols) (parser-scope-empty)))
(def max-symbol-id (symbols) (list-foldl (fn (x xs) (max xs (pair-left x))) 0 symbols))
(def parser-run (symbols parser) (match (state-run (ParserContext (SourceReference (string-empty) ModuleSelf) (Pair (+ (max-symbol-id symbols) 1) (dictionary-of (list-map (fn (x) (Pair (pair-right x) x)) symbols))) (default-scope symbols) (default-scope symbols) (symbol-table-bind-list (list-map pair-right symbols) (symbol-table-empty)) (array-empty)) parser) (Pair _ result) result))
(def parser-return (value) (state-return (result-return value)))
(def parser-error (error) (state-return (result-error error)))
(def parser-bind (parser f) (state-bind parser (fn (result) (result-prod state-return (result-bind result (fn (value) (result-return (f value))))))))
(def parser-token-is-constructor? (token) (state-bind (state-get) (fn (context) (parser-return (parser-context-token-is-constructor? token context)))))
(def parser-add-definition! (definition) (state-bind (state-modify (parser-context-add-definition definition)) (fn (_) (parser-return definition))))
(def parser-get-symbols () (state-bind (state-get) (fn (state) (parser-return (parser-context-symbols state)))))
(def parser-set-symbols! (symbols) (state-bind (state-modify (parser-context-with-symbols symbols)) (fn (_) (parser-return symbols))))
(def parser-get-module-scope () (state-bind (state-get) (fn (state) (parser-return (parser-context-module-scope state)))))
(def parser-new-module! () (state-bind (state-modify parser-context-new-module) (fn (state) (parser-return state))))
(def parser-bind-symbol! (identifier) (state-bind (state-modify (parser-context-bind-symbol identifier)) (fn (state) (parser-return (identifier-with-id (Some (- (parser-context-symbol-id state) 1)) identifier)))))
(def parser-get-source-reference () (state-bind (state-get) (fn (state) (parser-return (parser-context-source-reference state)))))
(def parser-set-source-reference! (source-reference) (state-bind (state-modify (parser-context-with-source-reference source-reference)) (fn (_) (parser-return source-reference))))
(def parser-sequence (list) (list-foldr (fn (a b) (parser-bind a (fn (a') (parser-bind b (fn (b') (parser-return (Cons a' b'))))))) (parser-return Empty) list))
(def parser-bind-symbols! (syms) (parser-sequence (list-map parser-bind-symbol! syms)))
(def data-def () (string-from-list (list 100 101 102)))
(def data-typ () (string-from-list (list 116 121 112)))
(def data-fn () (string-from-list (list 102 110)))
(def data-match () (string-from-list (list 109 97 116 99 104)))
(def data-exists () (string-from-list (list 101 120 105 115 116 115)))
(def data-pub () (string-from-list (list 112 117 98)))
(def identifier-def () -1)
(def identifier-typ () -2)
(def identifier-fn () -3)
(def identifier-match () -4)
(def identifier-exists () -5)
(def identifier-pub () -6)
(def with-language-identifiers (other-symbols) (list-concat other-symbols (list (Pair (identifier-def) (data-def)) (Pair (identifier-typ) (data-typ)) (Pair (identifier-fn) (data-fn)) (Pair (identifier-match) (data-match)) (Pair (identifier-exists) (data-exists)) (Pair (identifier-pub) (data-pub)))))
(pub typ error (MalformedDefinitionError range) (MalformedTypeDefinitionError range) (MalformedFunctionDefinitionError source-reference range) (MalformedFunctionNameError range) (MalformedExpressionError range) (MalformedMatchExpressionError range) (MalformedSymbolError range) (MalformedConstructorError range) (MalformedTypeError range) (ErrorNotDefined string source-reference range) (ErrorAlreadyDefined string) (ErrorReservedIdentifier string source-reference range) MalformedSexpTooFewClosingBrackets MalformedSexpTooManyClosingBrackets)
(def symbol-to-identifier (symbol) (match symbol (Symbol token name range) (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-return (Identifier token name source-reference range None)))) (Integer _ range) (parser-error (MalformedSymbolError range)) (List _ range) (parser-error (MalformedSymbolError range))))
(def resolve-symbol (symbol scope) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (match (parser-scope-resolve identifier scope) (Identifier _ name source-reference range None) (parser-error (ErrorNotDefined name source-reference range)) identifier (parser-return identifier)))))
(def sexp-to-complex-type (sexp-to-type scope symbol parameters range) (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-bind (parser-sequence (list-map (sexp-to-type scope) parameters)) (fn (sub-types) (parser-return (ComplexType identifier sub-types range)))))))
(def sexp-to-function-type (sexp-to-type parameters range) (match parameters (Cons (List arg-types _) (Cons return-type Empty)) (parser-bind (parser-sequence (list-map sexp-to-type arg-types)) (fn (arg-types) (parser-bind (sexp-to-type return-type) (fn (return-type) (parser-return (FunctionType arg-types return-type range)))))) _ (parser-error (MalformedTypeError range))))
(def sexp-to-type (scope type) (match type (List (Cons symbol parameters) range) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (match (= (identifier-token identifier) (identifier-fn)) True (sexp-to-function-type (sexp-to-type scope) parameters range) False (sexp-to-complex-type sexp-to-type scope symbol parameters range)))) (Integer _ range) (parser-error (MalformedTypeError range)) (List _ range) (parser-error (MalformedTypeError range)) symbol (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-return (SimpleType identifier))))))
(def sexp-to-constructor-definition (scope constructor) (match constructor (List (Cons name types) range) (parser-bind (symbol-to-identifier name) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-bind (parser-sequence (list-map (sexp-to-type scope) types)) (fn (types) (parser-return (ComplexConstructor name types range)))))))) (Integer _ range) (parser-error (MalformedConstructorError range)) (List _ range) (parser-error (MalformedConstructorError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-return (SimpleConstructor name))))))))
(def sexp-to-type-parameter (sexp) (match sexp (List (Cons _ (Cons name Empty)) ___) (parser-bind (symbol-to-identifier name) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-return (ExistentialParameter name)))))) (Integer _ range) (parser-error (MalformedDefinitionError range)) (List _ range) (parser-error (MalformedDefinitionError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-return (UniversalParameter name))))))))
(def sexp-to-lambda (sexp-to-expression scope rest range) (match rest (Cons (List arguments _) (Cons expression Empty)) (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments) (parser-bind (parser-bind-symbols! arguments) (fn (arguments) (match (parser-scope-new scope) scope (match (parser-scope-set-all arguments scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (Lambda arguments expression range)))))))))) _ (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-error (MalformedFunctionDefinitionError source-reference range))))))
(def sexp-to-function-application (sexp-to-expression range expressions) (parser-bind (parser-sequence (list-map sexp-to-expression expressions)) (fn (expressions) (parser-return (FunctionApplication expressions range)))))
(def to-constructor-or-capture (scope symbol) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?) (match constructor? True (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-return (ConstructorPattern identifier Empty (identifier-range identifier))))) False (parser-bind (parser-bind-symbol! identifier) (fn (identifier) (parser-return (Capture identifier))))))))))
(def sexp-to-pattern (scope sexp) (match sexp (List (Cons name rest) range) (parser-bind (parser-sequence (list-map (sexp-to-pattern scope) rest)) (fn (patterns) (parser-bind (resolve-symbol name scope) (fn (identifier) (parser-return (ConstructorPattern identifier patterns range)))))) (List Empty range) (parser-error (MalformedExpressionError range)) (Integer integer range) (parser-return (IntegerPattern integer range)) symbol (to-constructor-or-capture scope symbol)))
(def sexp-to-match-pair (sexp-to-expression scope range pair) (match pair (Cons pattern (Cons expression Empty)) (parser-bind (sexp-to-pattern scope pattern) (fn (pattern) (match (captured-identifiers-from-pattern pattern) captures (match (parser-scope-new scope) scope (match (parser-scope-set-all captures scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (Pair pattern expression))))))))) _ (parser-error (MalformedMatchExpressionError range))))
(def sexp-to-match-pairs (sexp-to-expression scope range xs) (match (list-partition 2 xs) Empty (parser-error (MalformedMatchExpressionError range)) pairs (parser-sequence (list-map (sexp-to-match-pair sexp-to-expression scope range) pairs))))
(def sexp-to-match (sexp-to-expression scope range rest) (match rest (Cons expression rest) (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-bind (sexp-to-match-pairs sexp-to-expression scope range rest) (fn (pairs) (parser-return (Match expression pairs range)))))) _ (parser-error (MalformedExpressionError range))))
(def sexp-to-constructor (sexp-to-expression range symbol rest scope) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-bind (parser-sequence (list-map sexp-to-expression rest)) (fn (expressions) (parser-return (Constructor identifier expressions range)))))))))
(def sexp-to-list-expression (sexp-to-expression scope expressions range) (match expressions (Cons (Symbol token name symbol-range) rest) (match (= token (identifier-fn)) True (sexp-to-lambda sexp-to-expression scope rest range) False (match (= token (identifier-match)) True (sexp-to-match sexp-to-expression scope range rest) False (parser-bind (parser-token-is-constructor? token) (fn (constructor?) (match constructor? True (sexp-to-constructor (sexp-to-expression scope) range (Symbol token name symbol-range) rest scope) False (sexp-to-function-application (sexp-to-expression scope) range expressions)))))) _ (sexp-to-function-application (sexp-to-expression scope) range expressions)))
(def sexp-to-expression (scope sexp) (match sexp (Integer integer range) (parser-return (IntegerConstant integer range)) (List expressions range) (match expressions Empty (parser-error (MalformedExpressionError range)) _ (sexp-to-list-expression sexp-to-expression scope expressions range)) symbol (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?) (parser-return (match constructor? True (Constructor identifier Empty (identifier-range identifier)) False (Variable identifier)))))))))
(def sexp-to-type-definition (scope type-name public? rest range) (match type-name (List (Cons name parameters) _) (parser-bind (symbol-to-identifier name) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-bind (parser-sequence (list-map sexp-to-type-parameter parameters)) (fn (parameters) (match (list-map type-parameter-identifier parameters) parameter-identifiers (match (parser-scope-new scope) scope (match (parser-scope-set-all (Cons name parameter-identifiers) scope) scope (parser-bind (parser-sequence (list-map (sexp-to-constructor-definition scope) rest)) (fn (constructors) (parser-return (TypeDefinition name public? parameters constructors range))))))))))))) (Integer _ range) (parser-error (MalformedTypeError range)) (List _ range) (parser-error (MalformedTypeError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (match (parser-scope-new scope) scope (match (parser-scope-set name scope) scope (parser-bind (parser-sequence (list-map (sexp-to-constructor-definition scope) rest)) (fn (constructors) (parser-return (TypeDefinition name public? Empty constructors range))))))))))))
(def sexp-to-function-definition (scope name-symbol public? rest range) (match rest (Cons (List arguments _) (Cons expression Empty)) (parser-bind (symbol-to-identifier name-symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments) (parser-bind (parser-bind-symbols! arguments) (fn (arguments) (match (parser-scope-new scope) scope (match (parser-scope-set-all (Cons name arguments) scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (FunctionDefinition name public? arguments expression range)))))))))))))) _ (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-error (MalformedFunctionDefinitionError source-reference range))))))
(def sexp-to-definition' (scope name public? rest range kind) (match (= kind (identifier-typ)) True (sexp-to-type-definition scope name public? rest range) False (match (= kind (identifier-def)) True (sexp-to-function-definition scope name public? rest range) False (parser-error (MalformedDefinitionError range)))))
(def specific-malformed-definition-error (kind range) (match (= kind (identifier-typ)) True (parser-error (MalformedTypeDefinitionError range)) False (match (= kind (identifier-def)) True (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-error (MalformedFunctionDefinitionError source-reference range)))) False (parser-error (MalformedDefinitionError range)))))
(def sexp-to-definition (scope expression) (match expression (List (Cons (Symbol kind _ __) Empty) range) (specific-malformed-definition-error kind range) (List (Cons (Symbol kind _ __) (Cons ___ Empty)) range) (specific-malformed-definition-error kind range) (List (Cons (Symbol -6 _ __) (Cons (Symbol kind ___ ____) (Cons name rest))) range) (sexp-to-definition' scope name True rest range kind) (List (Cons (Symbol kind _ __) (Cons name rest)) range) (sexp-to-definition' scope name False rest range kind) (List (Cons (List _ range) Empty) __) (parser-error (MalformedDefinitionError range)) (List _ range) (parser-error (MalformedDefinitionError range)) (Integer _ range) (parser-error (MalformedDefinitionError range)) (Symbol _ __ range) (parser-error (MalformedDefinitionError range))))
(def parse-definition! (expression) (parser-bind (parser-get-module-scope) (fn (scope) (parser-bind (sexp-to-definition scope expression) (fn (definition) (parser-add-definition! definition))))))
(def sexp-error-to-ast-error (error) (match error ParseErrorTooFewClosingBrackets MalformedSexpTooFewClosingBrackets ParseErrorTooManyClosingBrackets MalformedSexpTooManyClosingBrackets))
(def parse-definitions! (module file-path iterator) (parser-bind (parser-set-source-reference! (SourceReference file-path module)) (fn (_) (parser-bind (parser-get-symbols) (fn (symbols) (match (parse-sexps symbols iterator) (Result (Pair symbols expressions)) (parser-bind (parser-set-symbols! symbols) (fn (_) (parser-sequence (list-map parse-definition! expressions)))) (Error error) (parser-error (sexp-error-to-ast-error error))))))))
(def transform-strings (path content) (match (string-gen content) (Result string) (string-to-slice string) (Error error) (slice-empty)))
(def parse-reuse-file (file) (match file (SourceFile module path content) (parse-definitions! module path content)))
(def parse-strings-file (file) (match file (SourceFile module path content) (parse-definitions! module path (transform-strings path content))))
(def parse-target-file (file) (match file (SourceFile module path content) (parser-return (list (TargetDefinition (SourceReference path module) content)))))
(def parse-source-file (file) (match (source-file-type file) SourceFileTypeStrings (parse-strings-file file) SourceFileTypeReuse (parse-reuse-file file) SourceFileTypeTargetLanguage (parse-target-file file)))
(def parse-module (files) (parser-bind (parser-new-module!) (fn (_) (parser-bind (parser-sequence (list-map parse-source-file files)) (fn (definitions) (parser-return (list-flatten definitions)))))))
(pub def parse-source-files (symbols files) ((pipe (list-partition-by source-file-in-same-module?) (list-map parse-module) parser-sequence (parser-run (with-language-identifiers symbols)) (result-map list-flatten)) files))
(def identifier-to-symbol (identifier) (match identifier (Identifier token name _ range __) (Symbol token name range)))
(def type-to-sexp (types-to-sexp type) (match type (SimpleType identifier) (identifier-to-symbol identifier) (FunctionType arg-types return-type range) (List (list (Symbol (identifier-fn) (data-fn) range) (List (types-to-sexp arg-types) range) (type-to-sexp types-to-sexp return-type)) range) (ComplexType identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))
(def types-to-sexp (types) (list-map (type-to-sexp types-to-sexp) types))
(def constructor-to-sexp (constructor) (match constructor (SimpleConstructor identifier) (identifier-to-symbol identifier) (ComplexConstructor identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range)))
(def constructors-to-sexp (constructors) (list-map constructor-to-sexp constructors))
(def type-parameter-to-sexp (parameter) (match parameter (ExistentialParameter identifier) (List (list (Symbol (identifier-exists) (data-exists) (identifier-range identifier)) (identifier-to-symbol identifier)) (identifier-range identifier)) (UniversalParameter identifier) (identifier-to-symbol identifier)))
(def type-name-to-sexp (token range name parameters) (match parameters Empty (Symbol token name range) _ (List (Cons (Symbol token name range) (list-map type-parameter-to-sexp parameters)) range)))
(def function-arguments-to-sexp (arguments range) (List (list-map identifier-to-symbol arguments) range))
(pub def pattern-to-sexp (pattern) (match pattern (ConstructorPattern identifier Empty _) (identifier-to-symbol identifier) (ConstructorPattern identifier patterns range) (List (Cons (identifier-to-symbol identifier) (list-map pattern-to-sexp patterns)) range) (IntegerPattern value range) (Integer value range) (Capture identifier) (identifier-to-symbol identifier)))
(def match-pair-to-sexp (expression-to-sexp pair) (match pair (Pair pattern expression) (list (pattern-to-sexp pattern) (expression-to-sexp expression))))
(pub def expression-to-sexp (expression) (match expression (IntegerConstant integer range) (Integer integer range) (Variable (Identifier token string _ range __)) (Symbol token string range) (Lambda arguments expression range) (List (list (Symbol (identifier-fn) (data-fn) range) (function-arguments-to-sexp arguments range) (expression-to-sexp expression)) range) (Match expression pairs range) (List (Cons (Symbol (identifier-match) (data-match) range) (Cons (expression-to-sexp expression) (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range) (Constructor identifier expressions range) (match expressions Empty (identifier-to-symbol identifier) _ (List (Cons (identifier-to-symbol identifier) (list-map expression-to-sexp expressions)) range)) (FunctionApplication expressions range) (List (list-map expression-to-sexp expressions) range)))
(def type-definition-to-sexp (token name parameters constructors range) (list-concat (list (Symbol (identifier-typ) (data-typ) range) (type-name-to-sexp token range name parameters)) (constructors-to-sexp constructors)))
(def function-definition-to-sexp (name arguments expression range) (list (Symbol (identifier-def) (data-def) range) (identifier-to-symbol name) (function-arguments-to-sexp arguments range) (expression-to-sexp expression)))
(def definition-to-sexp' (public? range sexp) (List (match public? True (Cons (Symbol (identifier-pub) (data-pub) range) sexp) False sexp) range))
(pub def definition-to-sexp (definition) (match definition (TypeDefinition (Identifier token name _ __ ___) public? parameters constructors range) (definition-to-sexp' public? range (type-definition-to-sexp token name parameters constructors range)) (FunctionDefinition name public? arguments expression range) (definition-to-sexp' public? range (function-definition-to-sexp name arguments expression range)) (TargetDefinition _ data) (Symbol 0 (string-from-slice data) (Range 0 0))))
(pub def definitions-to-sexps (definitions) (list-map definition-to-sexp definitions))