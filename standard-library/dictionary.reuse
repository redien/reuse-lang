
(module stdlib)

(typ (dictionary value) (TrieNode (maybe value) (array (dictionary value))))

(def dictionary-empty () (TrieNode None (array-empty)))

(def dictionary-value' (dictionary)
     (match dictionary
            (TrieNode value _) value))

(def dictionary-children' (dictionary)
     (match dictionary
            (TrieNode _ children) children))

(def dictionary-find-child' (char dictionary)
     (array-get char (dictionary-children' dictionary)))

(def dictionary-set (key new-value dictionary)
     (match (string-first key)
            None
                (TrieNode (Some new-value) (dictionary-children' dictionary))
            (Some char)
                ((pipe (dictionary-find-child' char)
                       (maybe-else dictionary-empty)
                       (dictionary-set (string-rest key) new-value)
                       (fn (child)
                           (TrieNode (dictionary-value' dictionary) (array-set char child (dictionary-children' dictionary)))))
                    dictionary)))

(def dictionary-get (key dictionary)
     (match (string-first key)
            (Some char)
                (maybe-flatmap (dictionary-get (string-rest key)) (dictionary-find-child' char dictionary))
            None
                (dictionary-value' dictionary)))

(def dictionary-entries' (key dictionary)
     ((pipe dictionary-children'
            array-entries
            (list-flatmap (fn (child)
                              (dictionary-entries' (string-append (pair-left child) key) (pair-right child))))
            (fn (entries)
                (match (dictionary-value' dictionary)
                       (Some value)
                            (Cons (Pair key value) entries)
                       None
                            entries)))
        dictionary))

(def dictionary-entries (dictionary)
     (dictionary-entries' (string-empty) dictionary))

(def dictionary-of (entries)
     (list-foldl (pair-map dictionary-set) (dictionary-empty) entries))

(def dictionary-singleton (key value)
     (dictionary-set key value (dictionary-empty)))

(def dictionary-get-or (key default dictionary)
     (match (dictionary-get key dictionary)
            (Some value)  value
            None          default))
