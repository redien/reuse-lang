
(typ (result v e) (Result v) (Error e))

(def result-lift (result)
     (Result result))

(def result-error (error)
     (Error error))

(def result-map (f result)
    (match result
           (Result x)     (Result (f x))
           (Error error)  (Error error)))

(def result-map-error (f result)
    (match result
           (Result x)     (Result x)
           (Error error)  (Error (f error))))

(def result-flatmap (f result)
    (match result
           (Result x)     (f x)
           (Error error)  (Error error)))

(def result-either (f g result)
     (match result
            (Result x) (f x)
            (Error x)  (g x)))

(def result-error? (result)
     (match result
            (Error _)  True
            _          False))

(def result-filter-list (list)
     (list-foldr (fn (result new-list)
                     (match result
                            (Result x)  (Cons x new-list)
                            _           new-list))
                 Empty
                 list))

(def result-concat (list)
     (match (list-filter result-error? list)
            (Cons (Error error) _)  (Error error)
            (Cons (Result _) __)    (Result Empty)
            Empty                   (Result (result-filter-list list))))

(def result-of-maybe (error maybe)
     (match maybe
            (Some x)
                (Result x)
            None
                (Error error)))

(def result-bind (result f)
     (result-flatmap f result))

(def result-return (value)
     (result-lift value))
