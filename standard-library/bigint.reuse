
(typ bigint (Bigint boolean (list int32)))

(def bigint-trim-parts-reversed (parts)
     (match parts
            (Cons x Empty)
                parts
            (Cons x xs)
                (match (= x 0)
                       True
                           (bigint-trim-parts-reversed xs)
                       False
                           parts)
            Empty
                Empty))

(def bigint-trim-parts (parts)
     (list-reverse (bigint-trim-parts-reversed (list-reverse parts))))

(pub def bigint-from-string (string)
     (match (string-first string)
            (Some 45)
                (Bigint
                    True
                    (bigint-trim-parts (list-reverse (list-map ((flip -) 48) (string-to-list (string-rest string))))))
            _
                (Bigint
                    False
                    (bigint-trim-parts (list-reverse (list-map ((flip -) 48) (string-to-list string)))))))

(pub def bigint-from (int)
     (bigint-from-string (string-from-int32 int)))

(pub def bigint-zero ()
     (Bigint False (list 0)))

(pub def bigint-one ()
     (Bigint False (list 1)))

(pub def bigint-negate (int)
     (match int
            (Bigint negative? (Cons 0 Empty))
                int
            (Bigint negative? parts)
                (Bigint
                    (match negative?
                           True
                               False
                           False
                               True)
                    parts)))

(def stringify-parts (parts)
     (string-join (string-empty) (list-reverse (list-map string-from-int32 parts))))

(pub def bigint-to-string (int)
     (match int
            (Bigint True parts)
                (string-prepend 45 (stringify-parts parts))
            (Bigint False parts)
                (stringify-parts parts)))

(def less-than-with-carry (x y previous-less-than?)
     (match (< x y)
            True
                True
            False
                (match (= x y)
                       True
                           previous-less-than?
                       False
                           False)))

(def bigint-less-than-parts (a b previous-less-than?)
     (match (Pair a b)
            (Pair Empty Empty)
                False
            (Pair (Cons x _) Empty)
                False
            (Pair Empty (Cons x _))
                True
            (Pair (Cons x Empty) (Cons y Empty))
                (less-than-with-carry x y previous-less-than?)
            (Pair (Cons x xs) (Cons y ys))
                (bigint-less-than-parts xs ys (less-than-with-carry x y previous-less-than?))))

(pub def bigint-less-than (a b)
     (match (Pair a b)
            (Pair (Bigint True _) (Bigint False __))
                True
            (Pair (Bigint False _) (Bigint True __))
                False
            (Pair (Bigint True a-parts) (Bigint True b-parts))
                (bigint-less-than-parts b-parts a-parts False)
            (Pair (Bigint _ a-parts) (Bigint __ b-parts))
                (bigint-less-than-parts a-parts b-parts False)))

(def bigint-subtract-parts (a b carry)
     (match (Pair a b)
            (Pair (Cons x xs) Empty)
                (bigint-subtract-parts a (Cons 0 Empty) carry)
            (Pair (Cons x xs) (Cons y ys))
                (match (< (- x (+ y carry)) 0)
                       True
                           (Cons (- (+ x 10) (+ y carry)) (bigint-subtract-parts xs ys 1))
                       False
                           (Cons (- x (+ y carry)) (bigint-subtract-parts xs ys 0)))
            _
                Empty))

(def bigint-add-parts (a b carry)
     (match (Pair a b)
            (Pair (Cons x xs) (Cons y ys))
                (match (> (+ x (+ y carry)) 9)
                       True
                           (Cons (- (+ x (+ y carry)) 10) (bigint-add-parts xs ys 1))
                       False
                           (Cons (+ x (+ y carry)) (bigint-add-parts xs ys 0)))
            (Pair (Cons _ __) Empty)
                (bigint-add-parts a (Cons 0 Empty) carry)
            (Pair Empty (Cons _ __))
                (bigint-add-parts (Cons 0 Empty) b carry)
            (Pair Empty Empty)
                (match (> carry 0)
                       True
                           (Cons carry Empty)
                       False
                           Empty)))

(def bigint-add-zeroes (n digits)
     (match n
            0
                digits
            _
                (bigint-add-zeroes (- n 1) (Cons 0 digits))))

(def bigint-multiply-digit (x digits carry)
     (match digits
            Empty
                (match (> carry 0)
                       True
                           (Cons carry Empty)
                       False
                           Empty)
            (Cons y ys)
                (Cons
                    (% (+ (* x y) carry) 10)
                    (bigint-multiply-digit x ys (/ (+ (* x y) carry) 10)))))

(def bigint-multiply-parts (a b base)
     (match a
            (Cons x xs)
                (bigint-add-parts
                    (bigint-add-zeroes base (bigint-multiply-digit x b 0))
                    (bigint-multiply-parts xs b (+ base 1))
                    0)
            Empty
                Empty))

(pub def bigint-subtract (a b)
     (match (Pair a b)
            (Pair (Bigint False a-parts) (Bigint True b-parts))
                (Bigint False (bigint-add-parts a-parts b-parts 0))
            (Pair (Bigint True a-parts) (Bigint False b-parts))
                (Bigint True (bigint-add-parts a-parts b-parts 0))
            (Pair (Bigint True a-parts) (Bigint True b-parts))
                (match (bigint-less-than a b)
                       True
                           (Bigint True (bigint-trim-parts (bigint-subtract-parts a-parts b-parts 0)))
                       False
                           (Bigint False (bigint-trim-parts (bigint-subtract-parts b-parts a-parts 0))))
            (Pair (Bigint False a-parts) (Bigint False b-parts))
                (match (bigint-less-than a b)
                       True
                           (Bigint True (bigint-trim-parts (bigint-subtract-parts b-parts a-parts 0)))
                       False
                           (Bigint False (bigint-trim-parts (bigint-subtract-parts a-parts b-parts 0))))))

(pub def bigint-add (a b)
     (match (Pair a b)
            (Pair (Bigint False a-parts) (Bigint False b-parts))
                (Bigint False (bigint-add-parts a-parts b-parts 0))
            (Pair (Bigint True a-parts) (Bigint True b-parts))
                (Bigint True (bigint-add-parts a-parts b-parts 0))
            (Pair (Bigint True _) (Bigint False __))
                (bigint-subtract b (bigint-negate a))
            (Pair (Bigint False _) (Bigint True __))
                (bigint-subtract a (bigint-negate b))))

(pub def bigint-multiply (a b)
     (match (Pair a b)
            (Pair (Bigint _ (Cons 0 Empty)) (Bigint __ ___))
                (Bigint False (Cons 0 Empty))
            (Pair (Bigint _ __) (Bigint ___ (Cons 0 Empty)))
                (Bigint False (Cons 0 Empty))
            (Pair (Bigint True a-parts) (Bigint False b-parts))
                (Bigint True (bigint-multiply-parts a-parts b-parts 0))
            (Pair (Bigint False a-parts) (Bigint True b-parts))
                (Bigint True (bigint-trim-parts (bigint-multiply-parts a-parts b-parts 0)))
            (Pair (Bigint _ a-parts) (Bigint __ b-parts))
                (Bigint False (bigint-trim-parts (bigint-multiply-parts a-parts b-parts 0)))))
