
(typ (state s v) (Operation (fn (s) (pair s v))))

(def state-run (state operation)
     (match operation
            (Operation f)  (f state)))

(def state-final-value (initial-state operation)
     (match (state-run initial-state operation)
            (Pair _ value)  value))

(def state-return (value)
     (Operation (fn (state)
                    (Pair state value))))

(def state-bind (operation f)
     (Operation (fn (state)
                    (match (state-run state operation)
                           (Pair new-state new-value)  (state-run new-state (f new-value))))))

(def state-get ()
     (Operation (fn (state)
                    (Pair state state))))

(def state-set (state)
     (Operation (fn (_)
                    (Pair state state))))

(def state-modify (f)
     (state-bind (state-get) (fn (state)
                 (state-set (f state)))))

(def state-let (value f)
     (state-bind (state-return value) f))

(def state-foldr (f initial-value operations)
     (list-foldr (fn (operation chain)
                     (state-bind operation (fn (x)
                     (state-bind chain     (fn (xs)
                     (state-return (f x xs)))))))
                 (state-return initial-value)
                 operations))

(def state-foreach (f xs)
     (state-foldr list-cons Empty (list-map f xs)))


(def state-flatmap (f operation)
     (state-bind operation f))

(def state-map (f operation)
     (state-flatmap (pipe f state-return) operation))

(def state-lift (value)
     (state-return value))

(export state-run state-final-value state-return state-bind state-get state-set
        state-modify state-let state-foldr state-foreach state-flatmap state-map state-lift)
