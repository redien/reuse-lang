
(typ string-node (FTValue int32)
                 (FTNode2 int32 string-node string-node)
                 (FTNode3 int32 string-node string-node string-node))

(typ string FTEmpty
            (FTSingle string-node)
            (FTDeep (list string-node) string (list string-node)))

(def string-empty ()
     FTEmpty)

(def string-of-char (character)
     (FTSingle (FTValue character)))

(def string-node-size' (node)
     (match node
            (FTValue _)              1
            (FTNode2 size _ __)      size
            (FTNode3 size _ __ ___)  size))

(def string-node2' (a b)
     (FTNode2 (+ (string-node-size' a) (string-node-size' b)) a b))

(def string-node3' (a b c)
     (FTNode3 (+ (string-node-size' a) (+ (string-node-size' b) (string-node-size' c))) a b c))

(def string-prepend' (a tree)
     (match tree
            FTEmpty
                (FTSingle a)
            (FTSingle x)
                (FTDeep (list a) FTEmpty (list x))
            (FTDeep first middle last)
                (match first
                       (Cons b (Cons c (Cons d (Cons e Empty))))
                            (FTDeep (list a b)
                                    (string-prepend' (string-node3' c d e) middle)
                                    last)
                       _
                            (FTDeep (Cons a first) middle last))))

(def string-prepend (char string)
     (string-prepend' (FTValue char) string))

(def string-append' (a tree)
     (match tree
            FTEmpty
                (FTSingle a)
            (FTSingle x)
                (FTDeep (list x) FTEmpty (list a))
            (FTDeep first middle last)
                (match last
                       (Cons e (Cons d (Cons c (Cons b Empty))))
                            (FTDeep first
                                    (string-append' (string-node3' e d c) middle)
                                    (list b a))
                       _
                            (FTDeep first middle (list-append a last)))))

(def string-append (char string)
     (string-append' (FTValue char) string))

(def string-first-node' (node)
     (match node
            (FTValue x)            x
            (FTNode2 _ x __)       (string-first-node' x)
            (FTNode3 _ x __ ___)   (string-first-node' x)))

(def string-first (string)
     (match string
            FTEmpty           None
            (FTSingle node)   (Some (string-first-node' node))
            (FTDeep first middle last)
                (match (list-first first)
                    (Some x)  (Some (string-first-node' x))
                    None
                (match (string-first middle)
                    (Some x)  (Some x)
                    None
                (match (list-first last)
                    (Some x)  (Some (string-first-node' x))
                    None      None)))))

(def string-rest-node' (node)
     (match node
            (FTValue _)             None
            (FTNode2 _ a b)
                (match (string-rest-node' a)
                       (Some node)  (Some (string-node2' node b))
                       None         (string-rest-node' b))
            (FTNode3 _ a b c)
                (match (string-rest-node' a)
                       (Some node)  (Some (string-node3' node b c))
                       None
                (match (string-rest-node' b)
                       (Some node)  (Some (string-node2' node c))
                       None         (string-rest-node' c)))))

(def string-rest (string)
     (match string
            FTEmpty
                string
            (FTSingle node)
                (match (string-rest-node' node)
                       (Some node)  (FTSingle node)
                       None         FTEmpty)
            (FTDeep Empty FTEmpty (Cons node rest))
                (match (string-rest-node' node)
                       (Some node)  (FTDeep Empty FTEmpty (Cons node rest))
                       None         (FTDeep Empty FTEmpty rest))
            (FTDeep Empty middle Empty)
                (string-rest middle)
            (FTDeep Empty middle last)
                (FTDeep Empty (string-rest middle) last)
            (FTDeep (Cons node rest) middle last)
                (match (string-rest-node' node)
                       (Some node)  (FTDeep (Cons node rest) middle last)
                       None         (FTDeep rest middle last))))

(def string-foldr-node' (f node identity)
     (match node
            (FTValue a)        (f a identity)
            (FTNode2 _ a b)    (string-foldr-node' f a (string-foldr-node' f b identity))
            (FTNode3 _ a b c)  (string-foldr-node' f a (string-foldr-node' f b (string-foldr-node' f c identity)))))

(def string-foldr (f identity tree)
     (match tree
            FTEmpty
                identity
            (FTSingle x)
                (string-foldr-node' f x identity)
            (FTDeep first middle last)
                (list-foldr (string-foldr-node' f)
                    (string-foldr f
                        (list-foldr (string-foldr-node' f) identity last)
                        middle)
                    first)))

(def string-foldl-node' (f node identity)
     (match node
            (FTValue a)        (f a identity)
            (FTNode2 _ b a)    (string-foldl-node' f a (string-foldl-node' f b identity))
            (FTNode3 _ c b a)  (string-foldl-node' f a (string-foldl-node' f b (string-foldl-node' f c identity)))))

(def string-foldl (f identity tree)
     (match tree
            FTEmpty
                identity
            (FTSingle x)
                (string-foldl-node' f x identity)
            (FTDeep first middle last)
                (list-foldl (string-foldl-node' f)
                    (string-foldl f
                        (list-foldl (string-foldl-node' f) identity first)
                        middle)
                    last)))

(def string-size (string)
     (match string
            FTEmpty
                0
            (FTSingle x)
                (string-node-size' x)
            (FTDeep first middle last)
                (+ (list-foldr + 0 (list-map string-node-size' first))
                (+ (list-foldr + 0 (list-map string-node-size' last))
                   (string-size middle)))))




(def string-to-list (string)
     (string-foldr list-cons Empty string))

(def string-from-list (list)
     (list-foldr string-prepend (string-empty) list))

(def string-skip (count string)
     (match (> count 0)
            True   (string-skip (- count 1) (string-rest string))
            False  string))

(def string-take' (count string taken)
     (match (> count 0)
            True   (match (string-first string)
                          (Some char)  (string-take' (- count 1)
                                                     (string-rest string)
                                                     (string-prepend char taken))
                          None         taken)
            False  taken))

(def string-reverse (string)
     (string-foldl string-prepend (string-empty) string))

(def string-take (count string)
     (string-reverse (string-take' count string (string-empty))))

(def string-substring (start size string)
     (string-take size (string-skip start string)))

(def string-concat (a b)
     (string-from-list (list-concat (string-to-list a) (string-to-list b))))

(def string-join' (separator list)
     (match list
            (Cons first rest)
                (list-foldl (fn (string joined)
                                (list-concat joined (list-concat separator string)))
                            first
                            rest)
            Empty
                Empty))

(def string-join (separator strings)
     (string-from-list (string-join' (string-to-list separator) (list-map string-to-list strings))))

(def string-flatmap (f string)
     (string-join (string-empty) (list-map f (string-to-list string))))

(def string-split' (separator list current parts)
     (match list
            Empty          (list-reverse (Cons (list-reverse current) parts))
            (Cons c rest)  (match (= separator c)
                                  True   (string-split' separator rest Empty (Cons (list-reverse current) parts))
                                  False  (string-split' separator rest (Cons c current) parts))))

(def string-split (separator string)
     (list-map string-from-list (string-split' separator (string-to-list string) Empty Empty)))

(def string-trim-start' (list)
     (match list
            (Cons x xs)
                (match (= x 32)
                       True   (string-trim-start' xs)
                       False  list)
            Empty
                list))

(def string-trim-start (string)
     (string-from-list (string-trim-start' (string-to-list string))))

(def string-trim-end (string)
     (string-reverse (string-trim-start (string-reverse string))))

(def string-trim (string)
     (string-trim-start (string-trim-end string)))

(def string-empty? (string)
     (match (string-first string)
            (Some _)  False
            None      True))

(def string-equal? (a b)
     (match (string-first a)
            (Some xa) (match (string-first b)
            (Some xb) (and (= xa xb) (string-equal? (string-rest a) (string-rest b)))
            None      (string-empty? a))
            None      (string-empty? b)))


(def string-point-is-digit (point)
     (and (> point 47) (< point 58)))

(def string-to-int32''' (string-to-int32'' string accumulator x)
     (string-to-int32'' string (Some (+ (* 10 accumulator) (- x 48))))) 

(def string-to-int32'' (string accumulator)
     (match string
            Empty
                accumulator
            (Cons x rest)
                (maybe-flatmap (fn (accumulator)
                    ((pipe
                            (maybe-filter string-point-is-digit)
                            (maybe-flatmap (string-to-int32''' string-to-int32'' rest accumulator)))
                        (Some x)))
                    accumulator)))

(def string-to-int32' (string)
     (match string
            (Cons 45 string)
                (match (list-empty? string)
                       True   None
                       False  (maybe-map (fn (x) (* -1 x)) (string-to-int32' string)))
            _
                (string-to-int32'' string (Some 0))))

(def string-to-int32 (string)
     (string-to-int32' (string-to-list string)))

(def string-from-int32'' (integer string)
     (match (> integer 9)
            True
                (string-from-int32'' (/ integer 10) (Cons (+ (% integer 10) 48) string))
            False
                (Cons (+ integer 48) string)))

(def string-from-int32' (integer)
     (match (< integer 0)
            True
                (match (= integer -2147483648)
                    True
                        (list 45 50 49 52 55 52 56 51 54 52 56)
                    False
                        (Cons 45 (string-from-int32' (* integer -1))))
            False
                (string-from-int32'' integer Empty)))

(def string-from-int32 (integer)
     (string-from-list (string-from-int32' integer)))

(def string-collect-from-indexed-iterator (predicate iterator)
     (pair-map-right string-from-list (list-collect-from-indexed-iterator predicate iterator)))
