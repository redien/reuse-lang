
(def whitespace? (character)
     (or (= character 32)
     (or (= character 13)
     (or (= character 9)
         (= character 10)))))

(def atom-character? (character)
     (and (not (= character 40))
     (and (not (= character 41))
          (not (whitespace? character)))))

(typ range               (Range int32 int32))

(typ sexp                (Symbol string            range)
                         (List   (list sexp)       range))

(typ parse-error         ParseErrorTooFewClosingBrackets
                         ParseErrorTooManyClosingBrackets)

(typ (parse-result i e)  (ParseNext i e)
                         (ParseOut i)
                         ParseEnd)

(def symbol-range (start end)
     (Range (indexed-iterator-index start) (indexed-iterator-index end)))

(def parse-symbol (iterator)
     (match (string-collect-from-indexed-iterator atom-character? iterator)
            (Pair next-iterator name)
                     (match (string-empty? name)
                         True  (ParseOut iterator)
                         False (ParseNext next-iterator
                                          (Symbol name (symbol-range iterator next-iterator))))))

(def list-range (start end)
     (Range (- (indexed-iterator-index start) 1) (indexed-iterator-index end)))

(def parse-list (iterator parse-sexps)
     (match (parse-sexps iterator Empty)
            (Pair next-iterator expressions)  (ParseNext next-iterator (List expressions (list-range iterator next-iterator)))))

(def parse-expression (iterator parse-sexps)
     (match (indexed-iterator-get iterator)
            None       ParseEnd
            (Some 40)  (parse-list (indexed-iterator-next iterator) parse-sexps)
            (Some 41)  (ParseOut   (indexed-iterator-next iterator))
            (Some x)   (match (whitespace? x)
                              True   (parse-expression (indexed-iterator-next iterator) parse-sexps)
                              False  (parse-symbol iterator))))

(def parse-sexps (iterator expressions)
     (match (parse-expression iterator parse-sexps)
            ParseEnd                    (Pair iterator (list-reverse expressions))
            (ParseOut iterator)         (Pair iterator (list-reverse expressions))
            (ParseNext iterator result) (parse-sexps iterator (Cons result expressions))))

(def inc (x) (+ x 1))

(def count-parens (iterator)
     (indexed-iterator-foldl
        (fn (c count)
                (match c
                       40  (pair-map-left inc count)
                       41  (pair-map-right inc count)
                       _   count))
        (Pair 0 0)
        iterator))

(def check-errors (iterator)
     (match (count-parens iterator)
            (Pair open close)
                (match (< open close)
                       True   (Some ParseErrorTooManyClosingBrackets)
                       False
                (match (> open close)
                       True   (Some ParseErrorTooFewClosingBrackets)
                       False  None))))

(export parse (iterator)
        (match (check-errors iterator)
               (Some error)  (Error error)
               None          (match (parse-sexps iterator Empty)
                                    (Pair _ expressions)  (Result expressions))))

(def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(def stringify-sexp (stringify expression)
     (match expression
            (Symbol name _)      name
            (List expressions _) (wrap-in-brackets (stringify expressions))))

(export stringify (expressions)
        (string-join (string-of-char 32) (list-map (stringify-sexp stringify) expressions)))
