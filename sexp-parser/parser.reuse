
(def whitespace? (character)
     (match character
            32  True
            13  True
            9   True
            10  True
            _   False))

(def atom-character? (character)
     (match character
            40 False
            41 False
            _  (not (whitespace? character))))

(typ range               (Range int32 int32))

(typ sexp                (Symbol string            range)
                         (List   (list sexp)       range))

(typ parse-error         ParseErrorTooFewClosingBrackets
                         ParseErrorTooManyClosingBrackets)

(def symbol-range (i start end)
     (Range (indexed-iterator-index i start) (indexed-iterator-index i end)))

(def parse-symbol (i iterator end next)
     (match (string-collect-from-indexed-iterator i atom-character? iterator)
            (Pair next-iterator name)
                     (match (string-empty? name)
                         True  (end iterator)
                         False (next next-iterator (Symbol name (symbol-range i iterator next-iterator))))))

(def list-range (i start end)
     (Range (- (indexed-iterator-index i start) 1) (indexed-iterator-index i end)))

(def parse-list (i iterator parse-sexps error next)
     (parse-sexps iterator Empty error
                  (fn (next-iterator expressions)
                      (next next-iterator (List expressions (list-range i iterator next-iterator))))))

(def parse-expression (i depth iterator parse-sexps error end next)
     (match (indexed-iterator-next i iterator)
            (Pair None _)
                (match depth
                       0  (end iterator)
                       _  (error ParseErrorTooFewClosingBrackets))
            (Pair (Some 40) next-iterator)
                (parse-list i next-iterator (parse-sexps i (+ depth 1)) error next)
            (Pair (Some 41) next-iterator)
                (match depth
                       0  (error ParseErrorTooManyClosingBrackets)
                       _  (end next-iterator))
            (Pair (Some x) next-iterator)
                (match (whitespace? x)
                       True   (parse-expression i depth next-iterator parse-sexps error end next)
                       False  (parse-symbol i iterator end next))))

(def parse-sexps (i depth iterator expressions error end)
     (parse-expression i depth iterator parse-sexps error
                       (fn (iterator)
                           (end iterator (list-reverse expressions)))
                       (fn (iterator result)
                           (parse-sexps i depth iterator (Cons result expressions) error end))))

(def parse (i iterator)
     (parse-sexps i 0 iterator Empty
                  (fn (error)
                      (Error error))
                  (fn (_ expressions)
                      (Result expressions))))

(def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(def stringify-sexp (stringify expression)
     (match expression
            (Symbol name _)      name
            (List expressions _) (wrap-in-brackets (stringify expressions))))

(def stringify (expressions)
     (string-join (string-of-char 32) (list-map (stringify-sexp stringify) expressions)))
