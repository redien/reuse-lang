
(typ range               (Range int32 int32 int32))

(typ sexp                (Symbol (list int32)      range)
                         (List   (list sexp)       range))

(typ parse-error         ParseErrorTooFewClosingBrackets
                         ParseErrorTooManyClosingBrackets)

(def parser-one ()
     (Parser (fn (input)
                 (match input
                        Empty        None
                        (Cons x xs)  (Some (Pair x xs))))))

(def parser-one-if (predicate)
     (parser-if predicate (parser-one)))

(def whitespace? (character)
     (or (= character 32)
     (or (= character 13)
     (or (= character 9)
         (= character 10)))))

(def parser-whitespace ()
     (parser-if whitespace? (parser-one)))

(def parser-with-whitespace (parser)
     (parser-bind (fn (_)
     (parser-bind (fn (value)
     (parser-bind (fn (_)
                      (parser-result value))
                  (parser-zero-or-more (parser-whitespace))))
                  parser))
                  (parser-zero-or-more (parser-whitespace))))

(def atom-character? (character)
     (and (not (= character 40))
     (and (not (= character 41))
          (not (whitespace? character)))))

(def parser-atom-character ()
     (parser-if atom-character? (parser-one)))

(def parser-atom ()
     (parser-bind (fn (name)
                      (parser-result (Symbol name (Range 0 0 0))))
                  (parser-with-whitespace (parser-one-or-more (parser-atom-character)))))

(def parser-open-bracket ()
     (parser-with-whitespace (parser-if (fn (x) (= x 40)) (parser-one))))

(def parser-close-bracket ()
     (parser-with-whitespace (parser-if (fn (x) (= x 41)) (parser-one))))

(def list-parser (sexp-parser)
     (parser-bind (fn (_)
     (parser-bind (fn (sexps)
     (parser-bind (fn (_)
                      (parser-result (List sexps (Range 0 0 0))))
                  (parser-close-bracket)))
                  (parser-zero-or-more (sexp-parser))))
                  (parser-open-bracket)))

(def sexp-parser ()
     (parser-or (list-parser sexp-parser)
                (parser-atom)))

(def parse-sexps (input)
     (parser-run (parser-zero-or-more (sexp-parser)) input))

(export parse (input)
        (match (parse-sexps input)
               (Some expressions)  (Result expressions)
               None                (Result Empty)))

(def wrap-in-brackets (string)
     (string-concat (list 40) (string-concat string (list 41))))

(def stringify-sexp (stringify expression)
     (match expression
            (Symbol name _)      name
            (List expressions _) (wrap-in-brackets (stringify expressions))))

(export stringify (expressions)
        (string-join (string-of-char 32) (list-map (stringify-sexp stringify) expressions)))
