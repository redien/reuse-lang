
(def whitespace? (character)
     (or (= character 32)
     (or (= character 13)
     (or (= character 9)
         (= character 10)))))

(def atom-character? (character)
     (and (not (= character 40))
     (and (not (= character 41))
          (not (whitespace? character)))))

(typ range               (Range int32 int32))

(typ sexp                (Symbol string            range)
                         (List   (list sexp)       range))

(typ parse-error         ParseErrorTooFewClosingBrackets
                         ParseErrorTooManyClosingBrackets)

(typ (parse-result i e)  (ParseNext i e)
                         (ParseOut i)
                         ParseEnd)

(def symbol-range (start end)
     (Range start end))

(def collect-while (predicate accumulator chunk index size)
     (match (and (< index size) (predicate (chunk-get index chunk)))
            True   (collect-while predicate (string-append (chunk-get index chunk) accumulator) chunk (+ index 1) size)
            False  (Pair index accumulator)))

(def parse-symbol (chunk index size)
     (match (atom-character? (chunk-get index chunk))
            False   (ParseOut index)
            True
     (match (collect-while atom-character? (string-empty) chunk index size)
            (Pair next-index name)
                   (ParseNext next-index (Symbol name (symbol-range index next-index))))))

(def list-range (start end)
     (Range (- start 1) end))

(def parse-list (chunk index size parse-sexps)
     (match (parse-sexps chunk index size Empty)
            (Pair next-index expressions)  (ParseNext next-index (List expressions (list-range index next-index)))))

(def parse-expression (chunk index size parse-sexps)
     (match (< index size)
            False      ParseEnd
            True
     (match (chunk-get index chunk)
            40  (parse-list chunk (+ index 1) size parse-sexps)
            41  (ParseOut (+ index 1))
            x   (match (whitespace? x)
                       True   (parse-expression chunk (+ index 1) size parse-sexps)
                       False  (parse-symbol chunk index size)))))

(def parse-sexps (chunk index size expressions)
     (match (parse-expression chunk index size parse-sexps)
            ParseEnd                 (Pair index (list-reverse expressions))
            (ParseOut index)         (Pair index (list-reverse expressions))
            (ParseNext index result) (parse-sexps chunk index size (Cons result expressions))))

(def count-parens (chunk)
     (chunk-foldl (fn (c count)
                      (match c
                             40  (pair-map-left (+ 1) count)
                             41  (pair-map-right (+ 1) count)
                             _   count))
                  (Pair 0 0)
                  chunk))

(def check-errors (chunk)
     (match (count-parens chunk)
            (Pair open close)
                (match (< open close)
                       True   (Some ParseErrorTooManyClosingBrackets)
                       False
                (match (> open close)
                       True   (Some ParseErrorTooFewClosingBrackets)
                       False  None))))

(def parse' (chunk)
     (match (check-errors chunk)
            (Some error)  (Error error)
            None          (match (parse-sexps chunk 0 (chunk-size chunk) Empty)
                                 (Pair _ expressions)  (Result expressions))))

(export parse (stdin)
        (parse' stdin))

(def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(def stringify-sexp (stringify expression)
     (match expression
            (Symbol name _)      name
            (List expressions _) (wrap-in-brackets (stringify expressions))))

(export stringify (expressions)
        (string-join (string-of-char 32) (list-map (stringify-sexp stringify) expressions)))
