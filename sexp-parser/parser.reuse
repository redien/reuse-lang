
(def whitespace? (character)
     (match character
            32  True
            13  True
            9   True
            10  True
            _   False))

(def atom-character? (character)
     (match character
            40 False
            41 False
            _  (not (whitespace? character))))

(typ range               (Range int32 int32))

(typ sexp                (Symbol string            range)
                         (List   (list sexp)       range))

(typ parse-error         ParseErrorTooFewClosingBrackets
                         ParseErrorTooManyClosingBrackets)

(def symbol-range (start end)
     (Range (indexed-iterator-index start) (indexed-iterator-index end)))

(def parse-symbol (iterator end next)
     (match (string-collect-from-indexed-iterator atom-character? iterator)
            (Pair next-iterator name)
                     (match (string-empty? name)
                         True  (end iterator)
                         False (next next-iterator (Symbol name (symbol-range iterator next-iterator))))))

(def list-range (start end)
     (Range (- (indexed-iterator-index start) 1) (indexed-iterator-index end)))

(def parse-list (iterator parse-sexps error next)
     (parse-sexps iterator Empty error
                  (fn (next-iterator expressions)
                      (next next-iterator (List expressions (list-range iterator next-iterator))))))

(def parse-expression (depth iterator parse-sexps error end next)
     (match (indexed-iterator-get iterator)
            None       (match depth
                              0  (end iterator)
                              _  (error ParseErrorTooFewClosingBrackets))
            (Some 40)  (parse-list (indexed-iterator-next iterator) (parse-sexps (+ depth 1)) error next)
            (Some 41)  (match depth
                              0  (error ParseErrorTooManyClosingBrackets)
                              _  (end (indexed-iterator-next iterator)))
            (Some x)   (match (whitespace? x)
                              True   (parse-expression depth (indexed-iterator-next iterator) parse-sexps error end next)
                              False  (parse-symbol iterator end next))))

(def parse-sexps (depth iterator expressions error end)
     (parse-expression depth iterator parse-sexps error
                       (fn (iterator)
                           (end iterator (list-reverse expressions)))
                       (fn (iterator result)
                           (parse-sexps depth iterator (Cons result expressions) error end))))

(def parse (iterator)
     (parse-sexps 0 iterator Empty
                  (fn (error)
                      (Error error))
                  (fn (_ expressions)
                      (Result expressions))))

(def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(def stringify-sexp (stringify expression)
     (match expression
            (Symbol name _)      name
            (List expressions _) (wrap-in-brackets (stringify expressions))))

(def stringify (expressions)
     (string-join (string-of-char 32) (list-map (stringify-sexp stringify) expressions)))
