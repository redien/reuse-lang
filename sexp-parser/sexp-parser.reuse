
(def whitespace? (character)
     (match character
            32
                True
            13
                True
            9
                True
            10
                True
            _
                False))

(def atom-character? (character)
     (match character
            40
                False
            41
                False
            _
                (not (whitespace? character))))

(pub typ range (Range int32 int32))

(pub typ sexp
     (Symbol int32 string range)
     (Integer int32 range)
     (List (list sexp) range))

(pub typ parse-error
     ParseErrorTooFewClosingBrackets
     ParseErrorTooManyClosingBrackets)

(def intern-string (index next-index name symbol-state next)
     (match symbol-state
            (Pair token symbols)
                (match (dictionary-get name symbols)
                       (Some (Pair token name))
                           (next next-index symbol-state (Symbol token name (Range index next-index)))
                       None
                           (next
                               next-index
                               (Pair (+ token 1) (dictionary-set name (Pair token name) symbols))
                               (Symbol token name (Range index next-index))))))

(def parse-symbol (index slice symbols next end)
     (match (string-collect-from-slice atom-character? index slice)
            (Pair next-index name)
                (match (string-to-int32 name)
                       (Some integer)
                           (next next-index symbols (Integer integer (Range index next-index)))
                       None
                           (match (string-is-empty? name)
                                  False
                                      (intern-string index next-index name symbols next)
                                  True
                                      (end index)))))

(def parse-list (index slice parse-sexps symbols error next)
     ((parse-sexps index slice symbols Empty error) (fn (next-index symbols expressions)
         (next next-index symbols (List expressions (Range (- index 1) next-index))))))

(def parse-expression (depth index slice parse-sexps' symbols error next end)
     (match (< index (slice-size slice))
            False
                (match depth
                       0
                           (end index)
                       _
                           (error ParseErrorTooFewClosingBrackets))
            True
                (match (slice-get slice index)
                       40
                           (parse-list (+ index 1) slice (parse-sexps' (+ depth 1)) symbols error next)
                       41
                           (match depth
                                  0
                                      (error ParseErrorTooManyClosingBrackets)
                                  _
                                      (end (+ index 1)))
                       x
                           (match (whitespace? x)
                                  True
                                      (parse-expression depth (+ index 1) slice parse-sexps' symbols error next end)
                                  False
                                      (parse-symbol index slice symbols next end)))))

(def parse-sexps' (depth index slice symbols expressions error end)
     ((parse-expression depth index slice parse-sexps' symbols error)
         (fn (index symbols expression)
             ((parse-sexps' depth index slice)
                 symbols
                 (Cons expression expressions)
                 error
                 end))
         (fn (index)
             (end index symbols (list-reverse expressions)))))

(pub def parse-sexps (symbols slice)
     ((parse-sexps' 0 0 slice symbols Empty)
         (fn (error)
             (Error error))
         (fn (_ symbols expressions)
             (Result (Pair symbols expressions)))))

(pub def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(def stringify-sexp' (stringify-sexps expression)
     (match expression
            (Symbol _ name __)
                name
            (Integer integer _)
                (string-from-int32 integer)
            (List expressions _)
                (wrap-in-brackets (stringify-sexps expressions))))

(pub def stringify-sexps (expressions)
     (string-join
         (string-of-char 32)
         (list-map (stringify-sexp' stringify-sexps) expressions)))

(pub def stringify-sexp (expression)
     (stringify-sexp' stringify-sexps expression))
