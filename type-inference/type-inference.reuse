
(def add-type-constructors-to-context (name parameters constructors meta)
     (state-modify (fn (context)
                       (type-inference-context-add-types (types-from-constructors name (list-map type-from-parameter parameters) constructors) context))
                   (state-lift (TypeDefinition name parameters constructors (TypeAnnotation (UniversalType Empty) meta)))))

(def add-function-constraints (constructor name arguments body meta)
     ((pipe (gensyms   (list-size arguments) 
                       (fn (argument-types _)
                           (state-lift (list-map (fn (type) (UniversalType type)) argument-types))))
            (gensym    (fn (return-type argument-types)
                           (state-lift (FnType argument-types (UniversalType return-type)))))
            (state-map (fn (type)
                           (constructor name arguments body (TypeAnnotation type meta)))))
            (state-lift arguments)))

(def construct-function-definition (name arguments body meta)
     (FunctionDefinition name arguments body meta))

(def construct-export-definition (name arguments body meta)
     (ExportDefinition name arguments body meta))

(def generate-constraints-for-definition (definition)
     (match definition
         (TypeDefinition name parameters constructors meta)
             (add-type-constructors-to-context name parameters constructors meta)
         (FunctionDefinition name arguments body meta)
             (add-function-constraints construct-function-definition name arguments body meta)
         (ExportDefinition name arguments body meta)
             (add-function-constraints construct-export-definition name arguments body meta)))

(def infer-types (definitions)
     (state-final-value (type-inference-context-empty)
                        (state-foreach generate-constraints-for-definition definitions)))
