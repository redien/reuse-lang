
(def constraints-integer-constant (integer)
     (state-return (ConstType (data-int32) Empty)))

(def constraints-identifier (name)
     (type-inference-context-resolve name))

(def constraints-argument (argument-names argument-types)
     (state-let   (list-zip argument-names argument-types)  (fn (arguments)
     (type-inference-context-add-types arguments))))

(def constraints-function (constraints-expression arguments body)
     (state-bind   (gensyms (list-size arguments))                         (fn (type-names)
     (state-let    (list-map (fn (type) (UniversalType type)) type-names)  (fn (argument-types)
     (state-bind   (constraints-argument arguments argument-types)         (fn (_)
     (state-bind   (constraints-expression body)                           (fn (return-type)
     (state-return (FnType argument-types return-type)))))))))))

(def constraints-application (type expression-types)
     (match type
            (FnType argument-types return-type)
                (state-let  (list-zip argument-types expression-types)           (fn (constraints)
                (state-bind (type-inference-context-add-constraints constraints) (fn (_)
                (state-return return-type)))))
            _
                (state-return ErrorType)))

(def constraints-function-application (constraints-expression function arguments)
     (state-bind (state-foreach constraints-expression arguments) (fn (argument-types)
     (state-bind (constraints-expression function)                (fn (function-type)
     (constraints-application function-type argument-types))))))

(def constraints-constructor-application (constraints-expression name arguments)
     (state-bind (state-foreach constraints-expression arguments) (fn (argument-types)
     (state-bind (type-inference-context-resolve name)            (fn (type)
     (constraints-application type argument-types))))))

(def constraints-match-rule (expression-type rule)
     (state-return expression-type))

(def constraints-match (constraints-expression expression rules)
     (state-bind (constraints-expression expression)                            (fn (expression-type)
     (state-bind (state-foreach (constraints-match-rule expression-type) rules) (fn (rule-types)
     (state-return expression-type))))))

(def constraints-error ()
     (state-return ErrorType))

(def constraints-expression (expression)
     (match expression
            (Identifier name)
                (constraints-identifier name)
            (IntegerConstant integer _)
                (constraints-integer-constant integer)
            (Lambda arguments body _)
                (constraints-function constraints-expression arguments body)
            (FunctionApplication (Cons function arguments) _)
                (constraints-function-application constraints-expression function arguments)
            (FunctionApplication Empty _)
                (constraints-error)
            (Constructor _ name arguments __)
                (constraints-constructor-application constraints-expression name arguments)
            (Match expression rules _)
                (constraints-match constraints-expression expression rules)))

(def add-type-constructors-to-context (name parameters constructors meta)
     (state-let    (list-map type-from-parameter parameters)                   (fn (parameter-types)
     (state-let    (TypeAnnotation (ConstType name parameter-types) meta)      (fn (annotation)
     (state-let    (types-from-constructors name parameter-types constructors) (fn (constructor-types)
     (state-bind   (type-inference-context-add-types constructor-types)        (fn (_)
     (state-return (TypeDefinition ModuleSelf name parameters constructors annotation)))))))))))

(def constraints-function-definition (constructor name arguments body meta)
     (state-bind   (constraints-function constraints-expression arguments body)   (fn (type)
     (state-bind   (type-inference-context-add-types (list (Pair name type)))     (fn (_)
     (state-let    (TypeAnnotation type meta)                                     (fn (annotation)
     (state-return (constructor name arguments body annotation)))))))))

(def construct-function-definition (name arguments body meta)
     (FunctionDefinition name arguments body meta))

(def constraints-definition (definition)
     (match definition
         (TypeDefinition _ name parameters constructors meta)
             (add-type-constructors-to-context name parameters constructors meta)
         (FunctionDefinition _ name arguments body meta)
             (constraints-function-definition construct-function-definition name arguments body meta)))

(def int32-type ()
     (ConstType (data-int32) Empty))

(def binary-operator (type)
     (FnType (list (type) (type)) (type)))

(def add-intrinsic-types ()
     (type-inference-context-add-types (list
        (Pair (data-modulus)  (binary-operator int32-type))
        (Pair (data-plus)     (binary-operator int32-type))
        (Pair (data-divide)   (binary-operator int32-type))
        (Pair (data-multiply) (binary-operator int32-type))
        (Pair (data-minus)    (binary-operator int32-type)))))

(def infer-types (definitions)
     (state-final-value (type-inference-context-empty)
     (state-bind (add-intrinsic-types) (fn (_)
     (state-foreach constraints-definition definitions)))))
