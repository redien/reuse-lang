
(def add-constructor-types (name parameters constructors)
     (type-inference-context-add-types
     (types-from-constructors name
                              (list-map type-from-parameter parameters)
                              constructors)))

(def add-type-constructors-to-context (name parameters constructors meta)
     (state-bind   (add-constructor-types name parameters constructors) (fn (_)
     (state-return (TypeDefinition name
                                   parameters
                                   constructors
                                   (TypeAnnotation (UniversalType Empty)
                                   meta))))))

(def add-argument-types (argument-names argument-types)
     (state-let (list-zip argument-names argument-types) (fn (arguments)
     (type-inference-context-add-types arguments))))

(def add-function-constraints (constructor name arguments body meta)
     (state-bind   (gensyms (list-size arguments))                             (fn (argument-names)
     (state-bind   (gensym)                                                    (fn (return-type-name)
     (state-let    (list-map (fn (type) (UniversalType type)) argument-names)  (fn (argument-types)
     (state-let    (FnType argument-types (UniversalType return-type-name))    (fn (type)
     (state-bind   (add-argument-types argument-names argument-types)          (fn (_)
     (state-let    (TypeAnnotation type meta)                                  (fn (annotation)
     (state-return (constructor name arguments body annotation)))))))))))))))

(def construct-function-definition (name arguments body meta)
     (FunctionDefinition name arguments body meta))

(def construct-export-definition (name arguments body meta)
     (ExportDefinition name arguments body meta))

(def generate-constraints-for-definition (definition)
     (match definition
         (TypeDefinition name parameters constructors meta)
             (add-type-constructors-to-context name parameters constructors meta)
         (FunctionDefinition name arguments body meta)
             (add-function-constraints construct-function-definition name arguments body meta)
         (ExportDefinition name arguments body meta)
             (add-function-constraints construct-export-definition name arguments body meta)))

(def infer-types (definitions)
     (state-final-value (type-inference-context-empty)
     (state-foreach generate-constraints-for-definition definitions)))
