
(typ type-inference-context (TypeInferenceContext (list (pair (list int32) type))
                                                  int32
                                                  (list (pair type type))))

(def type-inference-context-empty ()
     (TypeInferenceContext Empty 0 Empty))

(def type-inference-context-gensym-increment (n)
     (state-modify (fn (context)
                       (match context
                              (TypeInferenceContext types symbol-count constraints)
                                  (TypeInferenceContext types (+ symbol-count n) constraints)))))

(def type-inference-context-symbol-from-count (count)
     (Cons 84 (string-from-int32 count)))

(def type-inference-context-symbol ()
     (state-bind   (state-get) (fn (context)
     (state-return (match context
                          (TypeInferenceContext _ symbol-count __)
                              (type-inference-context-symbol-from-count symbol-count))))))

(def type-inference-context-symbols (n)
     (state-bind   (state-get) (fn (context)
     (state-return (match context
                          (TypeInferenceContext _ symbol-count __)
                              (list-map type-inference-context-symbol-from-count
                                        (list-from-range symbol-count (+ symbol-count n))))))))

(def gensym ()
     (state-bind   (type-inference-context-symbol)             (fn (symbol)
     (state-bind   (type-inference-context-gensym-increment 1) (fn (context)
     (state-return symbol))))))

(def gensyms (count)
     (state-bind   (type-inference-context-symbols count)          (fn (symbols)
     (state-bind   (type-inference-context-gensym-increment count) (fn (context)
     (state-return symbols))))))

(def type-inference-context-add-types (new-types)
     (state-modify (fn (context)
                       (match context
                              (TypeInferenceContext types symbol-count constraints)
                                  (TypeInferenceContext (list-concat new-types types) symbol-count constraints)))))

(def type-inference-context-resolve' (name)
     (state-bind   (state-get) (fn (context)
     (state-return (match context
                          (TypeInferenceContext types _ __)
                              (maybe-map pair-right
                                         (list-find-first (fn (pair) (string-equal? name (pair-left pair))) types)))))))

(def type-inference-context-resolve (name)
     (state-bind   (type-inference-context-resolve' name)  (fn (type)
     (state-return (maybe-else (fn () ErrorType) type)))))
     

(def type-inference-context-add-constraint (a b)
     (state-modify (fn (context)
                       (match context
                              (TypeInferenceContext types symbol-count constraints)
                                  (TypeInferenceContext types symbol-count (Cons (Pair a b) constraints))))))

(def type-inference-context-constraints ()
     (state-bind   (state-get) (fn (context)
     (state-return (match context
                          (TypeInferenceContext _ __ constraints)
                              constraints)))))
