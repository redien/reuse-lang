
(typ (event iterator state) (EventArguments (list string))
                            (EventReadFiles (list (source-file iterator)) state))

(typ (command state) (CommandError string)
                     (CommandOutput string)
                     (CommandWriteFiles (list (pair string string)))
                     (CommandReadFiles (list (pair module-reference string)) state))

(def standard-library? (arguments)
     (match (dictionary-get (data-stdlib) arguments)
            (Some value)  (string-equal? value (data-true))
            None          True))

(def minimal? (arguments)
     (match (dictionary-get (data-minimal) arguments)
            (Some value)  (string-equal? value (data-true))
            None          False))

(def filename-without-extension (filename)
     (match (list-first (string-split 46 filename))
            (Some name)  name
            None         filename))

(def filename-from-path (path)
     (match (list-last (string-split 47 path))
            (Some filename)  filename
            None             path))

(def module-name-and-path (path)
     (Pair (ModulePath (filename-without-extension (filename-from-path path)))
           path))

(def standard-library-files (data-path)
     (list (string-join (data-/) (list data-path (data-standard-library-filename)))
           (string-join (data-/) (list data-path (data-pervasives-filename)))))

(def modules-from-arguments (data-path arguments)
     ((pipe (list-filter (. (string-equal? (data-module-flag)) pair-left))
            (list-map pair-right)
            (match (standard-library? (dictionary-of arguments))
                   True   (list-concat (standard-library-files data-path))
                   False  id)
            (list-map module-name-and-path))
          arguments))

(def source-files-from-paths (paths)
     (list-map (pair-cons ModuleSelf) paths))

(def on-event (data-path event)
     (match event
            (EventArguments arguments)
                (match (parse-arguments arguments)
                       (CliArguments _ Empty)
                            (CommandError (data-no-input-files))
                       (CliArguments arguments input-files)
                            (CommandReadFiles (list-concat (Cons (Pair ModuleSelf (string-concat data-path (data-preamble-filename)))
                                                                 (modules-from-arguments data-path arguments))
                                                           (source-files-from-paths input-files))
                                              (dictionary-of arguments))
                       (CliErrorMissingValue key)
                            (CommandError key))
            (EventReadFiles file-entries arguments)
                (match (dictionary-get (data-output-key) arguments)
                       (Some output-path)
                            (match (compile file-entries
                                            (filename-without-extension (filename-from-path output-path))
                                            (CompilerParameters (minimal? arguments) (standard-library? arguments)))
                                   (Result source)  (CommandWriteFiles (list (Pair output-path source)))
                                   (Error error)    (CommandError error))
                       None
                            (CommandError (data-no-output-path)))))
