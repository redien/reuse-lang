
(def add-identifiers (identifiers offset dictionary)
     (match identifiers
            (Cons identifier rest)
                (add-identifiers rest (- offset 1) (dictionary-set (identifier) (Pair offset (identifier)) dictionary))
            Empty
                dictionary))

(def error-to-string (error)
     (match error
            (MalformedDefinitionError range)
                (i18n-malformed-definition-error English range)
            (MalformedFunctionDefinitionError range)
                (i18n-malformed-function-definition-error English range)
            (MalformedTypeDefinitionError range)
                (i18n-malformed-type-definition-error English range)
            (MalformedFunctionNameError range)
                (i18n-malformed-function-name-error English range)
            (MalformedExpressionError range)
                (i18n-malformed-expression-error English range)
            (MalformedMatchExpressionError range)
                (i18n-malformed-match-expression-error English range)
            (MalformedSymbolError range)
                (i18n-malformed-symbol-error English range)
            (MalformedConstructorError range)
                (i18n-malformed-constructor-error English range)
            (MalformedTypeError range)
                (i18n-malformed-type-error English range)
            MalformedSexpTooFewClosingBrackets
                (i18n-malformed-sexp-too-few-closing-brackets English)
            MalformedSexpTooManyClosingBrackets
                (i18n-malformed-sexp-too-many-closing-brackets English)))

(def stringify-parse-errors (definitions)
     (result-bimap id error-to-string definitions))

(def identifier-is-reserved? (identifier)
     (string-equal? (string-substring 0 3 (symbol-name identifier)) (data-sparkle)))

(def validate-identifier (identifier)
     (match (identifier-is-reserved? identifier)
            True   (result-error (data-error-reserved-identifier))
            False  (result-lift identifier)))

(def validate-reserved-identifiers (definitions)
     (result-flatmap (. result-concat (list-map (over-definition-expressions (over-identifiers validate-identifier)))) definitions))

(def transform-strings (path content)
     (match (string-gen content)
            (Result string)  (indexed-iterator-from-iterable (string-iterable) string)
            (Error error)    (indexed-iterator-from-iterable (string-iterable) (string-empty))))

(def parse-reuse-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path content)))

(def parse-strings-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path (transform-strings path content))))

(def parse-target-file (file)
     (match file
            (SourceFile module path content)
                (parser-return (list (TargetDefinition (SourceReference path module) content)))))

(def parse-source-file (file)
     (match (source-file-type file)
            SourceFileTypeStrings         (parse-strings-file file)
            SourceFileTypeReuse           (parse-reuse-file file)
            SourceFileTypeTargetLanguage  (parse-target-file file)))

(def parse-source-files (internal-symbols files)
     ((pipe (list-map parse-source-file)
            parser-sequence
            (parser-run internal-symbols)
            (result-map list-flatten)
            stringify-parse-errors)
        files))
