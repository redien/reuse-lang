
(def add-identifiers (identifiers offset dictionary)
     (match identifiers
            (Cons identifier rest)
                (add-identifiers rest (- offset 1) (dictionary-set (identifier) (Pair offset (identifier)) dictionary))
            Empty
                dictionary))

(def string-format (list)
     (string-join (string-of-char 10)
                  (list-map (string-join (string-empty)) list)))

(def find-file-matching (files source-reference)
     (list-find-first (. (string-equal? (source-reference-file-path source-reference)) source-file-path) files))

(def range-information (range)
     (match range
            (Range start end)
                (string-join (string-of-char 45) (list (string-from-int32 start) (string-from-int32 end)))))

(def count-lines (index lines source)
     (match (string-index-of index (string-of-char 10) source)
            (Some index)  (count-lines (+ index 1) (+ lines 1) source)
            None          (Pair lines (+ (- (string-size source) index) 1))))

(def line-information (file range)
     (match range
            (Range start _)
                (match (string-from-indexed-iterator (source-file-content file))  content
                (count-lines 0 1 (string-substring 0 start content)))))

(def next-newline (content index)
     (match (string-index-of index (string-of-char 10) content)
            (Some index)
                (+ index 1)
            None
                index))

(def source-paragraph (file range)
     (match range
            (Range start end)
                (match (string-from-indexed-iterator (source-file-content file))  content
                (match (next-newline content (- start 100))                       paragraph-start
                (match (- (next-newline content (+ end 50)) paragraph-start)      paragraph-size
                (match (string-substring paragraph-start paragraph-size content)  region
                region))))))

(def location-information (files source-reference range)
     (match (find-file-matching files source-reference)
            (Some file)
                (match (line-information file range)
                       (Pair lines column)
                            (string-format (list Empty
                                                 (list (source-paragraph file range))
                                                 Empty
                                                 (list (data-Line:) (string-from-int32 lines))
                                                 (list (data-Column:) (string-from-int32 column))
                                                 (list (data-Range:) (range-information range))
                                                 (list (data-File:) (source-file-path file)))))
            None         (data-no-location-information)))

(def error-to-string (files error)
     (match error
            (MalformedDefinitionError range)
                (i18n-malformed-definition-error English range)
            (MalformedFunctionDefinitionError range)
                (i18n-malformed-function-definition-error English range)
            (MalformedTypeDefinitionError range)
                (i18n-malformed-type-definition-error English range)
            (MalformedFunctionNameError range)
                (i18n-malformed-function-name-error English range)
            (MalformedExpressionError range)
                (i18n-malformed-expression-error English range)
            (MalformedMatchExpressionError range)
                (i18n-malformed-match-expression-error English range)
            (MalformedSymbolError range)
                (i18n-malformed-symbol-error English range)
            (MalformedConstructorError range)
                (i18n-malformed-constructor-error English range)
            (MalformedTypeError range)
                (i18n-malformed-type-error English range)
            (ErrorNotDefined name source-reference range)
                (string-format (list
                    (list (string-concat (data-not-defined-error) name))
                    (list (location-information files source-reference range))))
            (ErrorAlreadyDefined name)
                (string-concat (data-already-defined-error) name)
            MalformedSexpTooFewClosingBrackets
                (i18n-malformed-sexp-too-few-closing-brackets English)
            MalformedSexpTooManyClosingBrackets
                (i18n-malformed-sexp-too-many-closing-brackets English)))

(def stringify-parse-errors (files definitions)
     (result-bimap id (error-to-string files) definitions))

(def identifier-is-reserved? (identifier)
     (string-equal? (string-substring 0 3 (symbol-name identifier)) (data-sparkle)))

(def validate-identifier (identifier)
     (match (identifier-is-reserved? identifier)
            True   (result-error (data-error-reserved-identifier))
            False  (result-lift identifier)))

(def validate-reserved-identifiers (definitions)
     (result-flatmap (. result-concat (list-map (over-definition-expressions (over-identifiers validate-identifier)))) definitions))

(def transform-strings (path content)
     (match (string-gen content)
            (Result string)  (indexed-iterator-from-iterable (string-iterable) string)
            (Error error)    (indexed-iterator-from-iterable (string-iterable) (string-empty))))

(def parse-reuse-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path content)))

(def parse-strings-file (file)
     (match file
            (SourceFile module path content)
                (parse-definitions! module path (transform-strings path content))))

(def parse-target-file (file)
     (match file
            (SourceFile module path content)
                (parser-return (list (TargetDefinition (SourceReference path module) content)))))

(def parse-source-file (file)
     (match (source-file-type file)
            SourceFileTypeStrings         (parse-strings-file file)
            SourceFileTypeReuse           (parse-reuse-file file)
            SourceFileTypeTargetLanguage  (parse-target-file file)))

(def parse-module (files)
     (parser-bind (parser-new-module!) (fn (_)
     (parser-bind (parser-sequence (list-map parse-source-file files)) (fn (definitions)
     (parser-return (list-flatten definitions)))))))

(def parse-source-files (internal-symbols files)
     ((pipe (list-partition-by (fn (a b) (module-equal? (source-file-module a) (source-file-module b))))
            (list-map parse-module)
            parser-sequence
            (parser-run internal-symbols)
            (result-map list-flatten)
            (stringify-parse-errors files))
        files))
