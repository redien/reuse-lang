
(def parts-are-empty? (parts)
     (match parts
            Empty
                True
            (Cons part Empty)
                (string-is-empty? part)
            _
                False))

(def transform-line (line)
     (match (string-split 124 line)
            (Cons name parts)
                (string-concat
                    (string-from-list (list 40 100 101 102 32 100 97 116 97 45))
                    (string-concat
                        (string-trim name)
                        (string-concat
                            (string-from-list (list 32 40 41 32 40 115 116 114 105 110 103))
                            (string-concat
                                (string-from-list (list 45 102 114 111 109 45 108 105 115 116 32))
                                (match (parts-are-empty? parts)
                                       True
                                           (string-from-list (list 69 109 112 116 121 41 41))
                                       False
                                           (string-concat
                                               (string-from-list (list 40 108 105 115 116 32))
                                               (string-concat
                                                   (string-join
                                                       (string-of-char 32)
                                                       (list-map
                                                           string-from-int32
                                                           (string-to-list (string-join (string-of-char 124) parts))))
                                                   (string-from-list (list 41 41 41)))))))))
            Empty
                (string-empty)))

(pub def string-gen (stdin-iterator)
     (match (string-collect-from-slice (const True) 0 stdin-iterator)
            (Pair _ stdin)
                (Result (string-join
                    (string-of-char 10)
                    (list-map transform-line (string-split 10 stdin))))))
