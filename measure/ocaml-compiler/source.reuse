(pub def id (x) x) (pub def const (a b) a) (pub def flip (f) (fn (b a) (f a b))) (pub def . (f g x) (f (g x))) (pub def fix (f) (f (fix f))) (pub typ boolean True False) (pub def not (a) (match a True False False True)) (pub def and (a b) (match a True b False False)) (pub def or (a b) (match a True True False b)) (pub def < (a b) (int32-less-than a b True False)) (pub def > (a b) (< b a)) (pub def = (a b) (not (or (< a b) (> a b)))) (pub def <= (a b) (or (< a b) (= a b))) (pub def >= (a b) (or (> a b) (= a b))) (pub typ (pair a b) (Pair a b)) (pub def pair-cons (a b) (Pair a b)) (pub def pair-left (pair) (match pair (Pair x _) x)) (pub def pair-right (pair) (match pair (Pair _ x) x)) (pub def pair-map (f pair) (match pair (Pair x y) (f x y))) (pub def pair-bimap (f g pair) (match pair (Pair x y) (Pair (f x) (g y)))) (pub def pair-map-left (f pair) (match pair (Pair x y) (Pair (f x) y))) (pub def pair-map-right (f pair) (match pair (Pair x y) (Pair x (f y)))) (pub def pair-swap (pair) (match pair (Pair x y) (Pair y x))) (pub typ (maybe a) (Some a) None) (pub def maybe-map (f maybe) (match maybe (Some x) (Some (f x)) None None)) (pub def maybe-flatmap (f maybe) (match maybe (Some x) (f x) None None)) (pub def maybe-bind (maybe f) (maybe-flatmap f maybe)) (pub def maybe-filter (f maybe) (match maybe (Some x) (match (f x) True maybe False None) None None)) (pub def maybe-else (f maybe) (match maybe None (f) (Some x) x)) (pub def maybe-or-else (value maybe) (match maybe None value (Some x) x)) (pub typ (iterable-class collection element) (IterableClass (fn (collection) (pair (maybe element) collection)))) (pub def iterable-next (class collection) (match class (IterableClass next) (next collection))) (pub typ (indexed-iterator (exists iterable) element) (IndexedIterator (iterable-class iterable element) iterable int32)) (pub def indexed-iterator-from-iterable (i iterable) (IndexedIterator i iterable 0)) (pub def indexed-iterator-next (iterator) (match iterator (IndexedIterator i iterable index) (match (iterable-next i iterable) (Pair value next-iterable) (Pair value (IndexedIterator i next-iterable (+ index 1)))))) (pub def indexed-iterator-index (iterator) (match iterator (IndexedIterator _ __ index) index)) (pub typ (list a) (Cons a (list a)) Empty) (pub def list-empty () Empty) (pub def list-cons (x xs) (Cons x xs)) (pub def list-from (x) (Cons x Empty)) (def list-from-range' (from to rest) (match (> to from) True (list-from-range' from (- to 1) (Cons (- to 1) rest)) False rest)) (pub def list-from-range (from to) (list-from-range' from to Empty)) (pub def list-first (list) (match list (Cons x _) (Some x) Empty None)) (pub def list-rest (list) (match list (Cons _ rest) rest Empty Empty)) (pub def list-last (list) (match list Empty None (Cons x Empty) (Some x) (Cons _ rest) (list-last rest))) (pub def list-empty? (list) (match list (Cons _ __) False Empty True)) (def list-size' (list size) (match list (Cons _ rest) (list-size' rest (+ size 1)) Empty size)) (pub def list-size (list) (list-size' list 0)) (pub def list-foldrk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (list-foldrk f initial xs (fn (value) (f x value continue))))) (pub def list-foldlk (f initial list continue) (match list Empty (continue initial) (Cons x xs) (f x initial (fn (new-value) (list-foldlk f new-value xs continue))))) (pub def list-foldr (f initial list) (list-foldrk (fn (x value continue) (continue (f x value))) initial list (fn (x) x))) (pub def list-foldl (f initial list) (match list Empty initial (Cons x xs) (list-foldl f (f x initial) xs))) (pub def list-concat (a b) (list-foldr list-cons b a)) (pub def list-reverse (list) (list-foldl list-cons Empty list)) (pub def list-map (f list) (list-foldr (fn (head tail) (list-cons (f head) tail)) Empty list)) (pub def list-flatmap (f list) (list-foldr (fn (head tail) (list-concat (f head) tail)) Empty list)) (pub def list-flatten (list) (list-foldr list-concat Empty list)) (def list-split-at' (n a b) (match (> n 0) True (match b (Cons x xs) (list-split-at' (- n 1) (Cons x a) xs) Empty (Pair (list-reverse a) b)) False (Pair (list-reverse a) b))) (pub def list-split-at (n xs) (list-split-at' n Empty xs)) (def list-partition' (n xs partitions) (match (list-split-at n xs) (Pair Empty _) partitions (Pair partition xs) (list-partition' n xs (Cons partition partitions)))) (pub def list-partition (n xs) (list-reverse (list-partition' n xs Empty))) (def list-partition-by' (x xs) (match xs (Cons partition rest) (Cons (Cons x partition) rest) Empty xs)) (pub def list-partition-by (f xs) (match xs Empty Empty (Cons x Empty) (list (list x)) (Cons x (Cons x' rest)) (match (f x x') True (list-partition-by' x (list-partition-by f (Cons x' rest))) False (Cons (list x) (list-partition-by f (Cons x' rest)))))) (pub def list-skip (count list) (pair-right (list-split-at count list))) (pub def list-take (count list) (pair-left (list-split-at count list))) (def list-zip' (xs ys collected) (match xs Empty collected (Cons x xs) (match ys Empty collected (Cons y ys) (list-zip' xs ys (Cons (Pair x y) collected))))) (pub def list-zip (xs ys) (list-reverse (list-zip' xs ys Empty))) (pub def list-pairs (xs) (match xs (Cons a (Cons b rest)) (Cons (Pair a b) (list-pairs rest)) _ Empty)) (pub def list-find-first (predicate list) (match list Empty None (Cons x xs) (match (predicate x) True (Some x) False (list-find-first predicate xs)))) (pub def list-filter (f list) (list-foldr (fn (head tail) (match (f head) True (Cons head tail) False tail)) Empty list)) (pub def list-exclude (f list) (list-filter (pipe f not) list)) (pub def list-any? (f list) (match (list-find-first f list) (Some _) True _ False)) (pub def list-every? (f list) (match (list-find-first (fn (x) (not (f x))) list) (Some _) False _ True)) (def list-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (list-collect-from-indexed-iterator' predicate next (Cons x initial)) False (Pair iterator initial)))) (pub def list-collect-from-indexed-iterator (predicate iterator) (match (list-collect-from-indexed-iterator' predicate iterator Empty) (Pair iterator result) (Pair iterator (list-reverse result)))) (typ string-node (FTValue int32) (FTNode2 int32 string-node string-node) (FTNode3 int32 string-node string-node string-node)) (typ string FTEmpty (FTSingle string-node) (FTDeep (list string-node) string (list string-node))) (pub def string-empty () FTEmpty) (pub def string-of-char (character) (FTSingle (FTValue character))) (def string-node-size' (node) (match node (FTValue _) 1 (FTNode2 size _ __) size (FTNode3 size _ __ ___) size)) (def string-node2' (a b) (FTNode2 (+ (string-node-size' a) (string-node-size' b)) a b)) (def string-node3' (a b c) (FTNode3 (+ (string-node-size' a) (+ (string-node-size' b) (string-node-size' c))) a b c)) (def string-prepend-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list a) FTEmpty (list x)) (FTDeep first middle last) (match first (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep (list a b) (string-prepend-node' (string-node3' c d e) middle) last) _ (FTDeep (Cons a first) middle last)))) (pub def string-prepend (char string) (string-prepend-node' (FTValue char) string)) (def string-append-node' (a tree) (match tree FTEmpty (FTSingle a) (FTSingle x) (FTDeep (list x) FTEmpty (list a)) (FTDeep first middle last) (match last (Cons b (Cons c (Cons d (Cons e Empty)))) (FTDeep first (string-append-node' (string-node3' e d c) middle) (list a b)) _ (FTDeep first middle (Cons a last))))) (pub def string-append (char string) (string-append-node' (FTValue char) string)) (def string-first-node' (node) (match node (FTValue x) x (FTNode2 _ x __) (string-first-node' x) (FTNode3 _ x __ ___) (string-first-node' x))) (pub def string-first (string) (match string FTEmpty None (FTSingle node) (Some (string-first-node' node)) (FTDeep first middle last) (maybe-map string-first-node' (list-first first)))) (def string-rest-node' (node) (match node (FTValue _) None (FTNode2 _ a b) (match (string-rest-node' a) (Some node) (Some (string-node2' node b)) None (Some b)) (FTNode3 _ a b c) (match (string-rest-node' a) (Some node) (Some (string-node3' node b c)) None (Some (string-node2' b c))))) (pub def string-rest (string) (match string FTEmpty string (FTSingle node) (match (string-rest-node' node) (Some node) (FTSingle node) None FTEmpty) (FTDeep (Cons node rest) middle last) (match (string-rest-node' node) (Some node) (FTDeep (Cons node rest) middle last) None (match rest Empty (list-foldr string-append-node' middle last) _ (FTDeep rest middle last))) _ string)) (def string-foldr-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ a b) (string-foldr-node' f a (string-foldr-node' f b identity)) (FTNode3 _ a b c) (string-foldr-node' f a (string-foldr-node' f b (string-foldr-node' f c identity))))) (pub def string-foldr (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldr-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldr-node' f) (string-foldr f (list-foldl (string-foldr-node' f) identity last) middle) first))) (def string-foldl-node' (f node identity) (match node (FTValue a) (f a identity) (FTNode2 _ b a) (string-foldl-node' f a (string-foldl-node' f b identity)) (FTNode3 _ c b a) (string-foldl-node' f a (string-foldl-node' f b (string-foldl-node' f c identity))))) (pub def string-foldl (f identity tree) (match tree FTEmpty identity (FTSingle x) (string-foldl-node' f x identity) (FTDeep first middle last) (list-foldr (string-foldl-node' f) (string-foldl f (list-foldl (string-foldl-node' f) identity first) middle) last))) (pub def string-size (string) (match string FTEmpty 0 (FTSingle x) (string-node-size' x) (FTDeep first middle last) (+ (list-foldr + 0 (list-map string-node-size' first)) (+ (list-foldr + 0 (list-map string-node-size' last)) (string-size middle))))) (def string-concat-nodes' (nodes) (match nodes (Cons a (Cons b Empty)) (list (string-node2' a b)) (Cons a (Cons b (Cons c Empty))) (list (string-node3' a b c)) (Cons a (Cons b (Cons c (Cons d Empty)))) (list (string-node2' a b) (string-node2' c d)) (Cons a (Cons b (Cons c rest))) (Cons (string-node3' a b c) (string-concat-nodes' rest)) _ Empty)) (typ (triple a b c) (Triple a b c)) (def string-concat' (a nodes b) (match (Triple a nodes b) (Triple FTEmpty nodes b) (list-foldr string-prepend-node' b nodes) (Triple a nodes FTEmpty) (list-foldl string-append-node' a nodes) (Triple (FTSingle x) nodes b) (string-prepend-node' x (list-foldr string-prepend-node' b nodes)) (Triple a nodes (FTSingle x)) (string-append-node' x (list-foldl string-append-node' a nodes)) (Triple (FTDeep first1 middle1 last1) nodes (FTDeep first2 middle2 last2)) (FTDeep first1 (string-concat' middle1 (string-concat-nodes' (list-concat (list-reverse last1) (list-concat nodes first2))) middle2) last2))) (pub def string-concat (a b) (string-concat' a Empty b)) (pub def string-empty? (string) (match (string-first string) (Some _) False None True)) (pub def string-any? (predicate string) (string-foldl (fn (x b) (or (predicate x) b)) False string)) (pub def string-every? (predicate string) (string-foldl (fn (x b) (and (predicate x) b)) True string)) (pub def string-to-list (string) (string-foldr list-cons Empty string)) (pub def string-from-list (list) (list-foldl string-append (string-empty) list)) (pub def string-skip (count string) (match string FTEmpty FTEmpty _ (match (> count 0) True (string-skip (- count 1) (string-rest string)) False string))) (def string-take' (count string taken) (match (> count 0) True (match (string-first string) (Some char) (string-take' (- count 1) (string-rest string) (string-append char taken)) None taken) False taken)) (pub def string-take (count string) (string-take' count string (string-empty))) (pub def string-reverse (string) (string-foldl string-prepend (string-empty) string)) (pub def string-substring (start size string) (string-take size (string-skip start string))) (pub def string-join (separator strings) (match strings (Cons first rest) (list-foldl (fn (string joined) (string-concat joined (string-concat separator string))) first rest) Empty (string-empty))) (pub def string-flatmap (f string) (string-foldl (fn (x xs) (string-concat xs (f x))) (string-empty) string)) (def string-split' (separator list current parts) (match list Empty (list-reverse (Cons (list-reverse current) parts)) (Cons c rest) (match (= separator c) True (string-split' separator rest Empty (Cons (list-reverse current) parts)) False (string-split' separator rest (Cons c current) parts)))) (pub def string-split (separator string) (list-map string-from-list (string-split' separator (string-to-list string) Empty Empty))) (def string-trim-start' (list) (match list (Cons x xs) (match (= x 32) True (string-trim-start' xs) False list) Empty list)) (pub def string-trim-start (string) (string-from-list (string-trim-start' (string-to-list string)))) (pub def string-trim-end (string) (string-reverse (string-trim-start (string-reverse string)))) (pub def string-trim (string) (string-trim-start (string-trim-end string))) (pub def string-equal? (a b) (match (string-first a) (Some xa) (match (string-first b) (Some xb) (and (= xa xb) (string-equal? (string-rest a) (string-rest b))) None (string-empty? a)) None (string-empty? b))) (pub def string-index-of (index substring string) (match (>= index (string-size string)) True None False (match (string-equal? substring (string-substring index (string-size substring) string)) True (Some index) False (string-index-of (+ index 1) substring string)))) (pub def string-point-is-digit (point) (match (> point 47) False False True (match (< point 58) True True False False))) (def string-to-int32''' (string-to-int32'' string accumulator x) (string-to-int32'' string (Some (+ (* 10 accumulator) (- x 48))))) (def string-to-int32'' (string accumulator) (match string Empty accumulator (Cons x rest) (maybe-flatmap (fn (accumulator) ((pipe (maybe-filter string-point-is-digit) (maybe-flatmap (string-to-int32''' string-to-int32'' rest accumulator))) (Some x))) accumulator))) (def string-to-int32' (string) (match string (Cons 45 string) (match (list-empty? string) True None False (maybe-map (fn (x) (* -1 x)) (string-to-int32' string))) (Cons x rest) (match (string-point-is-digit x) True (string-to-int32'' string (Some 0)) False None) Empty None)) (pub def string-to-int32 (string) (string-to-int32' (string-to-list string))) (def string-from-int32'' (integer string) (match (> integer 9) True (string-from-int32'' (/ integer 10) (Cons (+ (% integer 10) 48) string)) False (Cons (+ integer 48) string))) (def string-from-int32' (integer) (match (< integer 0) True (match (= integer -2147483648) True (list 45 50 49 52 55 52 56 51 54 52 56) False (Cons 45 (string-from-int32' (* integer -1)))) False (string-from-int32'' integer Empty))) (pub def string-from-int32 (integer) (string-from-list (string-from-int32' integer))) (def string-collect-from-indexed-iterator' (predicate iterator initial) (match (indexed-iterator-next iterator) (Pair None _) (Pair iterator initial) (Pair (Some x) next) (match (predicate x) True (string-collect-from-indexed-iterator' predicate next (string-append x initial)) False (Pair iterator initial)))) (pub def string-collect-from-indexed-iterator (predicate iterator) (string-collect-from-indexed-iterator' predicate iterator (string-empty))) (pub def string-from-indexed-iterator (iterator) (pair-right (string-collect-from-indexed-iterator (fn (_) True) iterator))) (pub def string-iterable () (IterableClass (fn (string) (Pair (string-first string) (string-rest string))))) (pub def string-from-boolean (boolean) (match boolean True (string-from-list (list 84 114 117 101)) False (string-from-list (list 70 97 108 115 101)))) (pub typ (result v e) (Result v) (Error e)) (pub def result-lift (result) (Result result)) (pub def result-error (error) (Error error)) (pub def result-prod (return result) (match result (Result m) m (Error error) (return (Error error)))) (pub def result-bimap (f g result) (match result (Result x) (Result (f x)) (Error y) (Error (g y)))) (pub def result-either (f g result) (match result (Result x) (f x) (Error x) (g x))) (pub def result-map (f result) (result-bimap f id result)) (pub def result-flatmap (f result) (match result (Result x) (f x) (Error error) (Error error))) (pub def result-or-else (value result) (match result (Result x) x (Error x) value)) (pub def result-error? (result) (match result (Error _) True _ False)) (pub def result-filter-list (list) (list-foldr (fn (result new-list) (match result (Result x) (Cons x new-list) _ new-list)) Empty list)) (pub def result-concat (list) (match (list-filter result-error? list) (Cons (Error error) _) (Error error) (Cons (Result _) __) (Result Empty) Empty (Result (result-filter-list list)))) (pub def result-of-maybe (error maybe) (match maybe (Some x) (Result x) None (Error error))) (pub def result-bind (result f) (result-flatmap f result)) (pub def result-return (value) (result-lift value)) (typ (state s v) (Operation (fn (s) (pair s v)))) (pub def state-run (state operation) (match operation (Operation f) (f state))) (pub def state-final-value (initial-state operation) (match (state-run initial-state operation) (Pair _ value) value)) (pub def state-return (value) (Operation (fn (state) (Pair state value)))) (pub def state-bind (operation f) (Operation (fn (state) (match (state-run state operation) (Pair new-state new-value) (state-run new-state (f new-value)))))) (pub def state-get () (Operation (fn (state) (Pair state state)))) (pub def state-set (state) (Operation (fn (_) (Pair state state)))) (pub def state-modify (f) (state-bind (state-get) (fn (state) (state-set (f state))))) (pub def state-let (value f) (state-bind (state-return value) f)) (pub def state-foldr (f initial-value operations) (list-foldr (fn (operation chain) (state-bind operation (fn (x) (state-bind chain (fn (xs) (state-return (f x xs))))))) (state-return initial-value) operations)) (pub def state-foreach (f xs) (state-foldr list-cons Empty (list-map f xs))) (pub def state-flatmap (f operation) (state-bind operation f)) (pub def state-map (f operation) (state-flatmap (pipe f state-return) operation)) (pub def state-lift (value) (state-return value)) (typ array-color ArrayRed ArrayBlack) (typ (array value) ArrayEmpty (ArrayTree array-color (array value) (pair int32 value) (array value))) (pub def array-empty () ArrayEmpty) (def array-make-black' (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ a y b) (ArrayTree ArrayBlack a y b))) (def array-balance' (array) (match array (ArrayTree ArrayBlack (ArrayTree ArrayRed (ArrayTree ArrayRed a x b) y c) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack (ArrayTree ArrayRed a x (ArrayTree ArrayRed b y c)) z d) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed (ArrayTree ArrayRed b y c) z d)) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) (ArrayTree ArrayBlack a x (ArrayTree ArrayRed b y (ArrayTree ArrayRed c z d))) (ArrayTree ArrayRed (ArrayTree ArrayBlack a x b) y (ArrayTree ArrayBlack c z d)) rest rest)) (def array-set' (x value array) (match array ArrayEmpty (ArrayTree ArrayRed ArrayEmpty (Pair x value) ArrayEmpty) (ArrayTree color a y b) (match (< x (pair-left y)) True (array-balance' (ArrayTree color (array-set' x value a) y b)) False (match (> x (pair-left y)) True (array-balance' (ArrayTree color a y (array-set' x value b))) False (ArrayTree color a (Pair x value) b))))) (pub def array-set (x value array) (array-make-black' (array-set' x value array))) (pub def array-get (x array) (match array ArrayEmpty None (ArrayTree _ a (Pair y value) b) (match (< x y) True (array-get x a) False (match (> x y) True (array-get x b) False (Some value))))) (def array-min (array default) (match array ArrayEmpty default (ArrayTree _ ArrayEmpty y __) y (ArrayTree _ a __ ___) (array-min a default))) (def array-remove-min (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ ArrayEmpty y b) b (ArrayTree color a y b) (array-balance' (ArrayTree color (array-remove-min a) y b)))) (def array-remove-root (array) (match array ArrayEmpty ArrayEmpty (ArrayTree _ ArrayEmpty y ArrayEmpty) ArrayEmpty (ArrayTree _ a y ArrayEmpty) a (ArrayTree _ ArrayEmpty y b) b (ArrayTree color a y b) (array-balance' (ArrayTree color a (array-min b y) (array-remove-min b))))) (def array-remove' (x array) (match array ArrayEmpty ArrayEmpty (ArrayTree color a y b) (match (< x (pair-left y)) True (array-balance' (ArrayTree color (array-remove' x a) y b)) False (match (> x (pair-left y)) True (array-balance' (ArrayTree color a y (array-remove' x b))) False (array-remove-root array))))) (pub def array-remove (x array) (array-make-black' (array-remove' x array))) (pub def array-entries (array) (match array ArrayEmpty Empty (ArrayTree _ a entry b) (list-flatten (list (array-entries a) (list entry) (array-entries b))))) (def array-from-list' (entries index array) (match entries (Cons x xs) (array-from-list' xs (+ index 1) (array-set index x array)) Empty array)) (pub def array-from-list (entries) (array-from-list' entries 0 ArrayEmpty)) (pub def array-of (entries) (list-foldl (fn (entry array) (match entry (Pair key value) (array-set key value array))) ArrayEmpty entries)) (pub def array-singleton (index value) (ArrayTree ArrayBlack ArrayEmpty (Pair index value) ArrayEmpty)) (pub def array-get-or (index default array) (match (array-get index array) (Some value) value None default)) (typ (dictionary value) (Dictionary (array (list (pair string value))))) (pub def dictionary-empty () (Dictionary (array-empty))) (def dictionary-bucket-from-key (key) (string-foldl (fn (c h) (+ (* h 33) c)) 5381 key)) (pub def dictionary-set (key new-value dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (match (list-filter (fn (entry) (not (string-equal? (pair-left entry) key))) bucket) new-bucket (Dictionary (array-set bucket-id (Cons (Pair key new-value) new-bucket) array))) None (Dictionary (array-set bucket-id (list (Pair key new-value)) array)))))) (pub def dictionary-get (key dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (maybe-map pair-right (list-find-first (fn (entry) (string-equal? (pair-left entry) key)) bucket)) None None)))) (pub def dictionary-remove (key dictionary) (match dictionary (Dictionary array) (match (dictionary-bucket-from-key key) bucket-id (match (array-get bucket-id array) (Some bucket) (match (list-filter (fn (entry) (not (string-equal? (pair-left entry) key))) bucket) new-bucket (Dictionary (array-set bucket-id new-bucket array))) None dictionary)))) (def dictionary-entries (dictionary) (match dictionary (Dictionary array) (list-flatten (list-map pair-right (array-entries array))))) (pub def dictionary-of (entries) (list-foldl (pair-map dictionary-set) (dictionary-empty) entries)) (pub def dictionary-singleton (key value) (dictionary-set key value (dictionary-empty))) (pub def dictionary-get-or (key default dictionary) (match (dictionary-get key dictionary) (Some value) value None default))

(def parts-are-empty? (parts)
     (match parts
            Empty              True
            (Cons part Empty)  (string-empty? part)
            _                  False))

(def transform-line (line)
     (match (string-split 124 line)
            (Cons name parts)
                (string-concat (string-from-list (list 40 100 101 102 32 100 97 116 97 45))
                (string-concat (string-trim name)
                (string-concat (string-from-list (list 32 40 41 32 40 115 116 114 105 110 103 45 102 114 111 109 45 108 105 115 116 32))
                (match (parts-are-empty? parts)
                       True
                            (string-from-list (list 69 109 112 116 121 41 41))
                       False
                            (string-concat (string-from-list (list 40 108 105 115 116 32))
                            (string-concat (string-join (string-of-char 32) (list-map string-from-int32 (string-to-list (string-join (string-of-char 124) parts))))
                                           (string-from-list (list 41 41 41))))))))
            Empty
                (string-empty)))

(pub def string-gen (stdin-iterator)
     (match (string-collect-from-indexed-iterator (fn (_) True) stdin-iterator)
            (Pair _ stdin)
                 (Result (string-join (string-of-char 10) (list-map transform-line (string-split 10 stdin))))))

(def whitespace? (character)
     (match character
            32  True
            13  True
            9   True
            10  True
            _   False))

(def atom-character? (character)
     (match character
            40 False
            41 False
            _  (not (whitespace? character))))

(pub typ range               (Range int32 int32))

(pub typ sexp                (Symbol  int32  string     range)
                             (Integer int32             range)
                             (List    (list sexp)       range))

(pub typ parse-error         ParseErrorTooFewClosingBrackets
                             ParseErrorTooManyClosingBrackets)

(def symbol-range (start end)
     (Range (indexed-iterator-index start) (indexed-iterator-index end)))

(def intern-string (iterator next-iterator name symbol-state next)
     (match symbol-state
            (Pair token symbols)
                  (match (dictionary-get name symbols)
                         (Some (Pair token name))
                               (next next-iterator
                                     symbol-state
                                     (Symbol token name (symbol-range iterator next-iterator)))
                         None
                               (next next-iterator
                                     (Pair (+ token 1) (dictionary-set name (Pair token name) symbols))
                                     (Symbol token name (symbol-range iterator next-iterator))))))

(def parse-symbol (iterator symbols next end)
     (match (string-collect-from-indexed-iterator atom-character? iterator)
            (Pair next-iterator name)
                    (match (string-to-int32 name)
                           (Some integer)   (next next-iterator symbols (Integer integer (symbol-range iterator next-iterator)))
                           None
                    (match (string-empty? name)
                           False  (intern-string iterator next-iterator name symbols next)
                           True   (end iterator)))))

(def list-range (start end)
     (Range (- (indexed-iterator-index start) 1) (indexed-iterator-index end)))

(def parse-list (iterator parse-sexps symbols error next)
     (parse-sexps iterator symbols Empty error
                  (fn (next-iterator symbols expressions)
                      (next next-iterator symbols (List expressions (list-range iterator next-iterator))))))

(def parse-expression (depth iterator parse-sexps' symbols error next end)
     (match (indexed-iterator-next iterator)
            (Pair None _)
                (match depth
                       0  (end iterator)
                       _  (error ParseErrorTooFewClosingBrackets))
            (Pair (Some 40) next-iterator)
                (parse-list next-iterator (parse-sexps' (+ depth 1)) symbols error next)
            (Pair (Some 41) next-iterator)
                (match depth
                       0  (error ParseErrorTooManyClosingBrackets)
                       _  (end next-iterator))
            (Pair (Some x) next-iterator)
                (match (whitespace? x)
                       True   (parse-expression depth next-iterator parse-sexps' symbols error next end)
                       False  (parse-symbol iterator symbols next end))))

(def parse-sexps' (depth iterator symbols expressions error end)
     (parse-expression depth iterator parse-sexps' symbols error
                       (fn (iterator symbols expression)
                           (parse-sexps' depth iterator symbols (Cons expression expressions) error end))
                       (fn (iterator)
                           (end iterator symbols (list-reverse expressions)))))

(pub def parse-sexps (symbols iterator)
     (parse-sexps' 0 iterator symbols Empty
                   (fn (error)
                       (Error error))
                   (fn (_ symbols expressions)
                       (Result (Pair symbols expressions)))))



(pub def wrap-in-brackets (string)
     (string-concat (string-of-char 40) (string-concat string (string-of-char 41))))

(pub def stringify-sexp (stringify-sexps expression)
     (match expression
            (Symbol _ name __)   name
            (Integer integer _)  (string-from-int32 integer)
            (List expressions _) (wrap-in-brackets (stringify-sexps expressions))))

(pub def stringify-sexps (expressions)
     (string-join (string-of-char 32) (list-map (stringify-sexp stringify-sexps) expressions)))
(pub typ module-reference (ModulePath string boolean) ModuleSelf) (pub typ source-reference (SourceReference string module-reference)) (pub typ identifier (Identifier int32 string source-reference range (maybe int32))) (pub typ ast-type (SimpleType identifier) (ComplexType identifier (list ast-type) range) (FunctionType (list ast-type) ast-type range)) (pub typ type-parameter (UniversalParameter identifier) (ExistentialParameter identifier)) (pub typ constructor (SimpleConstructor identifier) (ComplexConstructor identifier (list ast-type) range)) (pub typ pattern (Capture identifier) (IntegerPattern int32 range) (ConstructorPattern identifier (list pattern) range)) (pub typ expression (IntegerConstant int32 range) (Variable identifier) (Lambda (list identifier) expression range) (Match expression (list (pair pattern expression)) range) (Constructor identifier (list expression) range) (FunctionApplication (list expression) range)) (pub typ definition (TypeDefinition identifier boolean (list type-parameter) (list constructor) range) (FunctionDefinition identifier boolean (list identifier) expression range) (TargetDefinition source-reference (indexed-iterator int32))) (pub def source-reference-file-path (source-reference) (match source-reference (SourceReference file-path _) file-path)) (pub def source-reference-module (source-reference) (match source-reference (SourceReference _ module) module)) (pub def identifier-token (identifier) (match identifier (Identifier token _ __ ___ ____) token)) (pub def identifier-name (identifier) (match identifier (Identifier _ name __ ___ ____) name)) (def identifier-with-name (name identifier) (match identifier (Identifier _1 _ _2 _3 _4) (Identifier _1 name _2 _3 _4))) (pub def identifier-source-reference (identifier) (match identifier (Identifier _ __ source-reference ___ ____) source-reference)) (def identifier-module (identifier) (source-reference-module (identifier-source-reference identifier))) (pub def identifier-range (identifier) (match identifier (Identifier _ __ ___ range ____) range)) (def identifier-id' (identifier) (match identifier (Identifier _ __ ___ ____ id) id)) (def identifier-with-id' (id identifier) (match identifier (Identifier _1 _2 _3 _4 _) (Identifier _1 _2 _3 _4 id))) (pub def identifier-equal? (a b) (= (identifier-token a) (identifier-token b))) (pub def module-equal? (a b) (match a (ModulePath a' _) (match b (ModulePath b' _) (string-equal? a' b') ModuleSelf False) ModuleSelf (match b (ModulePath _ __) False ModuleSelf True))) (pub def definition-source-reference (definition) (match definition (TypeDefinition identifier _ __ ___ ____) (identifier-source-reference identifier) (FunctionDefinition identifier ___ ____ _____ ______) (identifier-source-reference identifier) (TargetDefinition source-reference _) source-reference)) (def definition-module (definition) (source-reference-module (definition-source-reference definition))) (def definition-public? (definition) (match definition (TypeDefinition _ public? __ ___ ____) public? (FunctionDefinition _ public? __ ___ ____) public? (TargetDefinition _ __) False)) (def constructor-identifier (constructor) (match constructor (ComplexConstructor identifier _ __) identifier (SimpleConstructor identifier) identifier)) (pub def type-parameter-identifier (parameter) (match parameter (UniversalParameter identifier) identifier (ExistentialParameter identifier) identifier)) (def captured-identifiers-from-pattern (pattern) (match pattern (Capture identifier) (list identifier) (ConstructorPattern _ patterns __) (list-flatmap captured-identifiers-from-pattern patterns) _ Empty)) (def identifiers-from-definition (definition) (match definition (TypeDefinition name _ __ constructors ___) (Cons name (list-map constructor-identifier constructors)) (FunctionDefinition name _ arguments __ ___) (Cons name arguments) (TargetDefinition _ __) Empty)) (pub def over-match-pair-expression (f pair) (match pair (Pair pattern expression) (result-bind (f expression) (fn (expression) (result-return (Pair pattern expression)))))) (pub def over-match-pair-expressions (over-subexpressions f pairs) (result-concat (list-map (over-match-pair-expression (pipe f (result-flatmap (over-subexpressions f)))) pairs))) (pub def over-subexpressions (f expression) (result-bind (f expression) (fn (expression) (match expression (Lambda arguments expression range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-return (Lambda arguments expression range)))))) (Match expression pairs range) (result-bind (f expression) (fn (expression) (result-bind (over-subexpressions f expression) (fn (expression) (result-bind (over-match-pair-expressions over-subexpressions f pairs) (fn (pairs) (result-return (Match expression pairs range)))))))) (Constructor identifier expressions range) (result-bind (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions) (result-return (Constructor identifier expressions range)))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (pipe f (result-flatmap (over-subexpressions f))) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) _ (result-return expression))))) (pub def over-definition-expressions (f definition) (match definition (FunctionDefinition identifier public? arguments expression range) (result-bind (f expression) (fn (expression) (result-return (FunctionDefinition identifier public? arguments expression range)))) _ (result-return definition))) (pub def over-function-application (f expression) (match expression (FunctionApplication expressions range) (f expressions range) _ (result-return expression))) (pub def over-match-expression (f expression) (match expression (Match expression pairs range) (f expression pairs range) _ (result-return expression))) (pub def over-identifiers (f expression) (match expression (Variable name) (result-bind (f name) (fn (name) (result-return (Variable name)))) (Lambda arguments expression range) (result-bind (over-identifiers f expression) (fn (expression) (result-bind (result-concat (list-map f arguments)) (fn (arguments) (result-return (Lambda arguments expression range)))))) (Constructor name Empty range) (result-bind (f name) (fn (name) (result-return (Constructor name Empty range)))) (Constructor name expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-bind (f name) (fn (name) (result-return (Constructor name expressions range)))))) (FunctionApplication expressions range) (result-bind (result-concat (list-map (over-identifiers f) expressions)) (fn (expressions) (result-return (FunctionApplication expressions range)))) (Match expression rules range) (result-bind (result-concat (list-map (over-match-pair-expression (over-identifiers f)) rules)) (fn (rules) (result-bind (over-identifiers f expression) (fn (expression) (result-return (Match expression rules range)))))) _ (result-return expression))) (def data-strings-file-ending () (string-from-list (list 46 115 116 114 105 110 103 115))) (def data-reuse-file-ending () (string-from-list (list 46 114 101 117 115 101))) (pub typ (source-file iterator) (SourceFile module-reference string iterator)) (pub typ source-file-type SourceFileTypeReuse SourceFileTypeStrings SourceFileTypeTargetLanguage) (pub def source-file-of (module path iterator) (SourceFile module path iterator)) (pub def source-file-module (file) (match file (SourceFile module _ __) module)) (pub def source-file-path (file) (match file (SourceFile _ path __) path)) (pub def source-file-content (file) (match file (SourceFile _ __ content) content)) (def last-n-chars (n path) (string-substring (- (string-size path) n) n path)) (pub def source-file-type (file) (match (string-equal? (last-n-chars 6 (source-file-path file)) (data-reuse-file-ending)) True SourceFileTypeReuse False (match (string-equal? (last-n-chars 8 (source-file-path file)) (data-strings-file-ending)) True SourceFileTypeStrings False SourceFileTypeTargetLanguage))) (typ parser-scope (ParserScope (array int32) parser-scope) (ParserScopeRoot (array int32))) (def parser-scope-empty () (ParserScopeRoot (array-empty))) (def parser-scope-new (parent) (ParserScope (array-empty) parent)) (def parser-scope-set' (identifier-token symbol-table-id scope) (match scope (ParserScope symbols parent) (ParserScope (array-set identifier-token symbol-table-id symbols) parent) (ParserScopeRoot symbols) (ParserScopeRoot (array-set identifier-token symbol-table-id symbols)))) (def parser-scope-set (identifier scope) (maybe-or-else scope (maybe-map (fn (symbol-table-id) (parser-scope-set' (identifier-token identifier) symbol-table-id scope)) (identifier-id' identifier)))) (def parser-scope-set-all (syms scope) (list-foldl parser-scope-set scope syms)) (def parser-scope-resolve (identifier scope) (match scope (ParserScope symbols parent) (match (array-get (identifier-token identifier) symbols) None (parser-scope-resolve identifier parent) id (identifier-with-id' id identifier)) (ParserScopeRoot symbols) (identifier-with-id' (array-get (identifier-token identifier) symbols) identifier))) (def parser-scope-set-list (symbols scope) (list-foldl (pair-map parser-scope-set') scope symbols)) (typ symbol-table-entry (SymbolTableEntry int32 string)) (typ symbol-table (SymbolTable int32 (array symbol-table-entry))) (def symbol-table-empty () (SymbolTable 0 (array-empty))) (def symbol-table-id (table) (match table (SymbolTable id _) id)) (def symbol-table-bind (string table) (match table (SymbolTable id array) (SymbolTable (+ id 1) (array-set id (SymbolTableEntry id string) array)))) (def symbol-table-bind-list (names table) (list-foldl symbol-table-bind table names)) (def data-def () (string-from-list (list 100 101 102))) (def data-typ () (string-from-list (list 116 121 112))) (def data-fn () (string-from-list (list 102 110))) (def data-match () (string-from-list (list 109 97 116 99 104))) (def data-exists () (string-from-list (list 101 120 105 115 116 115))) (def data-pub () (string-from-list (list 112 117 98))) (def data-+ () (string-from-list (list 43))) (def data-- () (string-from-list (list 45))) (def data-* () (string-from-list (list 42))) (def data-/ () (string-from-list (list 47))) (def data-% () (string-from-list (list 37))) (def data-& () (string-from-list (list 38))) (def data-int32-less-than () (string-from-list (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110))) (def data-pipe () (string-from-list (list 112 105 112 101))) (def data-list () (string-from-list (list 108 105 115 116))) (def identifier-def () -1) (def identifier-typ () -2) (def identifier-fn () -3) (def identifier-match () -4) (def identifier-exists () -5) (def identifier-pub () -6) (pub def identifier-+ () 0) (pub def identifier-- () 1) (pub def identifier-* () 2) (pub def identifier-/ () 3) (pub def identifier-% () 4) (pub def identifier-& () 5) (pub def identifier-int32-less-than () 6) (pub def identifier-list () 7) (pub def identifier-pipe () 8) (pub def default-symbol-count () 9) (def intrinsic-identifiers () (list (Pair (identifier-+) (data-+)) (Pair (identifier--) (data--)) (Pair (identifier-*) (data-*)) (Pair (identifier-/) (data-/)) (Pair (identifier-%) (data-%)) (Pair (identifier-&) (data-&)) (Pair (identifier-int32-less-than) (data-int32-less-than)) (Pair (identifier-list) (data-list)) (Pair (identifier-pipe) (data-pipe)))) (def default-symbol-table () (symbol-table-bind-list (list-map pair-right (intrinsic-identifiers)) (symbol-table-empty))) (def default-scope () (parser-scope-set-list (list-map (. (fn (x) (Pair x x)) pair-left) (intrinsic-identifiers)) (parser-scope-empty))) (pub def default-identifiers () (dictionary-set (data-def) (Pair (identifier-def) (data-def)) (dictionary-set (data-typ) (Pair (identifier-typ) (data-typ)) (dictionary-set (data-fn) (Pair (identifier-fn) (data-fn)) (dictionary-set (data-match) (Pair (identifier-match) (data-match)) (dictionary-set (data-exists) (Pair (identifier-pub) (data-exists)) (dictionary-set (data-pub) (Pair (identifier-pub) (data-pub)) (dictionary-of (list-map (fn (pair) (Pair (pair-right pair) pair)) (intrinsic-identifiers)))))))))) (pub def token-is-operator? (token) (and (>= token 0) (<= token 5))) (def data-: () (string-from-list (list 58))) (typ (parser-context definition) (ParserContext source-reference (pair int32 (dictionary (pair int32 string))) parser-scope parser-scope symbol-table (array definition))) (def parser-context-add-constructors (definition array) (match definition (TypeDefinition _ __ ___ constructors ____) (list-foldl (fn (constructor array) (array-set (identifier-token (constructor-identifier constructor)) definition array)) array constructors) _ array)) (def prefix-module-symbol (module identifier) (match module (ModulePath name open?) (match open? True identifier False (identifier-with-name (string-join (data-:) (list name (identifier-name identifier))) identifier)) ModuleSelf identifier)) (def prefix-module-symbols (module syms) (list-map (prefix-module-symbol module) syms)) (def parser-context-add-definition (definition context) (match context (ParserContext source-reference symbols module-scope global-scope symbol-table constructors) (match (identifiers-from-definition definition) definition-symbols (match (source-reference-module source-reference) module (ParserContext source-reference symbols (parser-scope-set-all definition-symbols module-scope) (match (definition-public? definition) True (parser-scope-set-all (prefix-module-symbols module definition-symbols) global-scope) False global-scope) symbol-table (parser-context-add-constructors definition constructors)))))) (def parser-context-token-is-constructor? (token context) (match context (ParserContext _ __ ___ ____ _____ constructors) (match (array-get token constructors) (Some _) True None False))) (def parser-context-new-module (context) (match context (ParserContext source-reference symbols _ global-scope symbol-table constructors) (ParserContext source-reference symbols (parser-scope-new global-scope) global-scope symbol-table constructors))) (def parser-context-module-scope (context) (match context (ParserContext _ __ module-scope ___ ____ _____) module-scope)) (def parser-context-bind-symbol (identifier context) (match context (ParserContext source-reference symbols module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope (symbol-table-bind (identifier-name identifier) symbol-table) constructors))) (def parser-context-symbols (context) (match context (ParserContext _ symbols __ ___ ____ _____) symbols)) (def parser-context-with-symbols (symbols context) (match context (ParserContext source-reference _ module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope symbol-table constructors))) (def parser-context-symbol-id (context) (match context (ParserContext _ __ ___ ____ symbol-table _____) (symbol-table-id symbol-table))) (def parser-context-source-reference (context) (match context (ParserContext source-reference _ __ ___ ____ _____) source-reference)) (def parser-context-with-source-reference (source-reference context) (match context (ParserContext _ symbols module-scope global-scope symbol-table constructors) (ParserContext source-reference symbols module-scope global-scope symbol-table constructors))) (def parser-run (symbols parser) (match (state-run (ParserContext (SourceReference (string-empty) ModuleSelf) (Pair (default-symbol-count) symbols) (default-scope) (default-scope) (default-symbol-table) (array-empty)) parser) (Pair _ result) result)) (def parser-return (value) (state-return (result-return value))) (def parser-error (error) (state-return (result-error error))) (def parser-bind (parser f) (state-bind parser (fn (result) (result-prod state-return (result-bind result (fn (value) (result-return (f value)))))))) (def parser-token-is-constructor? (token) (state-bind (state-get) (fn (context) (parser-return (parser-context-token-is-constructor? token context))))) (def parser-add-definition! (definition) (state-bind (state-modify (parser-context-add-definition definition)) (fn (_) (parser-return definition)))) (def parser-get-symbols () (state-bind (state-get) (fn (state) (parser-return (parser-context-symbols state))))) (def parser-set-symbols! (symbols) (state-bind (state-modify (parser-context-with-symbols symbols)) (fn (_) (parser-return symbols)))) (def parser-get-module-scope () (state-bind (state-get) (fn (state) (parser-return (parser-context-module-scope state))))) (def parser-new-module! () (state-bind (state-modify parser-context-new-module) (fn (state) (parser-return state)))) (def parser-bind-symbol! (identifier) (state-bind (state-modify (parser-context-bind-symbol identifier)) (fn (state) (parser-return (identifier-with-id' (Some (- 1 (parser-context-symbol-id state))) identifier))))) (def parser-get-source-reference () (state-bind (state-get) (fn (state) (parser-return (parser-context-source-reference state))))) (def parser-set-source-reference! (source-reference) (state-bind (state-modify (parser-context-with-source-reference source-reference)) (fn (_) (parser-return source-reference)))) (def parser-sequence (list) (list-foldr (fn (a b) (parser-bind a (fn (a') (parser-bind b (fn (b') (parser-return (Cons a' b'))))))) (parser-return Empty) list)) (def parser-bind-symbols! (syms) (parser-sequence (list-map parser-bind-symbol! syms))) (pub typ error (MalformedDefinitionError range) (MalformedTypeDefinitionError range) (MalformedFunctionDefinitionError range) (MalformedFunctionNameError range) (MalformedExpressionError range) (MalformedMatchExpressionError range) (MalformedSymbolError range) (MalformedConstructorError range) (MalformedTypeError range) (ErrorNotDefined string source-reference range) (ErrorAlreadyDefined string) (ErrorReservedIdentifier string source-reference range) MalformedSexpTooFewClosingBrackets MalformedSexpTooManyClosingBrackets) (def symbol-to-identifier (symbol) (match symbol (Symbol token name range) (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-return (Identifier token name source-reference range None)))) (Integer _ range) (parser-error (MalformedSymbolError range)) (List _ range) (parser-error (MalformedSymbolError range)))) (def resolve-symbol (symbol scope) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (match (parser-scope-resolve identifier scope) (Identifier _ name source-reference range None) (parser-error (ErrorNotDefined name source-reference range)) _ (parser-return identifier))))) (def sexp-to-complex-type (sexp-to-type identifier parameters range) (parser-bind (parser-sequence (list-map sexp-to-type parameters)) (fn (sub-types) (parser-return (ComplexType identifier sub-types range))))) (def sexp-to-function-type (sexp-to-type parameters range) (match parameters (Cons (List arg-types _) (Cons return-type Empty)) (parser-bind (parser-sequence (list-map sexp-to-type arg-types)) (fn (arg-types) (parser-bind (sexp-to-type return-type) (fn (return-type) (parser-return (FunctionType arg-types return-type range)))))) _ (parser-error (MalformedTypeError range)))) (def sexp-to-type (type) (match type (List (Cons symbol parameters) range) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (match (= (identifier-token identifier) (identifier-fn)) True (sexp-to-function-type sexp-to-type parameters range) False (sexp-to-complex-type sexp-to-type identifier parameters range)))) (Integer _ range) (parser-error (MalformedTypeError range)) (List _ range) (parser-error (MalformedTypeError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (identifier) (parser-return (SimpleType identifier)))))) (def sexp-to-constructor-definition (constructor) (match constructor (List (Cons name types) range) (parser-bind (symbol-to-identifier name) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-bind (parser-sequence (list-map sexp-to-type types)) (fn (types) (parser-return (ComplexConstructor name types range)))))))) (Integer _ range) (parser-error (MalformedConstructorError range)) (List _ range) (parser-error (MalformedConstructorError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-return (SimpleConstructor name)))))))) (def sexp-to-type-parameter (sexp) (match sexp (List (Cons _ (Cons name Empty)) ___) (parser-bind (symbol-to-identifier name) (fn (identifier) (parser-return (ExistentialParameter identifier)))) (Integer _ range) (parser-error (MalformedDefinitionError range)) (List _ range) (parser-error (MalformedDefinitionError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (identifier) (parser-return (UniversalParameter identifier)))))) (def sexp-to-lambda (sexp-to-expression scope rest range) (match rest (Cons (List arguments _) (Cons expression Empty)) (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments) (parser-bind (parser-bind-symbols! arguments) (fn (arguments) (match (parser-scope-new scope) scope (match (parser-scope-set-all arguments scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (Lambda arguments expression range)))))))))) _ (parser-error (MalformedFunctionDefinitionError range)))) (def sexp-to-function-application (sexp-to-expression range expressions) (parser-bind (parser-sequence (list-map sexp-to-expression expressions)) (fn (expressions) (parser-return (FunctionApplication expressions range))))) (def to-constructor-or-capture (symbol) (parser-bind (symbol-to-identifier symbol) (fn (identifier) (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?) (match constructor? True (parser-return (ConstructorPattern identifier Empty (identifier-range identifier))) False (parser-return (Capture identifier)))))))) (def sexp-to-pattern (sexp) (match sexp (List (Cons name rest) range) (parser-bind (parser-sequence (list-map sexp-to-pattern rest)) (fn (patterns) (parser-bind (symbol-to-identifier name) (fn (identifier) (parser-return (ConstructorPattern identifier patterns range)))))) (List Empty range) (parser-error (MalformedExpressionError range)) (Integer integer range) (parser-return (IntegerPattern integer range)) symbol (to-constructor-or-capture symbol))) (def sexp-to-match-pair (sexp-to-expression scope range pair) (match pair (Cons pattern (Cons expression Empty)) (parser-bind (sexp-to-pattern pattern) (fn (pattern) (match (captured-identifiers-from-pattern pattern) captures (parser-bind (parser-bind-symbols! captures) (fn (captures) (match (parser-scope-new scope) scope (match (parser-scope-set-all captures scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (Pair pattern expression))))))))))) _ (parser-error (MalformedMatchExpressionError range)))) (def sexp-to-match-pairs (sexp-to-expression scope range xs) (match (list-partition 2 xs) Empty (parser-error (MalformedMatchExpressionError range)) pairs (parser-sequence (list-map (sexp-to-match-pair sexp-to-expression scope range) pairs)))) (def sexp-to-match (sexp-to-expression scope range rest) (match rest (Cons expression rest) (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-bind (sexp-to-match-pairs sexp-to-expression scope range rest) (fn (pairs) (parser-return (Match expression pairs range)))))) _ (parser-error (MalformedExpressionError range)))) (def sexp-to-constructor (sexp-to-expression range token name rest) (parser-bind (parser-get-source-reference) (fn (source-reference) (parser-bind (parser-sequence (list-map sexp-to-expression rest)) (fn (expressions) (parser-return (Constructor (Identifier token name source-reference range None) expressions range))))))) (def sexp-to-list-expression (sexp-to-expression scope expressions range) (match expressions (Cons (Symbol token identifier-name __) rest) (match (= token (identifier-fn)) True (sexp-to-lambda sexp-to-expression scope rest range) False (match (= token (identifier-match)) True (sexp-to-match sexp-to-expression scope range rest) False (parser-bind (parser-token-is-constructor? token) (fn (constructor?) (match constructor? True (sexp-to-constructor (sexp-to-expression scope) range token identifier-name rest) False (sexp-to-function-application (sexp-to-expression scope) range expressions)))))) _ (sexp-to-function-application (sexp-to-expression scope) range expressions))) (def sexp-to-expression (scope sexp) (match sexp (Integer integer range) (parser-return (IntegerConstant integer range)) (List expressions range) (match expressions Empty (parser-error (MalformedExpressionError range)) _ (sexp-to-list-expression sexp-to-expression scope expressions range)) symbol (parser-bind (resolve-symbol symbol scope) (fn (identifier) (parser-bind (parser-token-is-constructor? (identifier-token identifier)) (fn (constructor?) (parser-return (match constructor? True (Constructor identifier Empty (identifier-range identifier)) False (Variable identifier))))))))) (def sexp-to-type-definition (type-name public? constructors range) (match type-name (List (Cons name parameters) _) (parser-bind (symbol-to-identifier name) (fn (name) (parser-bind (parser-sequence (list-map sexp-to-type-parameter parameters)) (fn (parameters) (parser-return (TypeDefinition name public? parameters constructors range)))))) (Integer _ range) (parser-error (MalformedTypeError range)) (List _ range) (parser-error (MalformedTypeError range)) symbol (parser-bind (symbol-to-identifier symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-return (TypeDefinition name public? Empty constructors range)))))))) (def sexp-to-function-definition (scope name-symbol public? rest range) (match rest (Cons (List arguments _) (Cons expression Empty)) (parser-bind (symbol-to-identifier name-symbol) (fn (name) (parser-bind (parser-bind-symbol! name) (fn (name) (parser-bind (parser-sequence (list-map symbol-to-identifier arguments)) (fn (arguments) (parser-bind (parser-bind-symbols! arguments) (fn (arguments) (match (parser-scope-new scope) scope (match (parser-scope-set-all (Cons name arguments) scope) scope (parser-bind (sexp-to-expression scope expression) (fn (expression) (parser-return (FunctionDefinition name public? arguments expression range)))))))))))))) _ (parser-error (MalformedFunctionDefinitionError range)))) (def sexp-to-definition' (scope name public? rest range kind) (match (= kind (identifier-typ)) True (parser-bind (parser-sequence (list-map sexp-to-constructor-definition rest)) (fn (constructors) (sexp-to-type-definition name public? constructors range))) False (match (= kind (identifier-def)) True (sexp-to-function-definition scope name public? rest range) False (parser-error (MalformedDefinitionError range))))) (def specific-malformed-definition-error (kind range) (match (= kind (identifier-typ)) True (parser-error (MalformedTypeDefinitionError range)) False (match (= kind (identifier-def)) True (parser-error (MalformedFunctionDefinitionError range)) False (parser-error (MalformedDefinitionError range))))) (def sexp-to-definition (scope expression) (match expression (List (Cons (Symbol kind _ __) Empty) range) (specific-malformed-definition-error kind range) (List (Cons (Symbol kind _ __) (Cons ___ Empty)) range) (specific-malformed-definition-error kind range) (List (Cons (Symbol -6 _ __) (Cons (Symbol kind ___ ____) (Cons name rest))) range) (sexp-to-definition' scope name True rest range kind) (List (Cons (Symbol kind _ __) (Cons name rest)) range) (sexp-to-definition' scope name False rest range kind) (List (Cons (List _ range) Empty) __) (parser-error (MalformedDefinitionError range)) (List _ range) (parser-error (MalformedDefinitionError range)) (Integer _ range) (parser-error (MalformedDefinitionError range)) (Symbol _ __ range) (parser-error (MalformedDefinitionError range)))) (def parse-definition! (expression) (parser-bind (parser-get-module-scope) (fn (scope) (parser-bind (sexp-to-definition scope expression) (fn (definition) (parser-add-definition! definition)))))) (def sexp-error-to-ast-error (error) (match error ParseErrorTooFewClosingBrackets MalformedSexpTooFewClosingBrackets ParseErrorTooManyClosingBrackets MalformedSexpTooManyClosingBrackets)) (def parse-definitions! (module file-path iterator) (parser-bind (parser-set-source-reference! (SourceReference file-path module)) (fn (_) (parser-bind (parser-get-symbols) (fn (symbols) (match (parse-sexps symbols iterator) (Result (Pair symbols expressions)) (parser-bind (parser-set-symbols! symbols) (fn (_) (parser-sequence (list-map parse-definition! expressions)))) (Error error) (parser-error (sexp-error-to-ast-error error)))))))) (def transform-strings (path content) (match (string-gen content) (Result string) (indexed-iterator-from-iterable (string-iterable) string) (Error error) (indexed-iterator-from-iterable (string-iterable) (string-empty)))) (def parse-reuse-file (file) (match file (SourceFile module path content) (parse-definitions! module path content))) (def parse-strings-file (file) (match file (SourceFile module path content) (parse-definitions! module path (transform-strings path content)))) (def parse-target-file (file) (match file (SourceFile module path content) (parser-return (list (TargetDefinition (SourceReference path module) content))))) (def parse-source-file (file) (match (source-file-type file) SourceFileTypeStrings (parse-strings-file file) SourceFileTypeReuse (parse-reuse-file file) SourceFileTypeTargetLanguage (parse-target-file file))) (def parse-module (files) (parser-bind (parser-new-module!) (fn (_) (parser-bind (parser-sequence (list-map parse-source-file files)) (fn (definitions) (parser-return (list-flatten definitions))))))) (pub def parse-source-files (internal-symbols files) ((pipe (list-partition-by (fn (a b) (module-equal? (source-file-module a) (source-file-module b)))) (list-map parse-module) parser-sequence (parser-run internal-symbols) (result-map list-flatten)) files)) (def identifier-to-symbol (identifier) (match identifier (Identifier token name _ range __) (Symbol token name range))) (def type-to-sexp (types-to-sexp type) (match type (SimpleType identifier) (identifier-to-symbol identifier) (FunctionType arg-types return-type range) (List (list (Symbol (identifier-fn) (data-fn) range) (List (types-to-sexp arg-types) range) (type-to-sexp types-to-sexp return-type)) range) (ComplexType identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range))) (def types-to-sexp (types) (list-map (type-to-sexp types-to-sexp) types)) (def constructor-to-sexp (constructor) (match constructor (SimpleConstructor identifier) (identifier-to-symbol identifier) (ComplexConstructor identifier types range) (List (Cons (identifier-to-symbol identifier) (types-to-sexp types)) range))) (def constructors-to-sexp (constructors) (list-map constructor-to-sexp constructors)) (def type-parameter-to-sexp (parameter) (match parameter (ExistentialParameter identifier) (List (list (Symbol (identifier-exists) (data-exists) (identifier-range identifier)) (identifier-to-symbol identifier)) (identifier-range identifier)) (UniversalParameter identifier) (identifier-to-symbol identifier))) (def type-name-to-sexp (token range name parameters) (match parameters Empty (Symbol token name range) _ (List (Cons (Symbol token name range) (list-map type-parameter-to-sexp parameters)) range))) (def function-arguments-to-sexp (arguments range) (List (list-map identifier-to-symbol arguments) range)) (pub def pattern-to-sexp (pattern) (match pattern (ConstructorPattern identifier Empty _) (identifier-to-symbol identifier) (ConstructorPattern identifier patterns range) (List (Cons (identifier-to-symbol identifier) (list-map pattern-to-sexp patterns)) range) (IntegerPattern value range) (Integer value range) (Capture identifier) (identifier-to-symbol identifier))) (def match-pair-to-sexp (expression-to-sexp pair) (match pair (Pair pattern expression) (list (pattern-to-sexp pattern) (expression-to-sexp expression)))) (pub def expression-to-sexp (expression) (match expression (IntegerConstant integer range) (Integer integer range) (Variable (Identifier token string _ range __)) (Symbol token string range) (Lambda arguments expression range) (List (list (Symbol (identifier-fn) (data-fn) range) (function-arguments-to-sexp arguments range) (expression-to-sexp expression)) range) (Match expression pairs range) (List (Cons (Symbol (identifier-match) (data-match) range) (Cons (expression-to-sexp expression) (list-flatmap (match-pair-to-sexp expression-to-sexp) pairs))) range) (Constructor identifier expressions range) (match expressions Empty (identifier-to-symbol identifier) _ (List (Cons (identifier-to-symbol identifier) (list-map expression-to-sexp expressions)) range)) (FunctionApplication expressions range) (List (list-map expression-to-sexp expressions) range))) (def type-definition-to-sexp (token name parameters constructors range) (list-concat (list (Symbol (identifier-typ) (data-typ) range) (type-name-to-sexp token range name parameters)) (constructors-to-sexp constructors))) (def function-definition-to-sexp (name arguments expression range) (list (Symbol (identifier-def) (data-def) range) (identifier-to-symbol name) (function-arguments-to-sexp arguments range) (expression-to-sexp expression))) (def definition-to-sexp' (public? range sexp) (List (match public? True (Cons (Symbol (identifier-pub) (data-pub) range) sexp) False sexp) range)) (pub def definition-to-sexp (definition) (match definition (TypeDefinition (Identifier token name _ __ ___) public? parameters constructors range) (definition-to-sexp' public? range (type-definition-to-sexp token name parameters constructors range)) (FunctionDefinition name public? arguments expression range) (definition-to-sexp' public? range (function-definition-to-sexp name arguments expression range)) (TargetDefinition _ data) (Symbol 0 (string-from-indexed-iterator data) (Range 0 0)))) (pub def definitions-to-sexps (definitions) (list-map definition-to-sexp definitions))
(def data-double-dash () (string-from-list (list 45 45))) (pub typ cli-arguments (CliArguments (list (pair string string)) (list string)) (CliErrorMissingValue string)) (def is-key? (argument) (string-equal? (data-double-dash) (string-take 2 argument))) (def parse-arguments' (arguments kv-args inputs) (match arguments (Cons first (Cons second rest)) (match (is-key? first) True (parse-arguments' (list-rest (list-rest arguments)) (Cons (Pair first second) kv-args) inputs) False (parse-arguments' (list-rest arguments) kv-args (Cons first inputs))) (Cons first Empty) (match (is-key? first) True (CliErrorMissingValue first) False (CliArguments (list-reverse kv-args) (list-reverse (Cons first inputs)))) Empty (CliArguments (list-reverse kv-args) (list-reverse inputs)))) (pub def parse-arguments (arguments) (parse-arguments' arguments Empty Empty)) (def data-sparkle-x () (string-from-list (list 226 156 168 120))) (def data-Empty () (string-from-list (list 69 109 112 116 121))) (def data-Cons () (string-from-list (list 67 111 110 115))) (def identifier-sparkle-x () -1000) (def identifier-cons () -1001) (def identifier-empty () -1002) (def with-local-transform-keywords (dictionary) (dictionary-set (data-sparkle-x) (Pair (identifier-sparkle-x) (data-sparkle-x)) (dictionary-set (data-Cons) (Pair (identifier-cons) (data-Cons)) (dictionary-set (data-Empty) (Pair (identifier-empty) (data-Empty)) dictionary)))) (def expression-is-token? (token expression) (match expression (Variable (Identifier expression-token _ __ ___ ____)) (= expression-token token) _ False)) (def first-expression-is-token? (token expressions) ((pipe (maybe-map (expression-is-token? token)) (maybe-else (fn () False))) (list-first expressions))) (def transform-special-form (token transformer definition) (over-definition-expressions (over-subexpressions (over-function-application (fn (expressions range) (result-return (match (first-expression-is-token? token expressions) True (transformer (definition-source-reference definition) (list-rest expressions) range) False (FunctionApplication expressions range)))))) definition)) (def transform-special-forms (token transformer definitions) (result-concat (list-map (transform-special-form token transformer) definitions))) (def transform-pipe (source-reference expressions range) (Lambda (list (Identifier (identifier-sparkle-x) (data-sparkle-x) source-reference range None)) (list-foldl (fn (expression composed) (FunctionApplication (list expression composed) range)) (Variable (Identifier (identifier-sparkle-x) (data-sparkle-x) source-reference range None)) expressions) range)) (def transform-list (source-reference expressions range) (list-foldr (fn (expression composed) (Constructor (Identifier (identifier-cons) (data-Cons) source-reference range None) (list expression composed) range)) (Constructor (Identifier (identifier-empty) (data-Empty) source-reference range None) Empty range) expressions)) (def transform-match-expression (expression pairs range) (result-return (Match expression pairs range))) (def transform-match-expressions (definition) (over-definition-expressions (over-subexpressions (over-match-expression (fn (expression pairs range) (transform-match-expression expression pairs range)))) definition)) (def local-transforms (definitions) (result-bind definitions (fn (definitions) (result-bind (transform-special-forms (identifier-pipe) transform-pipe definitions) (fn (definitions) (result-bind (transform-special-forms (identifier-list) transform-list definitions) (fn (definitions) (result-bind (result-concat (list-map transform-match-expressions definitions)) (fn (definitions) (result-return definitions)))))))))) (def data-reserved-identifier-error () (string-from-list (list 83 121 109 98 111 108 115 32 112 114 101 102 105 120 101 100 32 119 105 116 104 32 226 156 168 32 97 114 101 32 114 101 115 101 114 118 101 100 58))) (def data-not-defined-error () (string-from-list (list 84 104 101 32 102 111 108 108 111 119 105 110 103 32 105 100 101 110 116 105 102 105 101 114 32 119 97 115 32 110 111 116 32 100 101 102 105 110 101 100 58 32))) (def data-already-defined-error () (string-from-list (list 84 104 101 32 102 111 108 108 111 119 105 110 103 32 105 100 101 110 116 105 102 105 101 114 32 119 97 115 32 97 108 114 101 97 100 121 32 100 101 102 105 110 101 100 58 32))) (def data-no-location-information () (string-from-list (list 40 78 111 32 108 111 99 97 116 105 111 110 32 105 110 102 111 114 109 97 116 105 111 110 32 97 118 97 105 108 97 98 108 101 41))) (def data-Line: () (string-from-list (list 76 105 110 101 58 32))) (def data-Column: () (string-from-list (list 67 111 108 117 109 110 58 32))) (def data-File: () (string-from-list (list 70 105 108 101 58 32))) (def data-Range: () (string-from-list (list 82 97 110 103 101 58 32))) (def data- () (string-from-list Empty)) (def i18n-error-range-to-string (range) (match range (Range start end) (string-concat (string-from-list (list 32 97 116 32)) (string-concat (string-from-int32 start) (string-concat (string-from-list (list 45)) (string-from-int32 end)))))) (def i18n-malformed-definition-error (range) (string-concat (string-from-list (list 79 110 108 121 32 116 121 112 101 45 32 111 114 32 102 117 110 99 116 105 111 110 32 100 101 102 105 110 105 116 105 111 110 115 32 99 97 110 32 98 101 32 105 110 32 116 104 101 32 116 111 112 32 108 101 118 101 108 32 111 102 32 97 32 102 105 108 101 46 32 89 111 117 32 110 101 101 100 32 116 111 32 119 114 97 112 32 101 120 112 114 101 115 115 105 111 110 115 32 105 110 32 97 32 102 117 110 99 116 105 111 110 46)) (i18n-error-range-to-string range))) (def i18n-malformed-function-definition-error (range) (string-concat (string-from-list (list 73 32 116 104 105 110 107 32 121 111 117 32 119 97 110 116 101 100 32 116 111 32 119 114 105 116 101 32 97 32 102 117 110 99 116 105 111 110 32 100 101 102 105 110 105 116 105 111 110 44 32 98 117 116 32 105 116 32 100 111 101 115 110 39 116 32 104 97 118 101 32 116 104 101 32 114 105 103 104 116 32 115 104 97 112 101 46 32 73 116 32 115 104 111 117 108 100 32 108 111 111 107 32 108 105 107 101 32 116 104 105 115 58 10 10 40 100 101 102 32 110 97 109 101 45 111 102 45 102 117 110 99 116 105 111 110 32 40 97 114 103 117 109 101 110 116 115 41 32 101 120 112 114 101 115 115 105 111 110 41 10 10)) (i18n-error-range-to-string range))) (def i18n-malformed-type-definition-error (range) (string-concat (string-from-list (list 73 32 116 104 105 110 107 32 121 111 117 32 119 97 110 116 101 100 32 116 111 32 119 114 105 116 101 32 97 32 116 121 112 101 32 100 101 102 105 110 105 116 105 111 110 44 32 98 117 116 32 105 116 32 100 111 101 115 110 39 116 32 104 97 118 101 32 116 104 101 32 114 105 103 104 116 32 115 104 97 112 101 46 32 73 116 32 115 104 111 117 108 100 32 108 111 111 107 32 108 105 107 101 32 116 104 105 115 58 10 10 40 116 121 112 101 32 110 97 109 101 45 111 102 45 116 121 112 101 32 78 97 109 101 79 102 67 111 110 115 116 114 117 99 116 111 114 32 46 46 46 41 10 10)) (i18n-error-range-to-string range))) (def i18n-malformed-function-name-error (range) (string-concat (string-from-list (list 77 97 108 102 111 114 109 101 100 70 117 110 99 116 105 111 110 78 97 109 101 69 114 114 111 114)) (i18n-error-range-to-string range))) (def i18n-malformed-expression-error (range) (string-concat (string-from-list (list 77 97 108 102 111 114 109 101 100 69 120 112 114 101 115 115 105 111 110 69 114 114 111 114)) (i18n-error-range-to-string range))) (def i18n-malformed-match-expression-error (range) (string-concat (string-from-list (list 84 104 105 115 32 109 97 116 99 104 32 101 120 112 114 101 115 115 105 111 110 32 105 115 32 110 111 116 32 99 111 114 114 101 99 116 44 32 109 97 107 101 32 115 117 114 101 32 121 111 117 32 104 97 118 101 32 112 117 116 32 112 97 114 101 110 116 104 101 115 101 115 32 99 111 114 114 101 99 116 108 121 32 115 111 32 116 104 97 116 32 97 108 108 32 121 111 117 114 32 109 97 116 99 104 32 114 117 108 101 115 32 99 111 109 101 32 105 110 32 112 97 105 114 115 32 108 105 107 101 32 116 104 105 115 58 10 10 40 109 97 116 99 104 32 101 10 32 32 32 32 32 32 32 112 97 116 116 101 114 110 49 32 32 101 49 10 32 32 32 32 32 32 32 112 97 116 116 101 114 110 50 32 32 101 50 10 32 32 32 32 32 32 32 46 46 46 41 10 10)) (i18n-error-range-to-string range))) (def i18n-malformed-symbol-error (range) (string-concat (string-from-list (list 77 97 108 102 111 114 109 101 100 83 121 109 98 111 108 69 114 114 111 114)) (i18n-error-range-to-string range))) (def i18n-malformed-constructor-error (range) (string-concat (string-from-list (list 77 97 108 102 111 114 109 101 100 67 111 110 115 116 114 117 99 116 111 114 69 114 114 111 114)) (i18n-error-range-to-string range))) (def i18n-malformed-type-error (range) (string-concat (string-from-list (list 77 97 108 102 111 114 109 101 100 84 121 112 101 69 114 114 111 114)) (i18n-error-range-to-string range))) (def i18n-malformed-sexp-too-few-closing-brackets () (string-from-list (list 84 104 101 114 101 32 97 114 101 32 116 111 111 32 102 101 119 32 99 108 111 115 105 110 103 32 112 97 114 101 110 116 104 101 115 101 115))) (def i18n-malformed-sexp-too-many-closing-brackets () (string-from-list (list 84 104 101 114 101 32 97 114 101 32 116 111 111 32 109 97 110 121 32 99 108 111 115 105 110 103 32 112 97 114 101 110 116 104 101 115 101 115))) (def string-format (list) (string-join (string-of-char 10) (list-map (string-join (string-empty)) list))) (def find-file-matching (files source-reference) (list-find-first (. (string-equal? (source-reference-file-path source-reference)) source-file-path) files)) (def range-information (range) (match range (Range start end) (string-join (string-of-char 45) (list (string-from-int32 start) (string-from-int32 end))))) (def count-lines (index lines source) (match (string-index-of index (string-of-char 10) source) (Some index) (count-lines (+ index 1) (+ lines 1) source) None (Pair lines (+ (- (string-size source) index) 1)))) (def line-information (file range) (match range (Range start _) (match (string-from-indexed-iterator (source-file-content file)) content (count-lines 0 1 (string-substring 0 start content))))) (def next-newline (content index) (match (string-index-of index (string-of-char 10) content) (Some index) (+ index 1) None index)) (def source-paragraph (file range) (match range (Range start end) (match (string-from-indexed-iterator (source-file-content file)) content (match (next-newline content (- start 100)) paragraph-start (match (- (next-newline content (+ end 50)) paragraph-start) paragraph-size (match (string-substring paragraph-start paragraph-size content) region region)))))) (def location-information (files source-reference range) (match (find-file-matching files source-reference) (Some file) (match (line-information file range) (Pair lines column) (string-format (list Empty (list (source-paragraph file range)) Empty (list (data-Line:) (string-from-int32 lines)) (list (data-Column:) (string-from-int32 column)) (list (data-Range:) (range-information range)) (list (data-File:) (source-file-path file))))) None (data-no-location-information))) (def error-to-string (files error) (match error (MalformedDefinitionError range) (i18n-malformed-definition-error range) (MalformedFunctionDefinitionError range) (i18n-malformed-function-definition-error range) (MalformedTypeDefinitionError range) (i18n-malformed-type-definition-error range) (MalformedFunctionNameError range) (i18n-malformed-function-name-error range) (MalformedExpressionError range) (i18n-malformed-expression-error range) (MalformedMatchExpressionError range) (i18n-malformed-match-expression-error range) (MalformedSymbolError range) (i18n-malformed-symbol-error range) (MalformedConstructorError range) (i18n-malformed-constructor-error range) (MalformedTypeError range) (i18n-malformed-type-error range) (ErrorNotDefined name source-reference range) (string-format (list (list (string-concat (data-not-defined-error) name)) (list (location-information files source-reference range)))) (ErrorAlreadyDefined name) (string-concat (data-already-defined-error) name) (ErrorReservedIdentifier name source-reference range) (string-format (list (list (string-concat (data-reserved-identifier-error) name)) (list (location-information files source-reference range)))) MalformedSexpTooFewClosingBrackets (i18n-malformed-sexp-too-few-closing-brackets) MalformedSexpTooManyClosingBrackets (i18n-malformed-sexp-too-many-closing-brackets))) (def data-sparkle () (string-from-list (list 226 156 168))) (def data- () (string-from-list Empty)) (def identifier-is-reserved? (identifier) (string-equal? (string-substring 0 3 (identifier-name identifier)) (data-sparkle))) (def validate-identifier (identifier) (match (identifier-is-reserved? identifier) True (result-error (ErrorReservedIdentifier (identifier-name identifier) (identifier-source-reference identifier) (identifier-range identifier))) False (result-lift identifier))) (def validate-reserved-identifiers (definitions) (result-flatmap (. result-concat (list-map (over-definition-expressions (over-identifiers validate-identifier)))) definitions)) (def data-space () (string-from-list (list 32))) (def data-parse-error () (string-from-list (list 112 97 114 115 101 32 101 114 114 111 114 32))) (def data-fun () (string-from-list (list 102 117 110))) (def data-type () (string-from-list (list 116 121 112 101))) (def data-if () (string-from-list (list 105 102))) (def data-then () (string-from-list (list 116 104 101 110))) (def data-else () (string-from-list (list 101 108 115 101))) (def data-with () (string-from-list (list 119 105 116 104))) (def data-of () (string-from-list (list 111 102))) (def data-class () (string-from-list (list 99 108 97 115 115))) (def data-end () (string-from-list (list 101 110 100))) (def data-in () (string-from-list (list 105 110))) (def data-let () (string-from-list (list 108 101 116))) (def data-open () (string-from-list (list 111 112 101 110))) (def data-and () (string-from-list (list 97 110 100))) (def data-or () (string-from-list (list 111 114))) (def data-as () (string-from-list (list 97 115))) (def data-less-than () (string-from-list (list 60))) (def data-assert () (string-from-list (list 97 115 115 101 114 116))) (def data-asr () (string-from-list (list 97 115 114))) (def data-begin () (string-from-list (list 98 101 103 105 110))) (def data-constraint () (string-from-list (list 99 111 110 115 116 114 97 105 110 116))) (def data-do () (string-from-list (list 100 111))) (def data-done () (string-from-list (list 100 111 110 101))) (def data-downto () (string-from-list (list 100 111 119 110 116 111))) (def data-exception () (string-from-list (list 101 120 99 101 112 116 105 111 110))) (def data-external () (string-from-list (list 101 120 116 101 114 110 97 108))) (def data-false () (string-from-list (list 102 97 108 115 101))) (def data-true () (string-from-list (list 116 114 117 101))) (def data-for () (string-from-list (list 102 111 114))) (def data-function () (string-from-list (list 102 117 110 99 116 105 111 110))) (def data-functor () (string-from-list (list 102 117 110 99 116 111 114))) (def data-include () (string-from-list (list 105 110 99 108 117 100 101))) (def data-inherit () (string-from-list (list 105 110 104 101 114 105 116))) (def data-initializer () (string-from-list (list 105 110 105 116 105 97 108 105 122 101 114))) (def data-land () (string-from-list (list 108 97 110 100))) (def data-lazy () (string-from-list (list 108 97 122 121))) (def data-lor () (string-from-list (list 108 111 114))) (def data-lsl () (string-from-list (list 108 115 108))) (def data-lsr () (string-from-list (list 108 115 114))) (def data-lxor () (string-from-list (list 108 120 111 114))) (def data-method () (string-from-list (list 109 101 116 104 111 100))) (def data-mod () (string-from-list (list 109 111 100))) (def data-module () (string-from-list (list 109 111 100 117 108 101))) (def data-mutable () (string-from-list (list 109 117 116 97 98 108 101))) (def data-new () (string-from-list (list 110 101 119))) (def data-nonrec () (string-from-list (list 110 111 110 114 101 99))) (def data-object () (string-from-list (list 111 98 106 101 99 116))) (def data-private () (string-from-list (list 112 114 105 118 97 116 101))) (def data-rec () (string-from-list (list 114 101 99))) (def data-sig () (string-from-list (list 115 105 103))) (def data-struct () (string-from-list (list 115 116 114 117 99 116))) (def data-try () (string-from-list (list 116 114 121))) (def data-val () (string-from-list (list 118 97 108))) (def data-virtual () (string-from-list (list 118 105 114 116 117 97 108))) (def data-when () (string-from-list (list 119 104 101 110))) (def data-while () (string-from-list (list 119 104 105 108 101))) (def data-parser () (string-from-list (list 112 97 114 115 101 114))) (def data-value () (string-from-list (list 118 97 108 117 101))) (def data-to () (string-from-list (list 116 111))) (def data-no-input-files () (string-from-list (list 78 111 32 105 110 112 117 116 32 102 105 108 101 115))) (def data-output-key () (string-from-list (list 45 45 111 117 116 112 117 116))) (def data-no-output-path () (string-from-list (list 78 111 32 111 117 116 112 117 116 32 102 105 108 101 32 115 112 101 99 105 102 105 101 100 44 32 112 108 101 97 115 101 32 117 115 101 32 116 104 101 32 45 45 111 117 116 112 117 116 32 91 102 105 108 101 93 32 102 108 97 103 46))) (def data-stdlib () (string-from-list (list 45 45 115 116 100 108 105 98))) (def data-minimal () (string-from-list (list 45 45 109 105 110 105 109 97 108))) (def data-module-flag () (string-from-list (list 45 45 109 111 100 117 108 101))) (def data-standard-library-filename () (string-from-list (list 115 116 97 110 100 97 114 100 45 108 105 98 114 97 114 121 46 114 101 117 115 101))) (def data-def () (string-from-list (list 100 101 102))) (def data-typ () (string-from-list (list 116 121 112))) (def data-fn () (string-from-list (list 102 110))) (def data-match () (string-from-list (list 109 97 116 99 104))) (def data-exists () (string-from-list (list 101 120 105 115 116 115))) (def data-pub () (string-from-list (list 112 117 98))) (def data-+ () (string-from-list (list 43))) (def data-- () (string-from-list (list 45))) (def data-* () (string-from-list (list 42))) (def data-/ () (string-from-list (list 47))) (def data-% () (string-from-list (list 37))) (def data-& () (string-from-list (list 38))) (def data-int32-less-than () (string-from-list (list 105 110 116 51 50 45 108 101 115 115 45 116 104 97 110))) (def data-pipe () (string-from-list (list 112 105 112 101))) (def data-list () (string-from-list (list 108 105 115 116))) (def join (list) (string-join (string-empty) list)) (def is-alphanumeric (char) (match (and (>= char 65) (<= char 90)) True True False (match (and (>= char 48) (<= char 57)) True True False (and (>= char 97) (<= char 122))))) (def escape-char (char) (match (is-alphanumeric char) True (string-of-char char) False (string-prepend 95 (string-from-int32 char)))) (def add-identifiers (identifiers offset dictionary) (match identifiers (Cons identifier rest) (add-identifiers rest (- offset 1) (dictionary-set (identifier) (Pair offset (identifier)) dictionary)) Empty dictionary)) (def data-compile-error () (string-from-list (list 42 99 111 109 112 105 108 101 32 101 114 114 111 114 42))) (def data-backslash () (string-from-list (list 92))) (def data-arrow () (string-from-list (list 32 45 62 32))) (def data-equals () (string-from-list (list 32 61 32))) (def data-vertical-bar () (string-from-list (list 32 124 32))) (def data-pipe-operator () (string-from-list (list 32 124 62 32))) (def data-colon () (string-from-list (list 32 58 32))) (def data-semicolon () (string-from-list (list 32 59 32))) (def data-star () (string-from-list (list 32 42 32))) (def data-int32 () (string-from-list (list 105 110 116 51 50))) (def data-Int32 () (string-from-list (list 73 110 116 51 50))) (def data-int32-plus () (string-from-list (list 95 105 110 116 51 50 95 97 100 100))) (def data-int32-multiply () (string-from-list (list 95 105 110 116 51 50 95 109 117 108))) (def data-int32-minus () (string-from-list (list 95 105 110 116 51 50 95 115 117 98))) (def data-int32-divide () (string-from-list (list 80 114 101 108 117 100 101 46 113 117 111 116))) (def data-int32-modulus () (string-from-list (list 80 114 101 108 117 100 101 46 114 101 109))) (def data-int32-and () (string-from-list (list 95 105 110 116 51 50 95 97 110 100))) (def data-cempty () (string-from-list (list 67 69 109 112 116 121))) (def data-ccons () (string-from-list (list 67 67 111 110 115))) (def data-comma () (string-from-list (list 44))) (def data-constant () (string-from-list (list 95 99 111 110 115 116 97 110 116 95))) (def data-data () (string-from-list (list 100 97 116 97))) (def data-case () (string-from-list (list 99 97 115 101))) (def data-deriving () (string-from-list (list 100 101 114 105 118 105 110 103))) (def data-family () (string-from-list (list 102 97 109 105 108 121))) (def data-default () (string-from-list (list 100 101 102 97 117 108 116))) (def data-forall () (string-from-list (list 102 111 114 97 108 108))) (def data-foreign () (string-from-list (list 102 111 114 101 105 103 110))) (def data-import () (string-from-list (list 105 109 112 111 114 116))) (def data-instance () (string-from-list (list 105 110 115 116 97 110 99 101))) (def data-infix () (string-from-list (list 105 110 102 105 120))) (def data-infixl () (string-from-list (list 105 110 102 105 120 108))) (def data-infixr () (string-from-list (list 105 110 102 105 120 114))) (def data-newtype () (string-from-list (list 110 101 119 116 121 112 101))) (def data-where () (string-from-list (list 119 104 101 114 101))) (def data-dot () (string-from-list (list 46))) (def data-language-exts () (string-from-list (list 123 45 35 32 76 65 78 71 85 65 71 69 32 69 120 105 115 116 101 110 116 105 97 108 81 117 97 110 116 105 102 105 99 97 116 105 111 110 44 32 66 97 110 103 80 97 116 116 101 114 110 115 32 35 45 125))) (def data-pervasives-filename () (string-from-list (list 80 101 114 118 97 115 105 118 101 115 46 104 115))) (def data-preamble-filename () (string-from-list (list 112 114 101 97 109 98 108 101 46 104 115))) (def identifier-int32 () -10000) (def prefix-constructor (constructor) (string-prepend 67 constructor)) (def reserved-identifiers () (list data-if data-then data-else data-with data-of data-end data-in data-type data-let data-class data-do data-module data-data data-case data-deriving data-family data-default data-forall data-foreign data-import data-instance data-infix data-infixl data-infixr data-newtype data-where)) (def token-is-reserved? (token) (and (<= token -2000) (> token -3000))) (def escape-identifier (identifier) (match (token-is-reserved? (identifier-token identifier)) True (string-prepend 95 (identifier-name identifier)) False (string-flatmap escape-char (identifier-name identifier)))) (def operator-translation-map () (dictionary-of (list (Pair (data-+) (data-int32-plus)) (Pair (data--) (data-int32-minus)) (Pair (data-*) (data-int32-multiply)) (Pair (data-/) (data-int32-divide)) (Pair (data-%) (data-int32-modulus)) (Pair (data-&) (data-int32-and))))) (def translate-identifier (identifier) (match (token-is-operator? (identifier-token identifier)) True (match (dictionary-get (identifier-name identifier) (operator-translation-map)) (Some translation) translation None (escape-identifier identifier)) False (escape-identifier identifier))) (def prefix-type-variable (identifier) (translate-identifier identifier)) (def prefix-type (identifier) (match (= (identifier-token identifier) (identifier-int32)) True (data-Int32) False (string-prepend 84 (translate-identifier identifier)))) (def translate-less-than (translate-expression expressions) (match expressions (Cons a (Cons b (Cons then-case (Cons else-case Empty)))) (join (list (data-if) (data-space) (translate-expression a) (data-less-than) (translate-expression b) (data-space) (data-then) (data-space) (translate-expression then-case) (data-space) (data-else) (data-space) (translate-expression else-case))) _ (data-compile-error))) (def translate-constructor (translator name) (pipe (list-map translator) (string-join (data-space)) (fn (parameters) (list (prefix-constructor (escape-identifier name)) (data-space) parameters)) join wrap-in-brackets)) (def translate-pattern (pattern) (match pattern (Capture identifier) (string-prepend 33 (escape-identifier identifier)) (IntegerPattern integer _) (match (< integer 0) True (wrap-in-brackets (string-from-int32 integer)) False (string-from-int32 integer)) (ConstructorPattern identifier Empty _) (prefix-constructor (escape-identifier identifier)) (ConstructorPattern identifier patterns _) ((translate-constructor translate-pattern identifier) patterns))) (def translate-rule (translate-expression rule) (match rule (Pair pattern expression) (join (list (translate-pattern pattern) (data-arrow) (translate-expression expression))))) (def translate-match-expression (translate-expression expression) (pipe (list-map (translate-rule translate-expression)) (string-join (data-semicolon)) (fn (rules) (list (data-case) (translate-expression expression) (data-of) rules)) (string-join (data-space)))) (def translate-function-application' (translate-expression expressions) (match expressions (Cons no-args-function Empty) (translate-expression no-args-function) _ (string-join (data-space) (list-map translate-expression expressions)))) (def translate-function-application (translate-expression expressions) (match expressions (Cons (Variable identifier) rest) (match (= (identifier-token identifier) (identifier-int32-less-than)) True (translate-less-than translate-expression rest) False (translate-function-application' translate-expression expressions)) _ (translate-function-application' translate-expression expressions))) (def translate-argument-list (arguments) (string-join (data-space) (list-map (pipe escape-identifier (string-prepend 33)) arguments))) (def translate-lambda (translate-expression arguments expression) (match (list-empty? arguments) True (translate-expression expression) False (join (list (data-backslash) (data-space) (translate-argument-list arguments) (data-arrow) (translate-expression expression))))) (def translate-expression (expression) (match expression (Lambda arguments expression _) (wrap-in-brackets (translate-lambda translate-expression arguments expression)) (Constructor identifier Empty _) (prefix-constructor (escape-identifier identifier)) (Constructor identifier expressions _) ((translate-constructor translate-expression identifier) expressions) (FunctionApplication expressions _) (wrap-in-brackets (translate-function-application translate-expression expressions)) (IntegerConstant integer _) (match (< integer 0) True (wrap-in-brackets (string-from-int32 integer)) False (string-from-int32 integer)) (Variable identifier) (translate-identifier identifier) (Match expression rules _) (wrap-in-brackets ((translate-match-expression translate-expression expression) rules)))) (def translate-function-definition (name arguments expression) (match (list-empty? arguments) True (join (list name (data-equals) (translate-expression expression))) False (join (list name (data-equals) (translate-lambda translate-expression arguments expression))))) (def translate-simple-type (identifier parameters) (match (list-any? (. (identifier-equal? identifier) type-parameter-identifier) parameters) False (prefix-type identifier) True (prefix-type-variable identifier))) (def translate-complex-types (translate-types name types) ((pipe (translate-types (data-space)) (string-concat (string-concat (prefix-type name) (data-space))) wrap-in-brackets) types)) (def translate-function-type (translate-types return-type argument-types) ((pipe (fn (argument-types) (list-concat argument-types (list return-type))) (translate-types (data-arrow)) wrap-in-brackets) argument-types)) (def translate-type (translate-types parameters type) (match type (SimpleType identifier) (translate-simple-type identifier parameters) (ComplexType identifier types _) (translate-complex-types translate-types identifier types) (FunctionType argument-types return-type _) (translate-function-type translate-types return-type argument-types))) (def translate-types (parameters f separator types) ((pipe (list-map (pipe (translate-type (translate-types parameters id) parameters) f)) (string-join separator)) types)) (def translate-type-parameter (parameter) (match parameter (UniversalParameter identifier) (identifier-name identifier) (ExistentialParameter identifier) (identifier-name identifier))) (def translate-complex-constructor-definition (name types parameters) (join (list (prefix-constructor (escape-identifier name)) (data-space) (translate-types parameters (string-prepend 33) (data-space) types)))) (def translate-constructor-definition (parameters constructor) (match constructor (SimpleConstructor identifier) (prefix-constructor (escape-identifier identifier)) (ComplexConstructor identifier types _) (translate-complex-constructor-definition identifier types parameters))) (def translate-constructor-definitions (parameters) (pipe (list-map (translate-constructor-definition parameters)) (string-join (data-vertical-bar)))) (def translate-universal-parameters (parameters) (list-foldl (fn (parameter s) (match parameter (UniversalParameter identifier) (join (list s (data-space) (prefix-type-variable identifier))) (ExistentialParameter _) s)) (string-empty) parameters)) (def translate-existential-parameters (parameters) (list-foldl (fn (parameter s) (match parameter (UniversalParameter _) s (ExistentialParameter identifier) (join (list s (data-forall) (data-space) (prefix-type-variable identifier) (data-dot) (data-space))))) (string-empty) parameters)) (def translate-type-definition (name parameters constructors) (join (list (data-data) (data-space) (prefix-type name) (translate-universal-parameters parameters) (data-equals) (translate-existential-parameters parameters) ((translate-constructor-definitions parameters) constructors)))) (def translate-definition (definition) (match definition (FunctionDefinition name _ arguments expression __) (translate-function-definition (escape-identifier name) arguments expression) (TypeDefinition name _ parameters constructors __) (translate-type-definition name parameters constructors) (TargetDefinition _ data) (string-from-indexed-iterator data))) (def translate-module-declaration (module-name) (join (list (data-module) (data-space) module-name (data-space) (data-where)))) (def generate-source (module-name definitions) ((pipe (list-map translate-definition) (list-cons (translate-module-declaration module-name)) (list-cons (data-language-exts)) (string-join (string-of-char 10))) definitions)) (def internal-symbols () (dictionary-set (data-int32) (Pair (identifier-int32) (data-int32)) (add-identifiers (reserved-identifiers) -2000 (default-identifiers)))) (def perform-transformations? () True) (typ compiler-parameters (CompilerParameters boolean boolean)) (def frontend (minimal? file-entries) ((pipe (parse-source-files (with-local-transform-keywords (internal-symbols))) (match (or (not (perform-transformations?)) minimal?) True id False (. local-transforms validate-reserved-identifiers))) file-entries)) (def compile (file-entries module-name parameters) (match parameters (CompilerParameters minimal? use-stdlib) (result-map (generate-source module-name) (frontend minimal? file-entries)))) (typ (event iterator state) (EventArguments (list string)) (EventReadFiles (list (source-file iterator)) state)) (typ (command state) (CommandError string) (CommandOutput string) (CommandWriteFiles (list (pair string string))) (CommandReadFiles (list (pair module-reference string)) state)) (def standard-library? (arguments) (match (dictionary-get (data-stdlib) arguments) (Some value) (string-equal? value (data-true)) None True)) (def minimal? (arguments) (match (dictionary-get (data-minimal) arguments) (Some value) (string-equal? value (data-true)) None False)) (def filename-without-extension (filename) (match (list-first (string-split 46 filename)) (Some name) name None filename)) (def filename-from-path (path) (match (list-last (string-split 47 path)) (Some filename) filename None path)) (def module-name-and-path (open? path) (Pair (ModulePath (filename-without-extension (filename-from-path path)) open?) path)) (def standard-library-files (data-path) (list (string-join (data-/) (list data-path (data-standard-library-filename))) (string-join (data-/) (list data-path (data-pervasives-filename))))) (def modules-from-arguments (data-path arguments) ((pipe (list-filter (. (string-equal? (data-module-flag)) pair-left)) (list-map (. (module-name-and-path False) pair-right)) (match (standard-library? (dictionary-of arguments)) True (list-concat (list-map (module-name-and-path True) (standard-library-files data-path))) False id)) arguments)) (def source-files-from-paths (paths) (list-map (pair-cons ModuleSelf) paths)) (def on-event (data-path event) (match event (EventArguments arguments) (match (parse-arguments arguments) (CliArguments _ Empty) (CommandError (data-no-input-files)) (CliArguments arguments input-files) (CommandReadFiles (list-concat (Cons (Pair ModuleSelf (string-concat data-path (data-preamble-filename))) (modules-from-arguments data-path arguments)) (source-files-from-paths input-files)) (dictionary-of arguments)) (CliErrorMissingValue key) (CommandError key)) (EventReadFiles file-entries arguments) (match (dictionary-get (data-output-key) arguments) (Some output-path) (match (compile file-entries (filename-without-extension (filename-from-path output-path)) (CompilerParameters (minimal? arguments) (standard-library? arguments))) (Result source) (CommandWriteFiles (list (Pair output-path source))) (Error error) (CommandError (error-to-string file-entries error))) None (CommandError (data-no-output-path)))))